[{"documents":[{"i":1,"t":"","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","b":["Foundation","Foundation","数据结构"]},{"i":31,"t":"查找","u":"/docs/Foundation/数据结构/查找","b":["Foundation","Foundation","数据结构"]},{"i":50,"t":"数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","b":["Foundation","Foundation","计算机组成原理"]},{"i":94,"t":"内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","b":["Foundation","Foundation","数据结构"]},{"i":127,"t":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","b":["Foundation","Foundation","数据结构","算法"]},{"i":141,"t":"树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":172,"t":"数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","b":["Foundation","Foundation","数据结构"]},{"i":185,"t":"图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":220,"t":"intro","u":"/docs/intro","b":[]},{"i":224,"t":"","u":"/docs/Foundation/intro","b":["Foundation","Foundation"]},{"i":227,"t":"","u":"/docs/Math/intro","b":["Math"]},{"i":230,"t":"","u":"/docs/Web/部署Docsaururs","b":["Web","Web"]},{"i":245,"t":"","u":"/docs/Web/intro","b":["Web","Web"]},{"i":248,"t":"接口文档","u":"/docs/Web/软件工程课设/接口文档","b":["Web","Web","软件工程课设"]},{"i":362,"t":"","u":"/docs/Web/Redis/Redis 持久化","b":["Web","Web","Redis"]},{"i":388,"t":"","u":"/docs/Web/Redis/Redis安装&&十大数据","b":["Web","Web","Redis"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/31",[0,0.621]],["t/50",[0,0.621]],["t/94",[0,0.621]],["t/127",[1,1.842]],["t/141",[0,0.621]],["t/172",[0,0.621]],["t/185",[0,0.621]],["t/220",[2,1.842]],["t/224",[]],["t/227",[]],["t/230",[]],["t/245",[]],["t/248",[0,0.621]],["t/362",[]],["t/388",[]]],"invertedIndex":[["",{"_index":0,"t":{"31":{"position":[[0,2]]},"50":{"position":[[0,7]]},"94":{"position":[[0,6]]},"141":{"position":[[0,9]]},"172":{"position":[[0,8]]},"185":{"position":[[0,6]]},"248":{"position":[[0,4]]}}}],["intro",{"_index":2,"t":{"220":{"position":[[0,5]]}}}],["kmp",{"_index":1,"t":{"127":{"position":[[0,7]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":2,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":4,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":6,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":8,"t":"红黑树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":9,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":11,"t":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":13,"t":"B树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":14,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":16,"t":"B树高（磁盘存取次数）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b树高磁盘存取次数","p":1},{"i":17,"t":"最矮","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最矮","p":1},{"i":18,"t":"最高","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最高","p":1},{"i":19,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":21,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":23,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":25,"t":"B+树（常用于关系型数据库的存储）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":26,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":28,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":30,"t":"B和B+的类比","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b和b的类比","p":1},{"i":33,"t":"折半查找","u":"/docs/Foundation/数据结构/查找","h":"#折半查找","p":31},{"i":34,"t":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":31},{"i":36,"t":"构造二叉树","u":"/docs/Foundation/数据结构/查找","h":"#构造二叉树","p":31},{"i":37,"t":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":31},{"i":39,"t":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":31},{"i":41,"t":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":31},{"i":43,"t":"散列查找","u":"/docs/Foundation/数据结构/查找","h":"#散列查找","p":31},{"i":44,"t":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":31},{"i":46,"t":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":31},{"i":48,"t":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":31},{"i":52,"t":"码制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#码制","p":50},{"i":53,"t":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":50},{"i":55,"t":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":50},{"i":57,"t":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":50},{"i":59,"t":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":50},{"i":61,"t":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":50},{"i":63,"t":"移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移位","p":50},{"i":64,"t":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":50},{"i":66,"t":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":50},{"i":68,"t":"循环移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#循环移位","p":50},{"i":69,"t":"定点数加减","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数加减","p":50},{"i":70,"t":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":50},{"i":72,"t":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":50},{"i":74,"t":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":50},{"i":76,"t":"定点数乘除","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数乘除","p":50},{"i":77,"t":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":50},{"i":79,"t":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":50},{"i":81,"t":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":50},{"i":83,"t":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":50},{"i":85,"t":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":50},{"i":87,"t":"浮点数","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数","p":50},{"i":88,"t":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":50},{"i":90,"t":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":50},{"i":92,"t":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":50},{"i":96,"t":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":94},{"i":98,"t":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":94},{"i":100,"t":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":94},{"i":102,"t":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":94},{"i":104,"t":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":94},{"i":106,"t":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":94},{"i":108,"t":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":94},{"i":110,"t":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":94},{"i":112,"t":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":94},{"i":114,"t":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":94},{"i":116,"t":"归并排序和基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序和基数排序","p":94},{"i":117,"t":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":94},{"i":119,"t":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":94},{"i":121,"t":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":94},{"i":123,"t":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":94},{"i":125,"t":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":94},{"i":129,"t":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":127},{"i":131,"t":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":127},{"i":133,"t":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":127},{"i":135,"t":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":127},{"i":137,"t":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":127},{"i":139,"t":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":127},{"i":143,"t":"几种常考的二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#几种常考的二叉树","p":141},{"i":144,"t":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":141},{"i":146,"t":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":141},{"i":148,"t":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":141},{"i":150,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":141},{"i":152,"t":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":141},{"i":154,"t":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":141},{"i":156,"t":"树和森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和森林","p":141},{"i":157,"t":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":141},{"i":159,"t":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":141},{"i":161,"t":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":141},{"i":163,"t":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":141},{"i":165,"t":"考试选择盲猜","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#考试选择盲猜","p":141},{"i":166,"t":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":141},{"i":168,"t":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":141},{"i":170,"t":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":141},{"i":174,"t":"1.1基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#11基本概念","p":172},{"i":175,"t":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":172},{"i":177,"t":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":172},{"i":179,"t":"2.算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#2算法","p":172},{"i":180,"t":"2.1算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#21算法","p":172},{"i":181,"t":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":172},{"i":183,"t":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":172},{"i":187,"t":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":185},{"i":189,"t":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":185},{"i":191,"t":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":185},{"i":193,"t":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":185},{"i":195,"t":"两种存储结构：矩阵和链表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#两种存储结构矩阵和链表","p":185},{"i":196,"t":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":185},{"i":198,"t":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":185},{"i":200,"t":"BFS和DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs和dfs","p":185},{"i":201,"t":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":185},{"i":203,"t":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":185},{"i":205,"t":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":185},{"i":207,"t":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":185},{"i":209,"t":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":185},{"i":211,"t":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":185},{"i":213,"t":"拓扑","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑","p":185},{"i":214,"t":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":185},{"i":216,"t":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":185},{"i":218,"t":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":185},{"i":222,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":220},{"i":225,"t":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":224},{"i":228,"t":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":227},{"i":231,"t":"两种方式部署","u":"/docs/Web/部署Docsaururs","h":"","p":230},{"i":232,"t":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":230},{"i":234,"t":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":230},{"i":236,"t":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":230},{"i":238,"t":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":230},{"i":240,"t":"二、GitHubAction+云服务器部署","u":"/docs/Web/部署Docsaururs","h":"#二githubaction云服务器部署","p":230},{"i":241,"t":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":230},{"i":243,"t":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":230},{"i":246,"t":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":245},{"i":250,"t":"4.1 学生端","u":"/docs/Web/软件工程课设/接口文档","h":"#41-学生端","p":248},{"i":251,"t":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":248},{"i":253,"t":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":248},{"i":255,"t":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":248},{"i":257,"t":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":248},{"i":259,"t":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":248},{"i":261,"t":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":248},{"i":263,"t":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":248},{"i":265,"t":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":248},{"i":267,"t":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":248},{"i":269,"t":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":248},{"i":271,"t":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":248},{"i":273,"t":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":248},{"i":275,"t":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":248},{"i":277,"t":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":248},{"i":279,"t":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":248},{"i":281,"t":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":248},{"i":283,"t":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":248},{"i":285,"t":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":248},{"i":287,"t":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":248},{"i":289,"t":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":248},{"i":291,"t":"4.3 管理端","u":"/docs/Web/软件工程课设/接口文档","h":"#43-管理端","p":248},{"i":292,"t":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":248},{"i":294,"t":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":248},{"i":296,"t":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":248},{"i":298,"t":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":248},{"i":300,"t":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":248},{"i":302,"t":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":248},{"i":304,"t":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":248},{"i":306,"t":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":248},{"i":308,"t":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":248},{"i":310,"t":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":248},{"i":312,"t":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":248},{"i":314,"t":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":248},{"i":316,"t":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":248},{"i":318,"t":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":248},{"i":320,"t":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":248},{"i":322,"t":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":248},{"i":324,"t":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":248},{"i":326,"t":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":248},{"i":328,"t":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":248},{"i":330,"t":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":248},{"i":332,"t":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":248},{"i":334,"t":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":248},{"i":336,"t":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":248},{"i":338,"t":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":248},{"i":340,"t":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":248},{"i":342,"t":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":248},{"i":344,"t":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":248},{"i":346,"t":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":248},{"i":348,"t":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":248},{"i":350,"t":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":248},{"i":352,"t":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":248},{"i":354,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":248},{"i":356,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":248},{"i":358,"t":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":248},{"i":360,"t":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":248},{"i":363,"t":"1.持久化","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":364,"t":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":362},{"i":366,"t":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":368,"t":"2.1 配置文件和操作","u":"/docs/Web/Redis/Redis 持久化","h":"#21-配置文件和操作","p":362},{"i":369,"t":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":362},{"i":371,"t":"2.2操作","u":"/docs/Web/Redis/Redis 持久化","h":"#22操作","p":362},{"i":372,"t":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":362},{"i":374,"t":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":362},{"i":376,"t":"3.AOF","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":377,"t":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":362},{"i":379,"t":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":362},{"i":381,"t":"3.3操作","u":"/docs/Web/Redis/Redis 持久化","h":"#33操作","p":362},{"i":382,"t":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":362},{"i":384,"t":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":362},{"i":386,"t":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":389,"t":"1.Linux中的安装和启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":388},{"i":390,"t":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":388},{"i":392,"t":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":388},{"i":394,"t":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":388},{"i":396,"t":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":388},{"i":398,"t":"2.十大数据类型","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":388},{"i":399,"t":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":388},{"i":401,"t":"2.1.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#211常用指令","p":388},{"i":402,"t":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":388},{"i":404,"t":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":388},{"i":406,"t":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":388},{"i":408,"t":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":388},{"i":410,"t":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":388},{"i":412,"t":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":388},{"i":414,"t":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":388},{"i":416,"t":"2.4.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#241常用指令","p":388},{"i":417,"t":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":388},{"i":419,"t":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":388},{"i":421,"t":"2.5.2常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#252常用指令","p":388},{"i":422,"t":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":388},{"i":424,"t":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":388},{"i":426,"t":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":388},{"i":428,"t":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":388},{"i":430,"t":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":388},{"i":432,"t":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":388},{"i":434,"t":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":388}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/2",[0,0.379]],["t/4",[0,0.379]],["t/6",[0,0.379]],["t/8",[0,0.379]],["t/9",[0,0.379]],["t/11",[0,0.379]],["t/13",[1,4.61]],["t/14",[0,0.379]],["t/16",[1,4.61]],["t/17",[0,0.379]],["t/18",[0,0.379]],["t/19",[0,0.379]],["t/21",[0,0.379]],["t/23",[0,0.379]],["t/25",[1,4.61]],["t/26",[0,0.379]],["t/28",[0,0.379]],["t/30",[2,5.548]],["t/33",[0,0.379]],["t/34",[0,0.379]],["t/36",[0,0.379]],["t/37",[3,5.548]],["t/39",[0,0.379]],["t/41",[4,5.548]],["t/43",[0,0.379]],["t/44",[0,0.379]],["t/46",[0,0.379]],["t/48",[0,0.379]],["t/52",[0,0.379]],["t/53",[0,0.379]],["t/55",[0,0.379]],["t/57",[0,0.379]],["t/59",[0,0.379]],["t/61",[0,0.379]],["t/63",[0,0.379]],["t/64",[0,0.379]],["t/66",[0,0.379]],["t/68",[0,0.379]],["t/69",[0,0.379]],["t/70",[0,0.379]],["t/72",[0,0.379]],["t/74",[0,0.379]],["t/76",[0,0.379]],["t/77",[0,0.379]],["t/79",[5,5.548]],["t/81",[0,0.379]],["t/83",[0,0.379]],["t/85",[0,0.379]],["t/87",[0,0.379]],["t/88",[0,0.379]],["t/90",[0,0.379]],["t/92",[6,5.548]],["t/96",[0,0.379]],["t/98",[0,0.379]],["t/100",[0,0.379]],["t/102",[0,0.379]],["t/104",[0,0.379]],["t/106",[0,0.379]],["t/108",[0,0.379]],["t/110",[0,0.379]],["t/112",[0,0.379]],["t/114",[0,0.379]],["t/116",[0,0.379]],["t/117",[0,0.379]],["t/119",[0,0.379]],["t/121",[0,0.379]],["t/123",[0,0.379]],["t/125",[0,0.379]],["t/129",[7,4.332]],["t/131",[8,5.548]],["t/133",[0,0.281,9,3.424]],["t/135",[10,3.218,11,3.701]],["t/137",[0,0.281,12,3.701]],["t/139",[11,3.701,13,3.701]],["t/143",[0,0.379]],["t/144",[0,0.379]],["t/146",[0,0.379]],["t/148",[0,0.379]],["t/150",[0,0.379]],["t/152",[0,0.379]],["t/154",[0,0.379]],["t/156",[0,0.379]],["t/157",[0,0.379]],["t/159",[0,0.379]],["t/161",[0,0.379]],["t/163",[0,0.379]],["t/165",[0,0.379]],["t/166",[0,0.379]],["t/168",[0,0.379]],["t/170",[0,0.379]],["t/174",[14,4.61]],["t/175",[0,0.379]],["t/177",[15,4.983]],["t/179",[16,4.61]],["t/180",[9,4.61]],["t/181",[0,0.379]],["t/183",[10,4.332]],["t/187",[0,0.379]],["t/189",[0,0.379]],["t/191",[0,0.379]],["t/193",[0,0.379]],["t/195",[0,0.379]],["t/196",[0,0.379]],["t/198",[0,0.379]],["t/200",[17,5.548]],["t/201",[18,5.548]],["t/203",[19,5.548]],["t/205",[0,0.379]],["t/207",[20,5.548]],["t/209",[21,5.548]],["t/211",[0,0.379]],["t/213",[0,0.379]],["t/214",[22,5.548]],["t/216",[0,0.379]],["t/218",[0,0.379]],["t/222",[0,0.379]],["t/225",[23,4.121,24,4.121]],["t/228",[0,0.379]],["t/231",[0,0.379]],["t/232",[25,5.548]],["t/234",[7,4.332]],["t/236",[16,4.61]],["t/238",[26,5.548]],["t/240",[27,5.548]],["t/241",[7,4.332]],["t/243",[28,5.548]],["t/246",[0,0.379]],["t/250",[0,0.281,29,4.121]],["t/251",[0,0.281,30,4.121]],["t/253",[0,0.281,31,4.121]],["t/255",[0,0.281,32,4.121]],["t/257",[0,0.281,33,4.121]],["t/259",[0,0.281,34,4.121]],["t/261",[0,0.281,35,4.121]],["t/263",[0,0.281,36,4.121]],["t/265",[0,0.281,37,4.121]],["t/267",[0,0.281,38,4.121]],["t/269",[0,0.281,39,4.121]],["t/271",[0,0.281,40,4.121]],["t/273",[0,0.281,41,4.121]],["t/275",[0,0.281,42,4.121]],["t/277",[0,0.281,43,4.121]],["t/279",[0,0.281,44,4.121]],["t/281",[0,0.281,45,4.121]],["t/283",[0,0.281,46,4.121]],["t/285",[0,0.281,47,4.121]],["t/287",[0,0.281,48,4.121]],["t/289",[0,0.281,49,4.121]],["t/291",[0,0.281,50,4.121]],["t/292",[0,0.281,51,4.121]],["t/294",[0,0.281,52,4.121]],["t/296",[0,0.281,53,4.121]],["t/298",[0,0.281,54,4.121]],["t/300",[0,0.281,55,4.121]],["t/302",[0,0.281,56,4.121]],["t/304",[0,0.281,57,4.121]],["t/306",[0,0.281,58,4.121]],["t/308",[0,0.281,59,4.121]],["t/310",[0,0.281,60,4.121]],["t/312",[0,0.281,61,4.121]],["t/314",[0,0.281,62,4.121]],["t/316",[0,0.281,63,4.121]],["t/318",[0,0.281,64,4.121]],["t/320",[0,0.281,65,4.121]],["t/322",[0,0.281,66,4.121]],["t/324",[0,0.281,67,4.121]],["t/326",[0,0.281,68,4.121]],["t/328",[0,0.281,69,4.121]],["t/330",[0,0.281,70,4.121]],["t/332",[0,0.281,71,4.121]],["t/334",[0,0.281,72,4.121]],["t/336",[0,0.281,73,4.121]],["t/338",[0,0.281,74,4.121]],["t/340",[0,0.281,75,4.121]],["t/342",[0,0.281,76,4.121]],["t/344",[0,0.281,77,4.121]],["t/346",[0,0.281,78,4.121]],["t/348",[0,0.281,79,4.121]],["t/350",[0,0.281,80,4.121]],["t/352",[0,0.281,81,4.121]],["t/354",[0,0.281,82,3.701]],["t/356",[0,0.281,82,3.701]],["t/358",[0,0.281,83,4.121]],["t/360",[0,0.281,84,4.121]],["t/363",[7,4.332]],["t/364",[0,0.281,14,3.424]],["t/366",[85,5.548]],["t/368",[0,0.281,9,3.424]],["t/369",[86,4.983]],["t/371",[10,4.332]],["t/372",[87,4.983]],["t/374",[88,5.548]],["t/376",[89,5.548]],["t/377",[0,0.281,90,4.121]],["t/379",[0,0.281,91,4.121]],["t/381",[92,5.548]],["t/382",[93,5.548]],["t/384",[94,5.548]],["t/386",[95,5.548]],["t/389",[96,5.548]],["t/390",[0,0.281,14,3.424]],["t/392",[15,4.983]],["t/394",[0,0.281,97,4.121]],["t/396",[98,5.548]],["t/398",[16,4.61]],["t/399",[99,5.548]],["t/401",[86,4.983]],["t/402",[100,5.548]],["t/404",[101,5.548]],["t/406",[0,0.281,10,3.218]],["t/408",[87,4.983]],["t/410",[12,4.983]],["t/412",[102,5.548]],["t/414",[13,4.983]],["t/416",[103,5.548]],["t/417",[104,5.548]],["t/419",[105,5.548]],["t/421",[106,5.548]],["t/422",[107,5.548]],["t/424",[108,5.548]],["t/426",[109,5.548]],["t/428",[110,5.548]],["t/430",[111,5.548]],["t/432",[112,5.548]],["t/434",[113,5.548]]],"invertedIndex":[["",{"_index":0,"t":{"2":{"position":[[0,5]]},"4":{"position":[[0,2]]},"6":{"position":[[0,2]]},"8":{"position":[[0,3]]},"9":{"position":[[0,2]]},"11":{"position":[[0,4]]},"14":{"position":[[0,2]]},"17":{"position":[[0,2]]},"18":{"position":[[0,2]]},"19":{"position":[[0,2]]},"21":{"position":[[0,2]]},"23":{"position":[[0,2]]},"26":{"position":[[0,2]]},"28":{"position":[[0,2]]},"33":{"position":[[0,4]]},"34":{"position":[[0,2]]},"36":{"position":[[0,5]]},"39":{"position":[[0,4]]},"43":{"position":[[0,4]]},"44":{"position":[[0,4]]},"46":{"position":[[0,4]]},"48":{"position":[[0,7]]},"52":{"position":[[0,2]]},"53":{"position":[[0,9]]},"55":{"position":[[0,2]]},"57":{"position":[[0,2]]},"59":{"position":[[0,2]]},"61":{"position":[[0,2]]},"63":{"position":[[0,2]]},"64":{"position":[[0,4]]},"66":{"position":[[0,4]]},"68":{"position":[[0,4]]},"69":{"position":[[0,5]]},"70":{"position":[[0,4]]},"72":{"position":[[0,4]]},"74":{"position":[[0,4]]},"76":{"position":[[0,5]]},"77":{"position":[[0,4]]},"81":{"position":[[0,10]]},"83":{"position":[[0,18]]},"85":{"position":[[0,11]]},"87":{"position":[[0,3]]},"88":{"position":[[0,8]]},"90":{"position":[[0,3]]},"96":{"position":[[0,4]]},"98":{"position":[[0,4]]},"100":{"position":[[0,4]]},"102":{"position":[[0,4]]},"104":{"position":[[0,4]]},"106":{"position":[[0,4]]},"108":{"position":[[0,4]]},"110":{"position":[[0,4]]},"112":{"position":[[0,4]]},"114":{"position":[[0,3]]},"116":{"position":[[0,9]]},"117":{"position":[[0,4]]},"119":{"position":[[0,4]]},"121":{"position":[[0,8]]},"123":{"position":[[0,7]]},"125":{"position":[[0,9]]},"133":{"position":[[4,4]]},"137":{"position":[[4,4]]},"143":{"position":[[0,8]]},"144":{"position":[[0,4]]},"146":{"position":[[0,5]]},"148":{"position":[[0,5]]},"150":{"position":[[0,5]]},"152":{"position":[[0,11]]},"154":{"position":[[0,5]]},"156":{"position":[[0,4]]},"157":{"position":[[0,8]]},"159":{"position":[[0,6]]},"161":{"position":[[0,10]]},"163":{"position":[[0,8]]},"165":{"position":[[0,6]]},"166":{"position":[[0,8]]},"168":{"position":[[0,4]]},"170":{"position":[[0,13]]},"175":{"position":[[0,28]]},"181":{"position":[[0,7]]},"187":{"position":[[0,10]]},"189":{"position":[[0,9]]},"191":{"position":[[0,3]]},"193":{"position":[[0,3]]},"195":{"position":[[0,12]]},"196":{"position":[[0,4]]},"198":{"position":[[0,3]]},"205":{"position":[[0,3]]},"211":{"position":[[0,15]]},"213":{"position":[[0,2]]},"216":{"position":[[0,4]]},"218":{"position":[[0,4]]},"222":{"position":[[0,30]]},"228":{"position":[[0,8]]},"231":{"position":[[0,6]]},"246":{"position":[[0,9]]},"250":{"position":[[4,3]]},"251":{"position":[[7,2]]},"253":{"position":[[7,2]]},"255":{"position":[[7,2]]},"257":{"position":[[7,2]]},"259":{"position":[[7,4]]},"261":{"position":[[7,4]]},"263":{"position":[[7,4]]},"265":{"position":[[7,4]]},"267":{"position":[[7,4]]},"269":{"position":[[8,4]]},"271":{"position":[[8,4]]},"273":{"position":[[8,6]]},"275":{"position":[[8,5]]},"277":{"position":[[8,4]]},"279":{"position":[[8,4]]},"281":{"position":[[8,6]]},"283":{"position":[[8,6]]},"285":{"position":[[8,4]]},"287":{"position":[[8,6]]},"289":{"position":[[8,6]]},"291":{"position":[[4,3]]},"292":{"position":[[7,2]]},"294":{"position":[[7,2]]},"296":{"position":[[7,2]]},"298":{"position":[[7,4]]},"300":{"position":[[7,4]]},"302":{"position":[[7,4]]},"304":{"position":[[7,4]]},"306":{"position":[[7,6]]},"308":{"position":[[7,4]]},"310":{"position":[[8,4]]},"312":{"position":[[8,4]]},"314":{"position":[[8,4]]},"316":{"position":[[8,4]]},"318":{"position":[[8,4]]},"320":{"position":[[8,4]]},"322":{"position":[[8,4]]},"324":{"position":[[8,4]]},"326":{"position":[[8,6]]},"328":{"position":[[8,4]]},"330":{"position":[[8,4]]},"332":{"position":[[8,4]]},"334":{"position":[[8,4]]},"336":{"position":[[8,4]]},"338":{"position":[[8,4]]},"340":{"position":[[8,4]]},"342":{"position":[[8,4]]},"344":{"position":[[8,4]]},"346":{"position":[[8,4]]},"348":{"position":[[8,4]]},"350":{"position":[[8,4]]},"352":{"position":[[8,6]]},"354":{"position":[[8,6]]},"356":{"position":[[8,6]]},"358":{"position":[[8,4]]},"360":{"position":[[8,6]]},"364":{"position":[[4,6]]},"368":{"position":[[4,7]]},"377":{"position":[[4,4]]},"379":{"position":[[4,6]]},"390":{"position":[[4,5]]},"394":{"position":[[4,4]]},"406":{"position":[[4,2]]}}}],["1",{"_index":7,"t":{"129":{"position":[[0,11]]},"234":{"position":[[0,8]]},"241":{"position":[[0,5]]},"363":{"position":[[0,5]]}}}],["1.1",{"_index":14,"t":{"174":{"position":[[0,7]]},"364":{"position":[[0,3]]},"390":{"position":[[0,3]]}}}],["1.2",{"_index":15,"t":{"177":{"position":[[0,10]]},"392":{"position":[[0,5]]}}}],["1.3",{"_index":97,"t":{"394":{"position":[[0,3]]}}}],["1.4",{"_index":98,"t":{"396":{"position":[[0,5]]}}}],["1.linux",{"_index":96,"t":{"389":{"position":[[0,14]]}}}],["2",{"_index":16,"t":{"179":{"position":[[0,4]]},"236":{"position":[[0,6]]},"398":{"position":[[0,8]]}}}],["2.1",{"_index":9,"t":{"133":{"position":[[0,3]]},"180":{"position":[[0,5]]},"368":{"position":[[0,3]]}}}],["2.1.1",{"_index":86,"t":{"369":{"position":[[0,7]]},"401":{"position":[[0,9]]}}}],["2.1.2",{"_index":100,"t":{"402":{"position":[[0,9]]}}}],["2.1.3",{"_index":101,"t":{"404":{"position":[[0,9]]}}}],["2.1字符串string",{"_index":99,"t":{"399":{"position":[[0,12]]}}}],["2.2",{"_index":10,"t":{"135":{"position":[[0,3]]},"183":{"position":[[0,8]]},"371":{"position":[[0,5]]},"406":{"position":[[0,3]]}}}],["2.2.1",{"_index":87,"t":{"372":{"position":[[0,9]]},"408":{"position":[[0,9]]}}}],["2.2.2",{"_index":88,"t":{"374":{"position":[[0,9]]}}}],["2.3",{"_index":12,"t":{"137":{"position":[[0,3]]},"410":{"position":[[0,5]]}}}],["2.3.1",{"_index":102,"t":{"412":{"position":[[0,9]]}}}],["2.4",{"_index":13,"t":{"139":{"position":[[0,3]]},"414":{"position":[[0,5]]}}}],["2.4.1",{"_index":103,"t":{"416":{"position":[[0,9]]}}}],["2.5",{"_index":104,"t":{"417":{"position":[[0,7]]}}}],["2.5.1跟set",{"_index":105,"t":{"419":{"position":[[0,12]]}}}],["2.5.2",{"_index":106,"t":{"421":{"position":[[0,9]]}}}],["2.6",{"_index":107,"t":{"422":{"position":[[0,9]]}}}],["2.6.1",{"_index":108,"t":{"424":{"position":[[0,7]]}}}],["2.6.2",{"_index":109,"t":{"426":{"position":[[0,7]]}}}],["2.7hyperloglog",{"_index":110,"t":{"428":{"position":[[0,14]]}}}],["2.8",{"_index":111,"t":{"430":{"position":[[0,4]]}}}],["2.8.1",{"_index":112,"t":{"432":{"position":[[0,8]]}}}],["2.8.2",{"_index":113,"t":{"434":{"position":[[0,9]]}}}],["2.kmp",{"_index":8,"t":{"131":{"position":[[0,5]]}}}],["2.rdb",{"_index":85,"t":{"366":{"position":[[0,5]]}}}],["2.项目配置action",{"_index":28,"t":{"243":{"position":[[0,17]]}}}],["3",{"_index":26,"t":{"238":{"position":[[0,6]]}}}],["3.1",{"_index":90,"t":{"377":{"position":[[0,3]]}}}],["3.2",{"_index":91,"t":{"379":{"position":[[0,3]]}}}],["3.3",{"_index":92,"t":{"381":{"position":[[0,5]]}}}],["3.3.1",{"_index":93,"t":{"382":{"position":[[0,7]]}}}],["3.3.2aof",{"_index":94,"t":{"384":{"position":[[0,13]]}}}],["3.aof",{"_index":89,"t":{"376":{"position":[[0,5]]}}}],["4",{"_index":95,"t":{"386":{"position":[[0,6]]}}}],["4.1",{"_index":29,"t":{"250":{"position":[[0,3]]}}}],["4.1.1",{"_index":30,"t":{"251":{"position":[[0,6]]}}}],["4.1.10",{"_index":39,"t":{"269":{"position":[[0,7]]}}}],["4.1.11",{"_index":40,"t":{"271":{"position":[[0,7]]}}}],["4.1.12",{"_index":41,"t":{"273":{"position":[[0,7]]}}}],["4.1.13",{"_index":42,"t":{"275":{"position":[[0,7]]}}}],["4.1.14",{"_index":43,"t":{"277":{"position":[[0,7]]}}}],["4.1.15",{"_index":44,"t":{"279":{"position":[[0,7]]}}}],["4.1.16",{"_index":45,"t":{"281":{"position":[[0,7]]}}}],["4.1.17",{"_index":46,"t":{"283":{"position":[[0,7]]}}}],["4.1.18",{"_index":47,"t":{"285":{"position":[[0,7]]}}}],["4.1.19",{"_index":48,"t":{"287":{"position":[[0,7]]}}}],["4.1.2",{"_index":31,"t":{"253":{"position":[[0,6]]}}}],["4.1.20",{"_index":49,"t":{"289":{"position":[[0,7]]}}}],["4.1.3",{"_index":32,"t":{"255":{"position":[[0,6]]}}}],["4.1.4",{"_index":33,"t":{"257":{"position":[[0,6]]}}}],["4.1.5",{"_index":34,"t":{"259":{"position":[[0,6]]}}}],["4.1.6",{"_index":35,"t":{"261":{"position":[[0,6]]}}}],["4.1.7",{"_index":36,"t":{"263":{"position":[[0,6]]}}}],["4.1.8",{"_index":37,"t":{"265":{"position":[[0,6]]}}}],["4.1.9",{"_index":38,"t":{"267":{"position":[[0,6]]}}}],["4.3",{"_index":50,"t":{"291":{"position":[[0,3]]}}}],["4.3.1",{"_index":51,"t":{"292":{"position":[[0,6]]}}}],["4.3.10",{"_index":60,"t":{"310":{"position":[[0,7]]}}}],["4.3.11",{"_index":61,"t":{"312":{"position":[[0,7]]}}}],["4.3.12",{"_index":62,"t":{"314":{"position":[[0,7]]}}}],["4.3.13",{"_index":63,"t":{"316":{"position":[[0,7]]}}}],["4.3.14",{"_index":64,"t":{"318":{"position":[[0,7]]}}}],["4.3.15",{"_index":65,"t":{"320":{"position":[[0,7]]}}}],["4.3.16",{"_index":66,"t":{"322":{"position":[[0,7]]}}}],["4.3.17",{"_index":67,"t":{"324":{"position":[[0,7]]}}}],["4.3.18",{"_index":68,"t":{"326":{"position":[[0,7]]}}}],["4.3.19",{"_index":69,"t":{"328":{"position":[[0,7]]}}}],["4.3.2",{"_index":52,"t":{"294":{"position":[[0,6]]}}}],["4.3.20",{"_index":70,"t":{"330":{"position":[[0,7]]}}}],["4.3.21",{"_index":71,"t":{"332":{"position":[[0,7]]}}}],["4.3.22",{"_index":72,"t":{"334":{"position":[[0,7]]}}}],["4.3.23",{"_index":73,"t":{"336":{"position":[[0,7]]}}}],["4.3.24",{"_index":74,"t":{"338":{"position":[[0,7]]}}}],["4.3.25",{"_index":75,"t":{"340":{"position":[[0,7]]}}}],["4.3.26",{"_index":76,"t":{"342":{"position":[[0,7]]}}}],["4.3.27",{"_index":77,"t":{"344":{"position":[[0,7]]}}}],["4.3.28",{"_index":78,"t":{"346":{"position":[[0,7]]}}}],["4.3.29",{"_index":79,"t":{"348":{"position":[[0,7]]}}}],["4.3.3",{"_index":53,"t":{"296":{"position":[[0,6]]}}}],["4.3.30",{"_index":80,"t":{"350":{"position":[[0,7]]}}}],["4.3.31",{"_index":81,"t":{"352":{"position":[[0,7]]}}}],["4.3.32",{"_index":82,"t":{"354":{"position":[[0,7]]},"356":{"position":[[0,7]]}}}],["4.3.33",{"_index":83,"t":{"358":{"position":[[0,7]]}}}],["4.3.34",{"_index":84,"t":{"360":{"position":[[0,7]]}}}],["4.3.4",{"_index":54,"t":{"298":{"position":[[0,6]]}}}],["4.3.5",{"_index":55,"t":{"300":{"position":[[0,6]]}}}],["4.3.6",{"_index":56,"t":{"302":{"position":[[0,6]]}}}],["4.3.7",{"_index":57,"t":{"304":{"position":[[0,6]]}}}],["4.3.8",{"_index":58,"t":{"306":{"position":[[0,6]]}}}],["4.3.9",{"_index":59,"t":{"308":{"position":[[0,6]]}}}],["aov",{"_index":22,"t":{"214":{"position":[[0,3]]}}}],["asl",{"_index":4,"t":{"41":{"position":[[0,3]]}}}],["asl和失败asl",{"_index":3,"t":{"37":{"position":[[0,13]]}}}],["b",{"_index":1,"t":{"13":{"position":[[0,2]]},"16":{"position":[[0,11]]},"25":{"position":[[0,17]]}}}],["bf",{"_index":18,"t":{"201":{"position":[[0,3]]}}}],["bfs和df",{"_index":17,"t":{"200":{"position":[[0,7]]}}}],["booth",{"_index":5,"t":{"79":{"position":[[0,13]]}}}],["b和b",{"_index":2,"t":{"30":{"position":[[0,7]]}}}],["df",{"_index":19,"t":{"203":{"position":[[0,3]]}}}],["foundat",{"_index":23,"t":{"225":{"position":[[0,10]]}}}],["githubact",{"_index":27,"t":{"240":{"position":[[0,21]]}}}],["githubpag",{"_index":25,"t":{"232":{"position":[[0,13]]}}}],["ieee754",{"_index":6,"t":{"92":{"position":[[0,9]]}}}],["kruskal",{"_index":21,"t":{"209":{"position":[[0,14]]}}}],["next",{"_index":11,"t":{"135":{"position":[[4,6]]},"139":{"position":[[4,8]]}}}],["prim",{"_index":20,"t":{"207":{"position":[[0,9]]}}}],["road",{"_index":24,"t":{"225":{"position":[[14,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":5,"t":"找到合适的位置插入，然后判断类型进行处理： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":7,"t":"删除一个节点后，会导致一棵子树失衡，假设删除w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z的： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左 删除和插入操作类似，不同之处在于删除的调整，可能会导致另外的不平衡，需要反复多次进行调整。","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":10,"t":"什么是红黑树，红黑树是一种特殊的二叉排序树，考试内容不会很深，简单清楚性质概念和插入操作即可，删除操作很难，考察概率不大。 主要性质： 每个结点或黑或红 根节点必黑 叶节点必黑，这里的叶节点是外部结点 不存在两个相邻的红节点 任意一个节点，该节点到任意一个叶节点的简单路径上，经过的黑节点数目是一样的 顺口溜： info 左根右（排序） 根叶黑 不红红 黑路同 两个结论： 从根出发到叶节点的路径不大于最短路径的一半 有n个内部红节点的红黑树高度h≤2∗log2(n+1)h \\le 2*log_{2}{(n+1)}h≤2∗log2​(n+1) 插入的节点初始化为红","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":12,"t":"第一步先确定要插入的位置 若为根节点，直接染黑 如果不破坏红黑树特征，正常 如果破坏了“不红红”的条件，找到父亲的兄弟结点，也就是叔结点，按照叔结点的两种情况去调整:(1)红叔叔（2）黑叔叔 （1）红叔叔 叔、父、爷结点染色（颜色反转），同时爷结点变成新节点（变黑则无所谓，变红则要再调整）。 （2）黑叔叔 找父节点和爷结点，判断当前节点对于爷结点的位置进行调整： LL：右旋，父节点换爷结点，同时父和爷染色 RR：左旋，父节点换爷结点，同时父和爷染色 LR：先左后右，当前节点先左后右，儿结点换爷结点，同时染色 RL：先右后左，当前节点先右后左，儿结点换爷结点，同时染色","s":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":15,"t":"info 树中每个结点至多有m个子树，即一个节点中至多m-1个关键字 根节点至少两棵子树 初根节点外的所有非叶节点，至少[m/2]（向上取整）棵子树，即至少有[m/2]（向上取整）-1个关键字 所有叶节点在最后一层（NULL节点，空指针）","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":20,"t":"在B树中找节点 在节点中中找关键字 与节点中的关键字进行比对，其中节点的左指针指向的节点集合小于该节点，右指针指向的节点集合大于节点，依据这种特性，一层层进行查找，如果到最后NULL节点，则说明找不到了。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":22,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1] 定位，找到应该插入的位置 插入，如果关键字个数插入后在正确范围内，则直接插入，否则进行处理 多的情况处理如下： 如下处理：","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":24,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1]，所以删除后节点的关键字个数不能小于（m/2）向上取整-1。 直接删除，如果删除满足关键字的最低要求，则直接删除 如果在非终端节点，则用直接前驱或者直接后继来代替 如果在兄弟够借，即目前关键字删除前为（m/2）向上取整-1，且其左（右）兄弟的关键字数目大于（m/2）向上取整，则从兄弟中拿一个节点，放到父节点中，然后从父节点中拿一下下来填充给不满足要求的节点，称为父子换位法 这里的92处已经不满足，但是左兄弟仍然充裕，则进行父子换位法： 兄弟不够借。当兄弟不够借的时候，当前节点+兄弟结点的个数为m-2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m-1，同时父节点关键字数目-1。如果父节点不满足要求，则进行兄弟够借和兄弟不够借两种试探，进行填补跟合并。如果操作使得根节点-1变为0，则直接删除根节点，换成新的根节点。(切记不可进行前驱后继填补) 此时需要父节点落下70，进行合并： 73处不满足，同时左兄弟不够借，则82落下，进行合并： 删除根节点，合并得新根节点：","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":27,"t":"m阶B+树每个结点最多m棵子树（也就是最多m个孩子节点） 非叶、根节点至少有两棵子树，其他每个分支节点至少有（m/2）向上取整棵子树 节点的子树个树和关键字个数一样 叶节点包含所有关键字，也就是全部关键字都会存储在叶子节点，节点内按大小排序 所有分支节点，中仅仅包含它所指向的子节点中的最大值，及其子节点的指针 叶节点之间会有指针穿在一起（支持顺序查找） 如上：3，9，15中存储的分别是三个子节点中的最大值，最后绿色的叶节点之间有指针连在一起。","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":29,"t":"从根出发，找到合适的位置（处于哪个子节点），过程中会在非叶节点中遇到关键字，但这并不是查找成功，要一直查到叶节点中才算成功，这是区别于B树的一个地方，B树是能够在非终端节点中就找到结果的。 如下是一个查找成功的例子，查找9，从根出发，直到叶节点。 如下是查找失败的例子：从根出发，进入15的子节点，然后进入9的子节点，对比了6->8，发现8已经大于7，则查找失败了。 总之无论成功与否，最终都一定要走到最下面的一层节点。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":32,"t":"Foundation 数据结构 查找","s":"查找","u":"/docs/Foundation/数据结构/查找","h":"","p":31},{"i":35,"t":"折半查找思想，将给定值key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high的时候会结束查找，最终显示查找失败。折半不适用于链式存储 直接看算法： int Binary_Search(int a[],int key){ int len = len(a); int low = 0;high = len - 1; while(low<=high){ mid = (low + high)/2; if(mid == key)reutrn mid; if(mid < key){ high = mid - 1; } else{ low = mid + 1; } } return }","s":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":31},{"i":38,"t":"1）成功： 层数乘以结点数求和再除以长度 成功ASL为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4​ 2）失败： 将图中的二叉树补上结点，原来的每个叶子结点都补成度为2的结点 这些失败结点是虚拟的，实际是不存在的，所以计算的时候，层数是按它的父节点来计算 所以图中的失败ASL为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12是失败结点。","s":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":31},{"i":40,"t":"分块查找综合了顺序查找和折半查找的优点，将数据分组，组内可以无序，但是组间必定有序，然后分别记录各组内的最值key。查找的时候先找最值Key，再按分组指针去顺序查找。 下图举例：","s":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":31},{"i":42,"t":"1）成功 先找到分块的key节点，计数一次，然后去块间顺序查找，依次+1 2）失败 整体失败的情况无法预估，题目更可能考察某一个点的查找失败，与成功类似，块间顺序查找完全部元素，即为查找失败，其实就是块长+1","s":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":31},{"i":45,"t":"一种特殊的数据结构，能够根据元素关键字计算出他在散列表中的存储地址","s":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":31},{"i":47,"t":"散列哈希函数：Addr=H(key)Addr = H(key)Addr=H(key)建立起关键字和散列地址的映射关系，408一般考察除留余数法。 散列表表长是m，取不大于m的最大质数p，构建函数H(key)=key%pH(key) = key \\% pH(key)=key%p，则产生的地址落在区间[0,p−1][0,p-1][0,p−1] 处理冲突：冲突是指经过散列函数映射的地址上已经有关键字，则需要采取一定处理办法解决冲突。如下解决冲突办法： 开放地址法​ 1、线性探测： 一个一个向下探测，按di=0,1,2...d_i = 0,1,2...di​=0,1,2...进行探测 2、平方探测（二次探测法）： 按照di=02,12,−12,22,−22.........k2,−k2d_i = 0^2,1^2,-1^2,2^2,-2^2.........k^2,-k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k \\le m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3的素数 3、双散列 两个散列函数：Hi=(H(key)+i∗Hash2(key))%mH_i = (H(key)+i*Hash_2(key)) \\% mHi​=(H(key)+i∗Hash2​(key))%m 4、伪随机序列法 当did_idi​为伪随机数序列时候 拉链法​ 一张图理解","s":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":31},{"i":49,"t":"查找成功是针对关键字的，计算出查找每个关键字查找成功的次数，除以关键字个数即可 查找失败是针对散列函数的，由散列函数的质数p可知:散列地址在[0,p−1][0,p-1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p即可","s":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":31},{"i":51,"t":"Foundation 计算机组成原理 数组表示和运算","s":"数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"","p":50},{"i":54,"t":"除基取余法（针对整数）​ 拿十进制的数除以基数（什么进制就是什么基数），留下余数和商，继续执行除基取余，知道商为0，最后将余数从下向上串起来，得到整数部分。 乘基取整法（针对小数）​ 拿小数不断乘以基数，取掉最高位（小数点前一位），知道乘积的结果为1.000....，将结果从下向上串起来即可。","s":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":50},{"i":56,"t":"机器数的最高位表示数据的符号，剩下的数据位表示数据的绝对值真值。假设字长为n+1位。 则小数表示范围：−(1−2−n)≤x≤1−2−n-(1-2 ^{-n})\\le x \\le 1-2^{-n}−(1−2−n)≤x≤1−2−n， 整数表示范围：−(2n−1)≤x≤2n−1-(2^{n}-1) \\le x \\le 2^n -1−(2n−1)≤x≤2n−1。 其中原码的0有两种表示：10000和00000。","s":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":50},{"i":58,"t":"基于原码的不方便运算二设计的，模二运算。正数的补码和原码一样，负数的补码是在原码的基础上，除符号位外取反，末位加1（从右到左找到第一个1，前面的数取反即可）。如果是从x的补码求-x的补码，也是上述的步骤，同时将符号位进行变换即可。 对于字长n+1位。 小数表示范围：−1≤x≤1−2−n-1 \\le x \\le 1-2^{-n}−1≤x≤1−2−n 整数表示范围：−2n≤x≤2n−1-2^n \\le x \\le 2^n -1−2n≤x≤2n−1 零的表示唯一，都是0.000","s":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":50},{"i":60,"t":"正数的反码同原码，负数的反码等于原码的数值为全部取反。其中反码的零也有正负之分。","s":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":50},{"i":62,"t":"移码常常用来表示浮点数的阶码，理解为在真值上加上一个常数（偏置值），通常是2n2^n2n，相当于x在数轴上正向偏移若干单位，移码等于补码的符号位取反。 移码的零表示唯一。","s":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":50},{"i":65,"t":"码制 添加 正数 原、补、反 0 负数 原 0 补 左1 右0 反 1","s":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":50},{"i":67,"t":"无脑0","s":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":50},{"i":71,"t":"原码加减计算在计算机中容易失误得不到正确的结果，于是计算机内部的加减运算都是采用补码进行运算的，减法的本质是加法，等于加上一个负数的补码。步骤： 按二进制规则，逢二进一 加法：直接相加；减法：减数转换成负数补码后和被减数相加 符号位和数值位一起参与运算，加减法的符号位在运算中直接得到 最终运算结果的高位丢弃，保留n+1位，运算结果还是补码","s":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":50},{"i":73,"t":"零标志ZF，ZF为1代表全0 溢出标志OF，为1表示溢出，对于无符号数这个标志没用 符号标志SF，表示结果的符号 进/借位标志CF，对无符号有用，有符号数的运算没用","s":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":50},{"i":75,"t":"1）一位符号位 参加运算的两个数符号相同，结果与原操作数不同的话，表示溢出。 V=AsBsSsˉ+AsˉBsˉSsV = A_sB_s \\bar{S_s}+\\bar{A_{s}}\\bar{B_{s}}S_sV=As​Bs​Ss​ˉ​+As​ˉ​Bs​ˉ​Ss​ 逻辑表达式为1时候为溢出 2）双符号位 模四补码，运算结果两个符号位一样则不溢出，否则是溢出。 00 11 01上溢出 10下溢出 3）一位符号位 采用一位符号位结合仅为情况判断溢出，若符号位进位CF和最高位数位的进位C1一样表示没有溢出，反之溢出。","s":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":50},{"i":78,"t":"符号位单独运算，被乘数和乘数按绝对值进行运算 初始ACC里面设置为00.0000（00符号位隐藏） 乘数最低位为1，则加上被乘数，为0则加0 执行完3后，整体带上ACC的符号位进行右移（逻辑） 重复执行加法和右移n次即可 手算模拟：","s":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":50},{"i":80,"t":"在乘数后面初始加一个辅助位0，根据辅助位和乘数的最后一位的加减结果判断下一步加什么。 x和y计算出对应的x和y的补码以及-x的补码 初始ACC设置00.0000，MQ中为乘数，乘数后添加一个辅助位（辅助位就是MQ后一位） 辅助位-MQ最低位：为1则加x的补码，为0则加0，为-1则加-x的补码 执行3后，整体右移（逻辑）一位 整体执行3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n次的右移） 比较：","s":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":50},{"i":82,"t":"符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 第一步是用被除数-除数的补码 判断余数，余数为负商0，并且加上除数的补码，余数为正商0，不恢复 执行完4后，余数进行逻辑左移 加减n+1次，左移n次 流程图：","s":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":50},{"i":84,"t":"由余数和除数的符号共同决定，不需要恢复余数。 符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 被除数减去除数，判断余数正负 余数为负，商0，余数左移并且加上除数；余数为正，商1，余数左移并且减去除数 加减n+1次，左移n","s":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":50},{"i":86,"t":"符号位参与运算 计算x、y的绝对值，y的补码和-y的补码 第一步：被除数和除数同号，则被除数减去除数，被除数和除数异号，则加上除数 判断除数和余数是否同号，同号商1，余数左移减去除数；异号商0，余数左移加上除数 执行4操作n次，最后一步恒置1，“末位恒置1”","s":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":50},{"i":89,"t":"表示为：N=(−1)S∗M∗REN =(-1)^S * M*R^EN=(−1)S∗M∗RE S的取值决定正负；M表示尾数，R是基数（2,4,8...），E是阶码，表示2E2^E2E","s":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":50},{"i":91,"t":"正数：0.1xxxxx 负数：1.1xxxxx 对于基数为2的，要求小数点后一位不全为0，也就是要为1 对于基数为4的，要求小数点后两位不全为0 策略： 左规：尾数左移，则阶码要-1 右规：尾数右移，阶码+1","s":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":50},{"i":93,"t":"小概念​ 符号位：1；阶码：8；尾数：23 其中尾数前面隐含了一个1.，所以尾数的精度是24，能表示24位有效数字 符号S（31） 阶码E（23~30） 尾数M（0~22） 1+8+23组合。IEEE754标准表示成浮点数真值为：(−1)S∗1.M∗2E−127(-1)^S *1.M*2^{E-127}(−1)S∗1.M∗2E−127 其中注意阶码E是移码表示的。 阶码的全0和全1： 阶码 符号 尾数 值 全0 0 0 0 全0 1 0 -0 全1 0 0 正无穷 全1 1 0 负无穷 浮点数的加减运算​ 给定两个数，先转化成二进制表示形式。 对阶，两阶码相减，小的向大的对齐，阶码对齐过程中尾数也会进行移动 尾数加减（符号参与运算，一般都是两位符号） 将尾数规格化：正数0.1xxx，负数1.1xxx，规格化过程左移或者右移要进行阶码的改动 舍入：0舍1入、末位恒置1、截断 溢出判断 溢出的两种情况： 右规和尾数舍入，尾数大的舍入时候，末位加1，可能导致尾数溢出，此时会进行右规调整，但同时会影响到阶码，导致阶码溢出。 左规，进行左规时，阶码减1，可能导致下溢 结合一个例题：","s":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":50},{"i":95,"t":"Foundation 数据结构 内部排序算法","s":"内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","h":"","p":94},{"i":97,"t":"插入排序就是每次都从后面未排序的序列中按照大小插入到前面已经排好的子序列中，这里会产生子序列（已经排好序的）和待排序列，当没有待排序则算法结束，每次从未排序的头部取出一个插入到子序列中合适的位置。包含有：直接插入、折半插入、希尔排序。","s":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":94},{"i":99,"t":"L[1.......i-1] L[i] L[i+1......n] 如上模拟插入排序状态，此时待排序指针指向i，前面i-1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i-1中找到适合L[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i。每次都从未排好序的中取出第一个进行插入，此处需要和后面的选择排序进行区分，当执行所以待插入的都执行完毕则算是排好啦。 s 初始第一个值默认自成一个已经排好序的子序列 采用哨兵复制L[i]，然后将子序列中大于L[i]的值进行后移，因为已经找到位置，要插入就得有空位嘛 给L[i]找到合适的插入位置 将腾出的空位放入L[i] 继续循环 弄清楚算法思想，代码是比较容易实现的，算法核心在于，从初始子序列为1的数组中，指针依次后移，为当前指向的值，从子序列中找到一个合适的位置，然后插入即可，此处可能会有疑问，插入到前面，那当前的位置呢？因为会要进行移动，所以此处的位置必然也是一个已经排好序的值。 1）代码 void InsertSort(int a[],int len){ int i,j; for(i = 2;i <= len;i++){ if(a[i]<a[i-1]){ a[0] = a[i]; for(j = i - 1;a[0] < a[j];--j){ a[j+1] = a[j]; } a[j+1] = a[0]; } }} 2）时空复杂度分析 空间上只使用了a[0]当哨兵作为辅助，故空间复杂度上为O(1)O(1)O(1) 最优时间复杂度，如果已经有序，一趟循环即可，时间复杂度为O(n)O(n)O(n) 最坏时间复杂度，初始全部乱序，两个for循环，时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性分析 s 这里第一次提及稳定性，所谓稳定性是指，数组中有a[i] == a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j]前面，假若这里反过来，就是不稳定的。如果值相同的元素在排序后相对位置没有发生改变则认为是稳定的。 据此分析，直接插入排序每次都是从未排序的数组中取出第一个进行插入，循环条件为小于号，故不会出现同值元素出现相对位置改变的情况，由此是稳定的。同时适用于顺序和链式两种结构。","s":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":94},{"i":101,"t":"折半插入是对直接插入的一个改进。在直接插入中可以发现，每次都会从子序列开头去查找一个合适插入的位置，这会带来一定的时间消耗，折半插入的改进就在于查找使用了折半查找，二分查找找到合适的位置，然后一次性进行移动。 如下图就是算法模拟步骤。默认第一个元素自成一个子序列，此时待排序指针指向5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8右移一个单位，如下所示，最后将哨兵存储的复制值放到合适的位置即可。 s 折半查找子序列找到合适的位置 右移元素 将哨兵元素插入 1）代码 void InsertSortPlus(int a[],int len){ int i,j,low,high,mid; for(i = 2;i <= len;i++){ a[0] = a[i]; low = 1;high = i - 1; while(low<=high){ mid = (low + high) / 2; if(a[mid] > a[0]) low = mid + 1; else high = mid - 1; } for(j = i - 1;j >= high + 1;j--){ a[j + 1] = a[j]; } a[high + 1] = a[0]; }} 2）时空复杂度 与直接插入排序是一样的。 空间复杂度上O(1)O(1)O(1) 时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性 这是稳定的排序算法，不会改变同大小元素的相对位置，该算法依赖初始状态，在初始相对有序且数据量不大的情况下，表现不错。","s":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":94},{"i":103,"t":"缩小增量排序，具体思想是按照一个增量将排序表分割成若干小组，小组内部进行直接插入排序。一趟完毕后增量减小，继续分组，然后进行内部的直接插入排序。知道增量为1，最后是一次完整的直接插入排序。这样的好处是，让值更大的更快跑到后面，值更小的更快到前面，在数据量大的时候，较为优秀。 info 确定初始增量，这里随便写n/2，然后对排序表按照增量分组 各组内进行一趟插入排序 增量缩小，n/2 重复步骤2，知道增量变成1 1）代码 void ShellSort(int a[],int len){ int gap,i,j; //分别定义增量和两个循环变量 for(gap = len/2;gap>=1;gap = gap/2){ //增量减小 for(i = gap+1;i<=n;i++){ //gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的pic辅助理解) if(a[i] < a[i-gap]){ //组内前一个元素大 a[0] = a[i]; //哨兵 for(j = i-gap;j>0 && a[0]<a[j];j -= gap) a[j+gap] = a[j]; a[j+gap] = a[0]; } } }} 这里随便拿两个图来看下希尔排序中i指针，在前移的过程都会进行一次组内排序。不是我们手工算的一次就直接把组内给排好的。 这里看出来49-27-76-65是一组的，此时i=3，j=1，所以要进行插入排序。 完了之后指针i向前走到4，切换到另一个组 此时对另一个组进行排序。i++后指向5，对前一个组进行排序，只不过前一个表是27-49，这次变成了27-49-76，依次类推，当i为7的时候，组内元素齐整了。 2）时空复杂度、稳定性 空间只用了一个哨兵，为O(1)O(1)O(1) 时间复杂度在数学上未能解决，分析没有结果，只知道n在某个范围的时候，时间复杂度为O(n1.3)O(n^{1.3})O(n1.3)，最坏情况是O(n2)O(n^2)O(n2) 不稳定，且只适用于顺序表","s":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":94},{"i":105,"t":"根据序列中两个元素的比较结果来交换两者的位置，所以叫交换排序。两种算法：冒泡和排序，冒泡随便，快排重点，算法题爱考","s":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":94},{"i":107,"t":"直接看图理解： 每次都把最小（大）的冒上去 1）代码 void swap(int &a,int &b){ int temp = a; a = b; b = temp;}void BubbleSort(int a[],int len){ bool = flag = false; for(int i = 0;i<n-1;i++){ for(int j = n-1;j>i;j--){ if(a[j] < a[i]) //这里的小于是确保稳定性的 swap(a[j],a[i]);flag = true; } if(!flag)return ; }} 2）时空复杂度、稳定性 空间复杂度为O(1)O(1)O(1) 最好情况下，本来就有序O(n)O(n)O(n)，否则则进行n-1躺排序，第i躺排序要进行n-i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n-1}(n-i) = \\frac{n(n-1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为O(n2)O(n^2)O(n2)，其中每次都要移动元素三次，总移动次数为比较次数的三倍 稳定","s":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":94},{"i":109,"t":"1）分而治之 快排的基本思想是分治，一个待排序表L[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得L分为两块：L[1....k-1]和L[k+1...n]，其中L[k]为pivot，使得左边表的值都小于pivot，右边都大于。然后分别再对这两个表执行上面的操作。直到每个部分只有一个元素。 2）交换 知道了分治排序，那么如何高效的将表一分为二呢？使用两个指针low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j谁有坑，另一个就得去找元素填坑。按照下面的步骤执行交换 若此时指针low的位置有坑： high向前移动，直到遇到第一个比pivot小的元素 将high位置的元素拿走（挖坑），去填low 同时low++ 若此时指针j的位置有坑： low向后移动，直到遇到第一个比pivot大的元素 将low位置的元素拿走，填high 同时high-- 3）代码 理解了分治和交换，代码如下： 先看交换部分的： int Partition(int a[],int low,int high){ int pivot = a[low]; while(low < high){ while(low<high && a[high]>=pivot) --high; //后面找元素填前面 a[low] = a[high]; while(low<high && a[low]<=pivot) ++low; //前面找元素填后面 a[high] = a[low]; } a[low] = pivot; return low;} 快排： void QuickSort(int a[],int low,int high){ if(low < high){ int pivotpos = Partition(a,low,high);//找到第一次的枢轴值点 QuickSort(a,low,pivotpos - 1); //左排序 QuickSort(a,pivotpos + 1,high); //右排序 }} 3）时空复杂度、稳定性 算法是递归的，需要一个递归栈开销，容量和递归调用的最大深度一致。最好情况下位O(log2n)O(log_{2}n)O(log2​n)，最坏需要n−1次递归调用，所以栈为O(n)n-1次递归调用，所以栈为O(n)n−1次递归调用，所以栈为O(n)，平均是O(log2n)O(log_{2}n)O(log2​n) 最坏请跨国下的时间复杂度为O(n2)O(n^2)O(n2)，理想情况是O(nlong2n)O(nlong_{2}n)O(nlong2​n) 不稳定 所有内部排序中平均性能最优","s":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":94},{"i":111,"t":"每一趟选择从待排序的元素中选取最小（大）的作为有序序列的第i个元素。分选择排序和堆排序，堆排序是重点。","s":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":94},{"i":113,"t":"跟插入排序是挺类似的，都是从待排序的序列中拿一个元素放到前面去。但是要进行区分的是，插入排序是，i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i指向的位置元素进行交换。 此时38和27进行交换（因为27最小） 按照这样执行n-1次即可 当前指向a[i]，则从a[i.....n-1]中寻找最小的元素a[k] 交换a[k]和a[i] 待排指针i前移（i++），重复上述操作 1）代码 void SelectSort(int a[],int len){ for(int i = 0;i<n-1;i++){ int min = i; for(int j = i+1;j<n;j++){ if(a[j]<a[min]) min = j; } if(i!=min) swap(a[i],a[min]); }} 2）时空复杂度分析 没有借助辅助空间，空间复杂度为O(1)O(1)O(1) 每次进行三个元素的移动，一共n-1躺，一共移动3(n-1)次元素 元素的比较次数和初始状态没有关系一共进行n(n−1)2\\frac{n(n-1)}{2}2n(n−1)​，故时间复杂度为O(n2)O(n^2)O(n2) 不稳定","s":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":94},{"i":115,"t":"1）堆 将堆看成一棵完全二叉树，其中二叉树满足性质：任意一个非根节点都小（大）于其根节点。简单来说就是每个根，存放的是该根为根节点的树中最大（小）的值。其中根最大的叫大根堆，最小的叫小根堆。如下是一个大根堆： 2）如何造堆： 这里说的是大根堆的，小根堆跟大根堆差不多。 先将数据表表示成完全二叉树的格式 最树的最后一棵子树开始，从后往前调整 3）处理上升和下坠： 若当前处理的根节点的小于左右孩子中的最大值，那么最大值会替换根节点的值，同时让根节点下坠 根节点下坠的过程，从上往下进行继续进行上述的操作1，如果有比自己还大的孩子，就下坠，直到找到合适的位置 这里贴几个图： 初始处理倒数第一棵子树 处理可能要下坠的情况，这里处理到了最后一棵树，53＜87，所以要下坠 53下坠到原87的位置，发现这棵子树不符合，所以继续下坠。 53放到了合适的位置，大根堆构建结束。 4）造堆的代码 先来看一下树中儿子和父亲的关系函数： 1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为\\frac{i}{2}向下取整 \\\\ & 2.若i为奇数则双亲为\\frac{(i-1)}{2} \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 其中要注意的是数组a是从0开始存储还是1开始存储，对应的表达式会有改变。 要点： 若表长为len，那么第一棵子树的根节点下表为len/2，从这里开始调整 若根节点需要下坠，把最大值放到根节点位置 根节点下坠到缺空处，此时需要调整指针标记值，去判断下坠位置时候符合大根堆的条件 void BuildMaxHeap(int a[],int len){ for(int i = len/2;i>0;i++) //第一棵子树的根节点下表为len/2，从这里开始调整 HeadAdjust(a,i,len);}void HeadAdjust(int a[],int k,int len){ a[0] = a[k]; //复制一份当前处理节点数据，后面交换后会被覆盖 for(int i = k*2;i<len;i*=2){ //k*2直接指向其左孩子，每次循环开始都会向下走一层 if(i<len && a[i]<a[i+1]) i++; //i标记的是左右孩子哪个更大 if(a[0]>a[i])break; //根最大，满足，不处理 else{ a[k] = a[i]; //根小孩子大，孩子上去 k = i; //将根的指针指向这个孩子的，重新循环判断寻找初始根应该放的位置 } } a[k] = a[0] } 5）堆排序 已经造好了大根堆 输出堆顶元素（堆定元素和堆底元素在完全二叉树的逻辑上进行互换） 调整大根堆 循环1和2 void HeapSort(int a[],int len){ BuildMaxHeap(a,len); for(int i = len;i>n;i--){ swap(a[i],a[1]); HeadAdjust(a,1,i-1); }} 6）时空复杂度、稳定性 空间上借助常数个空间单元O(1)O(1)O(1) 建堆时间O(n)O(n)O(n)调整时间为O(h)O(h)O(h)，最好、最坏、平均情况下的时间复杂度都是O(nlog2n)O(nlog_{2}n)O(nlog2​n) 不稳定","s":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":94},{"i":118,"t":"将两个（或多个，取决于归并路数）有序表，合并成一个新的有序表，看个图理解： 以上是二路归并，初始每个元素独立为一个有序表，则取两两合并，如有剩下不成组则单独为一组，n路归并同理。直到归并成一个完整的有序表。 1）归并 如何合并两个有序表长度分别问n和m 需要一个辅助数组b存放两个表 两个指针p1和p2分别指向两个有序表的起始位置 比较b[p1]和b[p2]，较小者放入a中，同时指针后移 当出现某一个表已经复制完了，剩下的表直接将剩余元素按序复制到a中 图例： 这是初始状态。 复制元素，指针后移，继续比较。 当一个表复制完了，剩下的直接复制进去。 3）归并代码 int *b = (int *)malloc(sizeof(int)*(n+1)); // 辅助数组void Merge(int a[],int low,int mid,int high){ //mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high] int i,j,k; for(k = low;k<=high;k++) //复制元素 b[k] = a[k]; for(i = low,j = mid+1,k = i;i<=mid && j<=high;k++){ //i做前段指针，j做后段指针 if(b[i]<=b[j]) a[k] = b[i++]; else a[k] = b[j++]; } //两种情况复制剩下的 while(i<=mid) a[k++] = b[i++]; while(j<=high) a[k++] = b[j++];} 4）n路归并排序 这里以2路归并，基于分治思想，将n个元素分解成n/2个子表，两两归并。几路就按几个元素一组来划分。 void MergeSort(int a[],int low,int high){ if(low<high){ int mid = (low+high)/2; MergeSort(a,low,mid); MergeSort(a,mid+1,high); Merge(a,low,mid,high); }} 5）时空复杂度、稳定性 需要n个辅助单元，空间复杂度O(n)O(n)O(n) 每趟归并的复杂度为O(n)O(n)O(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为O(nlog2n)O(nlog_{2}n)O(nlog2​n) 稳定","s":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":94},{"i":120,"t":"基数排序不基于比较和移动进行排序，按照关键字各个位置的大小进行比较。如果按0~999的数来比较，个人理解为，分别按个十百或者百个十进行比较。有两种关键字排序法： 最高位优先：从高位开始排序 最低位优先：从低位开始排序 1）举个🌰： 有520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999中，个十百各排序一次，需要三次。 基于上述的顺序，进行个位的分配，如下第一趟： 接下来将各个队列的值串起来（收集），从前往后： 接下来，基于这个顺序进行百位的分配和收集： 最后进行百位的分配和收集： 2）具体过程 感觉通过上面的例子都会理解了，这里还是按过程随便写一下。 给定长度n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d-1},k_j^{d-2},k_j^{d-3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0​)组成 其中，0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0 \\le k_j^{i} \\le r-1 (0 \\le j \\le n,0 \\le i \\le d-1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r称为基数 有点难说，简单认为就是，一个关键字有多少位就是几元组，关键字中的任意一位的取值范围最大值就是基数r。上述的520就是三元组，基数。 基数排序得到递减序列的过程： 设置r个空队列Qr,Qr−1.......Q0Q_r,Q_{r-1}.......Q_0Qr​,Qr−1​.......Q0​ 按各个关键字位权重递增次序，就是个十百的顺序，对关键字分配和回收 分配：如果当前处理的关键字位是n就挂到队列n的队尾中，比如520的个位是0，就挂0队列 回收：从前到后将队列元素出队，串起来 3）时空复杂度、稳定性 空间需要r个队列，Q(r)Q(r)Q(r) 需要进行d躺排序，一次分配要Q(n)Q(n)Q(n)，一次收集要Q(r)Q(r)Q(r)，所以时间复杂度为O(d(n+1))O(d(n+1))O(d(n+1)) 稳定 4）应用 基本不考大题，了解手算，一般适用于那种有关键字的比较，年月日、身份证这种。","s":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":94},{"i":122,"t":"算法 时间复杂度 空间复杂度 稳定性 最好 最坏 平均 直接插入 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 折半插入 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 希尔 \\ \\ O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 冒泡 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 快排 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(log2n)O(log_{2}n)O(log2​n) 不稳 简单选择 O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 堆 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(1)O(1)O(1) 不稳 2路归并 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n)O(n)O(n) 稳 基数 O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(r)O(r)O(r) 稳","s":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":94},{"i":124,"t":"1）希尔 2）快排 3）简单选择 4）堆","s":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":94},{"i":126,"t":"顺序表结构 直接插入、折半插入、希尔、冒泡、快排、简单选择、堆、归并、基数 链表结构 直接插入、冒泡、简单选择、基数（可能降低效率）；（快排、希尔、归并、堆都可以用，但是不推荐）","s":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":94},{"i":128,"t":"Foundation 数据结构 算法 KMP定位子串","s":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"","p":127},{"i":130,"t":"一种很基础朴素的方法就是暴力匹配，采用定长顺序存储结构，不依赖于串的操作进行暴力匹配。 算法思想 ：采用暴力匹配的方法，对主串和模式串设置i和j两个指针，从左到右一个一个进行匹配，当出现不匹配时，主串指针回溯，模式串从新开始进行匹配。 初始处理： 进行匹配： 指针回溯： 指针回溯： 代码如下 int Index(String S,String T){ int i = 1,j = 1; while(i <= S.len && j <= T.len){ if(S.ch[i] == T.ch[i]){ // 匹配则指针向前移动 ++i; ++j; } else{ i = i - j + 2; //指针回溯 j = 1; } } if(j > T.len)return i - T.len; //匹配成功返回第一个定位 return 0;} 时间复杂度分析：分析最坏时间复杂度，如果主串前部分一直和模式串不能匹配，则指针会一直进行回溯，直到进行到最后的串，成功匹配，此时的时间复杂度取决于主串S和模式串T的长度n和m。时间复杂度为O(nm)O(nm)O(nm)","s":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":127},{"i":132,"t":"很显然如果采用暴力算法，当主串和模式串不长的情况下，时间复杂度还算可行，但是一旦长度很长，时间开销将会很大。于是三位大牛：D.E.Knuth、J.H.Morris和V.R.Prat一起发明了KMP算法，致力于解决这个主串指针回溯的问题来降低时间开销。KMP算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。KMP算法详解-彻底清楚了(转载+部分原创) - sofu6 - 博客园 (cnblogs.com)","s":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":127},{"i":134,"t":"算法思想：算法思想是按照我个人理解，KMP的核心就是基于朴素匹配算法，解决其主串指针回溯，从而降低时间开销。 过程描述对于S和T的匹配，当有相同部分，则指针将会向前移动，当出现不匹配时，是否有必要进行回溯呢？答案当然是否，因为对于主串来说，对于匹配的部分是已知信息，能否根据已知信息来判断模式串指针的下一步移动呢，从而达到降低时间复杂度的效果。由此，主串指针是不需要移动的，只需要根据已知信息来判断模式串的指针移动即可。 通过如下图片来感受下KMP的简化： 从上图发现当移动到C和D时，不匹配，肉眼观察，可以直接将j移动成如下的情况： 为什么呢？因为肉眼观察，前面的ABA是匹配的鸭！ 从上述的过程分析，我们可以发现当匹配失败时，j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k个字符是一样的。使用数学公式进行如下描述： ch[0...k−1]=ch[j−k...j−1]ch[0...k-1] = ch[j-k...j-1]ch[0...k−1]=ch[j−k...j−1] 使用如下图片进行理解： 通过上述的分析，我们可以发现，进行匹配的过程中，对于主串的指针，是一往无前，无需回溯的，算法的核心在对于模式串的指针移动，当移动到不匹配的位置时候，需要进行计算，确定指针j的下一步走向。","s":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":127},{"i":136,"t":"接下来就是重点，我们现在知道了对于算法的核心就是当出现不匹配时候，我们的指针j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next数组的方法。 1.王道老师的方法​ 根据课程的所给方法，我总结一下，该方法的相对直观，在手算中十分方便，目测观察，当主串和模式串出现不匹配时候，观察对于模式串指针，如何移动能使得在下一步匹配前，有较多模式串和主串已经匹配。如下图例，首先要初始化next数组，next数组的1和2无脑填0和1，不要问为什么，很明显，自己推一下即可： 当出现不匹配时候，在不匹配的前段，划一条竖线，观察模式串的指针j移动。 向前移动至2，o不匹配。 再向前移动到1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0的会执行++，所以没有意义) 所以在next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1处。 后面的步骤都是依次类推，该方法适合手算next。 2.重复前后缀计算法​ 当我们匹配模式串和主串到一个不匹配的位置时候，我们要进行指针j的跳转。但是由于前面匹配的信息，我们可以发现 ch[0∼k−1]=ch[j−k∼j−1]ch[0 \\sim k-1] = ch[j-k \\sim j-1]ch[0∼k−1]=ch[j−k∼j−1] 通过下图可以理解更透彻： 根据上图，当匹配到指针j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的AB相等呀，而主串中指针扫过的位置，必有AB匹配，那么我们可以直接跳过前部的AB匹配。我们可以得出公式 当出现S[i]≠T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]\\begin{aligned} &当出现S[i] \\neq T[i] \\\\ &S[i-j \\sim i-1] = T[0 \\sim j-1] \\\\ &其中T[0 \\sim k-1] = T[j-k \\sim j-1] \\\\ &所以S[i-k \\sim i-1] = T[0 \\sim k-1] \\end{aligned}​当出现S[i]=T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]​ 上述公式就是我们求解next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba}。 接下来我们来模拟感受一下这个求解过程。首先next的1和2还是直接填0和1，没有为什么。 我们来看下图 当模式串指针走到j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j-1个字符串有关。我们看前部分字符串，发现共同前后缀是AB，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是C这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是ABC？长度为2，那么next[j+1]就是在next[j]的基础上加1即可，这个是可以递推出来的。我们发现如下规律 当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]\\begin{aligned} &当有T[k] =T[j] \\\\ &可以很快得出next[j]=next[j-1]+1 \\\\ &因为我们可以得出T[0 \\sim k-1] = T[j-k \\sim j-1] (next[j] = k) \\\\ &这时候因为T[k] =T[j] 那我们可以得出T[0 \\sim k-1] + T[k] = T[j-k \\sim j-1] +T[j]\\\\ &也就是T[0 \\sim k] = T[j-k \\sim j] \\end{aligned}​当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]​ 上述讨论的是当T[j] = T[k]的情况，那如果出现不相等的情况，如何处理呢？如下图 对于这种情况，我们执行k=next[k]k=next[k]k=next[k]。为什么呢？我们再来看下图： 当到了T[k]≠T[j]T[k]\\neq T[j]T[k]=T[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是B的位置，此时执行判定T[k]=T[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k = next[k] = 1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0。 阅读文字难以理解，可以参考一个up主的讲解视频KMP算法之求next数组代码讲解_哔哩哔哩_bilibili。","s":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":127},{"i":138,"t":"阅读到这里，next数组的求解就算结束了。我们来看下next数组的求解代码： void get_next(String T,int next []){ int j = 1,k = 0; next[1] = 0; while(k<T.len){ if(k==0 ||T.ch[j] == T.ch[k]){ //如果相等 next[++j] = ++k; //next[j+1] = next[j] + 1 } else{ k = next[k]; //回头寻找 } }} KMP算法： int Index_KMP(String S,String T,int next[]){ int i = 1;j = 1; while(i<S.len && j<T.len){ if(j==0||S.ch[i] == T.ch[j]){ ++i; ++j; } else{ j = next[j]; } if(j>T.len) return i - T.len; return 0; }}","s":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":127},{"i":140,"t":"仔细观察前述的图解跟代码，会发现，尽管主串指针不会回溯，但是模式串中的指针跳转重新匹配的过程中，会出现重复匹配失败的问题，从而浪费时间。例如下图： 我们观察可以发现，匹配C和B时候会发现不匹配，此时的next会跳转到2，从AB再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟AB中的B进行匹配成功的，此时产生了一次无效匹配，然后next到1。 针对next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果T[next[j]]等于T[k]，那么直接跳过这一层匹配，改为T[next[next[j]]即可。也就是跳过了中间无效的T[next[j]]和T[k]的比较。 代码实现 void get_nextval(String T,int nextval[]){ int j = 1,k = 0; nextval[1] = 0; while(j < T.len){ if(j == 0 || T.ch[j] == T.ch[k]){ ++j; ++k; if(T.ch[j] != T.ch[k]) nextval[j] = k; //不相等，则保留原有的最长重复前后缀 else nextval[j] = nextval[k]; //相等那就跳转，减少时间开销 } else k = nextval[k] }}","s":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":127},{"i":142,"t":"Foundation 数据结构 树、森林的性质总结","s":"树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"","p":141},{"i":145,"t":"s 就是常见的二叉树，除了叶节点外，每个结点都是有两个分支的，这种二叉树也是最好计算的。 1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{aligned} & 1.已知树高求结点总数：sum = 2^h-1\\\\ & 2.已知编号i求双亲：(i/2)向下取整\\\\ & 3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\\\ \\end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1​","s":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":141},{"i":147,"t":"这种二叉树是少了一些结点的满二叉树，每个几点的编号都都跟1~n一一对应，也就是说，只允许在右屁股部分缺少一些叶子节点，注意，少也是少叶子节点。 上述就是一个完全二叉树的例子，需要注意，因为是1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3号结点。","s":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":141},{"i":149,"t":"以根节点为比较标准，左边的全部结点均小于根节点，右边的全部结点均大于根节点，左右子树又各自为二叉排序树。 可以从性质发现，要找最小的结点，只需去找左子树的最左叶结点即可。同理最大结点在右子树的最右叶结点。","s":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":141},{"i":151,"t":"树中任意一个结点的左子树和右子树的深度之差不超过1","s":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":141},{"i":153,"t":"1）顺序存储 typedef struct Node{ int data; int isEmpty;}TreeNode; void Init(TreeNode T[],int len){ for(int i = 0;i<len;i++){ t[i].isEmpty = 1; } } bool isEmpty(T[],int x){ if(x>=len || x<1){return ture}; else{ return fasle; }}//找到父节点int findparent(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ index = x/2; if(isEmpty(index))return 0; esle return index; }}//找右孩子int findright(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ right = 2x + 1; if(isEmpty(right))return 0; esle return right; }}//找左孩子int findleft(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ left = 2x; if(isEmpty(left))return 0; esle return left; }}//这里的代码都是按照其实结点从1开始的，如果是0开始的还要进行改变 void PreSearch(T[],int index){ if(isEmpty(index))return ; esle{ visit(T[index]); PreSearch(T[],2*index); PreSearch(T[],2*index + 1); }}//后序跟中序只需要调换顺序即可","s":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":141},{"i":155,"t":"1、非空二叉树的叶结点等于度为2的结点数加1，即n0= n2 + 1 2、二叉树第k层上最多有2k-1 个结点 3、高度为k的二叉树最多有2k -1个结点 4、对于结点i(i>1)的编码： 1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为i/2向下取整 \\\\ & 2.若i为奇数则双亲为(i-1)/2 \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 5、求树高 log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1","s":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":141},{"i":158,"t":"“左指针串糖葫芦法” 每个结点左指针指向他的第一个孩子，右指针指向它在树中的相邻右兄弟，左孩子右兄弟规则，构造后的整体看起来就是根节点出发将孩子串了起来，由于这个规则，这是一颗没有右子树的二叉树。","s":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":141},{"i":160,"t":"”孩子兄弟表示“ 将森林里面的树都变成二叉树，每个根节点都是兄弟，将第一个根节点作为二叉树的根节点，剩下的二叉树都依次接到右子树中。 森林转二叉树 摘下第一个右子树，根节点跟左子树就是第一颗树的二叉树，其剩下的右子树又可以依次进行拆解，直到没有右子树为止。","s":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":141},{"i":162,"t":"树 森林 二叉树 先根 先序 先序 后根 中序 中序","s":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":141},{"i":164,"t":"如下是三种实现的数据结构：双亲表示法、孩子表示法、孩子兄弟表示法 1）双亲表示法（顺序存储） 每个结点都设计一个伪指针指向自己的父亲 typedef struct Node{ int data; int parent;}Node*;Node n[maxsize]；for(int i = 0;i < maxsize;i++) n[i].parent = -1; 2)孩子表示法 如上图所示，每个结点后都会串着一串孩子链表 typdef struct Node{ int data; struct Node * next}Child; //对应的是左边的结构，也是一个头的开始typedef struct Tree{ ElmentType data; Child *firstChild;}*TreeList;//树节点 3）孩子兄弟表示法 typedef struct Node{ int data; struct Node* leftchild,nextsibling; //分别指向左边第一个孩子，和右边的兄弟}*Tree;","s":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":141},{"i":167,"t":"给出完全二叉树的总结点数，求解叶结点数。对于这种问题可以如下求解： 估计倒数第二层，根据估算求出最后一层有多少个叶结点，反过来求解用了上一层多少个结点，再计算上一层剩下的叶结点数，加上最后一层的结点数即可，数目大设x求解 给完全二叉树的叶结点个数，求解结点数最多的情况，求解： tip 对于这种问题求解，就要考虑完全二叉树的性质，其缺少，只能是缺少右边屁股的叶结点。估计出合适的层次范围(倒数第二层)，然后裂解到最后一层，根据叶结点个数进行分布，计算。注意看看能不能多分裂出来一些，但是叶子结点数仍然不变的情况，这里不要直接死算第一步就结束了，要记得画图观察观察。","s":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":141},{"i":169,"t":"给定结点数求树高最大最小的问题： danger 满二叉树的情况下树就是最矮的，反之每一层都有一个度为1的结点时，树最高","s":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":141},{"i":171,"t":"1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m，求解 danger 首先要搞清楚谁的右节点(右指针域为空)，对于树来说，转换后的二叉树根节点的右指针域肯定是空的，然后是根节点下来每一个分支都会到最右边的指针域为空。所以右节点的右指针域为空的总数为：非终端结点数+1，二叉树的非终端结点数为：n-m，所以总数为n-m+1 2.对于森林的也是如此，森林先转二叉树然后合并，过程是一样的，求解方法一样。","s":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":141},{"i":173,"t":"Foundation 数据结构 数据结构基础知识","s":"数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"","p":172},{"i":176,"t":"数据就是信息的载体，描述客观事物的数字、字符和所有能输入到计算程序识别和处理符号的集合。 数据元素是数据的基本单位，通常当做一个整体来考虑的。例如一个简单的排队单子： 号码 取号时间 前面排队人数 上述就是数据元素，数据元素内的就是数据项 数据对象是具有相同性质的数据元素的集合，数据对象是数据的一个子集。","s":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":172},{"i":178,"t":"分为逻辑结构、物理结构、数据的运算 逻辑结构 逻辑结构可以理解为数据之间的逻辑关系，类似于函数之间的关系，一对一或者多对多之类 物理结构 物理结构就是存储结构，就是数据存储的方式，分为： 顺序存储：物理上是连续的 链式存储：不一定连续，采用指针连接 索引存储：有一个索引表，表中每项成为索引项，一般是关键字或者地址，能够快速查找 散列存储：哈希算法，散列存储 数据运算 关注的是数据之间的操作","s":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":172},{"i":182,"t":"基础的认知就是，算法是解决一个问题的方式方法，例如解决二元方程组的通用公式，这个方法就是一个算法。在计算机中，算法指的是高效处理数据，解决实际问题。 公式：程序 = 数据结构 + 算法 算法是对特定问题求解的一种描述。 例如：写一个求解最年轻富豪的程序 由公式得：设计数据结构个人信息数据元素： 个人信息 年龄 身家 设计算法： step1：对根据年龄排序 step2：输出对应的数据元素项 评价算法的两个标度：时间复杂度和空间复杂度","s":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":172},{"i":184,"t":"1.概念​ 事前预估算法的时间开销（T）与问题规模（N）的关系，T就是时间。说白了就是分析代码，算一下N情况下要花多少时间。 2.方法​ 分析代码中的执行情况，一般重点就是在循环次数、循环条件、循环内部的操作。当N足够大的时候去分析执行时间。采用大O表示法。两个结论： 可以只考虑阶数高的部分 常数项可以忽略 3.两个运算规则：​ 多项相加，取最大的 多项相乘，取乘积结果 4.常用比较：​ O(1)<O(log2n)<)(n)<O(nlong2n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)O(1)<O(log_2 n)<)(n)<O(nlong_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)O(1)<O(log2​n)<)(n)<O(nlong2​n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) 简单结论：常对幂指阶","s":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":172},{"i":186,"t":"Foundation 数据结构 图的性质总结","s":"图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","h":"","p":185},{"i":188,"t":"满足如下条件的就是简单图： 不存在重复边 不存在顶点到自己的表(自环) 多重图： 若图中某两个顶点的边数大于1 允许顶点通过一条边和自身关联 数据结构里面只讨论简单图 子图： G=(V,E)和G′=(V′,E′)G = (V,E)和G^{'}=(V^{'},E^{'})G=(V,E)和G′=(V′,E′) 其中V′是V的子集E′是E的子集V^{'}是V的子集E^{'}是E的子集V′是V的子集E′是E的子集 如果顶点集相同，则是生成子图","s":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":185},{"i":190,"t":"一个路径序列中不存在重复节点的是简单路径 除第一个顶点和最后一个顶点外，其余节点不重复出现的是简单回路","s":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":185},{"i":192,"t":"这些术语跟有向图区分开来 连通 连通图 连通分量 完全图 度 两个顶点可达 图任意两点连通 极大连通子图就是连通分量，要求包含所有边 边数为：n(n-1)/2 度数之和等于边的两倍：Sumn = 2e","s":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":185},{"i":194,"t":"强连通图 强连通分量 完全图 度 v到w和w到v都有路径 极大强连通子图就是强连通分量 边数为：n(n-1) 出度=入度=e","s":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":185},{"i":197,"t":"邻接矩阵是采用二维数组的存储方式来存储图，为v行v列的矩阵，其中若vi到vj有路径，则A[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则A[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则A[i][j]为1，或者是对应的路径权值。 当(vi,vj)是G的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{aligned} &当(v_i,v_j)是G的边，则a[i][j] = 1 \\\\ &否则a[i][j] = 0或无穷 \\\\ \\end{aligned}​当(vi​,vj​)是G的边，则a[i][j]=1否则a[i][j]=0或无穷​ 值可以是权值，有向图和无向图有着一定的区别（无向图对称，可以压缩的），能理解其表达的意思就OK。 随便写个矩阵： [0110000000011000]\\begin{bmatrix} 0 & 1 & 1& 0 \\\\ 0 & 0 & 0 &0 \\\\ 0 & 0 & 0 &1 \\\\ 1 & 0 & 0 &0 \\\\ \\end{bmatrix}⎣⎡​0001​1000​1000​0010​⎦⎤​ 其中当图是无向图的时候，矩阵是对称的。有向图则不一定，有向图中，行代表顶点的出，列代表顶点的入，比如上述矩阵，顶点v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1​的一条边。 typedef struct{ char vex[N]; int weight[N][N]; //N*N邻接矩阵，每条边的权值用int变量表示 int vexnum,arcnum; //图的当前顶点数和弧数}MGraph; 空间复杂度：显而易见空间复杂度跟顶点个数有关，为O(n2)O(n^2)O(n2) 对于AnA^nAn的元素An[i][j]A^n[i][j]An[i][j]表示的是由顶点i到j长度为n的路径有多少条。该结论了解即可 邻接矩阵适用于存储相对稠密的图。","s":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":185},{"i":199,"t":"看下图理解： 设计顶点表结点和边表结点来存储。顶点表节点由顶点域和指向第一条邻接边的指针构成，包含(顶点域data，边表头指针first)。边表结点中包含指向下一跳邻接边的指针。 typedef struct ArcNode{ //边表 int vexIndex; int weight; struct ArcNode *next; //指向下一个边表结点}ArcNode; typedef struct VNode{ //顶点表 char data; ArcNode *first; //指向第一条依附该顶点的弧的指针}VNode;typedef struct{ VNode vex[N]; int vexnum,arcnum; //图的顶点数和边数} ALGraph; //ALGraph是以邻接表存储的图类型 空间复杂度：空间复杂度跟顶点个数和边数有关，若为有向图则O(∣V∣+∣E∣)O(|V|+|E|)O(∣V∣+∣E∣)若为无向图则O(∣V∣+2∣E∣)O(|V|+2|E|)O(∣V∣+2∣E∣)。","s":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":185},{"i":202,"t":"1）树的广搜 广度优先搜索遍历是在各种算法中广泛应用的一种优先遍历算法。就是往宽了去搜索，再搜索下一层。 若树非空，根节点入队 若队列非空，队头元素出队并且访问，同时将其孩子入队 重复2直到队列为空为止 树的BFS借助了队列的帮助，与此同时因为树中不存在回路，搜索到相邻节点的时候不可能搜索到已经访问到的节点。 2）图的广搜 在图中，广度优先搜索会面临一个问题就是图若存在回路，会重复访问到已经访问过的结点，从而带来不必要的时间开销，此处需要设计一个辅助数组来标记是否被访问过，其余的思想与树的层次遍历思想大致相同，从一个节点开始，访问其邻接点，依次进行。具体思想如下： 从起始节点开始找到与顶点相邻的所有顶点(过程会有入队和出队操作) 辅助数组标记 循环递归 需要借助辅助队列 bool visited[MAX_SIZE];void BFSTraverse(Graph G){ for(i = 0;i<G.vexnuml;i++) visited[i] = fasle; InitQueue(Q); for(i = 0;i<G.vexnum;i++){ if(!visited[i]) BFS(G,i); }}void BFS(Graph G){ visit(v); visited[v] =true; EnQueue(Q,v); while(!isEmpty(Q)){ DeQueue(Q,v); for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)){ if(!visited[w]){ visit(w); visited[w] = true; EnQueue(Q,v); } } }} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：空间开销来源于辅助队列，故空间开销为O(∣V∣)O(|V|)O(∣V∣)。","s":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":185},{"i":204,"t":"图的DFS就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟BFS一样同样需要一个标记数组来标记节点是否被访问过。如下是伪代码： bool visited[MAX_SIZE];void DESTralverse(Graph G){ for(v = 0;v<G.vexnum;++v) visited[v] = false; for(v = 0;v<G.vexnum;++v) if(!visited[w]) DFS(G,v);}void DFS(Graph G,int v){ visit(v); visited[v] = true; for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)) if(!visited[w]) DFS(G,v);} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：DFS算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为O(1)O(1)O(1)，平均的为O(∣V∣)O(|V|)O(∣V∣)。","s":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":185},{"i":206,"t":"包含所有顶点的极小连通子图子图，其中结点数为n，边数为n-1，少一条边非连通，多一条边有回路。其具有性质： 不一定唯一 不唯一但是权值之和唯一(存在权值相同的边时会存在不唯一) ∣E∣=∣V∣−1|E| = |V| -1∣E∣=∣V∣−1 最小生成树的两种算法：“普利姆(Prim)和克鲁斯卡尔(Kruskal)”","s":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":185},{"i":208,"t":"这个算法是选点的算法，一开始选择一个顶点加入集合SSS，此时树中只有一个顶点，然后从剩余顶点集合TTT中选取相距树中顶点集合最近的点，并且将该边加入集合SSS中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n-1n−1次后得到最小生成树。","s":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":185},{"i":210,"t":"Prim是选点，而Kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n-1n−1次即可。","s":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":185},{"i":212,"t":"耳熟能详的算法了，大致了解算法思路，用个人理解简述： 两个集合SSS和VVV分别用来记录已选结点和剩余结点 选定初始结点v0v_0v0​加入SSS，计算出v0v_0v0​到各可达结点的距离 选出距离最短的结点vsv_svs​加入SSS 因为加入了vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来A到D距离是10，但是加入了B后，通过A->B->D的距离是5，距离更短，所以要更新) 跳转到3，执行n−1n-1n−1次即可计算出到每个节点的最短距离(可能存在不可达) 本质是贪心，时间复杂度两种数据结构都是O(∣V∣2)O(|V|^2)O(∣V∣2) 看个例子就明白了： 顶点（这一列不包含起点） 第 1 轮 第 2 轮 第 3 轮 第 4 轮 第 5 轮 第 6 轮 第 7 轮 0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ 2 4 1→2 已完成 已完成 已完成 已完成 已完成 已完成 3 ∞ ∞ 7 1→5→3 7 1→5→3 已完成 已完成 已完成 4 ∞ 13 1→2→4 13 1→2→4 13 1→2→4 13 1→2→4 已完成 已完成 5 5 1→5 5 1→5 已完成 已完成 已完成 已完成 已完成 6 5 1→6 5 1→6 5 1→6 已完成 已完成 已完成 已完成 7 ∞ ∞ ∞ ∞ ∞ 14 1→2→4→7 已完成 集合S {1, 2} {1,2,5} {1,2,5,6} {1,2,5,6,3} {1,2,5,6,3,4} {1,2,5,6,3,4,7} {1,2,5,6,3,4,7,0}","s":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":185},{"i":215,"t":"顶点VVV表示事件，<Vi,Vj><V_i,V_j><Vi​,Vj​>的这样一条边表示活动VjV_jVj​必须要ViV_iVi​在它之前执行。这两个节点互为前驱后继。","s":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":185},{"i":217,"t":"一个有向无环图的顶点序列满足以下条件： 每个顶点只出现一次 如果A在B前面，则图中不存在B到A的路径 实现步骤： AOV网中选择一个没有前驱的节点(入度为0) 删除该节点和所有以他为起点的有向边 重复1和2，知道网为空或者网中不存在无前驱的顶点位置（此时必有环） 性质： 一个顶点有多个直接后继的话，则可能导致拓扑序列不是唯一的，如果图内的唯一前驱和后继的话，序列唯一 可以对AOV网进行拓扑排序后重新编号，使得新的图用邻接矩阵存储，此时是三角阵，是可以压缩成上（下）三角的(原理？暂不懂)。由此得到一个充分性结论：邻接矩阵是三角阵则存在拓扑排序。 这里用个例子来看一下： 将这个有向无环图进行压缩存储。 有向无环图，一定可以转化为一个上三角或下三角矩阵。但是需要调整顶点的编号。 如果要用上三角矩阵表示有向无环图的邻接矩阵，可以对图进行拓扑排序，按照拓扑排序序列，重新调整各个顶点的编号。这样可以确保，所有的弧都是从小编号顶点指向大编号顶点，从而也就保证了邻接矩阵可以转化为“上三角矩阵”","s":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":185},{"i":219,"t":"恶心，算四个表，小心计算 1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k) ve(0)ve(0)ve(0)为0 ve(k)=Max[ve(j)+weight(vj,vk)]ve(k) = Max[ve(j) + weight(v_j,v_k)]ve(k)=Max[ve(j)+weight(vj​,vk​)]其中k是j的后继 从头开始顺着算，计算一个事件的最早发生时间就是，找到它的所有前驱，计算其前驱的最早发生时间加上其代价(边权)，存在多个前驱取最大的。 2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k) 终点等于ve(0)ve(0)ve(0) vl(k)=Min[vl(j)−weight(vk,vj)]vl(k) = Min[vl(j) - weight(v_k,v_j)]vl(k)=Min[vl(j)−weight(vk​,vj​)] 从最后开始逆过来算，计算一个事件的最迟发生时间，找到它的所有后继，计算该后继减去代价到该活动点的值，可能有多个后继，取差值最小的。 3）活动aia_iai​的最早开始事件e(i)e(i)e(i) 等于该活动起始点(某事件)的最早发生时间 找边，找起始点，找ve(i)ve(i)ve(i) 4）活动aia_iai​的最迟开始事件l(i)l(i)l(i) <vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i)-weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj​) 找到边，对应的终点，查该事件点的vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i)","s":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":185},{"i":221,"t":"intro","s":"intro","u":"/docs/intro","h":"","p":220},{"i":223,"t":"tip 现在是过去和未来的交点 欢迎来到Rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天Rachel已经老去，但是在一个明媚温暖的午后，他能在开在河边的咖啡店里面，安静地看着自己的历程，感慨过去和未来。","s":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":220},{"i":226,"t":"tip 总会有那么几门基础学科是要学的对吧。 Welcome to Rachel NoteBook!","s":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":224},{"i":229,"t":"tip Mathematics is the end of all fundamental disciplines 数学是人类对事物的抽象结构与模式进行严格描述、推导的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。 对于我们来说，数学也许繁琐无味，但是确实我们认知世界的一把重要钥匙。 数学的尽头是哲学:数学是一种思维逻辑的集合。它是人类根据观察到的自然现象和自身的体验,用思维来做逻辑的推导和延伸总结出的自然运动规律的抽象结果。而哲学也就是基于人的思维和经验总结自然界和人类社会发展中的规律的学说,即研究该如何去思考和解释所观察和体验到的现象的方法论。","s":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":227},{"i":233,"t":"推荐采用这种方式进行部署，较为方便，采用GitHub提供的托管工具Githubpages进行静态页面部署。 GitHub Pages 是由 GitHub 提供的静态网站托管服务。它允许用户直接从他们的 GitHub 存储库托管他们的网站。GitHub Pages 支持多种静态网站生成器，并提供免费的 HTTPS 加密、自定义域和通过 Git 的版本控制。用户还可以使用 Jekyll，一个流行的静态网站生成器，在 GitHub Pages 上构建他们的网站。另外，GitHub Pages 还内置了持续集成和部署支持，使得每次您将更改推送到存储库时都可以轻松更新您的网站。 但是有一个弊端就是，单纯的Githubpages部署，每次添加新的笔记都得重新推送上远程仓库。","s":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":230},{"i":235,"t":"首先就是在远程建立一个仓库，仓库名为username.github.io，其中设置为你个人的用户名。","s":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":230},{"i":237,"t":"打开本地写好的项目终端进行远程连接仓库。 git initgit remote add origin \"你的仓库地址\"git add .git commit -m\"提交信息\"git push -u origin main 上述就是将你的代码远程上传到远程仓库了","s":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":230},{"i":239,"t":"本地首先要进行配置，将你的Docsaururs配置文件进行修改，将config配置中的代码段修改 url: 'https://username.github.io',baseUrl: '/', 改为自己的仓库地址所对应的那个名称就好，这也是部署后的访问地址。 执行 npm run buildgit checkout -b gh-pagesxcopy /E/Y build .rmdir /S /Q buildgit add .git commit -m \"Deploy Docusaurus to GitHub Pages\" git push origin gh-pages 上述代码就是将你的build后的代码上传到gh-pages分支上，接下来你只需要在仓库的setting-> pages->Branch设置为gh-pages分支来作为你的pages读取静态文件的地址即可。 部署成功后，即可通过上述配置文件中的https://username.github.io访问到你的网站。","s":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":230},{"i":242,"t":"自行购买云服务器和域名，然后对域名进行解析，同时在服务器中下载Nginx并且进行配置。 在Nginx配置文件Nginx.conf中对你的域名和端口进行配置。例如 user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events { worker_connections 1024;}http { server { listen 端口号 default_server; listen [::]:端口号 default_server; root /usr/workspace/RachelNooteBook/usr/workspace/RachelNooteBook/web; index index.html; server_name 域名 www.域名; location / { proxy_pass http://服务器IP; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main;} 通过上述配置好你的Nginx。","s":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":230},{"i":244,"t":"在项目根目录下创建文件夹.github/workflows，并且在里面创建nodejs.yml文件，进行自动化部署的配置。 name: FTP Deploy on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: '16.x' - name: Install FTP client run: sudo apt-get update && sudo apt-get install -y lftp - name: Build run: npm install && npm run build - name: FTP Deploy uses: SamKirkland/FTP-Deploy-Action@4.0.0 with: server: 域名 username: ${{ secrets.FTP_USER }} //用户名 password: ${{ secrets.FTP_PWD }} //密码 server-dir: FTP路径 local-dir: build/ 其中的secrets.FTP_USER要在github设置中进行配置，添加action的变量，然后设置好你的FTP的用户名和密码即可。同时要在FTP服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到FTP服务器上。 接下来创建一个简单的.git-ftp-include文件 加入代码： !build/ 这个是默认让其读取build目录下的静态文件。 通过这样配置，推送到远程后，就会自动化的使用action进行部署到你的服务器中，然后通过你的域名就可以正常访问。","s":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":230},{"i":247,"t":"tip Collect the technical stack required for backend development. 一个简单的后端菜汪，总得写点什么来记录下自己学了什么对吧。","s":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":245},{"i":249,"t":"Web 软件工程课设 接口文档","s":"接口文档","u":"/docs/Web/软件工程课设/接口文档","h":"","p":248},{"i":252,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"student\", //用户名 \"password\": \"\", //密码 \"remember\": false //下次自动登录} 返回参数： { \"userName\": \"student\", //用户名 \"imagePath\": \"\", //头像}","s":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":248},{"i":254,"t":"接口地址：/api/student/user/register 请求参数： { \"userName\": \"student5\", //用户名 \"password\": \"123456\", //密码 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":248},{"i":256,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":248},{"i":258,"t":"接口地址：/api/student/dashboard/index 请求参数：无 返回参数： { \"fixedPaper\": [ //固定试卷 { \"id\": 2399, //试卷Id \"name\": \"test33333\", //试卷名称 \"limitStartTime\": null, //考试开始时间 \"limitEndTime\": null //考试结束时间 } ], \"timeLimitPaper\": [] //时段试卷}","s":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":248},{"i":260,"t":"接口地址：/api/student/dashboard/task 请求参数：无 返回参数： [ { \"id\": 8, //任务id \"title\": \"2021-04-25作业\", //任务标题 \"paperItems\": [ { \"examPaperId\": 181, //任务试卷id \"examPaperName\": \"第一次出卷\", //任务试卷名称 \"examPaperAnswerId\": 579, //答卷id \"status\": 2 //答卷状态 } ] } ]","s":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":248},{"i":262,"t":"接口地址：/api/student/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": \"18\", //学科id \"name\": \"英语\" //学科名称 } ]}","s":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":248},{"i":264,"t":"接口地址：/api/student/exam/paper/pageList 请求参数： { \"paperType\": 1, //试卷类型 \"subjectId\": 158, //学科id \"pageIndex\": 1, //页数 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 2520, //试卷id \"name\": \"生理卫生\", //试卷名称 \"questionCount\": 1, //题目数 \"score\": 20, //试卷分数 \"createTime\": \"2021-05-31 13:34:49\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 158, //学科 \"subjectName\": \"英语\", //学科 \"paperType\": 1, //试卷类型 \"frameTextContentId\": 9016 //试卷内容 } ] }}","s":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":248},{"i":266,"t":"接口地址：/api/student/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"测试一\", //试卷名称 \"suggestTime\": 22, //建议时长 \"limitDateTime\": null, //考试时间限制 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 8, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //标题 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //顺序 } ] } ], \"score\": \"10\" }}","s":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":248},{"i":268,"t":"接口地址：/api/student/exampaper/answer/answerSubmit 请求参数： { \"questionId\": null, \"doTime\": 14, //耗时 \"answerItems\": [ { \"questionId\": 4, //题目id \"content\": null, //答题内容 \"contentArray\": [ //填空题内容 \"测试\", \"1\" ], \"completed\": true, //是否完成 \"itemOrder\": 1 //题目序号 } ], \"id\": 4 //试卷id} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"2\" //试卷得分}","s":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":248},{"i":270,"t":"接口地址：/api/student/exampaper/answer/read/4 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"paper\": { //试卷信息 \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 4, //试卷类型 \"name\": \"限时考试二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": [ //考试时间限制 \"2021-06-22 00:00:00\", \"2021-08-06 00:00:00\" ], \"titleItems\": [ { \"name\": \"一、完成题目\", //标题 \"questionItems\": [ //题目列表 { \"id\": 8, //题目id \"questionType\": 4, //题目类型 \"subjectId\": 1, //学科 \"title\": \"曲项向天歌红掌拨清波\", //题目标题 \"gradeLevel\": 1, //年级 \"items\": [ //题目选项 { \"prefix\": \"1\", //选项标识 \"content\": \"鹅鹅鹅\", //选项内容 \"score\": \"2\" //选项分数 }, { \"prefix\": \"2\", \"content\": \"白毛浮绿水\", \"score\": \"2\" } ], \"analyze\": \"咏鹅\", //解析 \"correctArray\": [ //标答 \"鹅鹅鹅\", \"白毛浮绿水\" ], \"correct\": \"\", //标答 \"score\": \"4\", //题目分数 \"difficult\": 4, //题目难度 \"itemOrder\": 1 //题目顺序 } ] } ], \"score\": \"18\" //试卷分数 }, \"answer\": { //答卷信息 \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分 \"answerItems\": [ //答题信息 { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"0\", //得分 \"questionScore\": \"4\" //题目分数 } ] } }}","s":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":248},{"i":272,"t":"接口地址：/api/student/exampaper/answer/edit 请求参数： { \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分数 \"answerItems\": [ { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题目顺序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"4\", //得分 \"questionScore\": \"4\" //题目分数 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"16\" //试卷得分}","s":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":248},{"i":274,"t":"接口地址：/api/student/exampaper/answer/pageList 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 6204, \"list\": [ { \"id\": 6534, //试卷id \"createTime\": \"2021-06-01 17:56:38\", //创建时间 \"userScore\": \"0\", //考试分数 \"subjectName\": \"数学\", //考试学科 \"subjectId\": 129, //学科id \"questionCount\": 1, //题目数量 \"questionCorrect\": 0, //题目正确数 \"paperScore\": \"3\", //试卷总分 \"doTime\": \"4 秒\", //耗时 \"paperType\": 7, //试卷类型 \"systemScore\": \"0\", //系统批改得分 \"status\": 2, //试卷状态 \"paperName\": \"智能训练试卷 - 1845\", //试卷名称 \"userName\": null //用户名 } ] }}","s":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":248},{"i":276,"t":"接口地址：/api/student/question/answer/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 17002, \"list\": [ { \"id\": 24928, //题目id \"questionType\": 1, //题型 \"createTime\": \"2021-06-02 16:07:11\", //创建时间 \"subjectName\": \"语文\", //学科 \"shortTitle\": \"666\" //题干 } ] }}","s":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":248},{"i":278,"t":"接口地址：/api/student/question/answer/select/25067 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"questionVM\": { \"id\": 507, //题目id \"questionType\": 1, //题目类型 \"subjectId\": 46, //学科id \"title\": \"111\", //题干 \"gradeLevel\": 12, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项 \"content\": \"A\", //选项内容 \"score\": null //选项分数 } ], \"analyze\": \"D\", //解析 \"correctArray\": null, //标答 \"correct\": \"D\", //标答 \"score\": \"2\", //分数 \"difficult\": 3, //难度 \"itemOrder\": null //排序 }, \"questionAnswerVM\": { //用户答案 \"id\": 25067, \"questionId\": 507, //题目id \"doRight\": false, //是否正确 \"content\": \"A\", //用户答案 \"itemOrder\": 2, //排序 \"contentArray\": null, //用户答案 \"score\": \"0\", //得分 \"questionScore\": \"2\" //题目分数 } }}","s":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":248},{"i":280,"t":"接口地址：/api/student/user/log 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 1812, \"userId\": 1, //用户id \"userName\": \"student\", //用户名 \"realName\": \"Test\", //用户真实姓名 \"content\": \"student 登录了学之思开源考试系统\", //动态内容 \"createTime\": \"2021-06-08 17:12:50\" //创建时间 } ]}","s":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":248},{"i":282,"t":"接口地址：/api/student/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 }}","s":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":248},{"i":284,"t":"接口地址：/api/student/user/update 请求参数： { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":248},{"i":286,"t":"接口地址：/api/student/user/message/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 5, \"list\": [ { \"id\": 8, \"title\": \"rwerw\", //消息标题 \"messageId\": 10, \"content\": \"sfsdf\", //消息内容 \"readed\": true, //是否已读 \"createTime\": \"2021-06-11 16:32:40\", //创建时间 \"sendUserName\": \"admin\" //发送人 } ] }}","s":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":248},{"i":288,"t":"接口地址：/api/student/user/message/read/14 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":248},{"i":290,"t":"接口地址：/api/student/user/message/unreadCount 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 0 //未读消息数量}","s":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":248},{"i":293,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"admin\", //用户名 \"password\": \"\", //密码 \"remember\": false //记住我} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": null, \"userUuid\": null, \"userName\": \"admin\", //用户名 \"password\": null, \"realName\": null, \"age\": null, \"sex\": null, \"birthDay\": null, \"userLevel\": null, \"phone\": null, \"role\": null, \"status\": null, \"imagePath\": null, \"createTime\": null, \"modifyTime\": null, \"lastActiveTime\": null, \"deleted\": null, \"wxOpenId\": null }}","s":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":248},{"i":295,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":248},{"i":297,"t":"接口地址：/api/admin/dashboard/index 请求参数：无 返回参数： { \"examPaperCount\": 2413, //试卷总数 \"questionCount\": 1025, //题目总数 \"doExamPaperCount\": 6148, //总答卷数 \"doQuestionCount\": 23945, //总题数 \"mothDayUserActionValue\": [ //活跃度 85 ], \"mothDayDoExamQuestionValue\": [ //月做题数 22 ], \"mothDayText\": [ //本月天数 \"1\" ]}","s":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":248},{"i":299,"t":"接口地址：/api/admin/user/page/list 请求参数： { \"userName\": \"\", //用户名 \"role\": 1, //角色 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 81, //总数 \"list\": [ { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } ] }}","s":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":248},{"i":301,"t":"接口地址：/api/admin/user/select/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 }}","s":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":248},{"i":303,"t":"接口地址：/api/admin/user/edit 请求参数： { \"id\": null, \"userName\": \"testzz\", //用户名 \"password\": \"123456\", //密码 \"realName\": \"tesx\", //真实姓名 \"role\": 1, //角色 \"status\": 1, //状态 \"age\": \"\", //年龄 \"sex\": \"\", //性别 \"birthDay\": null, //生日 \"phone\": null, //手机号 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 109, \"userUuid\": \"321dec89-0656-4736-ae4c-e2b07f4fcc67\", //用户id \"userName\": \"testzz\", //用户名 \"password\": \"\" //密码 \"realName\": \"tesx\", //真实姓名 \"age\": null, //年龄 \"sex\": null, //性别 \"birthDay\": null, //生日 \"userLevel\": 1, //年级 \"phone\": null, //手机号 \"role\": 1, //角色 \"status\": 1, //状态 \"imagePath\": null, //头像 \"createTime\": 1624538837259, //创建日期 \"modifyTime\": null, //修改时间 \"lastActiveTime\": 1624538837259, //最后活动时间 \"deleted\": false, //是否删除 \"wxOpenId\": null //微信openId }}","s":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":248},{"i":305,"t":"接口地址：/api/admin/user/delete/3 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":248},{"i":307,"t":"接口地址：/api/admin/user/changeStatus/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 2}","s":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":248},{"i":309,"t":"接口地址：/api/admin/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 13, //学科id \"name\": \"语文\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\", //年级名称 \"itemOrder\": null, //排序 \"deleted\": false //是否删除 } ]}","s":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":248},{"i":311,"t":"接口地址：/api/admin/education/subject/page 请求参数： { \"level\": null, //年级 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } ] }}","s":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":248},{"i":313,"t":"接口地址：/api/admin/education/subject/select/2 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 }}","s":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":248},{"i":315,"t":"接口地址：/api/admin/education/subject/edit 请求参数： { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 2, //年级 \"levelName\": \"二年级\" //年级名称} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":248},{"i":317,"t":"接口地址：/api/admin/education/subject/delete/3 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":248},{"i":319,"t":"接口地址：/api/admin/exam/paper/page 请求参数： { \"id\": null, \"level\": null, //年级 \"subjectId\": null, //学科 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页数量} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 9, \"list\": [ { \"id\": 13, //试卷id \"name\": \"中级任务二\", //试卷名称 \"questionCount\": 5, //题目总数 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:31\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 13 //试卷内容 } ] }}","s":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":248},{"i":321,"t":"接口地址：/api/admin/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"语文试卷\", //试卷名称 \"suggestTime\": 20, //考试时间 \"limitDateTime\": null, //限时考试 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 5, //题目类型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //题目选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答数组 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"10\" //试卷总分 }}","s":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":248},{"i":323,"t":"接口地址：/api/admin/exam/paper/edit 请求参数： { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ //题目列表 { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //试卷总分} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //题序 }}","s":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":248},{"i":325,"t":"接口地址：/api/admin/exam/paper/delete/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":248},{"i":327,"t":"接口地址：/api/admin/exam/paper/taskExamPage 请求参数： { \"subjectId\": null, //学科 \"level\": 1, //年级 \"paperType\": 6, //试卷类型 \"pageIndex\": 1, //页面 \"pageSize\": 5 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 13, \"name\": \"任务试卷五\", //试卷名称 \"questionCount\": 2, //题目总数 \"score\": 60, //试卷分数 \"createTime\": \"2021-08-02 14:36:26\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 26 //试卷内容 } ] }}","s":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":248},{"i":329,"t":"接口地址：/api/admin/question/page 请求参数： { \"id\": null, \"questionType\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 7, \"list\": [ { \"id\": 13, \"questionType\": 5, //题型 \"textContentId\": null, \"createTime\": \"2021-01-21 11:45:57\", //创建时间 \"subjectId\": 1, //学科 \"createUser\": 2, //创建人 \"score\": \"10\", //得分 \"status\": 1, //状态 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"analyzeTextContentId\": null, //解析 \"difficult\": 3, //难度 \"shortTitle\": \"默写咏鹅\" //题干 } ] }}","s":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":248},{"i":331,"t":"接口地址：/api/admin/question/select/508 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 508, //题目id \"questionType\": 5, //题型 \"subjectId\": 4, //学科 \"title\": \"<p>什么是快乐星球？</p>\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"照抄即可\", //解析 \"correctArray\": null, //标答 \"correct\": \"什么是快乐星球\", //正确答案 \"score\": \"5\", //题目分数 \"difficult\": 5, //难度 \"itemOrder\": null }}","s":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":248},{"i":333,"t":"接口地址：/api/admin/question/edit 请求参数： { \"id\": 13, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //正确答案 \"score\": 10, //题目分数 \"difficult\": 3, //难度 \"itemOrder\": null} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":248},{"i":335,"t":"接口地址：/api/admin/question/delete/7 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":248},{"i":337,"t":"接口地址：/api/admin/task/page 请求参数： { \"gradeLevel\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, //任务id \"title\": \"中级任务\", //任务标题 \"gradeLevel\": 1, //年级 \"createUserName\": \"admin\", //创建人用户名 \"createTime\": \"2021-01-21 11:50:24\", //创建时间 \"deleted\": false //是否删除 } ] }}","s":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":248},{"i":339,"t":"接口地址：/api/admin/task/select/22 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 12, //年级 \"title\": \"考试\", //任务标题 \"paperItems\": [ { \"id\": 592, //试卷id \"name\": \"考试\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 275, //试卷分数 \"createTime\": \"2021-08-12 15:02:50\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 46, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 2897, //试卷内容 \"allClasses\": null } ] }}","s":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":248},{"i":341,"t":"接口地址：/api/admin/task/edit 请求参数： { \"id\": 13, \"gradeLevel\": 1, \"title\": \"中级任务\", \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 1, //年级 \"title\": \"中级任务\", //任务标题 \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] }}","s":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":248},{"i":343,"t":"接口地址：/api/admin/task/delete/1 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":248},{"i":345,"t":"接口地址：/api/admin/message/page 请求参数： { \"sendUserName\": null, \"pageIndex\": 4, \"pageSize\": 10} 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 36, \"list\": [ { \"id\": 13, //消息id \"title\": \"你好，同学！\", //消息标题 \"content\": \"考试请不要作弊\", //消息内容 \"sendUserName\": \"admin\", //发送人用户名 \"receives\": \"student\", //接收人用户名 \"receiveUserCount\": 1, //接收人数量 \"readCount\": 1, //已读数量 \"createTime\": \"2020-09-22 11:37:49\" //创建时间 } ] }}","s":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":248},{"i":347,"t":"接口地址：/api/admin/message/send 请求参数： { \"title\": \"全校师生请注意\", //消息标题 \"content\": \"大家好\", //消息内容 \"receiveUserIds\": [ //接收人 1 ]} 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":248},{"i":349,"t":"接口地址：/api/admin/examPaperAnswer/page 请求参数： { \"subjectId\": null, //学科 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 4, \"list\": [ { \"id\": 13, \"createTime\": \"2021-07-07 14:03:02\", //提交时间 \"userScore\": \"16\", //用户得分 \"subjectName\": \"语文\", //学科名称 \"subjectId\": 1, //学科Id \"questionCount\": 5, //题目数量 \"questionCorrect\": 4, //正确题目数 \"paperScore\": \"18\", //试卷总分 \"doTime\": \"14 秒\", //耗时 \"paperType\": 4, //试卷类型 \"systemScore\": \"2\", //自动批改得分 \"status\": 2, //答卷状态 \"paperName\": \"限时考试二\", //试卷名称 \"userName\": \"student\" //用户名 } ] }}","s":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":248},{"i":351,"t":"接口地址：/api/admin/user/event/page/list 请求参数： { \"userId\": null, \"userName\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 68, \"list\": [ { \"id\": 13, //日志id \"userId\": 2, //用户id \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"content\": \"admin 登录了学之思开源考试系统\", //日志内容 \"createTime\": \"2021-08-24 20:05:02\" //创建时间 } ] }}","s":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":248},{"i":353,"t":"接口地址：/api/admin/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //用户年级 \"imagePath\": null //头像 }}","s":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":248},{"i":355,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, //用户id \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户标识 \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //生日 \"phone\": \"11\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-17 11:28:52\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":248},{"i":357,"t":"接口地址：/api/admin/user/selectByUserName 请求参数： student //用户名 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"name\": \"student\", //用户名 \"value\": 1 //用户id } ]}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":248},{"i":359,"t":"接口地址：/api/admin/upload/configAndUpload 请求参数：无 返回参数： { \"original\": \"头像.jpg\", \"name\": \"头像.jpg\", \"url\": \"http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_\", \"size\": 19665, \"type\": \".jpg\", \"state\": \"SUCCESS\"}","s":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":248},{"i":361,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2021-09-07 18:56:07\", //出生日期 \"phone\": \"2112112\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-31 10:08:03\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":248},{"i":365,"t":"依据个人理解就是，当服务器突然发生问题的时候，正在处理的数据和已经存储好的数据不会被损坏，当服务器启动的时候，通过持久化工具进行数据恢复，避免了数据的丢失和系统的开销。Redis中由两种持久化：RDB和AOF： RDB：类似快照技术，将当前的数据快照存留成rdb文件 AOF：将数据操作指令打入队列中","s":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":362},{"i":367,"t":"指定时间间隔内，执行数据集的时间点快照 实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。Redis的数据都是在内存中，RDB保存备份的是后，执行的是全量快照，把内存的数据记录到磁盘中去。","s":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":370,"t":"Redis7以前的配置情况： Redis7的配置","s":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":362},{"i":373,"t":"修改redis.conf配置中的save《seconds》《changes》项目 修改dump文件保存路径 修改dump文件名称 触发备份 恢复 修改redis.conf配置 修改文件路径 修改文件名称：修改为xxxxx.rdb即可，我修改为dbfiename dump6379.rdb 恢复：将备份文件移动到redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb文件的，但是这个文件是空的，没有什么意义。","s":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":362},{"i":375,"t":"分为两种：save和bgsave，其中默认使用bgsave。 save：在程序执行构成会阻塞当前的redis服务器，直到持久化工作完成，也就是过程不可被其他命令终端，线上禁止使用 bgsave：Redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork一个子进程，由该进程进行复制持久化过程。","s":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":362},{"i":378,"t":"以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 默认不开启，一旦开启就是使用aof，命令为：appendonly yes。其保存的是appendonly.aof文件。工作流程如下： 1 Client作为命令的来源，会有多个源头以及源源不断的请求命令。 2 在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。 3 AOF缓冲会根据AOF缓冲区同步文件的三种写回策略将命令写入磁盘上的AOF文件。 4 随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称AOF重写)，从而起到AOF文件压缩的目的。 5 当Redis Server 服务器重启的时候会从AOF文件载入数据。","s":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":362},{"i":380,"t":"Always：同步写回，每个写命令执行完立刻同步写到磁盘 everysec：每秒写回 No：操作系统决定何时xiehui","s":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":362},{"i":383,"t":"开启AOF： 配置appendfsync为自己要的时间，一般就是everysec 配置保存路径与RDB差不多： aof文件有三种： 在redis7对应配置好:","s":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":362},{"i":385,"t":"启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集 重写原理: 1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。 2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。 3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中 4：当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中 5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似","s":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":362},{"i":387,"t":"在同时开启RDB和AOF时，重启时只会加在AOF不会加在RDB。 RDB能够在指定时间间隔内对数据进行快照。 AOF对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以Reids协议追加保存每次写的操作到文件末尾。 推荐使用RDB和AOF混合方式 1 开启混合方式设置 设置aof-use-rdb-preamble的值为 yes yes表示开启，设置为no表示禁用 2 RDB+AOF的混合方式---------> 结论：RDB镜像做全量持久化，AOF做增量持久化 先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。----》AOF包括了RDB头部+AOF混写","s":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":362},{"i":391,"t":"在Redis官网中下载Redis7版本压缩包后，使用XFTP软件将本地的Redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar -zxvf redis-7.0.0.tar.gz) 进入redis-7.0.0目录下，执行make && make install命令 默认安装路径在/root/usr/local/bin下，ll列举redis-7.0.0中的文件，有两个为redis-cli和redis-server这两个分别是客户端和服务器启动命令。 需要对redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredis中，同时进行配置","s":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":388},{"i":393,"t":"默认daemonize no 改为daemonize yes 默认protected-mode yes改为protected-mode no 默认bind 127.0.0.1改为 直接注释掉(默认bind 127.0.0.1只能本机访问)或改成本机IP地址，否则影响远程IP连接 添加redis密码改为 requirepass 你自己设置的密码 记得重启才会有效","s":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":388},{"i":395,"t":"cd 进入/myredis目录下 redis-server /myredis/redis.conf redis-cli 即可进入 也可以redis-cli -a password进入","s":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":388},{"i":397,"t":"单实例关闭：redis-cli -a password shutdown 多实例关闭：指定端口关闭：redis-cli -p 6379 shutdown","s":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":388},{"i":400,"t":"string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M","s":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":388},{"i":403,"t":"EX：Key在多少秒之后过期 PX：Key在多少毫秒后过期 NX：当Key不存在的时候，才创建Key，等效于setnx XX：当Key存在的时候，覆盖Key","s":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":388},{"i":405,"t":"只有是数字才能进行加减 INCR key：递增 INCRBY key increment：增加指定的整数 DECR key：递减数值 DECRBY key decrement：减少指定的整数","s":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":388},{"i":407,"t":"List（列表），Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)","s":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":388},{"i":409,"t":"一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加；如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。 它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。","s":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":388},{"i":411,"t":"Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）","s":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":388},{"i":413,"t":"KV模式不变，但是V是一个键值对，Map<String,Map<Object,Object>>","s":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":388},{"i":415,"t":"Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)","s":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":388},{"i":418,"t":"Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232−12^{32} - 1232−1","s":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":388},{"i":420,"t":"在Set的基础上，每个Value的值前加一个Score分数值，之前Set是K1,V1,Zset会变成K1,V1,Score1","s":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":388},{"i":423,"t":"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括添加地理位置的坐标。获取地理位置的坐标。计算两个位置之间的距离。根据用户给定的经纬度坐标来获取指定范围内的地理位置集合","s":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":388},{"i":425,"t":"移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？ 地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆 使用如下SQL即可：select taxi from position where x0-r < x < x0 + r and y0-r < y < y0+r、 但是会有如下问题： 查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的 这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。 精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差、","s":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":388},{"i":427,"t":"GEOADD：多个经度、维度、位置名称添加到Key中 GEOPOS：从键里面返回所有给定位置元素的位置 GEODIST：返回两个给定位置之间的距离 GEORADIUS：以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素 GEORAIUSBYMEMBER，跟上条类似 GEOHASH：返回一个或者多个位置元素的GeoHash","s":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":388},{"i":429,"t":"HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。","s":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":388},{"i":431,"t":"Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。 简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。 而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。","s":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":388},{"i":433,"t":"一句话总结就是Redis版本的MQ消息中间件+阻塞队列。 实现消息队列，支持消息的持久化，支持自动生成全局唯一 ID，支持ACK确认消息模式，支持消费组模式，让消息队列更加稳定和可靠。 看起来就是一个消息链表，将所有的消息都串起来，每个消息都有一个唯一的ID和对应的内容 1 Message Content 消息内容 2 Consumer group 消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者 3 Last_delivered_id 游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。 4 Consumer 消费者，消费组中的消费者 5 Pending_ids 消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢","s":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":388},{"i":435,"t":"队列相关指令 消费组相关指令 具体实例参见脑图","s":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":388}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,1.094]],["t/5",[1,0.228,2,6.034,3,6.034,4,6.034,5,6.034]],["t/7",[1,0.223,2,5.9,3,5.9,4,5.9,5,5.9,6,7.144]],["t/10",[1,0.315,7,4.582,8,5.548,9,3.713,10,5.548]],["t/12",[0,0.859,1,0.293,2,5.209,3,5.209,4,5.209,5,5.209,11,6.306,12,1.857]],["t/15",[0,1.152,1,0.218,7,5.773,13,6.989,14,6.989,15,2.188]],["t/20",[1,0.239,15,2.395,16,5.609]],["t/22",[0,0.952,1,0.295,17,5.773,18,6.256]],["t/24",[0,1.132,1,0.26,17,6.177,18,5.142,19,5.745,20,5.745,21,5.745,22,5.142,23,5.745,24,5.745,25,5.745,26,5.745]],["t/27",[1,0.295,17,5.773,27,6.989,28,6.989]],["t/29",[1,0.228,29,7.305,30,6.539,31,7.305,32,7.305]],["t/32",[1,0.279,33,5.122]],["t/35",[0,0.919,1,0.299,34,3.881,35,3.511,36,3.881,37,2.409,38,4.705,39,3.667,40,3.881,41,5.575,42,3.881,43,3.473,44,6.143,45,3.881,46,5.697,47,3.881,48,3.005,49,2.845]],["t/38",[0,0.952,1,0.264,12,2.491,50,6.989,51,6.989]],["t/40",[1,0.245,52,7.837]],["t/42",[0,1.199,12,2.201,53,7.475]],["t/45",[1,0.251]],["t/47",[0,0.601,1,0.296,9,2.952,12,1.299,38,3.643,54,4.411,55,4.411,56,4.411,57,4.411,58,4.411,59,4.411,60,4.411,61,4.411,62,4.411,63,4.411,64,4.411,65,4.411,66,4.411,67,1.843,68,4.411,69,4.411,70,4.411,71,2.238,72,4.411]],["t/49",[1,0.239,73,7.652,74,7.652]],["t/51",[1,0.279,33,5.122]],["t/54",[1,0.275,75,3.702,76,7.475]],["t/56",[0,1.104,1,0.17,9,5.426,12,2.129,77,4.505,78,5.454,79,5.454,80,4.838,81,5.454,82,5.454,83,5.454,84,4.882,85,5.454,86,5.454]],["t/58",[0,0.995,9,5.815,12,1.634,77,4.582,80,5.471,84,6.542,87,5.548,88,5.548,89,5.548,90,5.548,91,5.548,92,5.548]],["t/60",[1,0.251]],["t/62",[1,0.245,93,7.837]],["t/65",[0,1.068,1,0.306,75,4.264]],["t/67",[75,3.978]],["t/71",[1,0.3,77,6.034]],["t/73",[94,7.475,95,7.475,96,7.475,97,7.475]],["t/75",[0,1.043,1,0.264,12,1.755,67,2.49,98,5.957,99,5.957,100,5.957,101,5.957,102,4.92,103,3.834,104,2.951,105,5.957]],["t/78",[1,0.268,106,7.144,107,7.144,108,7.144,109,5.531]],["t/80",[0,0.876,1,0.251,67,2.688,75,3.186,80,5.38,110,6.432,111,6.432,112,6.432,113,6.432]],["t/82",[1,0.291,71,3.399,114,5.533,115,4.911,116,6.699,117,5.996]],["t/84",[1,0.284,114,5.773,115,5.124,117,6.256,118,6.989]],["t/86",[1,0.268,114,5.9,115,5.237,119,7.144,120,7.144]],["t/89",[1,0.268,121,7.144,122,6.394,123,7.144,124,7.144]],["t/91",[0,1.137,1,0.261,125,6.841,126,6.841,127,6.841,128,6.841]],["t/93",[0,1.132,1,0.298,75,4.523,122,3.516,129,3.928,130,3.928,131,3.928,132,3.928,133,3.928,134,3.928,135,3.928,136,3.928,137,3.516,138,3.928,139,3.928,140,3.928]],["t/95",[1,0.279,33,5.122]],["t/97",[1,0.251]],["t/99",[0,0.947,1,0.29,12,0.999,35,1.764,37,2.105,39,2.183,67,1.417,141,3.392,142,6.229,143,3.392,144,3.392,145,3.392,146,3.392,147,3.776,148,3.392,149,1.914,150,3.392,151,3.392,152,2.486,153,3.036,154,3.036,155,3.392,156,3.989,157,3.776,158,2.801,159,3.392,160,4.255,161,2.036,162,5.152,163,3.392,164,3.036,165,3.392,166,3.392]],["t/101",[0,1.003,1,0.306,12,1.336,35,1.497,37,1.786,39,1.852,41,4.638,43,2.576,44,4.638,48,4.348,67,1.203,147,2.11,149,1.624,152,2.11,153,2.576,154,2.576,156,4.348,157,2.11,158,2.377,160,3.747,167,2.878,168,2.878,169,2.878,170,2.878,171,2.878,172,4.06,173,2.576,174,2.011,175,2.377]],["t/103",[0,0.669,1,0.298,7,2.635,12,0.94,35,1.66,37,1.981,39,2.053,149,1.801,152,2.339,156,3.807,157,3.604,158,2.635,160,2.635,174,2.229,176,4.916,177,3.19,178,3.19,179,3.19,180,3.19,181,3.19,182,3.19,183,3.19,184,3.19,185,3.19,186,4.916,187,3.19,188,3.19,189,4.916,190,4.916,191,3.19,192,3.19,193,3.19,194,3.19,195,3.19,196,3.19,197,3.19,198,3.19]],["t/105",[1,0.251]],["t/107",[0,0.472,1,0.3,12,1.02,16,4.626,35,1.802,37,2.151,39,2.23,109,2.682,149,1.955,157,2.54,161,2.079,174,2.421,199,3.464,200,3.464,201,3.464,202,3.464,203,3.464,204,2.682,205,3.464,206,2.23,207,4.053,208,3.101,209,3.101,210,3.464,211,3.464,212,3.464,213,2.54,214,3.464,215,3.464,216,3.464,217,3.464,218,3.464,219,3.464,220,3.464]],["t/109",[0,0.601,1,0.294,12,0.818,35,2.855,37,2.739,41,5.162,48,5.619,49,2.037,67,1.844,149,1.568,161,1.668,173,3.949,221,2.779,222,2.779,223,2.779,224,2.779,225,2.779,226,2.779,227,2.779,228,2.779,229,3.949,230,4.412,231,6.25,232,2.779,233,4.412,234,2.779,235,2.779,236,2.779,237,2.779,238,2.779,239,2.779,240,2.779,241,2.779,242,2.779,243,2.779,244,2.779,245,2.779]],["t/111",[]],["t/113",[0,0.946,1,0.271,12,1.201,35,2.121,37,2.531,39,2.624,109,4.572,149,2.301,161,3.545,174,2.849,207,4.572,208,3.649,209,3.649,246,4.077,247,4.077,248,4.077,249,4.077,250,4.077,251,4.077,252,4.077,253,5.905,254,4.077,255,4.077,256,4.077,257,4.077,258,4.077,259,4.077,260,4.077]],["t/115",[0,0.658,1,0.306,9,2.537,12,0.678,37,2.999,39,3.109,67,0.962,71,1.168,149,2.139,156,2.935,157,1.688,174,1.609,207,3.741,261,2.303,262,2.303,263,2.303,264,2.303,265,2.303,266,2.303,267,2.303,268,2.061,269,2.061,270,2.061,271,2.061,272,2.303,273,2.303,274,2.303,275,2.303,276,2.303,277,2.303,278,2.303,279,2.303,280,2.303,281,4.324,282,2.303,283,2.303,284,2.303,285,2.303,286,2.303,287,1.783,288,1.141,289,2.061,290,2.303,291,2.303,292,2.303,293,2.303,294,2.303,295,1.541,296,2.303]],["t/118",[0,0.366,1,0.296,16,3.148,35,3.189,37,2.666,44,2.219,48,3.326,67,1.123,109,2.08,149,2.424,152,1.969,229,3.844,281,6,288,1.33,297,2.686,298,2.686,299,2.686,300,2.686,301,2.686,302,2.686,303,2.686,304,2.686,305,2.686,306,2.686,307,2.686,308,2.686,309,2.686,310,2.686,311,2.686,312,2.686,313,2.686,314,4.295,315,4.295,316,2.686,317,2.686,318,2.686,319,2.686,320,2.686,321,2.686,322,2.686,323,2.686,324,2.686,325,2.686,326,2.686,327,2.686]],["t/120",[0,0.783,1,0.292,9,5.566,12,1.157,67,1.642,71,1.993,75,1.945,161,2.358,328,3.928,329,3.928,330,3.928,331,3.928,332,3.928,333,3.928,334,3.928,335,3.928,336,3.516,337,3.928,338,3.516,339,3.928,340,3.928,341,3.928,342,3.928,343,3.928,344,3.928,345,3.928]],["t/122",[1,0.307,12,0.949,164,5.402,174,5.394,175,7.302,346,8.511,347,3.222,348,6.035,349,3.222]],["t/124",[0,1.018,12,2.201,67,3.124,71,3.792]],["t/126",[1,0.302]],["t/128",[1,0.275,33,5.003,350,6.173]],["t/130",[0,0.743,1,0.31,12,1.078,35,2.838,49,2.684,75,1.813,161,4.339,351,3.661,352,3.661,353,3.277,354,3.661,355,3.661,356,3.661,357,3.661,358,4.506,359,3.661,360,3.661,361,3.277,362,3.661,363,3.661]],["t/132",[1,0.271,364,7.305,365,7.305,366,7.305]],["t/134",[0,0.827,1,0.242,161,3.643,350,6.399,367,6.069,368,6.069,369,6.069,370,6.069,371,6.069,372,5.432,373,6.069,374,6.069]],["t/136",[0,1.077,1,0.276,12,0.601,161,4.367,287,6.25,372,1.827,375,2.041,376,2.041,377,2.041,378,2.041,379,2.041,380,1.686,381,2.041,382,8.216,383,2.041,384,2.041,385,2.041,386,4.433,387,2.041,388,2.041,389,6.27,390,6.995,391,2.041,392,2.041,393,2.041,394,2.041,395,2.041,396,2.041,397,5.194,398,2.041,399,2.041,400,1.827,401,2.041,402,2.041,403,2.041,404,2.041,405,1.827,406,2.041,407,2.041]],["t/138",[0,0.655,1,0.301,35,3.063,49,3.523,75,2.916,149,1.749,161,3.534,172,2.773,287,3.722,350,2.559,353,2.773,358,2.559,380,3.97,400,4.302,405,2.773,408,3.099,409,3.099,410,4.302,411,2.773,412,3.099,413,3.099,414,3.099,415,4.302,416,2.773,417,3.099,418,3.099,419,3.099,420,3.099,421,3.099,422,3.099,423,3.099]],["t/140",[1,0.303,35,1.995,75,3.32,149,2.164,161,3.39,287,5.19,358,3.167,361,3.432,410,3.432,411,3.432,415,3.432,416,5.054,424,3.835,425,3.835,426,3.835,427,3.835,428,3.835,429,3.835,430,3.835,431,5.647,432,5.647]],["t/142",[1,0.279,33,5.122]],["t/145",[0,0.842,1,0.292,147,4.535,433,6.186,434,6.186,435,6.186,436,6.186,437,6.186,438,6.186]],["t/147",[439,7.837,440,7.837]],["t/149",[1,0.283]],["t/151",[0,1.094]],["t/153",[0,0.783,1,0.281,35,3.296,39,1.549,49,4.214,75,3.367,80,4.801,149,2.218,204,1.863,207,1.863,441,1.863,442,1.863,443,1.987,444,1.987,445,2.406,446,2.406,447,2.406,448,2.406,449,2.406,450,2.406,451,2.406,452,2.406,453,2.406,454,2.153,455,2.406,456,4.98,457,4.98,458,4.457,459,2.406,460,3.929,461,5.749,462,2.406,463,3.929,464,3.929,465,2.406,466,2.406,467,3.929,468,2.406,469,2.406,470,2.406,471,2.406,472,3.929]],["t/155",[0,1.011,1,0.295,9,4.307,268,4.117,269,4.117,270,4.117,271,4.117,288,2.278,473,4.599,474,4.599,475,4.599,476,4.599,477,4.599,478,4.599,479,4.599,480,4.599,481,4.117,482,4.599,483,4.599]],["t/158",[1,0.283]],["t/160",[1,0.302]],["t/162",[1,0.314]],["t/164",[0,0.762,1,0.265,12,1.116,35,3.825,67,1.584,441,5.155,442,6.357,443,6.479,444,6.073,484,3.79,485,3.79,486,3.79,487,3.79,488,3.79,489,3.79,490,3.79,491,5.598,492,3.79,493,3.79,494,3.79,495,3.79]],["t/167",[1,0.289,80,4.89,496,5.355]],["t/169",[0,1.042,1,0.239,497,6.849]],["t/171",[12,2.104,497,6.394,498,7.144,499,7.144,500,7.144,501,7.144]],["t/173",[1,0.279,33,5.122]],["t/176",[1,0.311]],["t/178",[1,0.315]],["t/182",[1,0.316,502,5.849,503,5.849]],["t/184",[0,0.842,1,0.292,12,1.822,67,2.585,71,3.138,504,6.186,505,6.186,506,6.186,507,6.186]],["t/186",[1,0.279,33,5.122]],["t/188",[0,0.842,1,0.309,508,6.186,509,6.186,510,6.186]],["t/190",[1,0.283]],["t/192",[1,0.311,481,5.432,511,5.432,512,6.069,513,6.069]],["t/194",[0,0.912,1,0.299,137,5.996,511,5.996,514,6.699]],["t/197",[0,1.014,1,0.298,35,2.659,75,4.539,175,2.772,441,2.599,442,2.599,515,3.356,516,3.356,517,3.356,518,3.356,519,3.356,520,3.356,521,3.356,522,3.356,523,3.356,524,3.004,525,3.004,526,3.356,527,3.356,528,3.004,529,3.356,530,3.356]],["t/199",[1,0.25,35,3.832,380,3.745,441,4.933,442,6.186,444,3.745,524,4.059,525,4.059,528,4.059,531,4.535,532,7.989,533,4.535,534,4.535,535,6.372,536,4.535,537,4.535,538,6.372,539,4.535]],["t/202",[0,0.477,1,0.298,12,1.554,149,1.976,152,3.869,204,2.712,213,3.869,454,3.134,540,3.502,541,3.134,542,3.502,543,4.724,544,3.502,545,3.502,546,3.502,547,3.502,548,3.502,549,3.502,550,3.502,551,3.134,552,3.134,553,5.278,554,3.502,555,3.502,556,3.134,557,3.134,558,3.134,559,3.134,560,3.502,561,3.502,562,3.134,563,3.502]],["t/204",[1,0.273,204,3.511,206,2.919,213,3.324,541,4.059,543,4.059,551,4.059,552,5.703,556,4.059,557,4.059,558,4.059,559,5.703,562,4.059,564,4.535,565,4.535,566,6.372,567,6.372,568,4.535,569,4.535,570,4.535,571,4.059,572,4.535,573,4.535]],["t/206",[0,0.912,1,0.279,571,5.996,574,6.699,575,6.699,576,6.699,577,6.699]],["t/208",[578,7.837,579,6.473]],["t/210",[579,6.473,580,7.837]],["t/212",[0,0.488,1,0.311,12,1.355,16,1.576,67,1.496,71,2.335,75,1.065,147,1.576,288,3.381,295,2.397,579,1.775,581,2.15,582,2.15,583,2.15,584,2.15,585,2.15,586,2.15,587,2.15,588,4.432,589,2.15,590,3.58,591,2.484,592,5.367,593,3.58,594,4.601,595,1.576,596,2.15,597,2.15,598,2.15,599,2.15,600,2.15,601,2.15,602,2.15]],["t/215",[603,8.032]],["t/217",[1,0.311,289,5.432,604,6.069,605,6.069,606,6.069]],["t/219",[1,0.29,607,5.191,608,5.191,609,5.191,610,5.191,611,5.191,612,5.191,613,5.191,614,5.191,615,5.191,616,5.191,617,5.191,618,5.191,619,5.191,620,5.191,621,5.191,622,5.191]],["t/221",[623,8.032]],["t/223",[1,0.239,496,5.609,624,7.652]],["t/226",[1,0.228,496,5.355,625,7.305,626,7.305,627,7.305]],["t/229",[1,0.281,496,5.015,628,6.841,629,6.841,630,6.841,631,6.841]],["t/233",[1,0.287,632,5.364,633,8.22,634,7.673,635,5.364,636,4.153,637,5.364,638,5.364]],["t/235",[639,8.032]],["t/237",[1,0.236,636,6.494,640,5.849,641,5.849,642,6.772,643,6.249,644,5.236,645,5.849,646,4.831,647,5.849,648,4.831]],["t/239",[1,0.239,16,3.027,22,3.696,147,3.027,633,3.696,634,6.26,636,4.615,642,3.696,643,3.41,644,3.696,646,3.41,649,4.129,650,3.696,651,4.129,652,3.696,653,3.696,654,5.96,655,4.129,656,5.96,657,4.129,658,4.129,659,3.696,660,4.129,661,4.129,662,3.696,663,4.129,664,4.129,665,4.129,666,4.129,667,4.129,668,4.129]],["t/242",[1,0.279,80,2.115,458,2.828,648,4.03,669,4.879,670,3.159,671,3.159,672,3.159,673,3.159,674,3.159,675,3.159,676,3.159,677,3.159,678,2.316,679,4.879,680,4.879,681,3.159,682,3.159,683,3.159,684,3.159,685,3.159,686,3.159,687,3.159,688,3.159,689,4.879,690,4.879,691,3.159,692,3.159,693,4.879,694,2.828,695,3.159,696,3.159,697,3.159,698,2.828,699,3.159,700,3.159,701,3.159,702,3.159,703,1.687,704,3.159,705,3.159,706,3.159,707,3.159,708,3.159,709,3.159]],["t/244",[1,0.267,115,1.937,443,2.182,636,2.046,646,2.182,648,2.182,652,3.794,653,5.436,659,5.951,662,5.436,678,3.107,694,2.365,710,2.642,711,3.217,712,6.649,713,2.642,714,2.642,715,2.642,716,2.642,717,2.642,718,5.436,719,2.642,720,2.642,721,4.239,722,2.642,723,2.642,724,2.642,725,4.75,726,2.365,727,4.239,728,4.239,729,2.642,730,2.642,731,2.642,732,2.642,733,1.341,734,2.642,735,1.769,736,2.642,737,4.239,738,2.642,739,2.642,740,2.642]],["t/247",[1,0.214,496,5.015,741,6.841,742,6.841,743,6.841,744,6.841,745,6.841,746,6.841]],["t/249",[1,0.279,747,7.652]],["t/252",[1,0.308,206,3.511,733,3.667,735,3.651,748,4.882,749,4.838,750,4.882,751,3.274]],["t/254",[0,0.984,1,0.298,15,1.707,733,2.767,735,3.651,752,5.454,753,5.454,754,4.882,755,3.274,756,1.514,757,1.492,758,1.514]],["t/256",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,759,5.874]],["t/258",[1,0.308,15,2.142,711,2.434,760,5.029,761,5.029,762,2.176,763,5.029,764,5.029,765,5.029,766,5.029,767,5.029]],["t/260",[1,0.305,12,1.336,703,2.421,762,2.54,768,4.535,769,3.035,770,2.421,771,2.054,772,4.535,773,4.535,774,3.745,775,4.535,776,4.535,777,4.535,778,4.535,779,4.535]],["t/262",[0,0.755,1,0.306,711,2.684,756,1.54,757,1.518,758,1.54,762,2.323,780,5.548,781,3.877]],["t/264",[0,1.039,1,0.305,12,0.921,104,1.55,711,1.514,756,0.868,757,0.856,758,0.868,762,1.883,771,1.417,782,3.129,783,2.816,784,2.519,785,4.842,786,1.67,787,1.67,788,1.716,789,1.67,790,3.129,791,2.014,792,1.67,793,2.422,794,1.36,795,3.129,796,2.8,797,3.129,798,2.186,799,2.422,800,2.293,801,3.129]],["t/266",[0,1.005,1,0.311,15,1.301,67,1.078,104,2.059,288,1.277,711,2.011,756,0.716,757,0.705,758,0.716,762,1.904,769,2.782,770,1.377,783,1.5,784,2.162,792,2.219,802,2.579,803,1.5,804,1.997,805,1.997,806,1.997,807,1.997,808,1.997,809,1.601,810,1.548,811,1.726,812,1.726,813,1.726,814,1.66,815,1.66,816,1.548]],["t/268",[0,0.926,1,0.305,12,1.157,15,1.799,71,2.916,213,2.879,595,2.879,756,1.09,757,1.074,758,1.09,762,2.161,816,2.358,817,3.928,818,4.45,819,2.879,820,3.244,821,2.284,822,3.041,823,3.928]],["t/270",[0,0.884,1,0.311,12,1.282,15,0.855,71,2.754,75,0.775,595,1.148,711,1.322,756,0.435,757,0.428,758,0.435,762,2.065,769,2.914,770,0.836,771,1.238,781,1.094,783,0.911,784,1.421,792,2.898,793,1.212,803,0.911,804,1.212,805,1.212,806,1.212,807,1.212,808,1.212,809,0.972,810,0.94,811,1.048,812,1.048,813,1.048,814,1.008,815,1.008,816,1.64,818,1.212,819,1.148,820,1.293,821,2.114,822,1.212,824,1.566,825,1.566,826,1.696,827,2.256,828,1.048,829,2.256,830,1.566,831,1.293,832,1.293]],["t/272",[0,0.865,1,0.305,12,1.031,15,1.652,71,3.223,595,2.567,756,0.972,757,0.958,758,0.972,762,2.412,769,3.533,792,2.818,816,2.102,818,2.712,819,2.567,820,2.892,821,2.036,822,2.712,831,2.892,832,2.892,833,3.502,834,3.134]],["t/274",[0,0.769,1,0.305,12,0.855,15,0.909,67,1.213,71,1.473,75,2.797,103,1.869,104,1.438,588,2.398,703,1.55,733,1.473,756,0.806,757,0.794,758,0.806,762,1.795,771,1.315,783,1.689,784,1.51,786,1.55,787,1.55,788,1.593,789,1.55,791,1.869,794,1.262,799,2.248,819,2.128,826,1.802,835,2.904,836,2.904,837,2.904,838,2.904,839,2.599,840,2.904,841,2.599,842,2.599,843,2.599,844,2.599,845,2.904]],["t/276",[0,0.926,1,0.305,104,1.945,756,1.09,757,1.074,758,1.09,762,1.827,771,1.779,786,2.097,787,2.097,788,2.155,789,2.097,794,1.708,799,3.041,809,2.438,826,2.438,846,3.928,847,3.928,848,3.928,849,3.516,850,3.928,851,3.516,852,3.928]],["t/278",[0,0.685,1,0.306,12,1.482,15,1.815,67,1.021,75,1.21,104,1.21,206,1.572,338,3.56,756,0.678,757,0.668,758,0.678,762,2.03,770,1.304,784,1.271,786,1.304,787,1.304,792,2.686,809,1.516,810,1.466,811,1.635,812,1.635,813,1.635,814,1.572,815,1.572,816,2.387,818,1.891,821,2.313,822,1.891,829,2.017,831,2.017,832,2.017,853,2.442,854,2.442,855,3.977,856,2.186,857,2.442,858,1.891,859,2.442,860,2.442]],["t/280",[0,0.851,1,0.301,733,2.238,749,4.182,756,1.224,757,1.207,758,1.224,762,1.986,771,1.998,794,1.918,821,2.565,826,2.738,828,2.952,861,4.411,862,4.411,863,3.948,864,2.565,865,3.643,866,4.411]],["t/282",[0,1.027,1,0.295,103,1.957,703,1.623,733,1.543,749,2.035,751,1.825,755,1.825,756,0.844,757,0.832,758,0.844,762,0.966,769,2.035,771,1.377,781,2.124,794,1.322,826,1.887,827,2.511,864,1.768,865,2.511,867,3.04,868,1.887,869,2.721,870,2.721,871,2.721,872,2.721,873,2.721,874,1.887,875,1.887,876,1.887,877,1.887,878,3.472,879,4.065,880,1.887,881,2.721,882,1.887,883,2.124,884,2.721,885,1.887,886,2.721,887,2.721]],["t/284",[0,1.027,1,0.293,15,0.952,103,1.957,703,1.623,733,1.543,749,2.035,751,1.825,755,1.825,756,0.844,757,0.832,758,0.844,762,0.966,769,2.035,771,1.377,781,2.124,794,1.322,826,1.887,827,2.511,864,1.768,865,2.511,868,1.887,869,2.721,870,2.721,871,2.721,872,2.721,873,2.721,874,1.887,875,1.887,876,1.887,877,1.887,878,3.472,879,4.065,880,1.887,881,2.721,882,1.887,883,2.124,884,2.721,885,1.887,886,2.721,887,2.721,888,3.04]],["t/286",[0,0.756,1,0.303,102,3.094,104,2.749,213,2.746,288,1.855,756,1.04,757,1.025,758,1.04,762,1.191,769,2.507,770,2,771,1.697,786,2,787,2,788,2.055,789,2,794,1.628,821,2.178,826,2.325,889,3.746,890,3.746,891,3.746,892,3.746,893,3.746,894,3.746,895,3.353,896,2.411]],["t/288",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,897,6.563]],["t/290",[0,0.876,1,0.295,75,3.186,756,1.785,757,1.759,758,1.785,898,6.432]],["t/293",[0,0.452,1,0.282,15,2.964,206,2.138,703,1.774,733,2.573,735,3.394,748,2.973,750,2.973,751,1.994,755,1.994,756,0.922,757,0.909,758,0.922,762,1.056,794,1.444,864,1.932,868,2.062,874,2.062,875,2.062,876,2.062,877,2.062,880,2.062,882,2.062,885,2.062,896,3.264,899,2.572,900,2.973]],["t/295",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,759,5.874]],["t/297",[0,0.626,1,0.309,791,2.96,805,3.561,901,4.599,902,4.599,903,4.599,904,4.599,905,4.599,906,4.599,907,4.599,908,4.599,909,4.599,910,4.599,911,4.599,912,4.599]],["t/299",[0,0.942,1,0.303,15,2.023,104,1.238,703,1.334,733,2.056,751,1.5,755,1.5,756,0.694,757,0.684,758,0.694,762,1.288,771,2.315,786,1.334,787,1.334,788,1.371,789,1.334,794,1.086,826,3.173,864,1.453,868,1.551,874,1.551,875,2.516,876,1.551,877,1.551,880,1.551,882,1.551,885,1.551,913,2.499,914,2.499,915,2.237,916,2.237,917,2.237,918,2.237,919,2.237,920,2.237,921,1.935,922,3.572,923,3.627,924,2.237]],["t/301",[0,0.885,1,0.298,15,2.208,703,1.593,733,1.514,751,1.791,755,1.791,756,0.828,757,0.816,758,0.828,762,1.484,771,2.604,794,1.297,826,3.569,864,1.735,868,1.852,874,1.852,875,1.852,876,1.852,877,1.852,880,1.852,882,1.852,885,1.852,915,2.671,916,2.671,917,2.671,918,2.671,919,2.671,920,2.671,921,2.311,922,4.017,923,4.178,924,2.671,925,2.984]],["t/303",[0,0.958,1,0.303,15,2.455,206,1.482,703,2.024,733,1.923,735,2.537,751,1.382,754,2.061,755,2.275,756,0.639,757,0.63,758,0.639,762,1.536,794,1.001,864,2.204,868,1.43,874,2.353,875,2.353,876,2.353,877,2.353,880,2.353,882,1.43,885,1.43,899,1.783,900,2.061,926,2.303,927,3.791,928,3.791,929,2.303,930,2.303,931,2.303,932,2.303,933,2.303,934,2.303,935,3.791,936,2.303]],["t/305",[0,0.859,1,0.3,15,1.974,756,1.75,757,1.725,758,1.75,937,6.306]],["t/307",[0,0.894,1,0.289,12,1.933,756,1.822,757,1.795,758,1.822,938,6.563]],["t/309",[0,0.876,1,0.307,15,1.44,206,2.96,591,2.129,711,2.226,756,1.277,757,1.258,758,1.277,762,2.046,803,2.675,816,2.761,899,3.561,939,4.599,940,3.561]],["t/311",[0,0.966,1,0.307,12,1.248,15,1.326,104,2.099,591,1.961,711,2.05,756,1.176,757,1.159,758,1.176,762,1.347,786,2.262,787,2.262,788,2.325,789,2.262,803,3.531,940,3.281,941,4.237]],["t/313",[0,0.963,1,0.306,591,2.442,711,2.553,756,1.464,757,1.443,758,1.464,762,1.677,803,3.068,940,4.085,942,5.276]],["t/315",[0,0.718,1,0.303,12,1.554,15,1.651,591,2.442,711,2.553,756,1.464,757,1.443,758,1.464,762,1.677,803,3.068,940,4.085,943,5.276]],["t/317",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,944,6.563]],["t/319",[0,0.812,1,0.304,12,0.93,15,1.866,30,2.828,103,2.033,104,1.565,288,1.565,295,2.115,591,2.258,711,1.529,756,0.877,757,0.864,758,0.877,762,1.895,771,1.431,783,1.837,784,2.538,786,1.687,787,1.687,788,1.733,789,1.687,791,2.033,792,1.687,794,1.373,798,2.208,800,2.316,803,1.837,922,2.208,945,3.159,946,2.609,947,3.159]],["t/321",[0,1.002,1,0.311,15,1.293,67,1.069,104,2.046,288,1.267,591,1.911,711,1.998,756,0.71,757,0.7,758,0.71,762,1.895,770,1.366,783,1.488,784,2.149,792,2.205,793,1.981,803,1.488,804,1.981,806,1.981,807,1.981,808,1.981,809,1.588,810,1.536,811,1.712,812,1.712,813,1.712,814,1.647,815,1.647,816,1.536,948,2.558]],["t/323",[0,0.899,1,0.313,12,0.714,15,1.567,67,1.013,75,1.201,295,1.623,591,1.83,711,1.913,756,0.379,757,0.374,758,0.379,762,1.836,770,1.294,781,1.694,783,1.41,784,2.057,792,2.673,793,1.877,803,1.41,804,1.877,806,1.877,807,1.877,808,1.877,809,1.505,810,1.455,811,1.623,812,1.623,813,1.623,814,1.56,815,1.56,816,1.455,821,1.41,829,2.002,949,1.367,950,2.424,951,2.424,952,2.424]],["t/325",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,953,6.563]],["t/327",[0,0.987,1,0.305,12,1.437,15,0.989,288,1.565,295,3.266,591,1.462,711,1.529,756,0.877,757,0.864,758,0.877,762,1.004,771,1.431,783,2.837,784,2.538,786,1.687,787,1.687,788,1.733,789,1.687,791,2.033,792,1.687,794,1.373,798,2.208,800,2.316,803,1.837,828,2.115,849,2.828,954,3.159,955,3.159,956,3.159,957,3.159]],["t/329",[0,0.876,1,0.303,12,0.863,15,2.324,67,1.224,103,1.886,104,2.279,288,1.451,588,2.42,591,1.356,703,1.564,756,0.813,757,0.801,758,0.813,762,1.463,771,1.327,784,2.393,786,1.564,787,1.564,788,1.607,789,1.564,792,1.564,794,1.274,798,2.047,803,1.704,809,2.856,814,1.886,815,1.886,851,2.622,922,2.047,958,2.93,959,2.93,960,2.93,961,2.93]],["t/331",[0,0.762,1,0.305,15,1.752,71,1.923,288,3.297,756,1.052,757,1.037,758,1.052,762,1.78,770,2.023,784,1.971,792,2.023,809,2.353,810,2.275,811,2.537,812,2.537,813,2.537,814,2.439,815,2.439,816,2.275,962,3.79,963,3.79,964,3.79]],["t/333",[0,0.888,1,0.308,15,2.042,67,1.53,104,1.813,288,1.813,591,1.694,756,1.016,757,1.001,758,1.016,762,1.734,770,1.955,784,1.904,792,1.955,809,2.273,810,2.197,811,2.45,812,2.45,813,2.45,814,2.356,815,2.356,816,2.197,965,3.661]],["t/335",[0,0.894,1,0.289,15,2.054,756,1.822,757,1.795,758,1.822,966,6.563]],["t/337",[0,0.907,1,0.302,12,1.116,15,1.186,103,2.439,104,1.877,206,2.439,591,1.754,756,1.052,757,1.037,758,1.052,762,1.78,770,2.023,771,1.717,786,2.023,787,2.023,788,2.079,789,2.023,794,1.647,810,3.36,896,2.439,899,2.934,922,2.648,967,3.79,968,3.79,969,3.79]],["t/339",[0,0.457,1,0.304,12,0.988,15,1.05,288,1.662,295,2.247,591,1.553,711,1.624,756,0.932,757,0.918,758,0.932,762,2.2,770,1.792,771,1.52,774,2.772,783,1.952,784,1.746,791,2.16,792,1.792,794,1.459,798,2.345,800,2.46,810,2.015,828,2.247,856,3.004,858,3.957,970,3.356,971,3.356,972,3.356,973,3.356,974,3.356,975,3.356]],["t/341",[0,0.856,1,0.305,12,1.143,103,2.498,288,1.923,295,2.598,591,2.637,711,1.878,756,0.658,757,0.648,758,0.658,762,2.266,770,2.073,771,1.758,774,3.206,783,2.257,784,2.019,791,2.498,792,2.073,794,1.687,798,2.712,800,2.846,810,2.33,858,3.006,922,2.712,946,3.206,976,2.371,977,3.882]],["t/343",[0,0.859,1,0.3,15,1.974,756,1.75,757,1.725,758,1.75,978,6.306]],["t/345",[0,0.865,1,0.305,15,1.096,71,1.777,104,1.734,591,1.621,749,2.344,756,0.972,757,0.958,758,0.972,762,1.678,770,1.87,786,1.87,787,1.87,788,1.921,789,1.87,794,1.522,805,2.712,821,2.036,879,2.447,895,4.724,896,2.254,979,3.502,980,3.502,981,3.502,982,3.502,983,3.502,984,3.502,985,3.502]],["t/347",[0,0.942,1,0.31,15,1.599,756,1.418,757,1.397,758,1.418,770,2.728,821,2.971,986,5.109,987,5.109]],["t/349",[0,0.774,1,0.304,12,1.355,15,0.917,71,2.882,104,1.451,288,1.451,591,1.356,595,2.148,703,1.564,733,1.487,749,1.961,756,0.813,757,0.801,758,0.813,762,1.463,771,1.327,781,2.047,783,1.704,784,2.393,786,1.564,787,1.564,788,1.607,789,1.564,791,1.886,794,1.274,799,2.269,819,2.148,834,2.622,839,2.622,841,2.622,842,2.622,843,2.622,844,2.622,883,3.215,988,2.93,989,2.93]],["t/351",[0,0.743,1,0.3,12,1.078,15,1.708,104,1.813,591,1.694,733,2.768,756,1.016,757,1.001,758,1.016,762,2.073,771,1.658,786,1.955,787,1.955,788,2.008,789,1.955,794,1.591,821,2.129,828,2.45,863,4.884,864,2.129,896,3.512,990,3.661,991,3.661,992,3.661,993,3.661]],["t/353",[0,0.802,1,0.301,15,1.843,67,1.295,591,1.434,703,1.654,733,1.572,751,1.86,755,1.86,756,0.86,757,0.848,758,0.86,762,0.985,794,1.347,864,1.802,868,1.924,874,1.924,875,1.924,876,1.924,877,1.924,878,3.523,879,3.358,880,1.924,882,1.924,883,3.358,885,1.924,896,1.994,921,2.399,994,3.099,995,2.559,996,2.559,997,2.559,998,2.559,999,2.559,1000,2.559,1001,2.559,1002,2.559]],["t/355",[0,0.783,1,0.298,15,1.799,67,1.247,102,2.465,591,1.381,703,1.593,733,1.514,751,1.791,755,1.791,756,0.828,757,0.816,758,0.828,762,1.484,771,1.352,794,1.297,828,1.997,864,1.735,868,1.852,874,1.852,875,1.852,876,1.852,877,1.852,878,3.422,879,3.261,880,1.852,882,1.852,883,3.261,885,1.852,896,1.921,995,2.465,996,2.465,997,2.465,998,2.465,999,2.465,1000,2.465,1001,2.465,1002,2.465,1003,2.671,1004,2.984,1005,2.984]],["t/357",[0,0.973,1,0.304,711,2.595,749,4.784,756,1.489,757,1.467,758,1.489,762,1.705,1006,5.364,1007,4.801]],["t/359",[1,0.262,643,4.831,650,5.236,711,2.83,1008,5.849,1009,8.386,1010,5.849,1011,5.849,1012,5.849,1013,5.849,1014,5.849,1015,5.849]],["t/361",[0,0.787,1,0.297,15,1.81,67,1.259,591,1.394,703,1.608,733,1.528,751,1.808,755,1.808,756,0.836,757,0.824,758,0.836,762,0.957,771,2.13,794,1.309,796,2.696,828,2.016,864,1.752,868,1.87,874,1.87,875,1.87,876,1.87,877,1.87,878,2.208,879,3.285,880,1.87,882,1.87,883,3.285,885,1.87,896,1.939,921,2.332,995,2.488,996,2.488,997,2.488,998,2.488,999,2.488,1000,2.488,1001,2.488,1002,2.488,1003,2.696,1016,3.012,1017,3.012]],["t/365",[1018,7.652,1019,7.652,1020,5.609]],["t/367",[1,0.239,1021,7.652,1022,7.652]],["t/370",[1023,8.101]],["t/373",[1,0.276,1024,6.563,1025,8.138,1026,6.563,1027,6.563,1028,6.563,1029,6.563]],["t/375",[1030,7.652,1031,7.652,1032,7.652]],["t/378",[0,0.782,12,1.692,67,2.401,71,2.915,288,2.846,678,5.482,726,5.142,1020,4.212,1033,5.745,1034,5.745,1035,5.745,1036,4.349,1037,5.745,1038,5.745,1039,5.745]],["t/380",[1040,7.652,1041,7.652,1042,7.652]],["t/383",[1020,6.367,1023,6.539,1043,7.305,1044,6.539]],["t/385",[1,0.218,1020,5.124,1045,6.989,1046,6.989,1047,6.989,1048,6.989,1049,6.989]],["t/387",[0,0.769,1,0.231,12,1.662,718,5.052,1020,4.138,1044,6.617,1050,5.645,1051,5.645,1052,5.645,1053,5.645,1054,5.052,1055,5.645,1056,5.645,1057,5.645,1058,5.645,1059,5.645]],["t/391",[1,0.19,678,4.449,725,5.432,1036,4.506,1060,6.069,1061,6.069,1062,6.069,1063,6.069,1064,6.069,1065,6.069,1066,6.069,1067,6.069,1068,6.069]],["t/393",[1,0.239,1036,3.464,1054,5.332,1069,7.656,1070,5.957,1071,7.656,1072,5.957,1073,7.656,1074,5.957,1075,5.957,1076,5.957]],["t/395",[1,0.201,678,4.715,735,4.305,1036,5.098,1077,6.432,1078,6.432,1079,6.432,1080,7.193]],["t/397",[735,4.484,1036,4.793,1080,7.377,1081,8.242,1082,6.699,1083,6.699]],["t/400",[1084,7.837,1085,7.837]],["t/403",[1086,7.475,1087,7.475,1088,7.475,1089,7.475]],["t/405",[1,0.201,38,7.584,1090,6.432,1091,6.432,1092,6.432,1093,6.432,1094,6.432,1095,6.432]],["t/407",[0,0.973,1,0.223,1096,7.144,1097,5.9,1098,6.394,1099,5.9]],["t/409",[1,0.245,1100,7.837]],["t/411",[0,0.797,1,0.287,1007,5.236,1036,4.4,1097,4.831,1099,4.831,1101,8.386,1102,5.236,1103,5.849]],["t/413",[1104,8.032]],["t/415",[0,0.811,1,0.279,1036,3.464,1097,4.92,1098,5.332,1099,4.92,1102,5.332,1105,6.852,1106,5.957,1107,5.957,1108,5.332]],["t/418",[1,0.257,1036,3.896,1105,5.996,1108,5.996,1109,6.699,1110,6.699,1111,6.699,1112,6.699]],["t/420",[1113,8.032]],["t/423",[1,0.239,1036,4.45,1114,7.652]],["t/425",[1,0.3,80,3.169,115,3.471,336,7.286,946,5.423,1115,4.734,1116,4.734,1117,4.734,1118,4.734,1119,4.734,1120,4.734,1121,6.566,1122,4.734,1123,4.734]],["t/427",[1124,7.144,1125,7.144,1126,7.144,1127,7.144,1128,7.144,1129,7.144]],["t/429",[1,0.306,858,4.296,1036,3.226,1130,9.029,1131,5.548,1132,5.548]],["t/431",[1,0.299,698,7.077,1036,5.29,1133,5.191,1134,5.191,1135,5.191,1136,6.992]],["t/433",[0,0.618,1,0.273,12,1.336,67,1.895,71,2.301,288,2.246,757,1.24,762,1.442,789,2.421,821,2.637,1137,4.535,1138,4.535,1139,6.372,1140,4.535,1141,4.535,1142,4.535,1143,7.366,1144,4.535,1145,4.535,1146,4.535,1147,4.535,1148,4.535,1149,4.535,1150,4.535]],["t/435",[1,0.295]]],"invertedIndex":[["",{"_index":1,"t":{"5":{"position":[[0,21]]},"7":{"position":[[122,45]]},"10":{"position":[[0,61],[62,5],[68,8],[77,5],[83,17],[101,11],[113,37],[151,4],[161,7],[169,3],[173,3],[177,3],[181,5],[187,21],[273,10]]},"12":{"position":[[0,12],[13,10],[24,13],[103,43],[154,28]]},"15":{"position":[[35,9]]},"20":{"position":[[8,9]]},"22":{"position":[[34,12],[47,32],[80,9],[90,5]]},"24":{"position":[[64,25],[90,24],[466,14]]},"27":{"position":[[67,15],[83,37],[121,34],[156,21]]},"29":{"position":[[184,26]]},"32":{"position":[[11,4],[16,2]]},"35":{"position":[[84,6],[135,1],[153,1],[162,1],[195,1],[202,1],[220,2],[246,1],[259,1],[270,1],[282,1],[288,1],[293,1],[295,1],[304,1]]},"38":{"position":[[6,14],[127,39]]},"40":{"position":[[84,5]]},"45":{"position":[[0,33]]},"47":{"position":[[23,1],[116,1],[122,2],[171,53],[225,6],[265,1],[347,1],[512,1],[537,2],[598,4],[603,5]]},"49":{"position":[[0,39]]},"51":{"position":[[11,7],[19,7]]},"54":{"position":[[0,12],[79,12]]},"56":{"position":[[73,2]]},"60":{"position":[[0,40]]},"62":{"position":[[76,9]]},"65":{"position":[[0,2],[3,2],[6,2],[9,5],[17,2],[20,1],[24,1],[32,1]]},"71":{"position":[[0,72],[73,11],[85,27],[113,29]]},"75":{"position":[[8,30],[59,1],[151,27]]},"78":{"position":[[0,22],[111,5]]},"80":{"position":[[111,3],[206,3]]},"82":{"position":[[0,7],[29,8],[38,5],[104,4]]},"84":{"position":[[0,22],[23,7],[52,14]]},"86":{"position":[[0,7],[29,36]]},"89":{"position":[[18,2],[26,1]]},"91":{"position":[[73,3],[77,12]]},"93":{"position":[[0,4],[194,2],[197,2],[200,2],[203,1],[231,3],[242,3],[246,9],[256,18],[275,32],[308,21],[392,4],[397,8],[486,7]]},"95":{"position":[[11,4],[16,6]]},"97":{"position":[[0,117]]},"99":{"position":[[215,21],[315,4],[504,1],[510,2],[545,1],[559,1],[572,1],[592,1],[600,1],[609,1],[617,1],[619,2],[797,2],[881,85]]},"101":{"position":[[0,104],[282,14],[297,4],[302,7],[381,1],[387,2],[405,1],[417,1],[426,1],[457,1],[464,1],[472,1],[487,1],[499,1],[505,1],[520,1],[531,1],[539,1],[549,2],[557,1],[564,2],[571,1],[576,1],[584,1],[593,1],[598,1],[606,2],[617,12],[678,58]]},"103":{"position":[[172,11],[258,15],[282,1],[301,1],[311,6],[324,1],[443,1],[456,10],[472,1],[480,4],[491,1],[503,2],[519,1],[535,1],[552,1],[560,1],[562,1],[564,2],[892,12]]},"105":{"position":[[0,57]]},"107":{"position":[[0,7],[8,13],[62,1],[69,1],[76,1],[123,1],[130,1],[149,1],[175,1],[188,2],[199,1],[207,14],[243,1],[251,1],[269,1],[271,2],[404,1],[490,2]]},"109":{"position":[[449,14],[464,8],[524,1],[544,1],[568,2],[595,10],[613,1],[639,2],[664,10],[683,1],[693,1],[702,1],[724,3],[777,1],[799,1],[867,5],[894,1],[905,5],[911,2],[1151,3],[1155,13]]},"113":{"position":[[309,1],[333,1],[348,1],[384,1],[389,1],[421,2],[571,3]]},"115":{"position":[[4,100],[113,21],[135,16],[152,18],[182,44],[279,7],[287,11],[392,18],[497,1],[526,2],[529,1],[558,2],[561,1],[584,2],[587,1],[614,2],[742,3],[782,20],[803,39],[889,1],[1000,1],[1008,24],[1043,1],[1099,2],[1156,12],[1180,1],[1188,12],[1203,1],[1208,32],[1241,1],[1243,1],[1250,1],[1257,1],[1265,8],[1274,31],[1306,5],[1381,1],[1394,2],[1435,2],[1560,3]]},"118":{"position":[[0,37],[228,3],[232,7],[240,15],[256,19],[290,1],[326,2],[438,1],[457,6],[469,1],[483,1],[491,1],[501,1],[512,2],[565,1],[585,1],[595,1],[597,11],[630,1],[662,1],[796,1],[882,2],[1008,2]]},"120":{"position":[[81,13],[95,13],[214,22],[237,23],[261,21],[283,13],[304,28],[648,14],[727,32],[804,18],[938,2],[946,37]]},"122":{"position":[[0,2],[3,5],[9,5],[15,3],[19,2],[22,2],[25,2],[28,4],[93,1],[95,4],[179,1],[181,2],[184,1],[186,1],[218,2],[221,2],[284,1],[286,2],[399,2],[402,4],[471,2],[474,1],[585,2],[702,1],[704,2],[804,1]]},"126":{"position":[[0,5],[6,31],[38,4],[43,46]]},"128":{"position":[[11,4],[16,2]]},"130":{"position":[[0,43],[44,4],[118,5],[124,5],[130,5],[136,5],[142,4],[183,1],[189,1],[202,2],[211,2],[216,2],[238,2],[251,2],[254,9],[274,1],[284,1],[292,1],[297,6],[306,1],[311,1],[313,1],[320,1],[346,13]]},"132":{"position":[[176,14],[201,3]]},"134":{"position":[[411,1],[452,11]]},"136":{"position":[[635,1],[675,12],[903,2],[923,1],[939,2],[959,1],[977,2],[999,1],[1285,6],[1749,2],[1779,2],[1805,1],[1832,1],[1837,2],[1878,1],[1885,1],[1927,1],[2113,1],[2494,1],[2504,1]]},"138":{"position":[[71,4],[82,1],[88,1],[101,1],[140,2],[153,6],[170,1],[189,1],[199,1],[203,1],[213,1],[224,6],[231,1],[233,2],[294,1],[300,1],[319,2],[349,2],[372,1],[382,1],[393,1],[435,2]]},"140":{"position":[[0,73],[333,4],[386,1],[392,1],[408,1],[421,1],[436,2],[441,2],[452,2],[486,2],[509,1],[514,19],[550,1],[564,15],[580,1],[589,1],[602,2]]},"142":{"position":[[11,4],[16,9]]},"145":{"position":[[2,42],[127,1],[145,1],[155,1],[180,1]]},"149":{"position":[[0,52],[53,49]]},"153":{"position":[[104,1],[133,1],[138,1],[140,1],[177,2],[269,2],[274,1],[300,1],[402,2],[407,1],[433,1],[438,1],[537,2],[542,1],[567,1],[711,1],[782,1],[788,18]]},"155":{"position":[[31,1],[52,3],[183,1],[204,2],[207,1],[228,2],[231,1],[254,2],[257,1],[284,2]]},"158":{"position":[[0,10],[11,87]]},"160":{"position":[[0,8],[9,57],[67,6],[74,54]]},"162":{"position":[[0,1],[2,2],[5,3],[9,2],[12,2],[15,2],[18,2],[21,2],[24,2]]},"164":{"position":[[0,32],[47,19],[142,1],[148,1],[175,1],[189,21],[253,1]]},"167":{"position":[[0,33],[111,27],[143,139]]},"169":{"position":[[0,16]]},"173":{"position":[[11,4],[16,8]]},"176":{"position":[[0,44],[45,38],[84,2],[87,4],[92,6],[99,20],[120,33]]},"178":{"position":[[0,17],[18,4],[23,40],[64,4],[69,24],[94,12],[107,17],[125,39],[165,14],[180,4],[185,11]]},"182":{"position":[[0,74],[75,5],[81,1],[83,4],[88,1],[90,2],[93,16],[110,16],[127,20],[148,4],[153,2],[156,2],[159,5],[196,21]]},"184":{"position":[[135,11],[147,7],[166,9],[176,10],[383,10]]},"186":{"position":[[11,4],[16,6]]},"188":{"position":[[0,13],[14,6],[21,14],[36,4],[56,14],[71,12],[84,3],[108,1],[205,14]]},"190":{"position":[[0,20],[21,30]]},"192":{"position":[[0,12],[13,2],[16,3],[20,4],[25,3],[29,1],[31,6],[38,7],[46,20],[96,1]]},"194":{"position":[[0,4],[5,5],[11,3],[15,1],[29,14]]},"197":{"position":[[207,1],[211,2],[225,1],[232,2],[339,7],[383,1],[387,1],[394,2],[399,1],[403,1],[410,2],[415,1],[419,1],[426,2],[431,1],[435,1],[442,2],[828,16]]},"199":{"position":[[0,6],[114,4],[210,5],[316,11]]},"202":{"position":[[7,45],[53,10],[64,25],[163,122],[286,32],[319,6],[326,4],[331,8],[396,1],[428,1],[457,1],[607,1],[635,1],[695,1],[717,1],[719,1],[721,2]]},"204":{"position":[[164,1],[195,1],[210,1],[302,1],[316,1],[344,1]]},"206":{"position":[[54,5],[60,28],[102,1]]},"212":{"position":[[0,26],[282,9],[292,12],[305,1],[309,1],[311,1],[315,1],[317,1],[321,1],[323,1],[327,1],[329,1],[333,1],[335,1],[339,1],[341,1],[345,1],[349,1],[351,1],[353,1],[355,1],[357,1],[359,1],[361,1],[371,3],[375,3],[379,3],[383,3],[387,3],[391,3],[397,1],[399,1],[417,3],[421,3],[425,3],[431,1],[469,3],[473,3],[491,3],[495,3],[499,3],[503,3],[507,3],[531,3],[535,3],[539,3],[543,3],[549,1],[551,1],[553,1],[555,1],[557,1],[570,3]]},"217":{"position":[[0,19],[20,9],[51,5],[80,17],[132,3],[136,48],[275,11],[287,15],[303,37],[341,104]]},"219":{"position":[[0,12],[102,1],[114,1],[173,66],[331,1],[394,65],[492,20]]},"223":{"position":[[4,11]]},"226":{"position":[[4,18]]},"229":{"position":[[58,171],[230,34],[265,134]]},"233":{"position":[[67,2],[77,23],[132,18],[157,10],[172,13],[246,41]]},"237":{"position":[[0,20],[111,19]]},"239":{"position":[[92,4],[97,32],[130,2],[341,1]]},"242":{"position":[[175,1],[207,1],[216,1],[225,3],[252,8],[378,2],[398,1],[400,1],[497,1],[499,1],[641,1],[685,1]]},"244":{"position":[[99,1],[106,1],[312,2],[375,2],[467,2],[480,3],[501,2],[504,5],[520,3],[540,2],[543,4],[728,5]]},"247":{"position":[[66,29]]},"249":{"position":[[4,6],[11,4]]},"252":{"position":[[21,5],[27,1],[52,5],[70,3],[74,4],[97,9],[107,5],[113,1],[138,5],[157,3],[161,5]]},"254":{"position":[[32,5],[38,1],[64,5],[92,4],[112,5],[118,5],[124,1],[148,5]]},"256":{"position":[[22,6],[29,5],[35,1],[59,5]]},"258":{"position":[[34,6],[41,5],[47,1],[63,1],[65,6],[72,1],[114,6],[145,8],[175,8],[184,1],[186,2],[207,2],[210,7]]},"260":{"position":[[33,6],[40,5],[46,1],[48,1],[91,6],[112,1],[114,1],[162,8],[171,8],[225,6],[232,1],[234,1],[236,1],[238,1]]},"262":{"position":[[41,6],[48,5],[54,1],[78,5],[96,1],[98,1],[127,4],[132,6],[139,1],[141,2]]},"264":{"position":[[38,5],[44,1],[62,6],[110,4],[130,7],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[239,7],[247,6],[274,5],[293,6],[337,6],[361,5],[385,4],[405,5],[411,4],[432,6],[466,6],[473,1],[475,1],[477,2]]},"266":{"position":[[38,6],[45,5],[51,1],[75,5],[93,1],[123,4],[144,4],[165,6],[180,6],[187,6],[213,6],[243,8],[266,1],[268,1],[278,8],[287,6],[311,1],[313,1],[350,4],[371,4],[385,7],[393,4],[415,4],[429,3],[433,4],[449,10],[460,4],[487,4],[503,5],[509,6],[516,6],[523,8],[532,4],[552,4],[573,4],[593,4],[598,1],[600,1],[602,1],[604,2],[621,2]]},"268":{"position":[[48,5],[54,1],[90,4],[110,1],[112,1],[155,6],[178,1],[180,7],[188,5],[198,2],[220,6],[242,6],[249,1],[251,2],[270,5],[276,1],[300,5],[322,7]]},"270":{"position":[[42,6],[49,5],[55,1],[79,5],[97,1],[108,1],[110,6],[145,4],[166,4],[187,6],[202,8],[211,6],[237,6],[261,1],[263,8],[317,2],[334,1],[336,1],[346,9],[356,4],[378,1],[380,6],[387,1],[424,6],[447,4],[461,13],[475,6],[499,4],[513,1],[515,6],[522,1],[539,6],[557,6],[564,6],[584,6],[591,2],[594,1],[622,8],[644,1],[646,2],[660,5],[666,4],[687,1],[689,4],[694,6],[701,7],[709,2],[723,3],[727,4],[746,6],[769,6],[791,6],[798,1],[800,1],[802,1],[804,2],[821,6],[828,2],[841,1],[843,6],[880,4],[899,4],[919,1],[921,6],[928,1],[987,6],[1011,6],[1034,4],[1055,1],[1057,6],[1064,5],[1074,2],[1091,4],[1117,6],[1124,1],[1126,1],[1128,1],[1130,2]]},"272":{"position":[[40,5],[46,1],[78,4],[97,5],[118,1],[120,1],[179,6],[203,6],[226,6],[249,1],[251,6],[258,5],[268,2],[285,4],[311,6],[318,1],[320,2],[323,5],[329,1],[353,5],[376,7]]},"274":{"position":[[44,5],[50,1],[68,4],[88,7],[96,5],[102,1],[126,5],[144,1],[169,1],[171,1],[229,6],[254,6],[276,5],[282,6],[334,6],[363,7],[390,6],[410,3],[414,4],[435,6],[462,8],[484,6],[504,7],[521,6],[545,5],[551,1],[553,1],[555,2]]},"276":{"position":[[39,5],[45,1],[63,4],[83,7],[91,5],[97,1],[121,5],[139,1],[165,1],[167,1],[208,4],[250,6],[272,5],[278,4],[303,4],[308,1],[310,1],[312,2]]},"278":{"position":[[47,5],[53,1],[71,4],[91,7],[99,5],[105,1],[129,5],[147,1],[163,1],[202,6],[249,4],[272,4],[286,1],[288,4],[293,1],[310,4],[331,6],[352,6],[359,1],[361,2],[380,4],[407,4],[428,4],[447,4],[468,4],[491,4],[496,2],[519,1],[521,6],[585,6],[608,6],[631,4],[658,6],[679,4],[705,6],[712,1],[714,2]]},"280":{"position":[[27,6],[34,5],[40,1],[64,5],[82,1],[84,1],[141,5],[167,8],[196,14],[211,6],[254,6],[261,1],[263,2]]},"282":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[172,5],[198,6],[216,4],[232,4],[247,4],[287,4],[314,5],[338,3],[429,4],[450,4],[472,6],[492,2],[495,6],[502,2]]},"284":{"position":[[30,5],[36,1],[122,5],[148,6],[166,4],[182,4],[197,4],[237,4],[264,5],[288,3],[379,4],[400,4],[422,6],[442,2],[445,7],[453,5],[459,1],[483,5]]},"286":{"position":[[36,5],[42,1],[60,4],[80,7],[88,5],[94,1],[118,5],[136,1],[158,1],[160,1],[189,6],[233,6],[256,6],[300,6],[331,5],[337,1],[339,1],[341,2]]},"288":{"position":[[39,6],[46,5],[52,1],[76,5]]},"290":{"position":[[43,6],[50,5],[56,1],[80,5],[100,9]]},"293":{"position":[[21,5],[27,1],[50,5],[68,3],[72,4],[95,6],[102,5],[108,1],[132,5],[150,1],[203,5],[470,2]]},"295":{"position":[[22,6],[29,5],[35,1],[59,5]]},"297":{"position":[[32,6],[39,5],[45,1],[71,6],[101,6],[134,6],[167,5],[199,1],[201,5],[210,2],[243,1],[245,6],[255,2],[273,1],[275,6],[286,2]]},"299":{"position":[[31,5],[37,1],[51,3],[55,5],[72,4],[93,4],[113,7],[121,5],[127,1],[151,5],[169,1],[184,4],[197,1],[199,1],[292,4],[297,5],[321,6],[341,4],[357,4],[375,4],[392,3],[396,6],[418,5],[465,8],[511,6],[555,6],[575,4],[596,4],[619,4],[624,1],[626,1],[628,2]]},"301":{"position":[[30,6],[37,5],[43,1],[67,5],[85,1],[178,4],[183,5],[207,6],[227,4],[243,4],[261,4],[278,3],[282,6],[304,5],[351,8],[397,6],[441,6],[461,4],[482,4],[505,4],[510,2]]},"303":{"position":[[26,5],[32,1],[68,5],[96,4],[121,6],[139,4],[157,4],[169,3],[173,4],[185,3],[189,4],[212,4],[232,5],[253,5],[259,5],[265,1],[289,5],[307,1],[401,5],[419,2],[422,4],[447,6],[467,4],[485,4],[508,4],[529,4],[549,5],[566,4],[584,4],[608,4],[642,6],[669,6],[709,8],[736,6],[771,2]]},"305":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"307":{"position":[[36,6],[43,5],[49,1],[73,5]]},"309":{"position":[[39,6],[46,5],[52,1],[76,5],[94,1],[96,1],[123,5],[129,6],[148,4],[166,6],[173,6],[199,4],[221,6],[228,1],[230,2]]},"311":{"position":[[39,5],[45,1],[62,4],[99,5],[105,1],[129,5],[147,1],[169,1],[171,1],[191,5],[197,6],[216,4],[234,5],[240,6],[247,1],[249,1],[251,2]]},"313":{"position":[[43,6],[50,5],[56,1],[80,5],[98,1],[118,5],[124,6],[143,4],[161,5],[167,6],[174,2]]},"315":{"position":[[39,5],[45,1],[65,5],[71,6],[90,4],[108,5],[114,7],[122,5],[128,1],[152,5]]},"317":{"position":[[43,6],[50,5],[56,1],[80,5]]},"319":{"position":[[32,5],[38,1],[67,4],[91,4],[112,4],[132,7],[140,5],[146,1],[170,5],[188,1],[210,1],[212,1],[239,8],[248,6],[275,6],[296,6],[340,6],[364,5],[386,4],[407,6],[439,6],[446,1],[448,1],[450,2]]},"321":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[122,4],[143,4],[164,6],[179,7],[187,6],[213,6],[243,6],[264,1],[266,1],[276,8],[285,6],[309,1],[311,1],[349,6],[372,4],[386,7],[394,4],[416,4],[430,3],[434,6],[452,10],[463,4],[490,6],[508,5],[514,6],[521,6],[528,8],[537,4],[557,6],[580,4],[600,4],[605,1],[607,1],[609,1],[611,2],[628,6],[635,2]]},"323":{"position":[[32,5],[38,1],[69,4],[90,4],[111,6],[126,8],[135,6],[161,6],[191,4],[210,1],[212,1],[222,8],[231,4],[253,1],[255,6],[262,1],[300,4],[321,4],[335,15],[351,4],[373,4],[387,1],[389,4],[394,1],[411,6],[429,8],[438,6],[460,6],[484,6],[491,1],[493,2],[507,7],[515,6],[522,6],[529,8],[538,4],[559,1],[561,6],[577,2],[598,6],[619,6],[642,4],[662,4],[667,1],[669,1],[671,1],[673,2],[690,7],[698,5],[704,1],[728,5],[746,1],[777,4],[798,4],[819,6],[834,8],[843,6],[869,6],[899,4],[918,1],[920,1],[930,8],[939,4],[961,1],[963,1],[1001,4],[1022,4],[1036,15],[1052,4],[1074,4],[1088,1],[1090,4],[1095,1],[1112,6],[1130,8],[1139,6],[1161,6],[1185,6],[1192,1],[1194,2],[1208,7],[1216,6],[1223,6],[1230,8],[1239,4],[1260,1],[1262,6],[1278,2],[1299,6],[1320,6],[1343,4],[1363,4],[1368,1],[1370,1],[1372,1],[1374,2],[1391,4],[1396,2]]},"325":{"position":[[36,6],[43,5],[49,1],[73,5]]},"327":{"position":[[40,5],[46,1],[67,4],[84,4],[105,6],[128,4],[147,1],[149,5],[155,1],[179,5],[197,1],[219,1],[221,1],[241,8],[250,6],[277,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,2]]},"329":{"position":[[30,5],[36,1],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[241,4],[306,6],[329,4],[351,5],[372,4],[390,4],[406,5],[412,6],[419,6],[426,8],[435,4],[470,4],[491,4],[510,6],[517,4],[522,1],[524,1],[526,2]]},"331":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[130,4],[151,4],[184,4],[206,4],[220,3],[224,4],[240,7],[248,4],[275,4],[291,10],[302,6],[323,6],[346,4],[369,2]]},"333":{"position":[[30,5],[36,1],[74,4],[95,4],[109,7],[117,4],[139,4],[153,3],[157,4],[173,10],[184,4],[211,4],[227,5],[233,6],[240,6],[247,8],[256,6],[276,6],[299,4],[323,5],[329,1],[353,5]]},"335":{"position":[[34,6],[41,5],[47,1],[71,5]]},"337":{"position":[[26,5],[32,1],[86,5],[92,1],[116,5],[134,1],[156,1],[158,1],[186,7],[194,6],[218,4],[250,8],[296,6],[320,6],[327,1],[329,1],[331,2]]},"339":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[123,4],[137,5],[143,6],[164,1],[166,1],[194,5],[200,6],[227,6],[248,6],[292,6],[316,5],[339,4],[360,6],[395,6],[421,1],[423,1],[425,2]]},"341":{"position":[[26,5],[32,1],[70,7],[92,1],[94,1],[121,8],[130,6],[157,6],[178,6],[222,6],[246,5],[268,4],[289,6],[321,6],[328,1],[330,2],[333,5],[339,1],[363,5],[381,1],[417,4],[431,7],[439,6],[460,1],[462,1],[489,8],[498,6],[525,6],[546,6],[590,6],[614,5],[636,4],[657,6],[689,6],[696,1],[698,1],[700,2]]},"343":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"345":{"position":[[29,5],[35,1],[91,6],[98,5],[104,1],[128,5],[146,1],[169,1],[171,1],[199,9],[209,6],[227,10],[238,6],[270,8],[302,8],[334,7],[358,6],[401,6],[408,1],[410,1],[412,2]]},"347":{"position":[[29,5],[35,1],[46,10],[57,6],[75,6],[82,6],[107,1],[109,5],[117,2],[120,5],[126,1],[139,6],[157,5],[163,6]]},"349":{"position":[[37,5],[43,1],[64,4],[101,5],[107,1],[131,5],[149,1],[171,1],[173,1],[222,6],[248,6],[270,5],[276,6],[326,6],[355,7],[383,6],[404,3],[408,4],[429,6],[456,8],[478,6],[498,8],[507,6],[536,5],[542,1],[544,1],[546,2]]},"351":{"position":[[37,5],[43,1],[111,5],[117,1],[141,5],[159,1],[182,1],[184,1],[244,5],[262,6],[269,6],[294,14],[309,6],[352,6],[359,1],[361,1],[363,2]]},"353":{"position":[[29,6],[36,5],[42,1],[66,5],[84,1],[178,5],[196,6],[203,6],[221,4],[237,4],[252,4],[292,6],[314,5],[338,3],[342,8],[388,6],[409,3],[413,6],[433,4],[457,6],[482,4],[487,2]]},"355":{"position":[[28,5],[34,1],[105,6],[133,5],[151,6],[158,6],[176,4],[192,4],[207,4],[247,4],[267,5],[291,3],[295,8],[341,6],[385,6],[405,4],[429,4],[452,5],[458,5],[464,1],[488,5]]},"357":{"position":[[38,5],[52,5],[58,5],[64,1],[88,5],[106,1],[108,1],[129,5],[153,1],[155,2]]},"359":{"position":[[39,6],[46,5],[52,1]]},"361":{"position":[[28,5],[34,1],[128,5],[146,6],[153,6],[171,4],[187,4],[202,4],[242,6],[269,5],[293,3],[297,8],[343,6],[387,6],[407,4],[431,4],[454,5],[460,5],[466,1],[490,5]]},"367":{"position":[[0,19]]},"373":{"position":[[65,4],[70,2],[88,6]]},"385":{"position":[[29,5]]},"387":{"position":[[138,8],[218,1]]},"391":{"position":[[140,2]]},"393":{"position":[[164,8],[173,8]]},"395":{"position":[[60,4]]},"405":{"position":[[0,11]]},"407":{"position":[[92,3]]},"409":{"position":[[126,44]]},"411":{"position":[[11,3],[22,3],[36,1],[74,3],[83,4]]},"415":{"position":[[6,1],[12,1],[21,45],[74,2]]},"418":{"position":[[11,1],[167,10]]},"423":{"position":[[10,86]]},"425":{"position":[[86,24],[111,1],[128,1],[283,1],[287,1],[292,1],[305,1],[309,1],[317,9],[327,29],[391,48]]},"429":{"position":[[36,43],[80,1],[88,5],[106,6],[119,10],[135,7],[143,31],[175,5],[193,28],[234,18]]},"431":{"position":[[13,1],[25,11],[83,6],[96,4],[153,12],[166,8],[185,17],[203,1],[218,62]]},"433":{"position":[[29,26],[154,4],[196,19],[236,13],[304,5],[321,12]]},"435":{"position":[[0,6],[7,7],[15,8]]}}}],["0",{"_index":75,"t":{"54":{"position":[[13,65]]},"65":{"position":[[15,1],[22,1],[29,2]]},"67":{"position":[[0,3]]},"80":{"position":[[0,42]]},"93":{"position":[[205,2],[208,1],[210,1],[212,1],[214,2],[219,1],[222,1],[227,1],[229,1],[240,1]]},"120":{"position":[[519,2]]},"130":{"position":[[367,3]]},"138":{"position":[[90,2],[103,2],[432,2]]},"140":{"position":[[394,2],[410,2],[439,1]]},"153":{"position":[[285,2],[332,2],[418,2],[468,2],[553,2],[597,2]]},"197":{"position":[[227,4],[381,1],[392,1],[397,1],[401,1],[405,1],[407,2],[413,1],[417,1],[421,1],[433,1],[437,1],[439,2]]},"212":{"position":[[347,1]]},"270":{"position":[[1086,4]]},"274":{"position":[[249,4],[360,2],[457,4]]},"278":{"position":[[674,4]]},"290":{"position":[[98,1]]},"323":{"position":[[614,4],[1315,4]]}}}],["0,1,2...di​=0,1,2",{"_index":60,"t":{"47":{"position":[[267,24]]}}}],["0.000",{"_index":92,"t":{"58":{"position":[[224,14]]}}}],["0.1xxxxx",{"_index":125,"t":{"91":{"position":[[0,11]]}}}],["0.1xxx，负数1.1xxx",{"_index":139,"t":{"93":{"position":[[330,44]]}}}],["00",{"_index":101,"t":{"75":{"position":[[179,2]]}}}],["00:00:00",{"_index":827,"t":{"270":{"position":[[284,10],[307,9]]},"282":{"position":[[276,10]]},"284":{"position":[[226,10]]}}}],["01",{"_index":103,"t":{"75":{"position":[[185,5]]},"274":{"position":[[215,2]]},"282":{"position":[[273,2]]},"284":{"position":[[223,2]]},"319":{"position":[[323,2]]},"329":{"position":[[289,2]]},"337":{"position":[[279,2]]},"341":{"position":[[205,2],[573,2]]}}}],["0110000000011000]\\begin{bmatrix",{"_index":521,"t":{"197":{"position":[[347,33]]}}}],["02",{"_index":849,"t":{"276":{"position":[[236,2]]},"327":{"position":[[327,2]]}}}],["04",{"_index":772,"t":{"260":{"position":[[81,2]]}}}],["05",{"_index":795,"t":{"264":{"position":[[320,2]]}}}],["06",{"_index":826,"t":{"270":{"position":[[278,2],[304,2]]},"274":{"position":[[212,2]]},"276":{"position":[[233,2]]},"280":{"position":[[238,2]]},"282":{"position":[[399,2]]},"284":{"position":[[349,2]]},"286":{"position":[[283,2]]},"299":{"position":[[448,2],[494,2],[538,2]]},"301":{"position":[[334,2],[380,2],[424,2]]}}}],["0656",{"_index":931,"t":{"303":{"position":[[342,4]]}}}],["07",{"_index":883,"t":{"282":{"position":[[365,2]]},"284":{"position":[[315,2]]},"349":{"position":[[205,2],[208,2]]},"353":{"position":[[278,2],[374,2]]},"355":{"position":[[233,2],[327,2]]},"361":{"position":[[228,2],[329,2]]}}}],["08",{"_index":828,"t":{"270":{"position":[[301,2]]},"280":{"position":[[241,2]]},"327":{"position":[[324,2]]},"339":{"position":[[275,2]]},"351":{"position":[[336,2]]},"355":{"position":[[368,2]]},"361":{"position":[[370,2]]}}}],["09",{"_index":879,"t":{"282":{"position":[[270,2],[362,2],[402,2]]},"284":{"position":[[220,2],[312,2],[352,2]]},"345":{"position":[[385,2]]},"353":{"position":[[275,2],[371,2]]},"355":{"position":[[230,2],[324,2]]},"361":{"position":[[225,2],[326,2]]}}}],["0;high",{"_index":42,"t":{"35":{"position":[[155,6]]}}}],["0;i",{"_index":486,"t":{"164":{"position":[[144,3]]}}}],["0;i<g.vexnum;i",{"_index":547,"t":{"202":{"position":[[459,18]]}}}],["0;i<g.vexnuml;i",{"_index":544,"t":{"202":{"position":[[398,18]]}}}],["0;i<len;i",{"_index":448,"t":{"153":{"position":[[106,13]]}}}],["0;i<n",{"_index":208,"t":{"107":{"position":[[151,5]]},"113":{"position":[[311,5]]}}}],["0;v<g.vexnum;++v",{"_index":567,"t":{"204":{"position":[[166,17],[212,17]]}}}],["0^2,1^2",{"_index":62,"t":{"47":{"position":[[349,8]]}}}],["0~999",{"_index":328,"t":{"120":{"position":[[0,80]]}}}],["0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0",{"_index":334,"t":{"120":{"position":[[470,28]]}}}],["0和全1",{"_index":138,"t":{"93":{"position":[[184,9]]}}}],["0有两种表示：10000和00000",{"_index":86,"t":{"56":{"position":[[179,24]]}}}],["0舍1入、末位恒置1",{"_index":140,"t":{"93":{"position":[[375,16]]}}}],["0，余数左移并且加上除数；余数为正，商1",{"_index":118,"t":{"84":{"position":[[67,37]]}}}],["0，并且加上除数的补码，余数为正商0",{"_index":116,"t":{"82":{"position":[[44,32]]}}}],["1",{"_index":0,"t":{"3":{"position":[[0,30]]},"12":{"position":[[96,6]]},"15":{"position":[[29,5],[91,5]]},"22":{"position":[[31,2]]},"24":{"position":[[61,2],[321,12],[334,48]]},"35":{"position":[[170,2],[267,2],[290,2]]},"38":{"position":[[0,5]]},"42":{"position":[[0,4],[42,62]]},"47":{"position":[[232,7]]},"56":{"position":[[68,2],[89,1],[144,2]]},"58":{"position":[[144,1],[156,1]]},"65":{"position":[[26,2],[34,1]]},"75":{"position":[[0,7],[131,12]]},"80":{"position":[[138,3]]},"91":{"position":[[90,1],[92,12]]},"93":{"position":[[217,1],[224,2],[235,2],[238,1],[406,58],[465,20]]},"99":{"position":[[12,2],[320,129],[450,4],[535,4]]},"101":{"position":[[310,4],[432,2],[507,2],[528,2],[573,2],[595,2]]},"103":{"position":[[0,137],[207,4]]},"107":{"position":[[22,4]]},"109":{"position":[[0,6],[863,3]]},"113":{"position":[[187,4],[260,4],[489,5]]},"115":{"position":[[0,3],[227,51],[1431,3]]},"118":{"position":[[104,4]]},"120":{"position":[[109,7],[517,1]]},"124":{"position":[[0,4]]},"130":{"position":[[191,2],[308,2]]},"134":{"position":[[408,2]]},"136":{"position":[[193,10],[632,2],[920,2],[936,2],[956,2],[974,2],[996,2],[1012,2],[1802,2],[1820,2],[1875,2],[1900,2]]},"138":{"position":[[201,1],[302,2]]},"145":{"position":[[151,3]]},"151":{"position":[[0,25]]},"153":{"position":[[0,6],[135,2],[440,2],[784,3]]},"155":{"position":[[33,1],[50,1],[73,4]]},"164":{"position":[[33,13],[178,2]]},"169":{"position":[[24,35]]},"184":{"position":[[0,5]]},"188":{"position":[[41,14]]},"194":{"position":[[52,2]]},"197":{"position":[[209,1],[385,1],[389,2],[423,2],[429,1]]},"202":{"position":[[0,6]]},"206":{"position":[[29,24]]},"212":{"position":[[307,1],[578,3]]},"254":{"position":[[110,1],[134,2]]},"256":{"position":[[45,2]]},"262":{"position":[[64,2]]},"264":{"position":[[59,2],[107,2],[154,2],[197,2],[271,2],[429,2]]},"266":{"position":[[61,2],[120,2],[141,2],[162,2],[368,2],[412,2],[591,1]]},"268":{"position":[[194,3],[240,1],[286,2]]},"270":{"position":[[65,2],[142,2],[163,2],[444,2],[496,2],[534,4],[789,1],[1031,2],[1070,3]]},"272":{"position":[[223,2],[264,3],[339,2]]},"274":{"position":[[65,2],[112,2],[331,2]]},"276":{"position":[[60,2],[107,2],[205,2]]},"278":{"position":[[68,2],[115,2],[199,2]]},"280":{"position":[[50,2],[108,2]]},"282":{"position":[[54,2],[229,2],[244,2],[426,2],[447,2],[466,5]]},"284":{"position":[[179,2],[194,2],[376,2],[397,2],[416,5],[469,2]]},"286":{"position":[[57,2],[104,2]]},"288":{"position":[[62,2]]},"290":{"position":[[66,2]]},"293":{"position":[[118,2]]},"295":{"position":[[45,2]]},"297":{"position":[[282,3]]},"299":{"position":[[69,2],[90,2],[137,2],[354,2],[572,2],[593,2]]},"301":{"position":[[53,2],[240,2],[458,2],[479,2]]},"303":{"position":[[136,2],[154,2],[251,1],[275,2],[526,2],[563,2],[581,2]]},"305":{"position":[[53,2]]},"307":{"position":[[59,2]]},"309":{"position":[[62,2],[145,2]]},"311":{"position":[[80,2],[115,2],[213,2]]},"313":{"position":[[66,2],[140,2]]},"315":{"position":[[138,2]]},"317":{"position":[[66,2]]},"319":{"position":[[109,2],[156,2],[383,2]]},"321":{"position":[[59,2],[119,2],[140,2],[161,2],[369,2],[413,2],[598,1]]},"323":{"position":[[66,2],[87,2],[318,2],[370,2],[660,1],[714,2],[774,2],[795,2],[1019,2],[1071,2],[1361,1]]},"325":{"position":[[59,2]]},"327":{"position":[[81,2],[125,2],[165,2],[208,2],[384,2]]},"329":{"position":[[119,2],[154,2],[326,2],[387,2]]},"331":{"position":[[59,2],[203,2]]},"333":{"position":[[92,2],[136,2],[339,2]]},"335":{"position":[[57,2]]},"337":{"position":[[67,2],[102,2],[215,2]]},"339":{"position":[[54,2]]},"341":{"position":[[58,2],[265,2],[349,2],[414,2],[633,2]]},"343":{"position":[[53,2]]},"345":{"position":[[114,2],[331,2],[355,2]]},"347":{"position":[[115,1],[136,2]]},"349":{"position":[[82,2],[117,2],[296,2]]},"351":{"position":[[92,2],[127,2]]},"353":{"position":[[52,2],[249,2],[430,2]]},"355":{"position":[[204,2],[402,2],[474,2]]},"357":{"position":[[74,2],[144,1]]},"361":{"position":[[199,2],[404,2],[476,2]]},"378":{"position":[[192,1]]},"387":{"position":[[136,1]]},"407":{"position":[[90,1]]},"411":{"position":[[95,1]]},"415":{"position":[[149,1]]},"433":{"position":[[136,1]]}}}],["1)/2",{"_index":481,"t":{"155":{"position":[[223,4]]},"192":{"position":[[75,4]]}}}],["1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r",{"_index":339,"t":{"120":{"position":[[548,33]]}}}],["1)^",{"_index":122,"t":{"89":{"position":[[21,4]]},"93":{"position":[[133,4]]}}}],["1)return",{"_index":457,"t":{"153":{"position":[[276,8],[409,8],[544,8]]}}}],["1)}{2",{"_index":267,"t":{"115":{"position":[[551,6]]}}}],["1)}{2}2n(n−1)​，故时间复杂度为o(n2)o(n^2)o(n2",{"_index":260,"t":{"113":{"position":[[532,38]]}}}],["1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为o(n2)o(n^2)o(n2",{"_index":220,"t":{"107":{"position":[[416,73]]}}}],["1)红叔叔（2",{"_index":11,"t":{"12":{"position":[[38,57]]}}}],["1+8+23组合。ieee754标准表示成浮点数真值为：(−1)s∗1.m∗2e−127",{"_index":134,"t":{"93":{"position":[[87,45]]}}}],["1,2,5",{"_index":597,"t":{"212":{"position":[[585,7]]}}}],["1,2,5,6",{"_index":598,"t":{"212":{"position":[[593,9]]}}}],["1,2,5,6,3",{"_index":599,"t":{"212":{"position":[[603,11]]}}}],["1,2,5,6,3,4",{"_index":600,"t":{"212":{"position":[[615,13]]}}}],["1,2,5,6,3,4,7",{"_index":601,"t":{"212":{"position":[[629,15]]}}}],["1,2,5,6,3,4,7,0",{"_index":602,"t":{"212":{"position":[[645,17]]}}}],["1,high",{"_index":242,"t":{"109":{"position":[[896,8]]}}}],["1,j",{"_index":355,"t":{"130":{"position":[[185,3]]}}}],["1,k",{"_index":411,"t":{"138":{"position":[[84,3]]},"140":{"position":[[388,3]]}}}],["1.000",{"_index":76,"t":{"54":{"position":[[92,55]]}}}],["1.1xxxxx",{"_index":126,"t":{"91":{"position":[[12,11]]}}}],["1.m*2^{e",{"_index":135,"t":{"93":{"position":[[138,9]]}}}],["1.已知树高求结点总数：sum",{"_index":434,"t":{"145":{"position":[[129,15]]}}}],["1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{align",{"_index":433,"t":{"145":{"position":[[45,81]]}}}],["1.若i为偶数则双亲为\\frac{i}{2",{"_index":265,"t":{"115":{"position":[[499,26]]}}}],["1.若i为偶数则双亲为i/2",{"_index":479,"t":{"155":{"position":[[185,18]]}}}],["1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":478,"t":{"155":{"position":[[95,87]]}}}],["1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":264,"t":{"115":{"position":[[411,85]]}}}],["1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m",{"_index":498,"t":{"171":{"position":[[0,32]]}}}],["1.，所以尾数的精度是24，能表示24",{"_index":130,"t":{"93":{"position":[[22,35]]}}}],["10",{"_index":104,"t":{"75":{"position":[[191,5]]},"264":{"position":[[127,2]]},"266":{"position":[[546,5],[616,4]]},"274":{"position":[[85,2]]},"276":{"position":[[80,2]]},"278":{"position":[[88,2]]},"286":{"position":[[77,2],[209,3]]},"299":{"position":[[110,2]]},"311":{"position":[[95,3]]},"319":{"position":[[129,2]]},"321":{"position":[[551,5],[623,4]]},"329":{"position":[[134,3],[366,5]]},"333":{"position":[[272,3]]},"337":{"position":[[82,3]]},"345":{"position":[[87,3]]},"349":{"position":[[97,3]]},"351":{"position":[[107,3]]}}}],["100",{"_index":915,"t":{"299":{"position":[[207,4]]},"301":{"position":[[93,4]]}}}],["1024;}http",{"_index":677,"t":{"242":{"position":[[196,10]]}}}],["1025",{"_index":904,"t":{"297":{"position":[[95,5]]}}}],["109",{"_index":929,"t":{"303":{"position":[[315,4]]}}}],["10:08:03",{"_index":1017,"t":{"361":{"position":[[376,10]]}}}],["11",{"_index":102,"t":{"75":{"position":[[182,2]]},"286":{"position":[[286,2]]},"355":{"position":[[261,5]]}}}],["111",{"_index":857,"t":{"278":{"position":[[242,6]]}}}],["11:28:52",{"_index":1005,"t":{"355":{"position":[[374,10]]}}}],["11:37:49",{"_index":985,"t":{"345":{"position":[[391,9]]}}}],["11:45:57",{"_index":960,"t":{"329":{"position":[[295,10]]}}}],["11:49:11",{"_index":977,"t":{"341":{"position":[[211,10],[579,10]]}}}],["11:49:31",{"_index":947,"t":{"319":{"position":[[329,10]]}}}],["11:50:24",{"_index":969,"t":{"337":{"position":[[285,10]]}}}],["12",{"_index":858,"t":{"278":{"position":[[268,3]]},"339":{"position":[[119,3],[278,2]]},"341":{"position":[[318,2],[686,2]]},"429":{"position":[[113,2]]}}}],["1232−1",{"_index":1112,"t":{"418":{"position":[[192,6]]}}}],["123456",{"_index":754,"t":{"254":{"position":[[82,9]]},"303":{"position":[[86,9]]}}}],["127.0.0.1",{"_index":1074,"t":{"393":{"position":[[78,11]]}}}],["127.0.0.1只能本机访问)或改成本机ip地址，否则影响远程ip",{"_index":1075,"t":{"393":{"position":[[103,36]]}}}],["127}(−1)s∗1.m∗2e−127",{"_index":136,"t":{"93":{"position":[[148,20]]}}}],["129",{"_index":840,"t":{"274":{"position":[[302,4]]}}}],["13",{"_index":591,"t":{"212":{"position":[[433,2],[442,2],[451,2],[460,2]]},"309":{"position":[[104,3]]},"311":{"position":[[179,3]]},"313":{"position":[[106,3]]},"315":{"position":[[53,3]]},"319":{"position":[[220,3],[436,2]]},"321":{"position":[[99,3],[319,3]]},"323":{"position":[[46,3],[270,3],[754,3],[971,3]]},"327":{"position":[[229,3]]},"329":{"position":[[218,3]]},"333":{"position":[[44,3]]},"337":{"position":[[166,3]]},"339":{"position":[[94,3]]},"341":{"position":[[40,3],[102,3],[389,3],[470,3]]},"345":{"position":[[179,3]]},"349":{"position":[[181,3]]},"351":{"position":[[192,3]]},"353":{"position":[[92,3]]},"355":{"position":[[42,3]]},"361":{"position":[[42,3]]}}}],["13:34:49",{"_index":797,"t":{"264":{"position":[[326,10]]}}}],["14",{"_index":595,"t":{"212":{"position":[[559,2]]},"268":{"position":[[86,3]]},"270":{"position":[[876,3]]},"272":{"position":[[74,3]]},"349":{"position":[[400,3]]}}}],["14:03:02",{"_index":989,"t":{"349":{"position":[[211,10]]}}}],["14:36:26",{"_index":956,"t":{"327":{"position":[[330,10]]}}}],["158",{"_index":785,"t":{"264":{"position":[[82,4],[380,4]]}}}],["158800882",{"_index":881,"t":{"282":{"position":[[301,12]]},"284":{"position":[[251,12]]}}}],["15:02:50",{"_index":973,"t":{"339":{"position":[[281,10]]}}}],["15的子节点，然后进入9的子节点，对比了6",{"_index":31,"t":{"29":{"position":[[124,39]]}}}],["16",{"_index":834,"t":{"272":{"position":[[371,4]]},"349":{"position":[[242,5]]}}}],["16.x",{"_index":721,"t":{"244":{"position":[[200,4],[253,6]]}}}],["1624538837259",{"_index":935,"t":{"303":{"position":[[627,14],[694,14]]}}}],["16:07:11",{"_index":850,"t":{"276":{"position":[[239,10]]}}}],["16:32:40",{"_index":894,"t":{"286":{"position":[[289,10]]}}}],["17",{"_index":1004,"t":{"355":{"position":[[371,2]]}}}],["17002",{"_index":847,"t":{"276":{"position":[[150,6]]}}}],["17:04:31",{"_index":886,"t":{"282":{"position":[[405,10]]},"284":{"position":[[355,10]]}}}],["17:12:50",{"_index":866,"t":{"280":{"position":[[244,9]]}}}],["17:56:38",{"_index":838,"t":{"274":{"position":[[218,10]]}}}],["18",{"_index":781,"t":{"262":{"position":[[106,5]]},"270":{"position":[[816,4]]},"282":{"position":[[212,3]]},"284":{"position":[[162,3]]},"323":{"position":[[685,4],[1386,4]]},"349":{"position":[[377,5]]}}}],["180",{"_index":946,"t":{"319":{"position":[[291,4]]},"341":{"position":[[173,4],[541,4]]},"425":{"position":[[113,4],[118,9]]}}}],["181",{"_index":776,"t":{"260":{"position":[[131,4]]}}}],["1812",{"_index":862,"t":{"280":{"position":[[92,5]]}}}],["1845",{"_index":845,"t":{"274":{"position":[[514,6]]}}}],["18:55:02",{"_index":884,"t":{"282":{"position":[[368,10]]},"284":{"position":[[318,10]]}}}],["18:56:07",{"_index":1001,"t":{"353":{"position":[[281,10]]},"355":{"position":[[236,10]]},"361":{"position":[[231,10]]}}}],["18:56:21",{"_index":1002,"t":{"353":{"position":[[377,10]]},"355":{"position":[[330,10]]},"361":{"position":[[332,10]]}}}],["19665",{"_index":1012,"t":{"359":{"position":[[170,6]]}}}],["1;a[0",{"_index":159,"t":{"99":{"position":[[565,6]]}}}],["1;high",{"_index":170,"t":{"101":{"position":[[419,6]]}}}],["1;i",{"_index":209,"t":{"107":{"position":[[157,7]]},"113":{"position":[[317,7]]}}}],["1;j",{"_index":172,"t":{"101":{"position":[[545,3],[559,3]]},"138":{"position":[[296,3]]}}}],["1;j>i;j",{"_index":210,"t":{"107":{"position":[[179,7]]}}}],["1]+1",{"_index":399,"t":{"136":{"position":[[1774,4]]}}}],["1][0,p−1",{"_index":58,"t":{"47":{"position":[[161,9]]}}}],["1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p",{"_index":74,"t":{"49":{"position":[[82,45]]}}}],["1]ch[0...k−1]=ch[j−k...j−1",{"_index":374,"t":{"134":{"position":[[424,27]]}}}],["1]ch[0∼k−1]=ch[j−k∼j−1",{"_index":383,"t":{"136":{"position":[[651,23]]}}}],["1]中寻找最小的元素a[k",{"_index":249,"t":{"113":{"position":[[213,14]]}}}],["1]和l[k+1...n]，其中l[k]为pivot，使得左边表的值都小于pivot",{"_index":222,"t":{"109":{"position":[[76,80]]}}}],["1]，所以删除后节点的关键字个数不能小于（m/2",{"_index":19,"t":{"24":{"position":[[31,29]]}}}],["1^2,2^2",{"_index":63,"t":{"47":{"position":[[358,8]]}}}],["1n−1",{"_index":579,"t":{"208":{"position":[[122,14]]},"210":{"position":[[87,8]]},"212":{"position":[[210,29]]}}}],["1}(n",{"_index":218,"t":{"107":{"position":[[396,4]]}}}],["1},k_j^{d",{"_index":331,"t":{"120":{"position":[[399,9]]}}}],["1}.......q_0qr​,qr−1​.......q0",{"_index":342,"t":{"120":{"position":[[695,31]]}}}],["1~n",{"_index":439,"t":{"147":{"position":[[0,71]]}}}],["1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3",{"_index":440,"t":{"147":{"position":[[72,84]]}}}],["1→2",{"_index":589,"t":{"212":{"position":[[367,3]]}}}],["1→2→4",{"_index":592,"t":{"212":{"position":[[436,5],[445,5],[454,5],[463,5]]}}}],["1→2→4→7",{"_index":596,"t":{"212":{"position":[[562,7]]}}}],["1→5",{"_index":593,"t":{"212":{"position":[[481,3],[487,3]]}}}],["1→5→3",{"_index":590,"t":{"212":{"position":[[403,5],[411,5]]}}}],["1→6",{"_index":594,"t":{"212":{"position":[[515,3],[521,3],[527,3]]}}}],["1−(2n−1)≤x≤2n−1",{"_index":85,"t":{"56":{"position":[[162,16]]}}}],["1−2n≤x≤2n−1",{"_index":91,"t":{"58":{"position":[[212,11]]}}}],["1−2−n)≤x≤1−2−n",{"_index":78,"t":{"56":{"position":[[43,24]]}}}],["1∣e∣=∣v∣−1",{"_index":576,"t":{"206":{"position":[[109,10]]}}}],["1≤x≤1−2−n",{"_index":88,"t":{"58":{"position":[[126,17]]}}}],["1、非空二叉树的叶结点等于度为2的结点数加1，即n0",{"_index":473,"t":{"155":{"position":[[0,27]]}}}],["1个字符串有关。我们看前部分字符串，发现共同前后缀是ab，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是c这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是abc？长度为2，那么next[j+1]就是在next[j]的基础上加1",{"_index":395,"t":{"136":{"position":[[1345,231]]}}}],["1中找到适合l[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i",{"_index":146,"t":{"99":{"position":[[104,108]]}}}],["1变为0",{"_index":24,"t":{"24":{"position":[[383,36]]}}}],["1和2",{"_index":289,"t":{"115":{"position":[[1312,5]]},"217":{"position":[[98,33]]}}}],["1开始的，如果是0",{"_index":469,"t":{"153":{"position":[[618,36]]}}}],["1次递归调用，所以栈为o(n)n−1次递归调用，所以栈为o(n)，平均是o(log2n)o(log_{2}n)o(log2​n",{"_index":244,"t":{"109":{"position":[[1016,64]]}}}],["1躺排序，第i躺排序要进行n",{"_index":216,"t":{"107":{"position":[[336,14]]}}}],["1躺，一共移动3(n",{"_index":258,"t":{"113":{"position":[[478,10]]}}}],["1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i",{"_index":145,"t":{"99":{"position":[[60,43]]}}}],["1（从右到左找到第一个1，前面的数取反即可）。如果是从x",{"_index":87,"t":{"58":{"position":[[0,88]]}}}],["1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k",{"_index":607,"t":{"219":{"position":[[13,34]]}}}],["1，m",{"_index":18,"t":{"22":{"position":[[27,3]]},"24":{"position":[[27,3]]}}}],["1，且其左（右）兄弟的关键字数目大于（m/2",{"_index":20,"t":{"24":{"position":[[143,77]]}}}],["1，二叉树的非终端结点数为：n",{"_index":499,"t":{"171":{"position":[[40,112]]}}}],["1，余数左移减去除数；异号商0",{"_index":119,"t":{"86":{"position":[[66,39]]}}}],["1，则加上被乘数，为0则加0",{"_index":107,"t":{"78":{"position":[[50,20]]}}}],["1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0",{"_index":378,"t":{"136":{"position":[[401,62]]}}}],["1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0",{"_index":406,"t":{"136":{"position":[[2506,38]]}}}],["1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的aof",{"_index":1045,"t":{"385":{"position":[[35,70]]}}}],["1；阶码：8；尾数：23",{"_index":129,"t":{"93":{"position":[[5,16]]}}}],["2",{"_index":12,"t":{"12":{"position":[[147,6]]},"38":{"position":[[90,5],[96,30]]},"42":{"position":[[37,4]]},"47":{"position":[[292,14]]},"56":{"position":[[71,1],[91,3]]},"58":{"position":[[158,3]]},"75":{"position":[[144,6]]},"99":{"position":[[622,9]]},"101":{"position":[[474,2],[609,7]]},"103":{"position":[[769,11]]},"107":{"position":[[274,11]]},"109":{"position":[[157,4]]},"113":{"position":[[424,9]]},"115":{"position":[[105,7]]},"120":{"position":[[297,6]]},"122":{"position":[[588,4]]},"124":{"position":[[5,4]]},"130":{"position":[[294,2]]},"136":{"position":[[533,11]]},"164":{"position":[[181,7]]},"171":{"position":[[166,38]]},"184":{"position":[[63,5]]},"202":{"position":[[90,11],[156,6]]},"212":{"position":[[313,1],[363,1],[582,2]]},"260":{"position":[[223,1]]},"264":{"position":[[358,2]]},"268":{"position":[[318,3]]},"270":{"position":[[580,3],[606,4],[640,3],[894,4]]},"272":{"position":[[92,4]]},"274":{"position":[[481,2]]},"278":{"position":[[442,4],[628,2],[701,3]]},"307":{"position":[[91,2]]},"311":{"position":[[158,2]]},"315":{"position":[[87,2]]},"319":{"position":[[361,2]]},"323":{"position":[[297,2],[998,2]]},"327":{"position":[[274,2],[362,2]]},"329":{"position":[[348,2]]},"337":{"position":[[145,2]]},"339":{"position":[[313,2]]},"341":{"position":[[243,2],[611,2]]},"349":{"position":[[451,4],[475,2]]},"351":{"position":[[213,2]]},"378":{"position":[[227,1]]},"387":{"position":[[195,1]]},"433":{"position":[[159,1]]}}}],["2*log_{2}{(n+1)}h≤2∗log2​(n+1",{"_index":10,"t":{"10":{"position":[[242,30]]}}}],["2.已知编号i求双亲：(i/2",{"_index":436,"t":{"145":{"position":[[157,22]]}}}],["2.若i为奇数则双亲为(i",{"_index":480,"t":{"155":{"position":[[209,13]]}}}],["2.若i为奇数则双亲为\\frac{(i",{"_index":266,"t":{"115":{"position":[[531,19]]}}}],["20",{"_index":793,"t":{"264":{"position":[[289,3]]},"270":{"position":[[233,3]]},"321":{"position":[[209,3]]},"323":{"position":[[157,3],[865,3]]}}}],["2019",{"_index":878,"t":{"282":{"position":[[264,5],[356,5]]},"284":{"position":[[214,5],[306,5]]},"353":{"position":[[269,5],[365,5]]},"355":{"position":[[224,5],[318,5]]},"361":{"position":[[320,5]]}}}],["2020",{"_index":984,"t":{"345":{"position":[[379,5]]}}}],["2021",{"_index":771,"t":{"260":{"position":[[75,5]]},"264":{"position":[[314,5]]},"270":{"position":[[272,5],[295,5]]},"274":{"position":[[206,5]]},"276":{"position":[[227,5]]},"280":{"position":[[232,5]]},"282":{"position":[[393,5]]},"284":{"position":[[343,5]]},"286":{"position":[[277,5]]},"299":{"position":[[442,5],[488,5],[532,5]]},"301":{"position":[[328,5],[374,5],[418,5]]},"319":{"position":[[317,5]]},"327":{"position":[[318,5]]},"329":{"position":[[283,5]]},"337":{"position":[[273,5]]},"339":{"position":[[269,5]]},"341":{"position":[[199,5],[567,5]]},"349":{"position":[[199,5]]},"351":{"position":[[330,5]]},"355":{"position":[[362,5]]},"361":{"position":[[219,5],[364,5]]}}}],["20:01:26",{"_index":923,"t":{"299":{"position":[[454,10],[500,10]]},"301":{"position":[[340,10],[386,10]]}}}],["20:01:35",{"_index":924,"t":{"299":{"position":[[544,10]]},"301":{"position":[[430,10]]}}}],["20:05:02",{"_index":993,"t":{"351":{"position":[[342,9]]}}}],["21",{"_index":922,"t":{"299":{"position":[[451,2],[497,2],[541,2]]},"301":{"position":[[337,2],[383,2],[427,2]]},"319":{"position":[[326,2]]},"329":{"position":[[292,2]]},"337":{"position":[[282,2]]},"341":{"position":[[208,2],[576,2]]}}}],["2112112",{"_index":1016,"t":{"361":{"position":[[258,10]]}}}],["22",{"_index":805,"t":{"266":{"position":[[209,3]]},"270":{"position":[[281,2]]},"297":{"position":[[252,2]]},"345":{"position":[[388,2]]}}}],["232−12^{32",{"_index":1111,"t":{"418":{"position":[[178,11]]}}}],["23945",{"_index":908,"t":{"297":{"position":[[160,6]]}}}],["2399",{"_index":763,"t":{"258":{"position":[[80,5]]}}}],["24",{"_index":992,"t":{"351":{"position":[[339,2]]}}}],["2413",{"_index":903,"t":{"297":{"position":[[65,5]]}}}],["24928",{"_index":848,"t":{"276":{"position":[[175,6]]}}}],["25",{"_index":773,"t":{"260":{"position":[[84,6]]}}}],["25067",{"_index":860,"t":{"278":{"position":[[534,6]]}}}],["2520",{"_index":790,"t":{"264":{"position":[[218,5]]}}}],["26",{"_index":957,"t":{"327":{"position":[[437,2]]}}}],["27",{"_index":191,"t":{"103":{"position":[[634,2]]}}}],["275",{"_index":972,"t":{"339":{"position":[[243,4]]}}}],["2897",{"_index":974,"t":{"339":{"position":[[389,5]]}}}],["2;i",{"_index":153,"t":{"99":{"position":[[506,3]]},"101":{"position":[[383,3]]}}}],["2^2.........k^2",{"_index":64,"t":{"47":{"position":[[367,16]]}}}],["2^32",{"_index":1097,"t":{"407":{"position":[[83,4]]},"411":{"position":[[88,4]]},"415":{"position":[[142,4]]}}}],["2^64",{"_index":1132,"t":{"429":{"position":[[130,4]]}}}],["2^h",{"_index":435,"t":{"145":{"position":[[147,3]]}}}],["2^n",{"_index":84,"t":{"56":{"position":[[157,3]]},"58":{"position":[[193,3],[207,3]]}}}],["2^{n",{"_index":83,"t":{"56":{"position":[[137,6]]}}}],["2e",{"_index":513,"t":{"192":{"position":[[98,2]]}}}],["2n2^n2n，相当于x",{"_index":93,"t":{"62":{"position":[[0,75]]}}}],["2n−1)≤x≤2n−1",{"_index":82,"t":{"56":{"position":[[115,21]]}}}],["2n≤x≤2n−1",{"_index":90,"t":{"58":{"position":[[175,17]]}}}],["2x",{"_index":464,"t":{"153":{"position":[[435,2],[569,3]]}}}],["2},k_j^{d",{"_index":332,"t":{"120":{"position":[[409,9]]}}}],["2、二叉树第k层上最多有2k",{"_index":475,"t":{"155":{"position":[[35,14]]}}}],["2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right",{"_index":1100,"t":{"409":{"position":[[0,125]]}}}],["2的，要求小数点后一位不全为0，也就是要为1",{"_index":127,"t":{"91":{"position":[[24,27]]}}}],["2路归并，基于分治思想，将n个元素分解成n/2",{"_index":319,"t":{"118":{"position":[[682,49]]}}}],["2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k",{"_index":612,"t":{"219":{"position":[[240,34]]}}}],["2，o",{"_index":377,"t":{"136":{"position":[[388,12]]}}}],["2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m",{"_index":23,"t":{"24":{"position":[[284,36]]}}}],["2，知道增量变成1",{"_index":177,"t":{"103":{"position":[[193,13]]}}}],["2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的aof文件中，这样做是保证原有的aof",{"_index":1046,"t":{"385":{"position":[[106,81]]}}}],["3",{"_index":67,"t":{"47":{"position":[[469,5]]},"75":{"position":[[197,7]]},"80":{"position":[[147,15]]},"99":{"position":[[759,7]]},"101":{"position":[[672,5]]},"109":{"position":[[444,4],[914,11]]},"115":{"position":[[171,10]]},"118":{"position":[[276,6]]},"120":{"position":[[823,11]]},"124":{"position":[[10,6]]},"164":{"position":[[360,9]]},"184":{"position":[[155,10]]},"212":{"position":[[319,1],[395,1]]},"266":{"position":[[570,2]]},"274":{"position":[[385,4]]},"278":{"position":[[465,2]]},"321":{"position":[[577,2]]},"323":{"position":[[639,2],[1340,2]]},"329":{"position":[[488,2]]},"333":{"position":[[296,2]]},"353":{"position":[[234,2]]},"355":{"position":[[189,2]]},"361":{"position":[[184,2]]},"378":{"position":[[344,1]]},"433":{"position":[[216,1]]}}}],["3.2i",{"_index":268,"t":{"115":{"position":[[563,4]]},"155":{"position":[[233,4]]}}}],["3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":437,"t":{"145":{"position":[[182,28]]}}}],["30",{"_index":1000,"t":{"353":{"position":[[217,3]]},"355":{"position":[[172,3]]},"361":{"position":[[167,3]]}}}],["31",{"_index":796,"t":{"264":{"position":[[323,2]]},"361":{"position":[[373,2]]}}}],["321dec89",{"_index":930,"t":{"303":{"position":[[332,9]]}}}],["36",{"_index":980,"t":{"345":{"position":[[157,3]]}}}],["38和27进行交换（因为27",{"_index":247,"t":{"113":{"position":[[159,19]]}}}],["3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0",{"_index":333,"t":{"120":{"position":[[419,50]]}}}],["3、高度为k的二叉树最多有2k",{"_index":476,"t":{"155":{"position":[[56,15]]}}}],["3后，整体带上acc",{"_index":108,"t":{"78":{"position":[[71,25]]}}}],["3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n",{"_index":113,"t":{"80":{"position":[[163,42]]}}}],["3）活动aia_iai​的最早开始事件e(i)e(i)e(i",{"_index":617,"t":{"219":{"position":[[460,31]]}}}],["3，9，15",{"_index":28,"t":{"27":{"position":[[178,45]]}}}],["3，执行n−1n",{"_index":586,"t":{"212":{"position":[[198,11]]}}}],["3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新aof",{"_index":1047,"t":{"385":{"position":[[188,60]]}}}],["4",{"_index":71,"t":{"47":{"position":[[570,8]]},"82":{"position":[[77,14]]},"115":{"position":[[384,7]]},"120":{"position":[[941,4]]},"124":{"position":[[17,3]]},"184":{"position":[[187,8]]},"212":{"position":[[325,1],[365,1],[429,1]]},"268":{"position":[[128,2],[260,1]]},"270":{"position":[[184,2],[421,2],[741,4],[766,2],[960,2],[1113,3]]},"272":{"position":[[152,2],[280,4],[307,3]]},"274":{"position":[[407,2]]},"331":{"position":[[148,2]]},"345":{"position":[[72,2]]},"349":{"position":[[160,2],[352,2],[426,2]]},"378":{"position":[[387,1]]},"433":{"position":[[310,1]]}}}],["4.2i+1",{"_index":270,"t":{"115":{"position":[[589,6]]},"155":{"position":[[259,6]]}}}],["40",{"_index":1099,"t":{"407":{"position":[[109,13]]},"411":{"position":[[97,9]]},"415":{"position":[[164,15]]}}}],["4013",{"_index":871,"t":{"282":{"position":[[124,4]]},"284":{"position":[[74,4]]}}}],["4294967295",{"_index":1098,"t":{"407":{"position":[[96,12]]},"415":{"position":[[151,12]]}}}],["433c",{"_index":918,"t":{"299":{"position":[[246,4]]},"301":{"position":[[132,4]]}}}],["46",{"_index":856,"t":{"278":{"position":[[222,3]]},"339":{"position":[[335,3]]}}}],["4736",{"_index":932,"t":{"303":{"position":[[347,4]]}}}],["49",{"_index":190,"t":{"103":{"position":[[626,7],[741,2]]}}}],["49，这次变成了27",{"_index":196,"t":{"103":{"position":[[730,10]]}}}],["4ccc",{"_index":997,"t":{"353":{"position":[[123,4]]},"355":{"position":[[80,4]]},"361":{"position":[[73,4]]}}}],["4、对于结点i(i>1",{"_index":477,"t":{"155":{"position":[[78,16]]}}}],["4操作n次，最后一步恒置1，“末位恒置1",{"_index":120,"t":{"86":{"position":[[106,23]]}}}],["4的，要求小数点后两位不全为0",{"_index":128,"t":{"91":{"position":[[52,20]]}}}],["4）n",{"_index":318,"t":{"118":{"position":[[673,8]]}}}],["4）活动aia_iai​的最迟开始事件l(i)l(i)l(i",{"_index":619,"t":{"219":{"position":[[538,31]]}}}],["4：当追加结束后，redis就会用新aof文件来代替旧aof文件，之后再有新的写指令，就都会追加到新的aof",{"_index":1048,"t":{"385":{"position":[[249,57]]}}}],["5",{"_index":288,"t":{"115":{"position":[[1259,5]]},"118":{"position":[[885,11]]},"155":{"position":[[375,5]]},"212":{"position":[[331,1],[477,1],[479,1],[485,1],[513,1],[519,1],[525,1]]},"266":{"position":[[347,2]]},"286":{"position":[[147,2]]},"319":{"position":[[272,2]]},"321":{"position":[[346,2]]},"327":{"position":[[145,1]]},"329":{"position":[[238,2]]},"331":{"position":[[127,2],[318,4],[343,2]]},"333":{"position":[[71,2]]},"339":{"position":[[224,2]]},"341":{"position":[[154,2],[522,2]]},"349":{"position":[[323,2]]},"378":{"position":[[447,1]]},"433":{"position":[[334,1]]}}}],["5.0",{"_index":1133,"t":{"431":{"position":[[21,3]]}}}],["507",{"_index":855,"t":{"278":{"position":[[171,4],[555,4]]}}}],["508",{"_index":963,"t":{"331":{"position":[[99,4]]}}}],["52045f5f",{"_index":995,"t":{"353":{"position":[[108,9]]},"355":{"position":[[65,9]]},"361":{"position":[[58,9]]}}}],["520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999",{"_index":329,"t":{"120":{"position":[[117,96]]}}}],["53",{"_index":263,"t":{"115":{"position":[[364,19]]}}}],["53下坠到原87",{"_index":262,"t":{"115":{"position":[[334,29]]}}}],["53＜87",{"_index":261,"t":{"115":{"position":[[299,34]]}}}],["579",{"_index":779,"t":{"260":{"position":[[201,4]]}}}],["592",{"_index":971,"t":{"339":{"position":[[174,4]]}}}],["5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8",{"_index":167,"t":{"101":{"position":[[105,174]]}}}],["5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof",{"_index":1049,"t":{"385":{"position":[[307,68]]}}}],["6",{"_index":295,"t":{"115":{"position":[[1438,11]]},"212":{"position":[[337,1],[511,1]]},"319":{"position":[[404,2]]},"323":{"position":[[108,2],[816,2]]},"327":{"position":[[102,2],[405,2]]},"339":{"position":[[357,2]]},"341":{"position":[[286,2],[654,2]]}}}],["60",{"_index":955,"t":{"327":{"position":[[293,3]]}}}],["6148",{"_index":906,"t":{"297":{"position":[[128,5]]}}}],["6204",{"_index":836,"t":{"274":{"position":[[155,5]]}}}],["6379",{"_index":1083,"t":{"397":{"position":[[63,4]]}}}],["6534",{"_index":837,"t":{"274":{"position":[[179,5]]}}}],["65是一组的，此时i=3，j=1",{"_index":193,"t":{"103":{"position":[[640,27]]}}}],["666",{"_index":852,"t":{"276":{"position":[[297,5]]}}}],["68",{"_index":991,"t":{"351":{"position":[[170,3]]}}}],["7",{"_index":588,"t":{"212":{"position":[[343,1],[401,1],[409,1],[547,1]]},"274":{"position":[[432,2]]},"329":{"position":[[197,2]]}}}],["7.0.0.tar.gz",{"_index":1062,"t":{"391":{"position":[[102,13]]}}}],["7.0.0中的文件，有两个为redi",{"_index":1066,"t":{"391":{"position":[[196,19]]}}}],["7.0.0目录下，执行make",{"_index":1063,"t":{"391":{"position":[[124,15]]}}}],["70",{"_index":25,"t":{"24":{"position":[[420,17]]}}}],["727626236f47",{"_index":873,"t":{"282":{"position":[[134,14]]},"284":{"position":[[84,14]]}}}],["73处不满足，同时左兄弟不够借，则82",{"_index":26,"t":{"24":{"position":[[438,27]]}}}],["76",{"_index":192,"t":{"103":{"position":[[637,2]]}}}],["76，依次类推，当i为7",{"_index":197,"t":{"103":{"position":[[744,24]]}}}],["8",{"_index":769,"t":{"260":{"position":[[56,2]]},"266":{"position":[[101,2],[321,2]]},"270":{"position":[[123,2],[395,2],[856,2],[936,2]]},"272":{"position":[[54,2],[128,2]]},"282":{"position":[[94,2]]},"284":{"position":[[44,2]]},"286":{"position":[[168,2]]}}}],["81",{"_index":914,"t":{"299":{"position":[[180,3]]}}}],["85",{"_index":910,"t":{"297":{"position":[[207,2]]}}}],["8dc4",{"_index":919,"t":{"299":{"position":[[251,4]]},"301":{"position":[[137,4]]}}}],["8，发现8已经大于7",{"_index":32,"t":{"29":{"position":[[164,19]]}}}],["9",{"_index":30,"t":{"29":{"position":[[95,28]]},"319":{"position":[[199,2]]}}}],["90",{"_index":1116,"t":{"425":{"position":[[130,3]]}}}],["9016",{"_index":801,"t":{"264":{"position":[[461,4]]}}}],["90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r",{"_index":1117,"t":{"425":{"position":[[134,101]]}}}],["92",{"_index":21,"t":{"24":{"position":[[221,31]]}}}],["93dd",{"_index":998,"t":{"353":{"position":[[128,4]]},"355":{"position":[[85,4]]},"361":{"position":[[78,4]]}}}],["a,c",{"_index":952,"t":{"323":{"position":[[591,6],[1292,6]]}}}],["a,int",{"_index":200,"t":{"107":{"position":[[41,6]]}}}],["a13f",{"_index":996,"t":{"353":{"position":[[118,4]]},"355":{"position":[[75,4]]},"361":{"position":[[68,4]]}}}],["a[0",{"_index":156,"t":{"99":{"position":[[540,4],[611,5]]},"101":{"position":[[400,4],[489,5],[600,5]]},"103":{"position":[[467,4],[554,5]]},"115":{"position":[[995,4],[1252,4]]}}}],["a[0]<a[j];j",{"_index":188,"t":{"103":{"position":[[506,11]]}}}],["a[0]当哨兵作为辅助，故空间复杂度上为o(1)o(1)o(1",{"_index":163,"t":{"99":{"position":[[632,39]]}}}],["a[],int",{"_index":37,"t":{"35":{"position":[[113,7]]},"99":{"position":[[475,7]]},"101":{"position":[[339,7]]},"103":{"position":[[231,7]]},"107":{"position":[[104,7]]},"109":{"position":[[491,7],[747,7]]},"113":{"position":[[285,7]]},"115":{"position":[[865,7],[975,7],[1336,7]]},"118":{"position":[[348,7],[751,7]]}}}],["a[high",{"_index":173,"t":{"101":{"position":[[586,6]]},"109":{"position":[[615,8],[675,7]]}}}],["a[high]>=pivot",{"_index":234,"t":{"109":{"position":[[571,15]]}}}],["a[i",{"_index":157,"t":{"99":{"position":[[547,5],[769,27]]},"101":{"position":[[407,5]]},"103":{"position":[[445,3],[474,5]]},"107":{"position":[[201,5]]},"115":{"position":[[1182,5]]}}}],["a[i]<a[i+1",{"_index":285,"t":{"115":{"position":[[1102,12]]}}}],["a[i][j",{"_index":518,"t":{"197":{"position":[[214,10]]}}}],["a[i]，则从a[i.....n",{"_index":248,"t":{"113":{"position":[[192,20]]}}}],["a[j",{"_index":160,"t":{"99":{"position":[[574,5],[594,5]]},"101":{"position":[[567,3],[578,5]]},"103":{"position":[[537,5]]}}}],["a[j+1",{"_index":162,"t":{"99":{"position":[[585,6],[602,6]]}}}],["a[j+gap",{"_index":189,"t":{"103":{"position":[[526,8],[543,8]]}}}],["a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j",{"_index":166,"t":{"99":{"position":[[800,80]]}}}],["a[k",{"_index":281,"t":{"115":{"position":[[1002,5],[1175,4],[1245,4]]},"118":{"position":[[471,5],[560,4],[580,4],[623,6],[655,6]]}}}],["a[k]和a[i",{"_index":250,"t":{"113":{"position":[[228,11]]}}}],["a[low",{"_index":231,"t":{"109":{"position":[[526,7],[606,6],[685,7],[695,6]]}}}],["a[low]<=pivot",{"_index":235,"t":{"109":{"position":[[642,14]]}}}],["a_sb_",{"_index":99,"t":{"75":{"position":[[61,6]]}}}],["aba",{"_index":369,"t":{"134":{"position":[[268,24]]}}}],["access_log",{"_index":708,"t":{"242":{"position":[[733,10]]}}}],["acc设置00.0000，mq中为乘数，乘数后添加一个辅助位（辅助位就是mq",{"_index":111,"t":{"80":{"position":[[66,44]]}}}],["acc里面设置为00.0000（00",{"_index":106,"t":{"78":{"position":[[23,26]]}}}],["ack",{"_index":1148,"t":{"433":{"position":[[505,3]]}}}],["acknowledg",{"_index":1149,"t":{"433":{"position":[[509,12]]}}}],["ack的消息id，如果客户端没有ack，这个变量里面的消息id会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在redi",{"_index":1145,"t":{"433":{"position":[[348,107]]}}}],["action",{"_index":740,"t":{"244":{"position":[[766,56]]}}}],["action@4.0.0",{"_index":732,"t":{"244":{"position":[[440,12]]}}}],["actions/checkout@v2",{"_index":719,"t":{"244":{"position":[[160,19]]}}}],["actions/setup",{"_index":722,"t":{"244":{"position":[[211,13]]}}}],["add",{"_index":642,"t":{"237":{"position":[[40,3],[63,3]]},"239":{"position":[[209,3]]}}}],["addr=h(key)addr",{"_index":54,"t":{"47":{"position":[[0,22]]}}}],["admin",{"_index":896,"t":{"286":{"position":[[323,7]]},"293":{"position":[[41,8],[194,8]]},"337":{"position":[[241,8]]},"345":{"position":[[261,8]]},"351":{"position":[[235,8],[287,6]]},"353":{"position":[[169,8]]},"355":{"position":[[124,8]]},"361":{"position":[[119,8]]}}}],["ae4c",{"_index":933,"t":{"303":{"position":[[352,4]]}}}],["ag",{"_index":874,"t":{"282":{"position":[[205,6]]},"284":{"position":[[155,6]]},"293":{"position":[[245,6]]},"299":{"position":[[328,6]]},"301":{"position":[[214,6]]},"303":{"position":[[162,6],[454,6]]},"353":{"position":[[210,6]]},"355":{"position":[[165,6]]},"361":{"position":[[160,6]]}}}],["algraph",{"_index":538,"t":{"199":{"position":[[328,8],[337,20]]}}}],["allclass",{"_index":975,"t":{"339":{"position":[[402,13]]}}}],["alway",{"_index":1040,"t":{"380":{"position":[[0,28]]}}}],["ana^nan的元素an[i][j]a^n[i][j]an[i][j]表示的是由顶点i到j长度为n",{"_index":530,"t":{"197":{"position":[[761,66]]}}}],["analyz",{"_index":812,"t":{"266":{"position":[[438,10]]},"270":{"position":[[649,10]]},"278":{"position":[[364,10]]},"321":{"position":[[441,10]]},"323":{"position":[[496,10],[1197,10]]},"331":{"position":[[229,10]]},"333":{"position":[[162,10]]}}}],["analyzetextcontentid",{"_index":961,"t":{"329":{"position":[[440,23]]}}}],["answer",{"_index":830,"t":{"270":{"position":[[831,9]]}}}],["answeritem",{"_index":820,"t":{"268":{"position":[[95,14]]},"270":{"position":[[904,14]]},"272":{"position":[[103,14]]}}}],["aof",{"_index":1020,"t":{"365":{"position":[[134,16]]},"378":{"position":[[463,20]]},"383":{"position":[[0,6],[56,9]]},"385":{"position":[[0,28]]},"387":{"position":[[147,5]]}}}],["aof内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称aof重写)，从而起到aof",{"_index":1039,"t":{"378":{"position":[[389,57]]}}}],["aof包括了rdb头部+aof",{"_index":1059,"t":{"387":{"position":[[404,18]]}}}],["aof对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以reid",{"_index":1051,"t":{"387":{"position":[[55,64]]}}}],["aof文件，会将其这些命令先放入aof缓存中进行保存。这里的aof缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘io",{"_index":1037,"t":{"378":{"position":[[249,94]]}}}],["aof缓冲会根据aof缓冲区同步文件的三种写回策略将命令写入磁盘上的aof",{"_index":1038,"t":{"378":{"position":[[346,40]]}}}],["aof，命令为：appendonli",{"_index":1034,"t":{"378":{"position":[[125,32]]}}}],["aov",{"_index":606,"t":{"217":{"position":[[185,89]]}}}],["aov网中选择一个没有前驱的节点(入度为0",{"_index":605,"t":{"217":{"position":[[57,22]]}}}],["api/admin/dashboard/index",{"_index":901,"t":{"297":{"position":[[0,31]]}}}],["api/admin/education/subject/delete/3",{"_index":944,"t":{"317":{"position":[[0,42]]}}}],["api/admin/education/subject/edit",{"_index":943,"t":{"315":{"position":[[0,38]]}}}],["api/admin/education/subject/list",{"_index":939,"t":{"309":{"position":[[0,38]]}}}],["api/admin/education/subject/pag",{"_index":941,"t":{"311":{"position":[[0,38]]}}}],["api/admin/education/subject/select/2",{"_index":942,"t":{"313":{"position":[[0,42]]}}}],["api/admin/exam/paper/delete/9",{"_index":953,"t":{"325":{"position":[[0,35]]}}}],["api/admin/exam/paper/edit",{"_index":949,"t":{"323":{"position":[[0,31]]}}}],["api/admin/exam/paper/pag",{"_index":945,"t":{"319":{"position":[[0,31]]}}}],["api/admin/exam/paper/select/9",{"_index":948,"t":{"321":{"position":[[0,35]]}}}],["api/admin/exam/paper/taskexampag",{"_index":954,"t":{"327":{"position":[[0,39]]}}}],["api/admin/exampaperanswer/pag",{"_index":988,"t":{"349":{"position":[[0,36]]}}}],["api/admin/message/pag",{"_index":979,"t":{"345":{"position":[[0,28]]}}}],["api/admin/message/send",{"_index":986,"t":{"347":{"position":[[0,28]]}}}],["api/admin/question/delete/7",{"_index":966,"t":{"335":{"position":[[0,33]]}}}],["api/admin/question/edit",{"_index":965,"t":{"333":{"position":[[0,29]]}}}],["api/admin/question/pag",{"_index":958,"t":{"329":{"position":[[0,29]]}}}],["api/admin/question/select/508",{"_index":962,"t":{"331":{"position":[[0,35]]}}}],["api/admin/task/delete/1",{"_index":978,"t":{"343":{"position":[[0,29]]}}}],["api/admin/task/edit",{"_index":976,"t":{"341":{"position":[[0,25]]}}}],["api/admin/task/pag",{"_index":967,"t":{"337":{"position":[[0,25]]}}}],["api/admin/task/select/22",{"_index":970,"t":{"339":{"position":[[0,30]]}}}],["api/admin/upload/configandupload",{"_index":1008,"t":{"359":{"position":[[0,38]]}}}],["api/admin/user/changestatus/1",{"_index":938,"t":{"307":{"position":[[0,35]]}}}],["api/admin/user/curr",{"_index":994,"t":{"353":{"position":[[0,28]]}}}],["api/admin/user/delete/3",{"_index":937,"t":{"305":{"position":[[0,29]]}}}],["api/admin/user/edit",{"_index":926,"t":{"303":{"position":[[0,25]]}}}],["api/admin/user/event/page/list",{"_index":990,"t":{"351":{"position":[[0,36]]}}}],["api/admin/user/page/list",{"_index":913,"t":{"299":{"position":[[0,30]]}}}],["api/admin/user/select/1",{"_index":925,"t":{"301":{"position":[[0,29]]}}}],["api/admin/user/selectbyusernam",{"_index":1006,"t":{"357":{"position":[[0,37]]}}}],["api/admin/user/upd",{"_index":1003,"t":{"355":{"position":[[0,27]]},"361":{"position":[[0,27]]}}}],["api/student/dashboard/index",{"_index":760,"t":{"258":{"position":[[0,33]]}}}],["api/student/dashboard/task",{"_index":768,"t":{"260":{"position":[[0,32]]}}}],["api/student/education/subject/list",{"_index":780,"t":{"262":{"position":[[0,40]]}}}],["api/student/exam/paper/pagelist",{"_index":782,"t":{"264":{"position":[[0,37]]}}}],["api/student/exam/paper/select/9",{"_index":802,"t":{"266":{"position":[[0,37]]}}}],["api/student/exampaper/answer/answersubmit",{"_index":817,"t":{"268":{"position":[[0,47]]}}}],["api/student/exampaper/answer/edit",{"_index":833,"t":{"272":{"position":[[0,39]]}}}],["api/student/exampaper/answer/pagelist",{"_index":835,"t":{"274":{"position":[[0,43]]}}}],["api/student/exampaper/answer/read/4",{"_index":824,"t":{"270":{"position":[[0,41]]}}}],["api/student/question/answer/pag",{"_index":846,"t":{"276":{"position":[[0,38]]}}}],["api/student/question/answer/select/25067",{"_index":853,"t":{"278":{"position":[[0,46]]}}}],["api/student/user/curr",{"_index":867,"t":{"282":{"position":[[0,30]]}}}],["api/student/user/log",{"_index":861,"t":{"280":{"position":[[0,26]]}}}],["api/student/user/message/pag",{"_index":889,"t":{"286":{"position":[[0,35]]}}}],["api/student/user/message/read/14",{"_index":897,"t":{"288":{"position":[[0,38]]}}}],["api/student/user/message/unreadcount",{"_index":898,"t":{"290":{"position":[[0,42]]}}}],["api/student/user/regist",{"_index":752,"t":{"254":{"position":[[0,31]]}}}],["api/student/user/upd",{"_index":888,"t":{"284":{"position":[[0,29]]}}}],["api/user/login",{"_index":748,"t":{"252":{"position":[[0,20]]},"293":{"position":[[0,20]]}}}],["api/user/logout",{"_index":759,"t":{"256":{"position":[[0,21]]},"295":{"position":[[0,21]]}}}],["appendfsync为自己要的时间，一般就是everysec",{"_index":1043,"t":{"383":{"position":[[7,33]]}}}],["application/octet",{"_index":697,"t":{"242":{"position":[[545,17]]}}}],["apt",{"_index":728,"t":{"244":{"position":[[297,3],[320,3]]}}}],["arcnod",{"_index":532,"t":{"199":{"position":[[105,8],[152,7],[167,20],[227,7]]}}}],["asl为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4",{"_index":50,"t":{"38":{"position":[[21,68]]}}}],["asl为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12",{"_index":51,"t":{"38":{"position":[[167,60]]}}}],["auto;error_log",{"_index":673,"t":{"242":{"position":[[109,14]]}}}],["a在b前面，则图中不存在b到a",{"_index":604,"t":{"217":{"position":[[30,20]]}}}],["a是从0开始存储还是1",{"_index":273,"t":{"115":{"position":[[705,36]]}}}],["b",{"_index":16,"t":{"20":{"position":[[0,7]]},"107":{"position":[[48,4],[71,2],[74,1]]},"118":{"position":[[127,14],[287,2]]},"212":{"position":[[175,2]]},"239":{"position":[[160,1]]}}}],["b874",{"_index":872,"t":{"282":{"position":[[129,4]]},"284":{"position":[[79,4]]}}}],["b[i",{"_index":314,"t":{"118":{"position":[[567,7],[632,7]]}}}],["b[j",{"_index":315,"t":{"118":{"position":[[587,7],[664,8]]}}}],["b[k",{"_index":307,"t":{"118":{"position":[[464,4]]}}}],["b[p1]和b[p2]，较小者放入a",{"_index":299,"t":{"118":{"position":[[166,28]]}}}],["backend",{"_index":745,"t":{"247":{"position":[[45,7]]}}}],["bar{s_s}+\\bar{a_{s}}\\bar{b_{s}}s_sv=as​bs​ss​ˉ​+as​ˉ​bs​ˉ​ss",{"_index":100,"t":{"75":{"position":[[68,62]]}}}],["bf",{"_index":540,"t":{"202":{"position":[[102,53]]}}}],["bfs(g,i",{"_index":549,"t":{"202":{"position":[[494,9]]}}}],["bfs(graph",{"_index":550,"t":{"202":{"position":[[511,9]]}}}],["bfstraverse(graph",{"_index":542,"t":{"202":{"position":[[368,17]]}}}],["bgsave：redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork",{"_index":1032,"t":{"375":{"position":[[90,70]]}}}],["binary_search(int",{"_index":36,"t":{"35":{"position":[[95,17]]}}}],["bind",{"_index":1073,"t":{"393":{"position":[[71,6],[90,12]]}}}],["birthday",{"_index":877,"t":{"282":{"position":[[252,11]]},"284":{"position":[[202,11]]},"293":{"position":[[271,11]]},"299":{"position":[[380,11]]},"301":{"position":[[266,11]]},"303":{"position":[[194,11],[490,11]]},"353":{"position":[[257,11]]},"355":{"position":[[212,11]]},"361":{"position":[[207,11]]}}}],["body_bytes_s",{"_index":704,"t":{"242":{"position":[[652,16]]}}}],["bool",{"_index":204,"t":{"107":{"position":[[118,4]]},"153":{"position":[[142,4]]},"202":{"position":[[340,4]]},"204":{"position":[[107,4]]}}}],["branch",{"_index":713,"t":{"244":{"position":[[89,9]]}}}],["branch设置为gh",{"_index":666,"t":{"239":{"position":[[349,12]]}}}],["bubblesort(int",{"_index":203,"t":{"107":{"position":[[89,14]]}}}],["build",{"_index":659,"t":{"239":{"position":[[181,5]]},"244":{"position":[[352,5],[386,5],[577,6],[734,7],[742,23]]}}}],["buildgit",{"_index":654,"t":{"239":{"position":[[141,8],[200,8]]}}}],["buildmaxheap(a,len",{"_index":291,"t":{"115":{"position":[[1350,20]]}}}],["buildmaxheap(int",{"_index":275,"t":{"115":{"position":[[848,16]]}}}],["build后的代码上传到gh",{"_index":664,"t":{"239":{"position":[[289,23]]}}}],["b树的一个地方，b",{"_index":29,"t":{"29":{"position":[[0,94]]}}}],["c",{"_index":951,"t":{"323":{"position":[[573,3],[1274,3]]}}}],["c07e653d390a",{"_index":920,"t":{"299":{"position":[[256,14]]},"301":{"position":[[142,14]]}}}],["c32f",{"_index":917,"t":{"299":{"position":[[241,4]]},"301":{"position":[[127,4]]}}}],["cd",{"_index":1077,"t":{"395":{"position":[[0,2]]}}}],["cf",{"_index":97,"t":{"73":{"position":[[57,25]]}}}],["cf和最高位数位的进位c1",{"_index":105,"t":{"75":{"position":[[205,51]]}}}],["ch[0...k−1]=ch[j−k...j−1]ch[0...k",{"_index":371,"t":{"134":{"position":[[374,33]]}}}],["ch[0∼k−1]=ch[j−k∼j−1]ch[0",{"_index":381,"t":{"136":{"position":[[599,25]]}}}],["ch[j",{"_index":372,"t":{"134":{"position":[[413,4]]},"136":{"position":[[637,4]]}}}],["char",{"_index":524,"t":{"197":{"position":[[624,4]]},"199":{"position":[[216,4]]}}}],["charact",{"_index":1150,"t":{"433":{"position":[[522,46]]}}}],["checkout",{"_index":655,"t":{"239":{"position":[[150,8]]}}}],["child",{"_index":493,"t":{"164":{"position":[[325,5]]}}}],["class",{"_index":887,"t":{"282":{"position":[[455,10]]},"284":{"position":[[405,10]]}}}],["cli",{"_index":1080,"t":{"395":{"position":[[56,3],[74,3]]},"397":{"position":[[12,3],[56,3]]}}}],["client",{"_index":726,"t":{"244":{"position":[[280,6]]},"378":{"position":[[194,32]]}}}],["cli和redi",{"_index":1067,"t":{"391":{"position":[[216,9]]}}}],["cnblogs.com",{"_index":366,"t":{"132":{"position":[[205,13]]}}}],["code",{"_index":756,"t":{"254":{"position":[[126,7]]},"256":{"position":[[37,7]]},"262":{"position":[[56,7]]},"264":{"position":[[146,7]]},"266":{"position":[[53,7]]},"268":{"position":[[278,7]]},"270":{"position":[[57,7]]},"272":{"position":[[331,7]]},"274":{"position":[[104,7]]},"276":{"position":[[99,7]]},"278":{"position":[[107,7]]},"280":{"position":[[42,7]]},"282":{"position":[[46,7]]},"284":{"position":[[461,7]]},"286":{"position":[[96,7]]},"288":{"position":[[54,7]]},"290":{"position":[[58,7]]},"293":{"position":[[110,7]]},"295":{"position":[[37,7]]},"299":{"position":[[129,7]]},"301":{"position":[[45,7]]},"303":{"position":[[267,7]]},"305":{"position":[[45,7]]},"307":{"position":[[51,7]]},"309":{"position":[[54,7]]},"311":{"position":[[107,7]]},"313":{"position":[[58,7]]},"315":{"position":[[130,7]]},"317":{"position":[[58,7]]},"319":{"position":[[148,7]]},"321":{"position":[[51,7]]},"323":{"position":[[706,7]]},"325":{"position":[[51,7]]},"327":{"position":[[157,7]]},"329":{"position":[[146,7]]},"331":{"position":[[51,7]]},"333":{"position":[[331,7]]},"335":{"position":[[49,7]]},"337":{"position":[[94,7]]},"339":{"position":[[46,7]]},"341":{"position":[[341,7]]},"343":{"position":[[45,7]]},"345":{"position":[[106,7]]},"347":{"position":[[128,7]]},"349":{"position":[[109,7]]},"351":{"position":[[119,7]]},"353":{"position":[[44,7]]},"355":{"position":[[466,7]]},"357":{"position":[[66,7]]},"361":{"position":[[468,7]]}}}],["collect",{"_index":741,"t":{"247":{"position":[[4,7]]}}}],["commit",{"_index":644,"t":{"237":{"position":[[72,6]]},"239":{"position":[[218,6]]}}}],["complet",{"_index":823,"t":{"268":{"position":[[201,12]]}}}],["consum",{"_index":1139,"t":{"433":{"position":[[161,8],[312,8]]}}}],["content",{"_index":821,"t":{"268":{"position":[[138,10]]},"270":{"position":[[546,10],[611,10],[994,10]]},"272":{"position":[[186,10]]},"278":{"position":[[315,10],[592,10]]},"280":{"position":[[176,10]]},"286":{"position":[[213,10]]},"323":{"position":[[418,10],[1119,10]]},"345":{"position":[[216,10]]},"347":{"position":[[64,10]]},"351":{"position":[[276,10]]},"433":{"position":[[146,7]]}}}],["contentarray",{"_index":822,"t":{"268":{"position":[[162,15]]},"270":{"position":[[1039,15]]},"272":{"position":[[233,15]]},"278":{"position":[[636,15]]}}}],["correct",{"_index":814,"t":{"266":{"position":[[492,10]]},"270":{"position":[[712,10]]},"278":{"position":[[412,10]]},"321":{"position":[[497,10]]},"323":{"position":[[580,10],[1281,10]]},"329":{"position":[[395,10]]},"331":{"position":[[280,10]]},"333":{"position":[[216,10]]}}}],["correctarray",{"_index":813,"t":{"266":{"position":[[465,15]]},"270":{"position":[[671,15]]},"278":{"position":[[385,15]]},"321":{"position":[[468,15]]},"323":{"position":[[543,15],[1244,15]]},"331":{"position":[[253,15]]},"333":{"position":[[189,15]]}}}],["creat",{"_index":1142,"t":{"433":{"position":[[189,6]]}}}],["createtim",{"_index":794,"t":{"264":{"position":[[300,13]]},"274":{"position":[[192,13]]},"276":{"position":[[213,13]]},"280":{"position":[[218,13]]},"282":{"position":[[342,13]]},"284":{"position":[[292,13]]},"286":{"position":[[263,13]]},"293":{"position":[[372,13]]},"299":{"position":[[474,13]]},"301":{"position":[[360,13]]},"303":{"position":[[613,13]]},"319":{"position":[[303,13]]},"327":{"position":[[304,13]]},"329":{"position":[[269,13]]},"337":{"position":[[259,13]]},"339":{"position":[[255,13]]},"341":{"position":[[185,13],[553,13]]},"345":{"position":[[365,13]]},"349":{"position":[[185,13]]},"351":{"position":[[316,13]]},"353":{"position":[[351,13]]},"355":{"position":[[304,13]]},"361":{"position":[[306,13]]}}}],["createus",{"_index":798,"t":{"264":{"position":[[344,13]]},"319":{"position":[[347,13]]},"327":{"position":[[348,13]]},"329":{"position":[[334,13]]},"339":{"position":[[299,13]]},"341":{"position":[[229,13],[597,13]]}}}],["createusernam",{"_index":968,"t":{"337":{"position":[[223,17]]}}}],["c和b时候会发现不匹配，此时的next会跳转到2，从ab再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟ab中的b进行匹配成功的，此时产生了一次无效匹配，然后next到1",{"_index":424,"t":{"140":{"position":[[74,103]]}}}],["c和d时，不匹配，肉眼观察，可以直接将j",{"_index":368,"t":{"134":{"position":[[229,38]]}}}],["d",{"_index":338,"t":{"120":{"position":[[546,1]]},"278":{"position":[[375,4],[423,4]]}}}],["d.e.knuth、j.h.morris和v.r.prat一起发明了kmp算法，致力于解决这个主串指针回溯的问题来降低时间开销。kmp算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。kmp",{"_index":364,"t":{"132":{"position":[[0,175]]}}}],["d2d29da2",{"_index":869,"t":{"282":{"position":[[109,9]]},"284":{"position":[[59,9]]}}}],["daemon",{"_index":1069,"t":{"393":{"position":[[0,11],[15,11]]}}}],["danger",{"_index":497,"t":{"169":{"position":[[17,6]]},"171":{"position":[[33,6]]}}}],["data",{"_index":444,"t":{"153":{"position":[[32,5]]},"164":{"position":[[92,5],[235,5],[319,5],[395,5]]},"199":{"position":[[221,5]]}}}],["database的缩写。redis的数据都是在内存中，rdb",{"_index":1022,"t":{"367":{"position":[[139,61]]}}}],["data，边表头指针first",{"_index":531,"t":{"199":{"position":[[7,82]]}}}],["dcb3",{"_index":870,"t":{"282":{"position":[[119,4]]},"284":{"position":[[69,4]]}}}],["decr",{"_index":1093,"t":{"405":{"position":[[53,4]]}}}],["decrbi",{"_index":1094,"t":{"405":{"position":[[67,6]]}}}],["decrement",{"_index":1095,"t":{"405":{"position":[[78,17]]}}}],["default_serv",{"_index":680,"t":{"242":{"position":[[229,15],[261,15]]}}}],["default_typ",{"_index":696,"t":{"242":{"position":[[532,12]]}}}],["delet",{"_index":899,"t":{"293":{"position":[[436,10]]},"303":{"position":[[718,10]]},"309":{"position":[[204,10]]},"337":{"position":[[303,10]]}}}],["deploy",{"_index":662,"t":{"239":{"position":[[228,7]]},"244":{"position":[[72,6],[114,7],[404,6],[433,6]]}}}],["dequeue(q,v",{"_index":555,"t":{"202":{"position":[[587,13]]}}}],["destralverse(graph",{"_index":565,"t":{"204":{"position":[[135,18]]}}}],["develop",{"_index":746,"t":{"247":{"position":[[53,12]]}}}],["dfs(g,v",{"_index":572,"t":{"204":{"position":[[381,10]]}}}],["dfs(g,v);}void",{"_index":568,"t":{"204":{"position":[[246,14]]}}}],["dfs(graph",{"_index":569,"t":{"204":{"position":[[261,9]]}}}],["dfs就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟bf",{"_index":564,"t":{"204":{"position":[[0,106]]}}}],["dfs算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为o(1)o(1)o(1)，平均的为o(∣v∣)o(|v|)o(∣v",{"_index":573,"t":{"204":{"position":[[593,82]]}}}],["di=0,1,2...d_i",{"_index":59,"t":{"47":{"position":[[240,24]]}}}],["di=02,12,−12,22,−22.........k2,−k2d_i",{"_index":61,"t":{"47":{"position":[[307,39]]}}}],["did_idi",{"_index":72,"t":{"47":{"position":[[579,18]]}}}],["difficult",{"_index":815,"t":{"266":{"position":[[557,12]]},"270":{"position":[[753,12]]},"278":{"position":[[452,12]]},"321":{"position":[[564,12]]},"323":{"position":[[626,12],[1327,12]]},"329":{"position":[[475,12]]},"331":{"position":[[330,12]]},"333":{"position":[[283,12]]}}}],["dir",{"_index":737,"t":{"244":{"position":[[555,4],[572,4]]}}}],["disciplin",{"_index":631,"t":{"229":{"position":[[46,11]]}}}],["docsaururs配置文件进行修改，将config",{"_index":649,"t":{"239":{"position":[[0,48]]}}}],["docusauru",{"_index":663,"t":{"239":{"position":[[236,10]]}}}],["doexampapercount",{"_index":905,"t":{"297":{"position":[[108,19]]}}}],["doquestioncount",{"_index":907,"t":{"297":{"position":[[141,18]]}}}],["doright",{"_index":831,"t":{"270":{"position":[[970,10]]},"272":{"position":[[162,10]]},"278":{"position":[[567,10]]}}}],["dotim",{"_index":819,"t":{"268":{"position":[[76,9]]},"270":{"position":[[866,9]]},"272":{"position":[[64,9]]},"274":{"position":[[397,9]]},"349":{"position":[[390,9]]}}}],["dump",{"_index":1025,"t":{"373":{"position":[[41,12],[54,10]]}}}],["dump6379.rdb",{"_index":1028,"t":{"373":{"position":[[131,12]]}}}],["d的距离是5",{"_index":585,"t":{"212":{"position":[[178,19]]}}}],["d躺排序，一次分配要q(n)q(n)q(n)，一次收集要q(r)q(r)q(r)，所以时间复杂度为o(d(n+1))o(d(n+1))o(d(n+1",{"_index":345,"t":{"120":{"position":[[857,80]]}}}],["e",{"_index":137,"t":{"93":{"position":[[169,14]]},"194":{"position":[[55,7]]}}}],["e/i",{"_index":658,"t":{"239":{"position":[[176,4]]}}}],["e2b07f4fcc67",{"_index":934,"t":{"303":{"position":[[357,14]]}}}],["elmenttyp",{"_index":492,"t":{"164":{"position":[[308,10]]}}}],["end",{"_index":629,"t":{"229":{"position":[[23,3]]}}}],["end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":438,"t":{"145":{"position":[[211,81]]}}}],["end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":272,"t":{"115":{"position":[[617,87]]}}}],["end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":482,"t":{"155":{"position":[[287,87]]}}}],["end{aligned}​当(vi​,vj​)是g的边，则a[i][j]=1否则a[i][j]=0",{"_index":519,"t":{"197":{"position":[[235,54]]}}}],["end{aligned}​当出现s[i]=t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1",{"_index":391,"t":{"136":{"position":[[1015,89]]}}}],["end{aligned}​当有t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j",{"_index":401,"t":{"136":{"position":[[1943,157]]}}}],["end{bmatrix}⎣⎡​0001​1000​1000​0010",{"_index":522,"t":{"197":{"position":[[445,39]]}}}],["enqueue(q,v",{"_index":553,"t":{"202":{"position":[[553,13],[703,13]]}}}],["entri",{"_index":1147,"t":{"433":{"position":[[468,7]]}}}],["esl",{"_index":461,"t":{"153":{"position":[[335,4],[471,4],[600,4],[713,5]]}}}],["etc/nginx/mime.typ",{"_index":695,"t":{"242":{"position":[[509,22]]}}}],["everysec",{"_index":1041,"t":{"380":{"position":[[29,13]]}}}],["exampaperanswerid",{"_index":778,"t":{"260":{"position":[[180,20]]}}}],["exampapercount",{"_index":902,"t":{"297":{"position":[[47,17]]}}}],["exampaperid",{"_index":775,"t":{"260":{"position":[[116,14]]}}}],["exampapernam",{"_index":777,"t":{"260":{"position":[[145,16]]}}}],["ex：key",{"_index":1086,"t":{"403":{"position":[[0,14]]}}}],["e∣=∣v∣−1|",{"_index":575,"t":{"206":{"position":[[89,12]]}}}],["e（23~30",{"_index":132,"t":{"93":{"position":[[66,10]]}}}],["f7ee8270ad4c",{"_index":999,"t":{"353":{"position":[[133,14]]},"355":{"position":[[90,14]]},"361":{"position":[[83,14]]}}}],["fals",{"_index":206,"t":{"107":{"position":[[132,6]]},"204":{"position":[[197,6]]},"252":{"position":[[91,5]]},"278":{"position":[[578,6]]},"293":{"position":[[89,5]]},"303":{"position":[[729,6]]},"309":{"position":[[215,5]]},"337":{"position":[[314,5]]}}}],["fasl",{"_index":454,"t":{"153":{"position":[[212,6]]},"202":{"position":[[430,6]]}}}],["fd31ab62",{"_index":916,"t":{"299":{"position":[[231,9]]},"301":{"position":[[117,9]]}}}],["field",{"_index":1103,"t":{"411":{"position":[[26,9]]}}}],["findleft(t[],int",{"_index":466,"t":{"153":{"position":[[502,16]]}}}],["findparent(t[],int",{"_index":455,"t":{"153":{"position":[[232,18]]}}}],["findright(t[],int",{"_index":462,"t":{"153":{"position":[[366,17]]}}}],["first",{"_index":536,"t":{"199":{"position":[[235,7]]}}}],["firstchild;}*treelist",{"_index":494,"t":{"164":{"position":[[331,28]]}}}],["firstneighbor(g,v);w>=0;w",{"_index":557,"t":{"202":{"position":[[609,25]]},"204":{"position":[[318,25]]}}}],["fixedpap",{"_index":761,"t":{"258":{"position":[[49,13]]}}}],["flag",{"_index":205,"t":{"107":{"position":[[125,4]]}}}],["for(gap",{"_index":180,"t":{"103":{"position":[[274,7]]}}}],["for(i",{"_index":152,"t":{"99":{"position":[[498,5]]},"101":{"position":[[375,5]]},"103":{"position":[[318,5]]},"118":{"position":[[477,5]]},"202":{"position":[[390,5],[451,5]]}}}],["for(int",{"_index":207,"t":{"107":{"position":[[139,7],[165,7]]},"113":{"position":[[299,7],[338,7]]},"115":{"position":[[879,7],[1033,7],[1371,7]]},"153":{"position":[[94,7]]}}}],["for(j",{"_index":158,"t":{"99":{"position":[[553,5]]},"101":{"position":[[533,5]]},"103":{"position":[[485,5]]}}}],["for(k",{"_index":305,"t":{"118":{"position":[[432,5]]}}}],["for(v",{"_index":566,"t":{"204":{"position":[[158,5],[204,5]]}}}],["for(w",{"_index":556,"t":{"202":{"position":[[601,5]]},"204":{"position":[[310,5]]}}}],["for循环，时间复杂度为o(n2)o(n^2)o(n2",{"_index":165,"t":{"99":{"position":[[713,45]]}}}],["foundat",{"_index":33,"t":{"32":{"position":[[0,10]]},"51":{"position":[[0,10]]},"95":{"position":[[0,10]]},"128":{"position":[[0,10]]},"142":{"position":[[0,10]]},"173":{"position":[[0,10]]},"186":{"position":[[0,10]]}}}],["frac{n(n",{"_index":219,"t":{"107":{"position":[[406,9]]}}}],["frametextcontentid",{"_index":800,"t":{"264":{"position":[[439,21]]},"319":{"position":[[414,21]]},"327":{"position":[[415,21]]},"339":{"position":[[367,21]]},"341":{"position":[[296,21],[664,21]]}}}],["ftp",{"_index":712,"t":{"244":{"position":[[68,3],[276,3],[400,3],[560,5],[714,3]]}}}],["fundament",{"_index":630,"t":{"229":{"position":[[34,11]]}}}],["g",{"_index":543,"t":{"202":{"position":[[386,3],[521,3]]},"204":{"position":[[154,3]]}}}],["g,int",{"_index":570,"t":{"204":{"position":[[271,5]]}}}],["g=(v,e)和g′=(v′,e′)g",{"_index":508,"t":{"188":{"position":[[88,19]]}}}],["gap",{"_index":186,"t":{"103":{"position":[[449,6],[521,4]]}}}],["gap+1;i<=n;i",{"_index":183,"t":{"103":{"position":[[326,16]]}}}],["gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的p",{"_index":184,"t":{"103":{"position":[[343,91]]}}}],["gap,i,j",{"_index":179,"t":{"103":{"position":[[249,8]]}}}],["gap/2",{"_index":182,"t":{"103":{"position":[[303,7]]}}}],["gap;j>0",{"_index":187,"t":{"103":{"position":[[495,7]]}}}],["geo",{"_index":1114,"t":{"423":{"position":[[6,3]]}}}],["geoadd：多个经度、维度、位置名称添加到key",{"_index":1124,"t":{"427":{"position":[[0,26]]}}}],["geodist",{"_index":1126,"t":{"427":{"position":[[52,21]]}}}],["geohash：返回一个或者多个位置元素的geohash",{"_index":1129,"t":{"427":{"position":[[141,28]]}}}],["geopo",{"_index":1125,"t":{"427":{"position":[[27,24]]}}}],["georadiu",{"_index":1127,"t":{"427":{"position":[[74,43]]}}}],["georaiusbymemb",{"_index":1128,"t":{"427":{"position":[[118,22]]}}}],["get_next(str",{"_index":409,"t":{"138":{"position":[[44,15]]}}}],["get_nextval(str",{"_index":426,"t":{"140":{"position":[[343,18]]}}}],["gh",{"_index":656,"t":{"239":{"position":[[162,2],[280,2]]}}}],["git",{"_index":636,"t":{"233":{"position":[[168,3]]},"237":{"position":[[21,3],[51,11],[67,4]]},"239":{"position":[[213,4],[264,3]]},"244":{"position":[[699,14]]}}}],["github",{"_index":633,"t":{"233":{"position":[[54,6],[70,6],[101,6],[108,17],[208,6],[221,18]]},"239":{"position":[[250,6]]}}}],["github/workflows，并且在里面创建nodejs.yml",{"_index":710,"t":{"244":{"position":[[0,61]]}}}],["githubpag",{"_index":638,"t":{"233":{"position":[[288,47]]}}}],["github提供的托管工具githubpag",{"_index":632,"t":{"233":{"position":[[0,53]]}}}],["gradelevel",{"_index":810,"t":{"266":{"position":[[398,13]]},"270":{"position":[[482,13]]},"278":{"position":[[254,13]]},"321":{"position":[[399,13]]},"323":{"position":[[356,13],[1057,13]]},"331":{"position":[[189,13]]},"333":{"position":[[122,13]]},"337":{"position":[[34,13],[201,13]]},"339":{"position":[[105,13]]},"341":{"position":[[44,13],[400,13]]}}}],["group",{"_index":1140,"t":{"433":{"position":[[170,5]]}}}],["h(key)+i*hash_2(key",{"_index":69,"t":{"47":{"position":[[514,22]]}}}],["h(key)addr=h(key)建立起关键字和散列地址的映射关系，408",{"_index":55,"t":{"47":{"position":[[25,47]]}}}],["hash",{"_index":1101,"t":{"411":{"position":[[6,4],[47,9],[78,4]]}}}],["hashtable。redi",{"_index":1107,"t":{"415":{"position":[[77,15]]}}}],["headadjust(a,1,i",{"_index":294,"t":{"115":{"position":[[1414,16]]}}}],["headadjust(a,i,len);}void",{"_index":278,"t":{"115":{"position":[[934,25]]}}}],["headadjust(int",{"_index":279,"t":{"115":{"position":[[960,14]]}}}],["heapsort(int",{"_index":290,"t":{"115":{"position":[[1323,12]]}}}],["hi=(h(key)+i∗hash2(key))%mh_i",{"_index":68,"t":{"47":{"position":[[475,36]]}}}],["high",{"_index":48,"t":{"35":{"position":[[254,4]]},"101":{"position":[[466,5],[515,4],[552,4]]},"109":{"position":[[435,6],[507,6],[546,6],[589,5],[763,6],[779,6]]},"118":{"position":[[372,6],[767,6]]}}}],["high)/2",{"_index":45,"t":{"35":{"position":[[204,8]]}}}],["high位置的元素拿走（挖坑），去填low",{"_index":225,"t":{"109":{"position":[[347,22]]}}}],["high向前移动，直到遇到第一个比pivot",{"_index":224,"t":{"109":{"position":[[320,26]]}}}],["host",{"_index":690,"t":{"242":{"position":[[444,4],[449,6]]}}}],["http",{"_index":635,"t":{"233":{"position":[[151,5]]}}}],["http://xzs.file.mindskip.net/fi4vlef1ri4vmgsonwn2ch0o8ed_",{"_index":1010,"t":{"359":{"position":[[101,60]]}}}],["http://服务器ip",{"_index":688,"t":{"242":{"position":[[413,13]]}}}],["http_refer",{"_index":705,"t":{"242":{"position":[[669,15]]}}}],["http_user_ag",{"_index":706,"t":{"242":{"position":[[687,19]]}}}],["http_x_forwarded_for",{"_index":707,"t":{"242":{"position":[[707,25]]}}}],["https://username.github.io",{"_index":668,"t":{"239":{"position":[[392,52]]}}}],["https://username.github.io',baseurl",{"_index":651,"t":{"239":{"position":[[54,37]]}}}],["hyperloglog",{"_index":1130,"t":{"429":{"position":[[0,11],[12,23],[94,11],[181,11],[222,11]]}}}],["i++后指向5，对前一个组进行排序，只不过前一个表是27",{"_index":195,"t":{"103":{"position":[[689,40]]}}}],["i+1;j<n;j",{"_index":254,"t":{"113":{"position":[[350,13]]}}}],["i,j",{"_index":151,"t":{"99":{"position":[[493,4]]}}}],["i,j,k",{"_index":304,"t":{"118":{"position":[[425,6]]}}}],["i,j,low,high,mid",{"_index":169,"t":{"101":{"position":[[357,17]]}}}],["i;i<=mid",{"_index":310,"t":{"118":{"position":[[503,8]]}}}],["id",{"_index":762,"t":{"258":{"position":[[74,5],[86,6]]},"260":{"position":[[50,5],[59,6],[136,8],[206,6]]},"262":{"position":[[100,5],[112,6]]},"264":{"position":[[87,6],[212,5],[224,6]]},"266":{"position":[[95,5],[104,6],[315,5],[324,6]]},"268":{"position":[[131,6],[254,5],[262,7]]},"270":{"position":[[117,5],[126,6],[389,5],[398,6],[850,5],[859,6],[930,5],[939,6],[963,6]]},"272":{"position":[[48,5],[57,6],[122,5],[131,6],[155,6]]},"274":{"position":[[173,5],[185,6],[307,6]]},"276":{"position":[[169,5],[182,6]]},"278":{"position":[[165,5],[176,6],[226,6],[528,5],[560,6]]},"280":{"position":[[86,5],[111,6]]},"282":{"position":[[88,5]]},"284":{"position":[[38,5]]},"286":{"position":[[162,5]]},"293":{"position":[[152,5]]},"299":{"position":[[201,5],[212,6]]},"301":{"position":[[87,5],[98,6]]},"303":{"position":[[34,5],[309,5],[372,6]]},"309":{"position":[[98,5],[108,6]]},"311":{"position":[[173,5]]},"313":{"position":[[100,5]]},"315":{"position":[[47,5]]},"319":{"position":[[40,5],[214,5],[224,6]]},"321":{"position":[[93,5],[103,6],[313,5],[323,6]]},"323":{"position":[[40,5],[50,6],[264,5],[274,6],[748,5],[758,6],[965,5],[975,6]]},"327":{"position":[[223,5]]},"329":{"position":[[38,5],[212,5]]},"331":{"position":[[93,5],[104,6]]},"333":{"position":[[38,5],[48,6]]},"337":{"position":[[160,5],[170,6]]},"339":{"position":[[88,5],[98,6],[168,5],[179,6]]},"341":{"position":[[34,5],[96,5],[106,6],[383,5],[393,6],[464,5],[474,6]]},"345":{"position":[[173,5],[183,6]]},"349":{"position":[[175,5],[299,6]]},"351":{"position":[[186,5],[196,6],[216,6]]},"353":{"position":[[86,5]]},"355":{"position":[[36,5],[46,6]]},"357":{"position":[[146,6]]},"361":{"position":[[36,5]]},"433":{"position":[[93,42]]}}}],["id，支持ack",{"_index":1138,"t":{"433":{"position":[[56,36]]}}}],["if(!flag)return",{"_index":214,"t":{"107":{"position":[[253,15]]}}}],["if(!visited[i",{"_index":548,"t":{"202":{"position":[[478,15]]}}}],["if(!visited[w",{"_index":559,"t":{"202":{"position":[[657,16]]},"204":{"position":[[230,15],[365,15]]}}}],["if(a[0]>a[i])break",{"_index":286,"t":{"115":{"position":[[1136,19]]}}}],["if(a[i",{"_index":185,"t":{"103":{"position":[[435,7]]}}}],["if(a[i]<a[i",{"_index":155,"t":{"99":{"position":[[523,11]]}}}],["if(a[j",{"_index":211,"t":{"107":{"position":[[191,7]]}}}],["if(a[j]<a[min",{"_index":255,"t":{"113":{"position":[[364,15]]}}}],["if(a[mid",{"_index":171,"t":{"101":{"position":[[477,9]]}}}],["if(b[i]<=b[j",{"_index":313,"t":{"118":{"position":[[545,14]]}}}],["if(i!=min",{"_index":256,"t":{"113":{"position":[[391,10]]}}}],["if(i<len",{"_index":284,"t":{"115":{"position":[[1090,8]]}}}],["if(isempty(index))return",{"_index":460,"t":{"153":{"position":[[307,24],[686,24]]}}}],["if(isempty(left))return",{"_index":468,"t":{"153":{"position":[[573,23]]}}}],["if(isempty(right))return",{"_index":465,"t":{"153":{"position":[[443,24]]}}}],["if(isempty(x",{"_index":456,"t":{"153":{"position":[[255,13],[388,13],[523,13]]}}}],["if(j",{"_index":361,"t":{"130":{"position":[[315,4]]},"140":{"position":[[431,4]]}}}],["if(j==0||s.ch[i",{"_index":422,"t":{"138":{"position":[[332,16]]}}}],["if(j>t.len",{"_index":423,"t":{"138":{"position":[[395,11]]}}}],["if(k==0",{"_index":414,"t":{"138":{"position":[[122,7]]}}}],["if(low",{"_index":237,"t":{"109":{"position":[[770,6]]}}}],["if(low<high",{"_index":321,"t":{"118":{"position":[[774,13]]}}}],["if(mid",{"_index":46,"t":{"35":{"position":[[213,6],[239,6]]}}}],["if(s.ch[i",{"_index":359,"t":{"130":{"position":[[227,10]]}}}],["if(t.ch[j",{"_index":430,"t":{"140":{"position":[[475,10]]}}}],["if(x>=len",{"_index":451,"t":{"153":{"position":[[167,9]]}}}],["imagepath",{"_index":751,"t":{"252":{"position":[[144,12]]},"282":{"position":[[479,12]]},"284":{"position":[[429,12]]},"293":{"position":[[353,12]]},"299":{"position":[[601,12]]},"301":{"position":[[487,12]]},"303":{"position":[[589,12]]},"353":{"position":[[464,12]]},"355":{"position":[[434,12]]},"361":{"position":[[436,12]]}}}],["includ",{"_index":694,"t":{"242":{"position":[[501,7]]},"244":{"position":[[718,9]]}}}],["incr",{"_index":1090,"t":{"405":{"position":[[12,4]]}}}],["incrbi",{"_index":1091,"t":{"405":{"position":[[24,6]]}}}],["increment",{"_index":1092,"t":{"405":{"position":[[35,17]]}}}],["index",{"_index":458,"t":{"153":{"position":[[294,5],[347,6],[678,7]]},"242":{"position":[[348,5]]}}}],["index(str",{"_index":352,"t":{"130":{"position":[[151,12]]}}}],["index.html",{"_index":683,"t":{"242":{"position":[[354,11]]}}}],["index_kmp(str",{"_index":419,"t":{"138":{"position":[[247,16]]}}}],["info",{"_index":7,"t":{"10":{"position":[[156,4]]},"15":{"position":[[0,4]]},"103":{"position":[[138,4]]}}}],["init(treenod",{"_index":446,"t":{"153":{"position":[[66,13]]}}}],["initgit",{"_index":640,"t":{"237":{"position":[[25,7]]}}}],["initqueue(q",{"_index":546,"t":{"202":{"position":[[437,13]]}}}],["insertsort(int",{"_index":150,"t":{"99":{"position":[[460,14]]}}}],["insertsortplus(int",{"_index":168,"t":{"101":{"position":[[320,18]]}}}],["instal",{"_index":725,"t":{"244":{"position":[[268,7],[328,7],[367,7]]},"391":{"position":[[148,9]]}}}],["int",{"_index":35,"t":{"35":{"position":[[91,3],[127,3],[145,3]]},"99":{"position":[[489,3]]},"101":{"position":[[353,3]]},"103":{"position":[[245,3]]},"107":{"position":[[53,3]]},"109":{"position":[[473,3],[514,3],[786,3]]},"113":{"position":[[325,3]]},"118":{"position":[[283,3],[292,4],[421,3],[788,3]]},"130":{"position":[[147,3],[177,3]]},"138":{"position":[[76,3],[243,3],[288,3]]},"140":{"position":[[380,3]]},"153":{"position":[[28,3],[38,3],[219,12],[354,11],[490,11]]},"164":{"position":[[88,3],[98,3],[231,3],[391,3]]},"197":{"position":[[637,3],[680,3]]},"199":{"position":[[119,3],[133,3],[297,3]]}}}],["intro",{"_index":623,"t":{"221":{"position":[[0,5]]}}}],["intset",{"_index":1106,"t":{"415":{"position":[[67,6]]}}}],["ip",{"_index":692,"t":{"242":{"position":[[480,2]]}}}],["isempty(t[],int",{"_index":450,"t":{"153":{"position":[[147,15]]}}}],["isempty;}treenod",{"_index":445,"t":{"153":{"position":[[42,18]]}}}],["item",{"_index":811,"t":{"266":{"position":[[420,8]]},"270":{"position":[[504,8]]},"278":{"position":[[277,8]]},"321":{"position":[[421,8]]},"323":{"position":[[378,8],[1079,8]]},"331":{"position":[[211,8]]},"333":{"position":[[144,8]]}}}],["itemord",{"_index":816,"t":{"266":{"position":[[578,12]]},"268":{"position":[[227,12]]},"270":{"position":[[776,12],[1018,12]]},"272":{"position":[[210,12]]},"278":{"position":[[473,12],[615,12]]},"309":{"position":[[180,12]]},"321":{"position":[[585,12]]},"323":{"position":[[647,12],[1348,12]]},"331":{"position":[[351,12]]},"333":{"position":[[304,12]]}}}],["itemuuid",{"_index":950,"t":{"323":{"position":[[467,11],[1168,11]]}}}],["i做前段指针，j",{"_index":312,"t":{"118":{"position":[[529,15]]}}}],["i前移（i",{"_index":251,"t":{"113":{"position":[[240,19]]}}}],["i向前走到4",{"_index":194,"t":{"103":{"position":[[668,20]]}}}],["i和j",{"_index":351,"t":{"130":{"position":[[49,68]]}}}],["i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i",{"_index":246,"t":{"113":{"position":[[0,158]]}}}],["i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n",{"_index":217,"t":{"107":{"position":[[351,44]]}}}],["i，前面i",{"_index":144,"t":{"99":{"position":[[34,25]]}}}],["j",{"_index":161,"t":{"99":{"position":[[581,3]]},"107":{"position":[[173,1]]},"109":{"position":[[378,12]]},"113":{"position":[[346,1],[386,2]]},"120":{"position":[[526,1]]},"130":{"position":[[214,1],[269,4],[290,1],[304,1]]},"134":{"position":[[464,93]]},"136":{"position":[[352,35],[545,53],[649,1],[911,1],[934,1],[972,1],[1818,1],[1898,1],[1940,2]]},"138":{"position":[[80,1],[367,4],[380,1]]},"140":{"position":[[384,1],[465,4]]}}}],["j<=high;k",{"_index":311,"t":{"118":{"position":[[515,13]]}}}],["j<t.len",{"_index":421,"t":{"138":{"position":[[322,9]]}}}],["jekyl",{"_index":637,"t":{"233":{"position":[[186,21]]}}}],["job",{"_index":714,"t":{"244":{"position":[[108,5]]}}}],["jpg",{"_index":1009,"t":{"359":{"position":[[66,9],[84,9],[185,7]]}}}],["j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j",{"_index":394,"t":{"136":{"position":[[1292,52]]}}}],["j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的ab相等呀，而主串中指针扫过的位置，必有ab匹配，那么我们可以直接跳过前部的ab",{"_index":384,"t":{"136":{"position":[[688,106]]}}}],["j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k",{"_index":370,"t":{"134":{"position":[[293,80]]}}}],["j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next",{"_index":375,"t":{"136":{"position":[[0,192]]}}}],["k",{"_index":287,"t":{"115":{"position":[[1201,1]]},"136":{"position":[[630,1],[642,1],[954,1],[965,1],[987,1],[1010,1],[1800,1],[1811,1],[1834,2],[1873,1],[1891,1],[1924,2],[1933,1]]},"138":{"position":[[172,4],[211,1]]},"140":{"position":[[470,4],[511,2],[587,1]]}}}],["k*2",{"_index":283,"t":{"115":{"position":[[1062,27]]}}}],["k*2;i<len;i*=2",{"_index":282,"t":{"115":{"position":[[1045,16]]}}}],["k,int",{"_index":280,"t":{"115":{"position":[[983,5]]}}}],["k...j",{"_index":373,"t":{"134":{"position":[[418,5]]}}}],["k=next[k]k=next[k]k=next[k",{"_index":402,"t":{"136":{"position":[[2145,52]]}}}],["k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k",{"_index":65,"t":{"47":{"position":[[384,47]]}}}],["k_j^{i",{"_index":335,"t":{"120":{"position":[[503,7]]}}}],["kb",{"_index":1131,"t":{"429":{"position":[[116,2]]}}}],["key",{"_index":38,"t":{"35":{"position":[[121,5],[248,5]]},"47":{"position":[[118,3]]},"405":{"position":[[17,6],[31,3],[58,8],[74,3]]}}}],["key)reutrn",{"_index":47,"t":{"35":{"position":[[223,10]]}}}],["key。查找的时候先找最值key",{"_index":52,"t":{"40":{"position":[[0,83]]}}}],["key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high",{"_index":34,"t":{"35":{"position":[[0,83]]}}}],["key节点，计数一次，然后去块间顺序查找，依次+1",{"_index":53,"t":{"42":{"position":[[5,31]]}}}],["kmp",{"_index":350,"t":{"128":{"position":[[19,7]]},"134":{"position":[[0,54],[211,17]]},"138":{"position":[[236,6]]}}}],["kv模式不变，但是v是一个键值对，map<string,map<object,object",{"_index":1104,"t":{"413":{"position":[[0,47]]}}}],["l[1.......i",{"_index":141,"t":{"99":{"position":[[0,11]]}}}],["l[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得l分为两块：l[1....k",{"_index":221,"t":{"109":{"position":[[7,68]]}}}],["l[i",{"_index":142,"t":{"99":{"position":[[15,4],[287,14],[302,12]]}}}],["l[i+1......n",{"_index":143,"t":{"99":{"position":[[20,13]]}}}],["l[i]，然后将子序列中大于l[i",{"_index":148,"t":{"99":{"position":[[237,49]]}}}],["last_delivered_id",{"_index":1143,"t":{"433":{"position":[[218,17],[250,35],[286,17]]}}}],["lastactivetim",{"_index":882,"t":{"282":{"position":[[320,17]]},"284":{"position":[[270,17]]},"293":{"position":[[412,17]]},"299":{"position":[[424,17]]},"301":{"position":[[310,17]]},"303":{"position":[[676,17]]},"353":{"position":[[320,17]]},"355":{"position":[[273,17]]},"361":{"position":[[275,17]]}}}],["latest",{"_index":716,"t":{"244":{"position":[[138,6]]}}}],["lbs应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的xxx",{"_index":1115,"t":{"425":{"position":[[0,85]]}}}],["le",{"_index":9,"t":{"10":{"position":[[238,3]]},"47":{"position":[[432,3]]},"56":{"position":[[85,3],[147,3],[153,3]]},"58":{"position":[[146,3],[152,3],[197,3],[203,3]]},"115":{"position":[[568,3],[596,3]]},"120":{"position":[[499,3],[511,3],[522,3],[528,3],[536,3],[542,3]]},"155":{"position":[[238,3],[266,3]]}}}],["left",{"_index":467,"t":{"153":{"position":[[562,4],[612,5]]}}}],["leftchild,nexts",{"_index":495,"t":{"164":{"position":[[414,22]]}}}],["len",{"_index":39,"t":{"35":{"position":[[131,3],[164,3]]},"99":{"position":[[483,5]]},"101":{"position":[[347,5]]},"103":{"position":[[239,5]]},"107":{"position":[[112,5]]},"113":{"position":[[293,5]]},"115":{"position":[[873,5],[989,5],[1344,5]]},"153":{"position":[[88,5]]}}}],["len(a",{"_index":40,"t":{"35":{"position":[[137,7]]}}}],["len/2",{"_index":277,"t":{"115":{"position":[[906,27]]}}}],["len/2;gap>=1;gap",{"_index":181,"t":{"103":{"position":[[284,16]]}}}],["len/2;i>0;i",{"_index":276,"t":{"115":{"position":[[891,14]]}}}],["len;i",{"_index":154,"t":{"99":{"position":[[513,9]]},"101":{"position":[[390,9]]}}}],["len;i>n;i",{"_index":292,"t":{"115":{"position":[[1383,9]]}}}],["len，那么第一棵子树的根节点下表为len/2",{"_index":274,"t":{"115":{"position":[[746,35]]}}}],["level",{"_index":803,"t":{"266":{"position":[[111,8]]},"270":{"position":[[133,8]]},"309":{"position":[[136,8]]},"311":{"position":[[47,8],[204,8]]},"313":{"position":[[131,8]]},"315":{"position":[[78,8]]},"319":{"position":[[52,8]]},"321":{"position":[[110,8]]},"323":{"position":[[57,8],[765,8]]},"327":{"position":[[72,8]]},"329":{"position":[[72,8]]}}}],["levelnam",{"_index":940,"t":{"309":{"position":[[153,12]]},"311":{"position":[[221,12]]},"313":{"position":[[148,12]]},"315":{"position":[[95,12]]}}}],["lftp",{"_index":730,"t":{"244":{"position":[[339,4]]}}}],["limitdatetim",{"_index":806,"t":{"266":{"position":[[220,16]]},"270":{"position":[[244,16]]},"321":{"position":[[220,16]]},"323":{"position":[[168,16],[876,16]]}}}],["limitendtim",{"_index":766,"t":{"258":{"position":[[154,15]]}}}],["limitstarttim",{"_index":765,"t":{"258":{"position":[[121,17]]}}}],["list",{"_index":789,"t":{"264":{"position":[[200,7]]},"274":{"position":[[161,7]]},"276":{"position":[[157,7]]},"286":{"position":[[150,7]]},"299":{"position":[[189,7]]},"311":{"position":[[161,7]]},"319":{"position":[[202,7]]},"327":{"position":[[211,7]]},"329":{"position":[[200,7]]},"337":{"position":[[148,7]]},"345":{"position":[[161,7]]},"349":{"position":[[163,7]]},"351":{"position":[[174,7]]},"433":{"position":[[476,28]]}}}],["listen",{"_index":679,"t":{"242":{"position":[[218,6],[245,6]]}}}],["list（列表），redi",{"_index":1096,"t":{"407":{"position":[[0,82]]}}}],["ll",{"_index":2,"t":{"5":{"position":[[22,5]]},"7":{"position":[[94,5]]},"12":{"position":[[183,21]]}}}],["local",{"_index":738,"t":{"244":{"position":[[566,5]]}}}],["locat",{"_index":686,"t":{"242":{"position":[[389,8]]}}}],["log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1",{"_index":483,"t":{"155":{"position":[[381,94]]}}}],["log_format",{"_index":699,"t":{"242":{"position":[[571,10]]}}}],["low",{"_index":41,"t":{"35":{"position":[[149,3],[197,4],[278,3]]},"101":{"position":[[413,3],[459,4],[495,3]]},"109":{"position":[[305,14],[370,7],[657,6],[718,5]]}}}],["low+high)/2",{"_index":322,"t":{"118":{"position":[[798,13]]}}}],["low,int",{"_index":229,"t":{"109":{"position":[[499,7],[755,7]]},"118":{"position":[[356,7],[759,7]]}}}],["low,j",{"_index":308,"t":{"118":{"position":[[485,5]]}}}],["low;k<=high;k",{"_index":306,"t":{"118":{"position":[[440,16]]}}}],["low位置的元素拿走，填high",{"_index":227,"t":{"109":{"position":[[417,17]]}}}],["low向后移动，直到遇到第一个比pivot",{"_index":226,"t":{"109":{"position":[[391,25]]}}}],["low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j",{"_index":223,"t":{"109":{"position":[[162,142]]}}}],["lr",{"_index":4,"t":{"5":{"position":[[34,7]]},"7":{"position":[[106,7]]},"12":{"position":[[227,29]]}}}],["m",{"_index":22,"t":{"24":{"position":[[253,30]]},"239":{"position":[[226,1]]}}}],["m\"提交信息\"git",{"_index":645,"t":{"237":{"position":[[80,10]]}}}],["m*r^en=(−1)s∗m∗r",{"_index":123,"t":{"89":{"position":[[28,17]]}}}],["m+1",{"_index":501,"t":{"171":{"position":[[162,3]]}}}],["m/2",{"_index":17,"t":{"22":{"position":[[0,26]]},"24":{"position":[[0,26],[115,27]]},"27":{"position":[[29,37]]}}}],["m/2]（向上取整）棵子树，即至少有[m/2",{"_index":14,"t":{"15":{"position":[[45,45]]}}}],["m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3",{"_index":66,"t":{"47":{"position":[[436,32]]}}}],["main",{"_index":648,"t":{"237":{"position":[[106,4]]},"242":{"position":[[582,4],[770,6]]},"244":{"position":[[101,4]]}}}],["make",{"_index":1064,"t":{"391":{"position":[[143,4]]}}}],["malloc(sizeof(int)*(n+1",{"_index":300,"t":{"118":{"position":[[297,28]]}}}],["mathemat",{"_index":628,"t":{"229":{"position":[[4,11]]}}}],["max[ve(j",{"_index":610,"t":{"219":{"position":[[104,9]]}}}],["maxsize;i",{"_index":487,"t":{"164":{"position":[[150,12]]}}}],["merge(a,low,mid,high",{"_index":325,"t":{"118":{"position":[[859,22]]}}}],["merge(int",{"_index":301,"t":{"118":{"position":[[338,9]]}}}],["mergesort(a,low,mid",{"_index":323,"t":{"118":{"position":[[812,21]]}}}],["mergesort(a,mid+1,high",{"_index":324,"t":{"118":{"position":[[834,24]]}}}],["mergesort(int",{"_index":320,"t":{"118":{"position":[[737,13]]}}}],["messag",{"_index":757,"t":{"254":{"position":[[137,10]]},"256":{"position":[[48,10]]},"262":{"position":[[67,10]]},"264":{"position":[[157,10]]},"266":{"position":[[64,10]]},"268":{"position":[[289,10]]},"270":{"position":[[68,10]]},"272":{"position":[[342,10]]},"274":{"position":[[115,10]]},"276":{"position":[[110,10]]},"278":{"position":[[118,10]]},"280":{"position":[[53,10]]},"282":{"position":[[57,10]]},"284":{"position":[[472,10]]},"286":{"position":[[107,10]]},"288":{"position":[[65,10]]},"290":{"position":[[69,10]]},"293":{"position":[[121,10]]},"295":{"position":[[48,10]]},"299":{"position":[[140,10]]},"301":{"position":[[56,10]]},"303":{"position":[[278,10]]},"305":{"position":[[63,10]]},"307":{"position":[[62,10]]},"309":{"position":[[65,10]]},"311":{"position":[[118,10]]},"313":{"position":[[69,10]]},"315":{"position":[[141,10]]},"317":{"position":[[69,10]]},"319":{"position":[[159,10]]},"321":{"position":[[62,10]]},"323":{"position":[[717,10]]},"325":{"position":[[62,10]]},"327":{"position":[[168,10]]},"329":{"position":[[157,10]]},"331":{"position":[[62,10]]},"333":{"position":[[342,10]]},"335":{"position":[[60,10]]},"337":{"position":[[105,10]]},"339":{"position":[[57,10]]},"341":{"position":[[352,10]]},"343":{"position":[[63,10]]},"345":{"position":[[117,10]]},"347":{"position":[[146,10]]},"349":{"position":[[120,10]]},"351":{"position":[[130,10]]},"353":{"position":[[55,10]]},"355":{"position":[[477,10]]},"357":{"position":[[77,10]]},"361":{"position":[[479,10]]},"433":{"position":[[138,7]]}}}],["messageid",{"_index":891,"t":{"286":{"position":[[196,12]]}}}],["mgraph",{"_index":529,"t":{"197":{"position":[[699,20]]}}}],["mhi​=(h(key)+i∗hash2​(key))%m",{"_index":70,"t":{"47":{"position":[[540,29]]}}}],["mid",{"_index":44,"t":{"35":{"position":[[191,3],[234,4],[261,3],[284,3]]},"101":{"position":[[453,3],[501,3],[522,3]]},"118":{"position":[[792,3]]}}}],["mid+1,k",{"_index":309,"t":{"118":{"position":[[493,7]]}}}],["mid,int",{"_index":302,"t":{"118":{"position":[[364,7]]}}}],["mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high",{"_index":303,"t":{"118":{"position":[[379,41]]}}}],["min",{"_index":253,"t":{"113":{"position":[[329,3],[380,3]]}}}],["min[vl(j",{"_index":615,"t":{"219":{"position":[[333,9]]}}}],["mode",{"_index":1071,"t":{"393":{"position":[[43,4],[63,4]]}}}],["modifytim",{"_index":885,"t":{"282":{"position":[[379,13]]},"284":{"position":[[329,13]]},"293":{"position":[[392,13]]},"299":{"position":[[518,13]]},"301":{"position":[[404,13]]},"303":{"position":[[649,13]]},"353":{"position":[[395,13]]},"355":{"position":[[348,13]]},"361":{"position":[[350,13]]}}}],["mothdaydoexamquestionvalu",{"_index":911,"t":{"297":{"position":[[213,29]]}}}],["mothdaytext",{"_index":912,"t":{"297":{"position":[[258,14]]}}}],["mothdayuseractionvalu",{"_index":909,"t":{"297":{"position":[[173,25]]}}}],["mq最低位：为1则加x的补码，为0则加0",{"_index":112,"t":{"80":{"position":[[115,22]]}}}],["mq，messag",{"_index":1134,"t":{"431":{"position":[[50,19]]}}}],["myredi",{"_index":1078,"t":{"395":{"position":[[3,13]]}}}],["myredis/redis.conf",{"_index":1079,"t":{"395":{"position":[[30,19]]}}}],["m个子树，即一个节点中至多m",{"_index":13,"t":{"15":{"position":[[5,23]]}}}],["m阶b+树每个结点最多m棵子树（也就是最多m",{"_index":27,"t":{"27":{"position":[[0,28]]}}}],["m（0~22",{"_index":133,"t":{"93":{"position":[[77,9]]}}}],["m，取不大于m的最大质数p，构建函数h(key)=key%ph(key",{"_index":56,"t":{"47":{"position":[[73,42]]}}}],["m，所以总数为n",{"_index":500,"t":{"171":{"position":[[153,8]]}}}],["n",{"_index":109,"t":{"78":{"position":[[97,13]]},"107":{"position":[[177,1]]},"113":{"position":[[179,7],[462,15]]},"118":{"position":[[38,65]]}}}],["n(n",{"_index":511,"t":{"192":{"position":[[67,7]]},"194":{"position":[[44,7]]}}}],["n(n−1)2\\frac{n(n",{"_index":259,"t":{"113":{"position":[[495,36]]}}}],["n)<)(n)<o(nlong_2n)<o(n^2)<o(n^3)<o(2^n)<o(n!)<o(n^n)o(1)<o(log2​n)<)(n)<o(nlong2​n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":507,"t":{"184":{"position":[[268,114]]}}}],["n*n邻接矩阵，每条边的权值用int",{"_index":527,"t":{"197":{"position":[[655,24]]}}}],["n+1",{"_index":77,"t":{"56":{"position":[[0,42]]},"58":{"position":[[116,9]]},"71":{"position":[[143,27]]}}}],["n+1次，左移n",{"_index":117,"t":{"82":{"position":[[92,11]]},"84":{"position":[[105,10]]}}}],["n,0",{"_index":337,"t":{"120":{"position":[[532,3]]}}}],["n/2",{"_index":176,"t":{"103":{"position":[[143,28],[184,8]]}}}],["n2",{"_index":474,"t":{"155":{"position":[[28,2]]}}}],["n=(−1)s∗m∗ren",{"_index":121,"t":{"89":{"position":[[0,17]]}}}],["n[i].par",{"_index":488,"t":{"164":{"position":[[163,11]]}}}],["n[maxsize]；for(int",{"_index":485,"t":{"164":{"position":[[121,18]]}}}],["name",{"_index":711,"t":{"244":{"position":[[62,5],[182,5],[262,5],[346,5],[394,5]]},"258":{"position":[[93,7]]},"262":{"position":[[119,7]]},"264":{"position":[[231,7]]},"266":{"position":[[172,7],[270,7]]},"270":{"position":[[194,7],[338,7]]},"309":{"position":[[115,7]]},"311":{"position":[[183,7]]},"313":{"position":[[110,7]]},"315":{"position":[[57,7]]},"319":{"position":[[231,7]]},"321":{"position":[[171,7],[268,7]]},"323":{"position":[[118,7],[214,7],[826,7],[922,7]]},"327":{"position":[[233,7]]},"339":{"position":[[186,7]]},"341":{"position":[[113,7],[481,7]]},"357":{"position":[[110,7]]},"359":{"position":[[76,7]]}}}],["neq",{"_index":387,"t":{"136":{"position":[[893,4]]}}}],["next",{"_index":380,"t":{"136":{"position":[[508,24]]},"138":{"position":[[66,4],[279,8]]},"199":{"position":[[160,6]]}}}],["next[++j",{"_index":417,"t":{"138":{"position":[[160,9]]}}}],["next[1",{"_index":412,"t":{"138":{"position":[[93,7]]}}}],["next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1",{"_index":379,"t":{"136":{"position":[[464,43]]}}}],["next[j",{"_index":400,"t":{"136":{"position":[[1823,8]]},"138":{"position":[[191,7],[384,8]]}}}],["next[j+1",{"_index":418,"t":{"138":{"position":[[177,11]]}}}],["next[j]=next[j",{"_index":398,"t":{"136":{"position":[[1752,21]]}}}],["next[k",{"_index":405,"t":{"136":{"position":[[2496,7]]},"138":{"position":[[215,8]]}}}],["nextneighbor(g,v",{"_index":558,"t":{"202":{"position":[[637,19]]},"204":{"position":[[346,18]]}}}],["nextval",{"_index":427,"t":{"140":{"position":[[368,11]]}}}],["nextval[1",{"_index":428,"t":{"140":{"position":[[397,10]]}}}],["nextval[j",{"_index":431,"t":{"140":{"position":[[498,10],[539,10]]}}}],["nextval[k",{"_index":432,"t":{"140":{"position":[[552,11],[591,10]]}}}],["next}child",{"_index":490,"t":{"164":{"position":[[255,11]]}}}],["next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba",{"_index":392,"t":{"136":{"position":[[1105,134]]}}}],["next数组的求解就算结束了。我们来看下next",{"_index":408,"t":{"138":{"position":[[0,38]]}}}],["next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果t[next[j]]等于t[k]，那么直接跳过这一层匹配，改为t[next[next[j]]即可。也就是跳过了中间无效的t[next[j]]和t[k",{"_index":425,"t":{"140":{"position":[[178,154]]}}}],["next数组，next数组的1和2无脑填0和1",{"_index":376,"t":{"136":{"position":[[204,147]]}}}],["next的1和2还是直接填0和1",{"_index":393,"t":{"136":{"position":[[1240,44]]}}}],["nginx",{"_index":669,"t":{"242":{"position":[[0,43],[777,15]]}}}],["nginx;worker_process",{"_index":672,"t":{"242":{"position":[[86,22]]}}}],["nginx配置文件nginx.conf",{"_index":670,"t":{"242":{"position":[[44,36]]}}}],["node",{"_index":443,"t":{"153":{"position":[[22,5]]},"164":{"position":[[82,5],[225,5],[248,4],[385,5],[408,5]]},"244":{"position":[[239,4]]}}}],["node.j",{"_index":720,"t":{"244":{"position":[[192,7]]}}}],["node@v2",{"_index":723,"t":{"244":{"position":[[225,7]]}}}],["notebook",{"_index":627,"t":{"226":{"position":[[41,9]]}}}],["no：操作系统决定何时xiehui",{"_index":1042,"t":{"380":{"position":[[43,17]]}}}],["npm",{"_index":652,"t":{"239":{"position":[[133,3]]},"244":{"position":[[363,3],[378,3]]}}}],["null",{"_index":15,"t":{"15":{"position":[[97,22]]},"20":{"position":[[18,84]]},"254":{"position":[[166,5]]},"256":{"position":[[77,5]]},"258":{"position":[[139,5],[170,4]]},"266":{"position":[[237,5],[481,5]]},"268":{"position":[[70,5],[149,5]]},"270":{"position":[[981,5],[1005,5]]},"272":{"position":[[173,5],[197,5]]},"274":{"position":[[540,4]]},"278":{"position":[[347,4],[401,5],[486,4],[652,5]]},"284":{"position":[[501,5]]},"288":{"position":[[94,5]]},"293":{"position":[[158,5],[176,5],[221,5],[239,5],[252,5],[265,5],[283,5],[302,5],[317,5],[331,5],[347,5],[366,5],[386,5],[406,5],[430,5],[447,5],[465,4]]},"295":{"position":[[77,5]]},"299":{"position":[[315,5],[335,5],[369,5],[412,5],[614,4]]},"301":{"position":[[201,5],[221,5],[255,5],[298,5],[500,4]]},"303":{"position":[[40,5],[206,5],[226,5],[461,5],[479,5],[502,5],[543,5],[602,5],[663,5],[755,4]]},"305":{"position":[[99,5]]},"309":{"position":[[193,5]]},"311":{"position":[[56,5]]},"315":{"position":[[170,5]]},"317":{"position":[[98,5]]},"319":{"position":[[46,5],[61,5],[85,5]]},"321":{"position":[[237,5],[484,5]]},"323":{"position":[[185,5],[454,5],[479,4],[893,5],[1155,5],[1180,4]]},"325":{"position":[[91,5]]},"327":{"position":[[61,5]]},"329":{"position":[[44,5],[66,5],[81,5],[100,5],[263,5],[464,5]]},"331":{"position":[[269,5],[364,4]]},"333":{"position":[[205,5],[317,5],[371,5]]},"335":{"position":[[89,5]]},"337":{"position":[[48,5]]},"339":{"position":[[416,4]]},"343":{"position":[[99,5]]},"345":{"position":[[53,5]]},"347":{"position":[[182,5]]},"349":{"position":[[58,5]]},"351":{"position":[[55,5],[73,5]]},"353":{"position":[[308,5],[451,5],[477,4]]},"355":{"position":[[423,5],[447,4],[506,5]]},"361":{"position":[[425,5],[449,4],[508,5]]}}}],["nx：当key不存在的时候，才创建key，等效于setnx",{"_index":1088,"t":{"403":{"position":[[30,29]]}}}],["n})\\le",{"_index":79,"t":{"56":{"position":[[76,6]]}}}],["n}−(1−2−n)≤x≤1−2−n",{"_index":81,"t":{"56":{"position":[[95,19]]}}}],["n}−1≤x≤1−2−n",{"_index":89,"t":{"58":{"position":[[162,12]]}}}],["n个内部红节点的红黑树高度h≤2∗log2(n+1)h",{"_index":8,"t":{"10":{"position":[[209,28]]}}}],["n个辅助单元，空间复杂度o(n)o(n)o(n",{"_index":326,"t":{"118":{"position":[[897,26]]}}}],["n和m",{"_index":297,"t":{"118":{"position":[[109,17]]}}}],["n在某个范围的时候，时间复杂度为o(n1.3)o(n^{1.3})o(n1.3)，最坏情况是o(n2)o(n^2)o(n2",{"_index":198,"t":{"103":{"position":[[805,86]]}}}],["n就挂到队列n的队尾中，比如520的个位是0，就挂0",{"_index":343,"t":{"120":{"position":[[760,43]]}}}],["n时，i的右孩子是2i+1",{"_index":271,"t":{"115":{"position":[[600,13]]},"155":{"position":[[270,13]]}}}],["n时，i的左孩子是2i",{"_index":269,"t":{"115":{"position":[[572,11]]},"155":{"position":[[242,11]]}}}],["n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d",{"_index":330,"t":{"120":{"position":[[333,65]]}}}],["n足够大的时候去分析执行时间。采用大o",{"_index":505,"t":{"184":{"position":[[69,65]]}}}],["n，边数为n",{"_index":574,"t":{"206":{"position":[[0,28]]}}}],["o(1",{"_index":1108,"t":{"415":{"position":[[126,15]]},"418":{"position":[[161,5]]}}}],["o(1)<o(log2n)<)(n)<o(nlong2n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn)o(1)<o(log_2",{"_index":506,"t":{"184":{"position":[[196,71]]}}}],["o(1)o(1)o(1",{"_index":174,"t":{"101":{"position":[[630,18]]},"103":{"position":[[781,23]]},"107":{"position":[[286,18]]},"113":{"position":[[434,27]]},"115":{"position":[[1450,24]]},"122":{"position":[[80,12],[166,12],[205,12],[271,12],[458,12],[572,12]]}}}],["o(d(r+1))o(d(r+1))o(d(r+1",{"_index":348,"t":{"122":{"position":[[707,27],[735,27],[763,27]]}}}],["o(log2n)o(log_{2}n)o(log2​n",{"_index":347,"t":{"122":{"position":[[370,28]]}}}],["o(log2n)o(log_{2}n)o(log2​n)，最坏需要n−1次递归调用，所以栈为o(n)n",{"_index":243,"t":{"109":{"position":[[926,89]]}}}],["o(n)o(n)o(n",{"_index":164,"t":{"99":{"position":[[672,40]]},"122":{"position":[[33,12],[224,12],[689,12]]}}}],["o(n)o(n)o(n)调整时间为o(h)o(h)o(h)，最好、最坏、平均情况下的时间复杂度都是o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":296,"t":{"115":{"position":[[1475,84]]}}}],["o(n)o(n)o(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":327,"t":{"118":{"position":[[924,83]]}}}],["o(n)o(n)o(n)，否则则进行n",{"_index":215,"t":{"107":{"position":[[305,30]]}}}],["o(n2)o(n^2)o(n2",{"_index":175,"t":{"101":{"position":[[649,22]]},"122":{"position":[[46,16],[63,16],[132,16],[149,16],[188,16],[237,16],[254,16],[353,16],[407,16],[424,16],[441,16]]},"197":{"position":[[720,40]]}}}],["o(n2)o(n^2)o(n2)，理想情况是o(nlong2n)o(nlong_{2}n)o(nlong2​n",{"_index":245,"t":{"109":{"position":[[1081,69]]}}}],["o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":346,"t":{"122":{"position":[[100,31],[289,31],[321,31],[476,31],[508,31],[540,31],[593,31],[625,31],[657,31]]}}}],["o(r)o(r)o(r",{"_index":349,"t":{"122":{"position":[[791,12]]}}}],["o(∣v∣)o(|v|)o(∣v",{"_index":563,"t":{"202":{"position":[[925,45]]}}}],["o(∣v∣)o(|v|)o(∣v∣)次，搜索邻接边需要o(∣e∣)o(|e|)o(∣e∣)，故为o(∣v∣+∣e)o(|v|+|e)o(∣v∣+∣e)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":562,"t":{"202":{"position":[[724,200]]},"204":{"position":[[392,200]]}}}],["o(∣v∣+∣e∣)o(|v|+|e|)o(∣v∣+∣e∣)若为无向图则o(∣v∣+2∣e∣)o(|v|+2|e|)o(∣v∣+2∣",{"_index":539,"t":{"199":{"position":[[358,98]]}}}],["o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":587,"t":{"212":{"position":[[240,41]]}}}],["of，为1",{"_index":95,"t":{"73":{"position":[[15,26]]}}}],["ok",{"_index":520,"t":{"197":{"position":[[290,48]]}}}],["openid",{"_index":936,"t":{"303":{"position":[[760,10]]}}}],["origin",{"_index":643,"t":{"237":{"position":[[44,6],[99,6]]},"239":{"position":[[273,6]]},"359":{"position":[[54,11]]}}}],["p",{"_index":1082,"t":{"397":{"position":[[61,1]]}}}],["p1和p2",{"_index":298,"t":{"118":{"position":[[142,23]]}}}],["p>什么是快乐星球？</p",{"_index":964,"t":{"331":{"position":[[165,18]]}}}],["page",{"_index":634,"t":{"233":{"position":[[61,5],[126,5],[215,5],[240,5]]},"239":{"position":[[257,6],[283,5],[343,5]]}}}],["pageindex",{"_index":786,"t":{"264":{"position":[[94,12]]},"274":{"position":[[52,12]]},"276":{"position":[[47,12]]},"278":{"position":[[55,12]]},"286":{"position":[[44,12]]},"299":{"position":[[77,12]]},"311":{"position":[[67,12]]},"319":{"position":[[96,12]]},"327":{"position":[[112,12]]},"329":{"position":[[106,12]]},"337":{"position":[[54,12]]},"345":{"position":[[59,12]]},"349":{"position":[[69,12]]},"351":{"position":[[79,12]]}}}],["pages",{"_index":787,"t":{"264":{"position":[[115,11]]},"274":{"position":[[73,11]]},"276":{"position":[[68,11]]},"278":{"position":[[76,11]]},"286":{"position":[[65,11]]},"299":{"position":[[98,11]]},"311":{"position":[[83,11]]},"319":{"position":[[117,11]]},"327":{"position":[[133,11]]},"329":{"position":[[122,11]]},"337":{"position":[[70,11]]},"345":{"position":[[75,11]]},"349":{"position":[[85,11]]},"351":{"position":[[95,11]]}}}],["pagesxcopi",{"_index":657,"t":{"239":{"position":[[165,10]]}}}],["pages分支上，接下来你只需要在仓库的set",{"_index":665,"t":{"239":{"position":[[313,27]]}}}],["pages分支来作为你的pag",{"_index":667,"t":{"239":{"position":[[362,29]]}}}],["paper",{"_index":825,"t":{"270":{"position":[[99,8]]}}}],["paperitem",{"_index":774,"t":{"260":{"position":[[98,13]]},"339":{"position":[[150,13]]},"341":{"position":[[78,13],[446,13]]}}}],["papernam",{"_index":844,"t":{"274":{"position":[[491,12]]},"349":{"position":[[485,12]]}}}],["paperscor",{"_index":842,"t":{"274":{"position":[[371,13]]},"349":{"position":[[363,13]]}}}],["papertyp",{"_index":783,"t":{"264":{"position":[[46,12],[416,12]]},"266":{"position":[[149,12]]},"270":{"position":[[171,12]]},"274":{"position":[[419,12]]},"319":{"position":[[391,12]]},"321":{"position":[[148,12]]},"323":{"position":[[95,12],[803,12]]},"327":{"position":[[89,12],[392,12]]},"339":{"position":[[344,12]]},"341":{"position":[[273,12],[641,12]]},"349":{"position":[[413,12]]}}}],["parent;}node*;nod",{"_index":484,"t":{"164":{"position":[[102,18]]}}}],["partition(a,low,high",{"_index":239,"t":{"109":{"position":[[801,34]]}}}],["partition(int",{"_index":228,"t":{"109":{"position":[[477,13]]}}}],["password",{"_index":735,"t":{"244":{"position":[[510,9]]},"252":{"position":[[58,11]]},"254":{"position":[[70,11]]},"293":{"position":[[56,11],[209,11]]},"303":{"position":[[74,11],[407,11]]},"395":{"position":[[81,10]]},"397":{"position":[[19,8]]}}}],["pel(pend",{"_index":1146,"t":{"433":{"position":[[456,11]]}}}],["pending_id",{"_index":1144,"t":{"433":{"position":[[336,11]]}}}],["ph(key)=key%p，则产生的地址落在区间[0,p−1][0,p",{"_index":57,"t":{"47":{"position":[[125,35]]}}}],["phone",{"_index":880,"t":{"282":{"position":[[292,8]]},"284":{"position":[[242,8]]},"293":{"position":[[308,8]]},"299":{"position":[[403,8]]},"301":{"position":[[289,8]]},"303":{"position":[[217,8],[534,8]]},"353":{"position":[[299,8]]},"355":{"position":[[252,8]]},"361":{"position":[[249,8]]}}}],["pivot",{"_index":230,"t":{"109":{"position":[[518,5],[704,6]]}}}],["pivotpo",{"_index":238,"t":{"109":{"position":[[790,8]]}}}],["posit",{"_index":1120,"t":{"425":{"position":[[263,8]]}}}],["preambl",{"_index":1053,"t":{"387":{"position":[[161,11]]}}}],["prefix",{"_index":829,"t":{"270":{"position":[[524,9],[596,9]]},"278":{"position":[[295,9]]},"323":{"position":[[396,9],[1097,9]]}}}],["presearch(t[],2*index",{"_index":472,"t":{"153":{"position":[[736,23],[760,21]]}}}],["presearch(t[],int",{"_index":470,"t":{"153":{"position":[[660,17]]}}}],["prim)和克鲁斯卡尔(krusk",{"_index":577,"t":{"206":{"position":[[120,37]]}}}],["prim是选点，而kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n",{"_index":580,"t":{"210":{"position":[[0,86]]}}}],["protect",{"_index":1070,"t":{"393":{"position":[[31,11]]}}}],["proxy_pass",{"_index":687,"t":{"242":{"position":[[402,10]]}}}],["proxy_set_head",{"_index":689,"t":{"242":{"position":[[427,16],[456,16]]}}}],["pub/sub",{"_index":1136,"t":{"431":{"position":[[101,9],[175,9]]}}}],["push",{"_index":646,"t":{"237":{"position":[[91,4]]},"239":{"position":[[268,4]]},"244":{"position":[[83,5]]}}}],["px：key",{"_index":1087,"t":{"403":{"position":[[15,14]]}}}],["p可知:散列地址在[0,p−1][0,p",{"_index":73,"t":{"49":{"position":[[40,41]]}}}],["q",{"_index":661,"t":{"239":{"position":[[197,2]]}}}],["questionanswervm",{"_index":859,"t":{"278":{"position":[[499,19]]}}}],["questioncorrect",{"_index":841,"t":{"274":{"position":[[341,18]]},"349":{"position":[[333,18]]}}}],["questioncount",{"_index":791,"t":{"264":{"position":[[254,16]]},"274":{"position":[[314,16]]},"297":{"position":[[78,16]]},"319":{"position":[[255,16]]},"327":{"position":[[257,16]]},"339":{"position":[[207,16]]},"341":{"position":[[137,16],[505,16]]},"349":{"position":[[306,16]]}}}],["questionid",{"_index":818,"t":{"268":{"position":[[56,13],[114,13]]},"270":{"position":[[946,13]]},"272":{"position":[[138,13]]},"278":{"position":[[541,13]]}}}],["questionitem",{"_index":808,"t":{"266":{"position":[[294,16]]},"270":{"position":[[361,16]]},"321":{"position":[[292,16]]},"323":{"position":[[236,16],[944,16]]}}}],["questionscor",{"_index":832,"t":{"270":{"position":[[1096,16]]},"272":{"position":[[290,16]]},"278":{"position":[[684,16]]}}}],["questiontyp",{"_index":809,"t":{"266":{"position":[[331,15]]},"270":{"position":[[405,15]]},"276":{"position":[[189,15]]},"278":{"position":[[183,15]]},"321":{"position":[[330,15]]},"323":{"position":[[281,15],[982,15]]},"329":{"position":[[50,15],[222,15]]},"331":{"position":[[111,15]]},"333":{"position":[[55,15]]}}}],["questionvm",{"_index":854,"t":{"278":{"position":[[149,13]]}}}],["queue），redi",{"_index":1135,"t":{"431":{"position":[[70,12]]}}}],["quicksort(a,low,pivotpo",{"_index":240,"t":{"109":{"position":[[836,24]]}}}],["quicksort(a,pivotpo",{"_index":241,"t":{"109":{"position":[[873,20]]}}}],["quicksort(int",{"_index":236,"t":{"109":{"position":[[733,13]]}}}],["r",{"_index":336,"t":{"120":{"position":[[515,1]]},"425":{"position":[[281,1],[294,1],[303,1],[357,33]]}}}],["rachel",{"_index":626,"t":{"226":{"position":[[34,6]]}}}],["rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天rachel",{"_index":624,"t":{"223":{"position":[[16,119]]}}}],["rdb",{"_index":1044,"t":{"383":{"position":[[41,14]]},"387":{"position":[[33,21],[157,3]]}}}],["rdb+aof",{"_index":1056,"t":{"387":{"position":[[197,12]]}}}],["rdb和aof",{"_index":1052,"t":{"387":{"position":[[120,15]]}}}],["rdb和aof时，重启时只会加在aof不会加在rdb",{"_index":1050,"t":{"387":{"position":[[0,32]]}}}],["rdb文件(dump.rdb)，其中，rdb就是redi",{"_index":1021,"t":{"367":{"position":[[20,118]]}}}],["rdb进行快照存储，然后使用aof持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的rdb记录。这样的话，重启服务的时候会从rdb和aof两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是rdb格式，一部分是aof",{"_index":1058,"t":{"387":{"position":[[245,155]]}}}],["rdb镜像做全量持久化，aof",{"_index":1057,"t":{"387":{"position":[[220,24]]}}}],["rdb：类似快照技术，将当前的数据快照存留成rdb",{"_index":1019,"t":{"365":{"position":[[106,27]]}}}],["read",{"_index":893,"t":{"286":{"position":[[240,9]]}}}],["readcount",{"_index":983,"t":{"345":{"position":[[342,12]]}}}],["real",{"_index":691,"t":{"242":{"position":[[475,4]]}}}],["realnam",{"_index":864,"t":{"280":{"position":[[147,11]]},"282":{"position":[[178,11]]},"284":{"position":[[128,11]]},"293":{"position":[[227,11]]},"299":{"position":[[303,11]]},"301":{"position":[[189,11]]},"303":{"position":[[101,11],[427,11]]},"351":{"position":[[250,11]]},"353":{"position":[[184,11]]},"355":{"position":[[139,11]]},"361":{"position":[[134,11]]}}}],["receiv",{"_index":981,"t":{"345":{"position":[[279,11]]}}}],["receiveusercount",{"_index":982,"t":{"345":{"position":[[311,19]]}}}],["receiveuserid",{"_index":987,"t":{"347":{"position":[[89,17]]}}}],["redi",{"_index":1036,"t":{"378":{"position":[[229,12],[449,6]]},"391":{"position":[[96,5],[116,7]]},"393":{"position":[[140,11]]},"395":{"position":[[17,5],[50,5],[65,8]]},"397":{"position":[[0,11],[37,18]]},"411":{"position":[[0,5],[57,16]]},"415":{"position":[[0,5]]},"418":{"position":[[0,5]]},"423":{"position":[[0,5]]},"429":{"position":[[82,5]]},"431":{"position":[[0,5],[15,5],[37,5],[90,5],[111,41],[205,5]]}}}],["redis.conf",{"_index":1026,"t":{"373":{"position":[[73,14]]}}}],["redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredi",{"_index":1068,"t":{"391":{"position":[[251,90]]}}}],["redis.conf配置中的save《seconds》《chang",{"_index":1024,"t":{"373":{"position":[[0,40]]}}}],["redis7",{"_index":1023,"t":{"370":{"position":[[0,14],[15,9]]},"383":{"position":[[66,13]]}}}],["redis中由两种持久化：rdb和aof",{"_index":1018,"t":{"365":{"position":[[0,105]]}}}],["redis官网中下载redis7版本压缩包后，使用xftp软件将本地的redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar",{"_index":1060,"t":{"391":{"position":[[0,89]]}}}],["redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi",{"_index":1033,"t":{"378":{"position":[[0,124]]}}}],["redis版本的mq",{"_index":1137,"t":{"433":{"position":[[0,28]]}}}],["redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb",{"_index":1029,"t":{"373":{"position":[[144,89]]}}}],["rememb",{"_index":750,"t":{"252":{"position":[[79,11]]},"293":{"position":[[77,11]]}}}],["remot",{"_index":641,"t":{"237":{"position":[[33,6]]}}}],["remote_addr",{"_index":693,"t":{"242":{"position":[[483,13],[587,13]]}}}],["remote_us",{"_index":700,"t":{"242":{"position":[[603,12]]}}}],["request",{"_index":702,"t":{"242":{"position":[[630,10]]}}}],["requir",{"_index":744,"t":{"247":{"position":[[32,8]]}}}],["requirepass",{"_index":1076,"t":{"393":{"position":[[152,11]]}}}],["respons",{"_index":758,"t":{"254":{"position":[[154,11]]},"256":{"position":[[65,11]]},"262":{"position":[[84,11]]},"264":{"position":[[174,11]]},"266":{"position":[[81,11]]},"268":{"position":[[306,11]]},"270":{"position":[[85,11]]},"272":{"position":[[359,11]]},"274":{"position":[[132,11]]},"276":{"position":[[127,11]]},"278":{"position":[[135,11]]},"280":{"position":[[70,11]]},"282":{"position":[[74,11]]},"284":{"position":[[489,11]]},"286":{"position":[[124,11]]},"288":{"position":[[82,11]]},"290":{"position":[[86,11]]},"293":{"position":[[138,11]]},"295":{"position":[[65,11]]},"299":{"position":[[157,11]]},"301":{"position":[[73,11]]},"303":{"position":[[295,11]]},"305":{"position":[[87,11]]},"307":{"position":[[79,11]]},"309":{"position":[[82,11]]},"311":{"position":[[135,11]]},"313":{"position":[[86,11]]},"315":{"position":[[158,11]]},"317":{"position":[[86,11]]},"319":{"position":[[176,11]]},"321":{"position":[[79,11]]},"323":{"position":[[734,11]]},"325":{"position":[[79,11]]},"327":{"position":[[185,11]]},"329":{"position":[[174,11]]},"331":{"position":[[79,11]]},"333":{"position":[[359,11]]},"335":{"position":[[77,11]]},"337":{"position":[[122,11]]},"339":{"position":[[74,11]]},"341":{"position":[[369,11]]},"343":{"position":[[87,11]]},"345":{"position":[[134,11]]},"347":{"position":[[170,11]]},"349":{"position":[[137,11]]},"351":{"position":[[147,11]]},"353":{"position":[[72,11]]},"355":{"position":[[494,11]]},"357":{"position":[[94,11]]},"361":{"position":[[496,11]]}}}],["return",{"_index":49,"t":{"35":{"position":[[297,6]]},"109":{"position":[[711,6]]},"130":{"position":[[360,6]]},"138":{"position":[[407,6],[425,6]]},"153":{"position":[[205,6],[340,6],[476,6],[605,6]]}}}],["right",{"_index":463,"t":{"153":{"position":[[427,5],[483,6]]}}}],["rl",{"_index":5,"t":{"5":{"position":[[42,7]]},"7":{"position":[[114,7]]},"12":{"position":[[257,29]]}}}],["rmdir",{"_index":660,"t":{"239":{"position":[[187,6]]}}}],["role",{"_index":875,"t":{"282":{"position":[[221,7]]},"284":{"position":[[171,7]]},"293":{"position":[[323,7]]},"299":{"position":[[61,7],[346,7]]},"301":{"position":[[232,7]]},"303":{"position":[[128,7],[555,7]]},"353":{"position":[[226,7]]},"355":{"position":[[181,7]]},"361":{"position":[[176,7]]}}}],["root",{"_index":681,"t":{"242":{"position":[[277,4]]}}}],["root/usr/local/bin下，ll列举redi",{"_index":1065,"t":{"391":{"position":[[158,37]]}}}],["rr",{"_index":3,"t":{"5":{"position":[[28,5]]},"7":{"position":[[100,5]]},"12":{"position":[[205,21]]}}}],["run",{"_index":653,"t":{"239":{"position":[[137,3]]},"244":{"position":[[122,4],[287,4],[358,4],[382,3]]}}}],["run/nginx.pid;ev",{"_index":675,"t":{"242":{"position":[[153,21]]}}}],["rwerw",{"_index":890,"t":{"286":{"position":[[180,8]]}}}],["r。上述的520",{"_index":340,"t":{"120":{"position":[[582,65]]}}}],["r个空队列qr,qr−1.......q0q_r,q_{r",{"_index":341,"t":{"120":{"position":[[663,31]]}}}],["r个队列，q(r)q(r)q(r",{"_index":344,"t":{"120":{"position":[[835,21]]}}}],["s",{"_index":147,"t":{"99":{"position":[[213,1],[767,1]]},"101":{"position":[[280,1]]},"145":{"position":[[0,1]]},"212":{"position":[[574,3]]},"239":{"position":[[194,2]]}}}],["s,string",{"_index":353,"t":{"130":{"position":[[164,8]]},"138":{"position":[[264,8]]}}}],["s.len",{"_index":357,"t":{"130":{"position":[[205,5]]}}}],["s[i",{"_index":386,"t":{"136":{"position":[[884,8],[906,4],[980,6]]}}}],["s[i]≠t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1]\\begin{align",{"_index":385,"t":{"136":{"position":[[795,88]]}}}],["samkirkland/ftp",{"_index":731,"t":{"244":{"position":[[417,15]]}}}],["save和bgsave，其中默认使用bgsav",{"_index":1030,"t":{"375":{"position":[[0,30]]}}}],["save：在程序执行构成会阻塞当前的redi",{"_index":1031,"t":{"375":{"position":[[31,58]]}}}],["score",{"_index":792,"t":{"264":{"position":[[280,8]]},"266":{"position":[[537,8],[607,8]]},"270":{"position":[[571,8],[631,8],[732,8],[807,8],[885,8],[1077,8]]},"272":{"position":[[83,8],[271,8]]},"278":{"position":[[338,8],[433,8],[665,8]]},"319":{"position":[[282,8]]},"321":{"position":[[542,8],[614,8]]},"323":{"position":[[445,8],[605,8],[676,8],[1146,8],[1306,8],[1377,8]]},"327":{"position":[[284,8]]},"329":{"position":[[357,8]]},"331":{"position":[[309,8]]},"333":{"position":[[263,8]]},"339":{"position":[[234,8]]},"341":{"position":[[164,8],[532,8]]}}}],["secrets.ftp_pwd",{"_index":736,"t":{"244":{"position":[[524,15]]}}}],["secrets.ftp_us",{"_index":734,"t":{"244":{"position":[[484,16]]}}}],["secrets.ftp_user要在github设置中进行配置，添加action的变量，然后设置好你的ftp的用户名和密码即可。同时要在ftp服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到ftp",{"_index":739,"t":{"244":{"position":[[584,114]]}}}],["selectsort(int",{"_index":252,"t":{"113":{"position":[[270,14]]}}}],["sendusernam",{"_index":895,"t":{"286":{"position":[[307,15]]},"345":{"position":[[37,15],[245,15]]}}}],["server",{"_index":678,"t":{"242":{"position":[[209,6]]},"244":{"position":[[459,7],[548,6]]},"378":{"position":[[242,6],[456,6]]},"391":{"position":[[226,24]]},"395":{"position":[[23,6]]}}}],["server_nam",{"_index":684,"t":{"242":{"position":[[366,11]]}}}],["set",{"_index":1105,"t":{"415":{"position":[[8,3],[93,32]]},"418":{"position":[[13,3]]}}}],["set的基础上，每个value的值前加一个score分数值，之前set是k1,v1,zset会变成k1,v1,score1",{"_index":1113,"t":{"420":{"position":[[0,62]]}}}],["sex",{"_index":876,"t":{"282":{"position":[[237,6]]},"284":{"position":[[187,6]]},"293":{"position":[[258,6]]},"299":{"position":[[362,6]]},"301":{"position":[[248,6]]},"303":{"position":[[178,6],[472,6]]},"353":{"position":[[242,6]]},"355":{"position":[[197,6]]},"361":{"position":[[192,6]]}}}],["sf",{"_index":96,"t":{"73":{"position":[[42,14]]}}}],["sfsdf",{"_index":892,"t":{"286":{"position":[[224,8]]}}}],["shellsort(int",{"_index":178,"t":{"103":{"position":[[217,13]]}}}],["shorttitl",{"_index":851,"t":{"276":{"position":[[283,13]]},"329":{"position":[[496,13]]}}}],["shutdown",{"_index":1081,"t":{"397":{"position":[[28,8],[68,8]]}}}],["sim",{"_index":382,"t":{"136":{"position":[[625,4],[644,4],[913,4],[929,4],[949,4],[967,4],[989,4],[1005,4],[1795,4],[1813,4],[1868,4],[1893,4],[1919,4],[1935,4]]}}}],["size",{"_index":1011,"t":{"359":{"position":[[162,7]]}}}],["sofu6",{"_index":365,"t":{"132":{"position":[[193,5]]}}}],["sql即可：select",{"_index":1118,"t":{"425":{"position":[[236,16]]}}}],["sss和vvv",{"_index":581,"t":{"212":{"position":[[27,26]]}}}],["sss，此时树中只有一个顶点，然后从剩余顶点集合ttt中选取相距树中顶点集合最近的点，并且将该边加入集合sss中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n",{"_index":578,"t":{"208":{"position":[[0,121]]}}}],["stack",{"_index":743,"t":{"247":{"position":[[26,5]]}}}],["state",{"_index":1014,"t":{"359":{"position":[[193,8]]}}}],["statu",{"_index":703,"t":{"242":{"position":[[643,8]]},"260":{"position":[[213,9]]},"274":{"position":[[471,9]]},"282":{"position":[[416,9]]},"284":{"position":[[366,9]]},"293":{"position":[[337,9]]},"299":{"position":[[562,9]]},"301":{"position":[[448,9]]},"303":{"position":[[144,9],[571,9]]},"329":{"position":[[377,9]]},"349":{"position":[[465,9]]},"353":{"position":[[420,9]]},"355":{"position":[[392,9]]},"361":{"position":[[394,9]]}}}],["step",{"_index":717,"t":{"244":{"position":[[145,6]]}}}],["step1",{"_index":502,"t":{"182":{"position":[[165,13]]}}}],["step2",{"_index":503,"t":{"182":{"position":[[179,16]]}}}],["stream",{"_index":698,"t":{"242":{"position":[[563,7]]},"431":{"position":[[6,6],[43,6],[211,6]]}}}],["string",{"_index":1102,"t":{"411":{"position":[[15,6]]},"415":{"position":[[14,6]]}}}],["string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg",{"_index":1084,"t":{"400":{"position":[[0,89]]}}}],["string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset",{"_index":1110,"t":{"418":{"position":[[17,143]]}}}],["string类型是redis最基本的数据类型，一个redis中字符串value最多可以是512m",{"_index":1085,"t":{"400":{"position":[[90,49]]}}}],["struct",{"_index":442,"t":{"153":{"position":[[15,6]]},"164":{"position":[[75,6],[218,6],[241,6],[295,6],[378,6],[401,6]]},"197":{"position":[[616,7]]},"199":{"position":[[98,6],[145,6],[196,6],[275,7]]}}}],["student",{"_index":749,"t":{"252":{"position":[[41,10],[127,10]]},"280":{"position":[[130,10],[187,8]]},"282":{"position":[[161,10]]},"284":{"position":[[111,10]]},"345":{"position":[[291,10]]},"349":{"position":[[526,9]]},"357":{"position":[[44,7],[118,10]]}}}],["student5",{"_index":753,"t":{"254":{"position":[[52,11]]}}}],["subjectid",{"_index":784,"t":{"264":{"position":[[69,12],[367,12]]},"266":{"position":[[128,12],[355,12]]},"270":{"position":[[150,12],[431,12]]},"274":{"position":[[289,12]]},"278":{"position":[[209,12]]},"319":{"position":[[72,12],[370,12]]},"321":{"position":[[127,12],[356,12]]},"323":{"position":[[74,12],[305,12],[782,12],[1006,12]]},"327":{"position":[[48,12],[371,12]]},"329":{"position":[[87,12],[313,12]]},"331":{"position":[[135,12]]},"333":{"position":[[79,12]]},"339":{"position":[[322,12]]},"341":{"position":[[252,12],[620,12]]},"349":{"position":[[45,12],[283,12]]}}}],["subjectnam",{"_index":799,"t":{"264":{"position":[[390,14]]},"274":{"position":[[261,14]]},"276":{"position":[[257,14]]},"349":{"position":[[255,14]]}}}],["success",{"_index":1015,"t":{"359":{"position":[[202,10]]}}}],["sudo",{"_index":727,"t":{"244":{"position":[[292,4],[315,4]]}}}],["suggesttim",{"_index":804,"t":{"266":{"position":[[194,14]]},"270":{"position":[[218,14]]},"321":{"position":[[194,14]]},"323":{"position":[[142,14],[850,14]]}}}],["sumn",{"_index":512,"t":{"192":{"position":[[80,15]]}}}],["swap(a[i],a[1",{"_index":293,"t":{"115":{"position":[[1397,16]]}}}],["swap(a[i],a[min",{"_index":257,"t":{"113":{"position":[[402,18]]}}}],["swap(a[j],a[i]);flag",{"_index":212,"t":{"107":{"position":[[222,20]]}}}],["swap(int",{"_index":199,"t":{"107":{"position":[[32,8]]}}}],["systemscor",{"_index":843,"t":{"274":{"position":[[442,14]]},"349":{"position":[[436,14]]}}}],["s和t",{"_index":367,"t":{"134":{"position":[[55,155]]}}}],["s和模式串t的长度n和m。时间复杂度为o(nm)o(nm)o(nm",{"_index":363,"t":{"130":{"position":[[371,109]]}}}],["s的取值决定正负；m表示尾数，r是基数（2,4,8...），e是阶码，表示2e2^e2",{"_index":124,"t":{"89":{"position":[[46,44]]}}}],["s（31",{"_index":131,"t":{"93":{"position":[[58,7]]}}}],["t",{"_index":354,"t":{"130":{"position":[[173,3]]}}}],["t,int",{"_index":410,"t":{"138":{"position":[[60,5],[273,5]]},"140":{"position":[[362,5]]}}}],["t.ch[i",{"_index":360,"t":{"130":{"position":[[241,9]]}}}],["t.ch[j",{"_index":415,"t":{"138":{"position":[[130,9],[352,9]]},"140":{"position":[[444,7]]}}}],["t.ch[k",{"_index":416,"t":{"138":{"position":[[143,9]]},"140":{"position":[[455,9],[489,8]]}}}],["t.len",{"_index":358,"t":{"130":{"position":[[219,7],[339,6]]},"138":{"position":[[418,6]]},"140":{"position":[[423,7]]}}}],["t.len)return",{"_index":362,"t":{"130":{"position":[[322,12]]}}}],["t[0",{"_index":389,"t":{"136":{"position":[[925,3],[942,6],[1001,3],[1782,12],[1857,10],[1911,7]]}}}],["t[],int",{"_index":447,"t":{"153":{"position":[[80,7]]}}}],["t[i",{"_index":388,"t":{"136":{"position":[[898,4]]}}}],["t[i].isempti",{"_index":449,"t":{"153":{"position":[[120,12]]}}}],["t[j",{"_index":390,"t":{"136":{"position":[[961,3],[1743,5],[1807,3],[1851,5],[1887,3],[1903,7],[1929,3],[2101,11]]}}}],["t[j]t[k]=t[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是b的位置，此时执行判定t[k]=t[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k",{"_index":404,"t":{"136":{"position":[[2219,274]]}}}],["t[k",{"_index":397,"t":{"136":{"position":[[1735,7],[1840,10],[1880,4],[2115,29]]}}}],["t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j]\\begin{align",{"_index":396,"t":{"136":{"position":[[1577,157]]}}}],["t[k]≠t[j]t[k]\\neq",{"_index":403,"t":{"136":{"position":[[2198,20]]}}}],["taxi",{"_index":1119,"t":{"425":{"position":[[253,4]]}}}],["technic",{"_index":742,"t":{"247":{"position":[[16,9]]}}}],["temp",{"_index":201,"t":{"107":{"position":[[57,4]]}}}],["temp;}void",{"_index":202,"t":{"107":{"position":[[78,10]]}}}],["test",{"_index":865,"t":{"280":{"position":[[159,7]]},"282":{"position":[[190,7]]},"284":{"position":[[140,7]]}}}],["test33333",{"_index":764,"t":{"258":{"position":[[101,12]]}}}],["testzz",{"_index":927,"t":{"303":{"position":[[58,9],[391,9]]}}}],["tesx",{"_index":928,"t":{"303":{"position":[[113,7],[439,7]]}}}],["textcontentid",{"_index":959,"t":{"329":{"position":[[246,16]]}}}],["time_loc",{"_index":701,"t":{"242":{"position":[[616,13]]}}}],["timelimitpap",{"_index":767,"t":{"258":{"position":[[189,17]]}}}],["tip",{"_index":496,"t":{"167":{"position":[[139,3]]},"223":{"position":[[0,3]]},"226":{"position":[[0,3]]},"229":{"position":[[0,3]]},"247":{"position":[[0,3]]}}}],["titl",{"_index":770,"t":{"260":{"position":[[66,8]]},"266":{"position":[[376,8]]},"270":{"position":[[452,8]]},"278":{"position":[[233,8]]},"286":{"position":[[171,8]]},"321":{"position":[[377,8]]},"323":{"position":[[326,8],[1027,8]]},"331":{"position":[[156,8]]},"333":{"position":[[100,8]]},"337":{"position":[[177,8]]},"339":{"position":[[128,8]]},"341":{"position":[[61,8],[422,8]]},"345":{"position":[[190,8]]},"347":{"position":[[37,8]]}}}],["titleitem",{"_index":807,"t":{"266":{"position":[[252,13]]},"270":{"position":[[320,13]]},"321":{"position":[[250,13]]},"323":{"position":[[196,13],[904,13]]}}}],["total",{"_index":788,"t":{"264":{"position":[[188,8]]},"274":{"position":[[146,8]]},"276":{"position":[[141,8]]},"286":{"position":[[138,8]]},"299":{"position":[[171,8]]},"311":{"position":[[149,8]]},"319":{"position":[[190,8]]},"327":{"position":[[199,8]]},"329":{"position":[[188,8]]},"337":{"position":[[136,8]]},"345":{"position":[[148,8]]},"349":{"position":[[151,8]]},"351":{"position":[[161,8]]}}}],["tree",{"_index":491,"t":{"164":{"position":[[302,5],[437,27]]}}}],["true",{"_index":213,"t":{"107":{"position":[[245,5]]},"202":{"position":[[546,6],[697,5]]},"204":{"position":[[304,5]]},"268":{"position":[[214,5]]},"286":{"position":[[250,5]]}}}],["ture",{"_index":453,"t":{"153":{"position":[[192,6]]}}}],["typdef",{"_index":489,"t":{"164":{"position":[[211,6]]}}}],["type",{"_index":1013,"t":{"359":{"position":[[177,7]]}}}],["typedef",{"_index":441,"t":{"153":{"position":[[7,7]]},"164":{"position":[[67,7],[267,27],[370,7]]},"197":{"position":[[608,7]]},"199":{"position":[[90,7],[188,7]]}}}],["t）与问题规模（n）的关系，t就是时间。说白了就是分析代码，算一下n",{"_index":504,"t":{"184":{"position":[[6,56]]}}}],["u",{"_index":647,"t":{"237":{"position":[[97,1]]}}}],["ubuntu",{"_index":715,"t":{"244":{"position":[[131,6]]}}}],["updat",{"_index":729,"t":{"244":{"position":[[305,6]]}}}],["up主的讲解视频kmp算法之求next数组代码讲解_哔哩哔哩_bilibili",{"_index":407,"t":{"136":{"position":[[2545,55]]}}}],["url",{"_index":650,"t":{"239":{"position":[[49,4]]},"359":{"position":[[94,6]]}}}],["us",{"_index":718,"t":{"244":{"position":[[154,5],[188,3],[205,5],[411,5]]},"387":{"position":[[153,3]]}}}],["user",{"_index":671,"t":{"242":{"position":[[81,4]]}}}],["userid",{"_index":863,"t":{"280":{"position":[[98,9]]},"351":{"position":[[45,9],[203,9]]}}}],["userlevel",{"_index":755,"t":{"254":{"position":[[97,12]]},"282":{"position":[[434,12]]},"284":{"position":[[384,12]]},"293":{"position":[[289,12]]},"299":{"position":[[580,12]]},"301":{"position":[[466,12]]},"303":{"position":[[238,12],[513,12]]},"353":{"position":[[438,12]]},"355":{"position":[[410,12]]},"361":{"position":[[412,12]]}}}],["usernam",{"_index":733,"t":{"244":{"position":[[470,9]]},"252":{"position":[[29,11],[115,11]]},"254":{"position":[[40,11]]},"274":{"position":[[528,11]]},"280":{"position":[[118,11]]},"282":{"position":[[149,11]]},"284":{"position":[[99,11]]},"293":{"position":[[29,11],[182,11]]},"299":{"position":[[39,11],[280,11]]},"301":{"position":[[166,11]]},"303":{"position":[[46,11],[379,11]]},"349":{"position":[[514,11]]},"351":{"position":[[61,11],[223,11]]},"353":{"position":[[157,11]]},"355":{"position":[[112,11]]},"361":{"position":[[107,11]]}}}],["username.github.io",{"_index":639,"t":{"235":{"position":[[0,50]]}}}],["userscor",{"_index":839,"t":{"274":{"position":[[236,12]]},"349":{"position":[[229,12]]}}}],["useruuid",{"_index":868,"t":{"282":{"position":[[97,11]]},"284":{"position":[[47,11]]},"293":{"position":[[164,11]]},"299":{"position":[[219,11]]},"301":{"position":[[105,11]]},"303":{"position":[[320,11]]},"353":{"position":[[96,11]]},"355":{"position":[[53,11]]},"361":{"position":[[46,11]]}}}],["usr/workspace/rachelnootebook/usr/workspace/rachelnootebook/web",{"_index":682,"t":{"242":{"position":[[282,65]]}}}],["uuid",{"_index":921,"t":{"299":{"position":[[271,8]]},"301":{"position":[[157,8]]},"353":{"position":[[148,8]]},"361":{"position":[[98,8]]}}}],["v",{"_index":571,"t":{"204":{"position":[[277,3]]},"206":{"position":[[104,3]]}}}],["v,e)和g^{'}=(v^{'},e^{'})g=(v,e)和g′=(v′,",{"_index":509,"t":{"188":{"position":[[110,43]]}}}],["v0v_0v0​加入sss，计算出v0v_0v0",{"_index":582,"t":{"212":{"position":[[54,40]]}}}],["v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1",{"_index":523,"t":{"197":{"position":[[485,122]]}}}],["v=asbsssˉ+asˉbsˉssv",{"_index":98,"t":{"75":{"position":[[39,19]]}}}],["v_i,v_j)是g的边，则a[i][j",{"_index":517,"t":{"197":{"position":[[182,24]]}}}],["valu",{"_index":1007,"t":{"357":{"position":[[135,8]]},"411":{"position":[[38,8]]}}}],["var/log/nginx/access.log",{"_index":709,"t":{"242":{"position":[[744,25]]}}}],["var/log/nginx/error.log;pid",{"_index":674,"t":{"242":{"position":[[124,28]]}}}],["ve(0)ve(0)ve(0",{"_index":613,"t":{"219":{"position":[[275,19]]}}}],["ve(0)ve(0)ve(0)为0",{"_index":608,"t":{"219":{"position":[[48,17]]}}}],["ve(i)ve(i)ve(i",{"_index":618,"t":{"219":{"position":[[513,24]]}}}],["ve(k)=max[ve(j)+weight(vj,vk)]ve(k",{"_index":609,"t":{"219":{"position":[[66,35]]}}}],["version",{"_index":724,"t":{"244":{"position":[[244,8]]}}}],["vex[n",{"_index":525,"t":{"197":{"position":[[629,7]]},"199":{"position":[[289,7]]}}}],["vexindex",{"_index":533,"t":{"199":{"position":[[123,9]]}}}],["vexnum,arcnum",{"_index":528,"t":{"197":{"position":[[684,14]]},"199":{"position":[[301,14]]}}}],["vi,vj)是g的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{align",{"_index":516,"t":{"197":{"position":[[129,52]]}}}],["visit(t[index",{"_index":471,"t":{"153":{"position":[[719,16]]}}}],["visit(v",{"_index":551,"t":{"202":{"position":[[525,9]]},"204":{"position":[[281,9]]}}}],["visit(w",{"_index":560,"t":{"202":{"position":[[674,9]]}}}],["visited[i",{"_index":545,"t":{"202":{"position":[[417,10]]}}}],["visited[max_size];void",{"_index":541,"t":{"202":{"position":[[345,22]]},"204":{"position":[[112,22]]}}}],["visited[v",{"_index":552,"t":{"202":{"position":[[535,10]]},"204":{"position":[[184,10],[291,10]]}}}],["visited[w",{"_index":561,"t":{"202":{"position":[[684,10]]}}}],["vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i",{"_index":620,"t":{"219":{"position":[[570,73]]}}}],["vl(k)=min[vl(j)−weight(vk,vj)]vl(k",{"_index":614,"t":{"219":{"position":[[295,35]]}}}],["vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i",{"_index":622,"t":{"219":{"position":[[686,54]]}}}],["vnode",{"_index":535,"t":{"199":{"position":[[203,6],[283,5]]}}}],["vnode;typedef",{"_index":537,"t":{"199":{"position":[[243,31]]}}}],["void",{"_index":149,"t":{"99":{"position":[[455,4]]},"101":{"position":[[315,4]]},"103":{"position":[[212,4]]},"107":{"position":[[27,4]]},"109":{"position":[[728,4]]},"113":{"position":[[265,4]]},"115":{"position":[[843,4],[1318,4]]},"118":{"position":[[329,8],[732,4]]},"138":{"position":[[39,4]]},"140":{"position":[[338,4]]},"153":{"position":[[61,4],[655,4]]},"202":{"position":[[504,6]]}}}],["vsv_svs​加入sss",{"_index":583,"t":{"212":{"position":[[95,22]]}}}],["vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来a到d距离是10，但是加入了b后，通过a",{"_index":584,"t":{"212":{"position":[[118,56]]}}}],["vvv表示事件，<vi,vj><v_i,v_j><vi​,vj​>的这样一条边表示活动vjv_jvj​必须要viv_ivi",{"_index":603,"t":{"215":{"position":[[0,83]]}}}],["v′是v的子集e′是e的子集v^{'}是v的子集e^{'}是e的子集v′是v的子集e′是",{"_index":510,"t":{"188":{"position":[[154,50]]}}}],["v到w和w到v",{"_index":514,"t":{"194":{"position":[[17,11]]}}}],["v行v列的矩阵，其中若vi到vj有路径，则a[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则a[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则a[i][j]为1",{"_index":515,"t":{"197":{"position":[[0,128]]}}}],["web",{"_index":747,"t":{"249":{"position":[[0,3]]}}}],["weight",{"_index":534,"t":{"199":{"position":[[137,7]]}}}],["weight(v_j,v_k)]ve(k)=max[ve(j)+weight(vj​,vk​)]其中k是j",{"_index":611,"t":{"219":{"position":[[116,56]]}}}],["weight(v_k,v_j)]vl(k)=min[vl(j)−weight(vk​,vj",{"_index":616,"t":{"219":{"position":[[345,48]]}}}],["weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj",{"_index":621,"t":{"219":{"position":[[644,41]]}}}],["weight[n][n",{"_index":526,"t":{"197":{"position":[[641,13]]}}}],["welcom",{"_index":625,"t":{"226":{"position":[[23,7]]}}}],["while(!isempty(q",{"_index":554,"t":{"202":{"position":[[567,19]]}}}],["while(i",{"_index":356,"t":{"130":{"position":[[194,7]]}}}],["while(i<=mid",{"_index":316,"t":{"118":{"position":[[609,13]]}}}],["while(i<s.len",{"_index":420,"t":{"138":{"position":[[305,13]]}}}],["while(j",{"_index":429,"t":{"140":{"position":[[413,7]]}}}],["while(j<=high",{"_index":317,"t":{"118":{"position":[[640,14]]}}}],["while(k<t.len",{"_index":413,"t":{"138":{"position":[[106,15]]}}}],["while(low",{"_index":232,"t":{"109":{"position":[[534,9]]}}}],["while(low<=high",{"_index":43,"t":{"35":{"position":[[173,17]]},"101":{"position":[[435,17]]}}}],["while(low<high",{"_index":233,"t":{"109":{"position":[[553,14],[624,14]]}}}],["worker_connect",{"_index":676,"t":{"242":{"position":[[177,18]]}}}],["www",{"_index":685,"t":{"242":{"position":[[381,7]]}}}],["wxopenid",{"_index":900,"t":{"293":{"position":[[453,11]]},"303":{"position":[[743,11]]}}}],["w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z",{"_index":6,"t":{"7":{"position":[[0,93]]}}}],["x",{"_index":80,"t":{"56":{"position":[[83,1],[151,1]]},"58":{"position":[[89,26],[150,1],[201,1]]},"80":{"position":[[61,4],[142,4]]},"153":{"position":[[163,3],[251,3],[272,1],[384,3],[405,1],[519,3],[540,1]]},"167":{"position":[[34,76]]},"242":{"position":[[473,1]]},"425":{"position":[[285,1]]}}}],["x/2",{"_index":459,"t":{"153":{"position":[[302,4]]}}}],["x0",{"_index":1121,"t":{"425":{"position":[[278,2],[289,2]]}}}],["x<1){return",{"_index":452,"t":{"153":{"position":[[180,11]]}}}],["xgroup",{"_index":1141,"t":{"433":{"position":[[176,12]]}}}],["xxxxx.rdb即可，我修改为dbfienam",{"_index":1027,"t":{"373":{"position":[[95,35]]}}}],["xx：当key存在的时候，覆盖key",{"_index":1089,"t":{"403":{"position":[[60,18]]}}}],["x、y的绝对值，i",{"_index":114,"t":{"82":{"position":[[8,15]]},"84":{"position":[[31,15]]},"86":{"position":[[8,15]]}}}],["x和y计算出对应的x和i",{"_index":110,"t":{"80":{"position":[[43,17]]}}}],["y",{"_index":115,"t":{"82":{"position":[[24,4]]},"84":{"position":[[47,4]]},"86":{"position":[[24,4]]},"244":{"position":[[337,1]]},"425":{"position":[[307,1]]}}}],["y0",{"_index":1122,"t":{"425":{"position":[[300,2]]}}}],["y0+r",{"_index":1123,"t":{"425":{"position":[[311,5]]}}}],["ye",{"_index":1054,"t":{"387":{"position":[[173,3]]},"393":{"position":[[27,3]]}}}],["yes。其保存的是appendonly.aof",{"_index":1035,"t":{"378":{"position":[[158,33]]}}}],["yes改为protect",{"_index":1072,"t":{"393":{"position":[[48,14]]}}}],["yes表示开启，设置为no",{"_index":1055,"t":{"387":{"position":[[177,17]]}}}],["zf，zf为1代表全0",{"_index":94,"t":{"73":{"position":[[0,14]]}}}],["zset",{"_index":1109,"t":{"418":{"position":[[6,4]]}}}],["zxvf",{"_index":1061,"t":{"391":{"position":[[91,4]]}}}]],"pipeline":["stemmer"]}}]