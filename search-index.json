[{"documents":[{"i":1,"t":"2-2023-05-07","u":"/docs/English/每日翻译/2-2023-05-07","b":["English","每日翻译"]},{"i":5,"t":"1-2023-05-06","u":"/docs/English/每日翻译/1-2023-05-06","b":["English","每日翻译"]},{"i":9,"t":"3-2023-05-08","u":"/docs/English/每日翻译/3-2023-05-08","b":["English","每日翻译"]},{"i":11,"t":"6-2023-05-12","u":"/docs/English/每日翻译/6-2023-05-12","b":["English","每日翻译"]},{"i":17,"t":"5-2023-05-11","u":"/docs/English/每日翻译/5-2023-05-11","b":["English","每日翻译"]},{"i":19,"t":"","u":"/docs/English/intro","b":["English"]},{"i":22,"t":"7-2023-06-04","u":"/docs/English/每日翻译/7-2023-06-04","b":["English","每日翻译"]},{"i":24,"t":"4-2023-05-09","u":"/docs/English/每日翻译/4-2023-05-09","b":["English","每日翻译"]},{"i":26,"t":"数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","b":["Foundation","Foundation","计算机组成原理"]},{"i":70,"t":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","b":["Foundation","Foundation","数据结构","算法"]},{"i":84,"t":"","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","b":["Foundation","Foundation","数据结构"]},{"i":114,"t":"数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","b":["Foundation","Foundation","数据结构"]},{"i":127,"t":"树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":158,"t":"intro","u":"/docs/intro","b":[]},{"i":162,"t":"","u":"/docs/Foundation/intro","b":["Foundation","Foundation"]},{"i":165,"t":"内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","b":["Foundation","Foundation","数据结构"]},{"i":198,"t":"","u":"/docs/Math/intro","b":["Math","Math"]},{"i":201,"t":"","u":"/docs/Math/高数强化复盘/1.2023-07-15","b":["Math","Math","高数强化复盘"]},{"i":213,"t":"","u":"/docs/Web/部署Docsaururs","b":["English","Web"]},{"i":228,"t":"图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":263,"t":"","u":"/docs/Web/intro","b":["English","Web"]},{"i":266,"t":"计算机体系结构","u":"/docs/Foundation/course/计算机体系结构","b":["Foundation","Foundation","course"]},{"i":300,"t":"接口文档","u":"/docs/Web/软件工程课设/接口文档","b":["English","Web","软件工程课设"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[0,1.724,1,0.723,2,0.812,3,1.724]],["t/5",[1,0.723,2,0.812,4,1.724,5,1.406]],["t/9",[1,0.723,2,0.812,6,1.724,7,1.724]],["t/11",[1,0.723,2,0.812,8,1.724,9,1.724]],["t/17",[1,0.723,2,0.812,10,1.724,11,1.724]],["t/19",[]],["t/22",[1,0.723,5,1.406,12,1.724,13,1.724]],["t/24",[1,0.723,2,0.812,14,1.724,15,1.724]],["t/26",[16,1.376]],["t/70",[17,3.28]],["t/84",[]],["t/114",[16,1.376]],["t/127",[16,1.376]],["t/158",[18,3.28]],["t/162",[]],["t/165",[16,1.376]],["t/198",[]],["t/201",[]],["t/213",[]],["t/228",[16,1.376]],["t/263",[]],["t/266",[16,1.376]],["t/300",[16,1.376]]],"invertedIndex":[["",{"_index":16,"t":{"26":{"position":[[0,7]]},"114":{"position":[[0,8]]},"127":{"position":[[0,9]]},"165":{"position":[[0,6]]},"228":{"position":[[0,6]]},"266":{"position":[[0,7]]},"300":{"position":[[0,4]]}}}],["04",{"_index":13,"t":{"22":{"position":[[10,2]]}}}],["05",{"_index":2,"t":{"1":{"position":[[7,2]]},"5":{"position":[[7,2]]},"9":{"position":[[7,2]]},"11":{"position":[[7,2]]},"17":{"position":[[7,2]]},"24":{"position":[[7,2]]}}}],["06",{"_index":5,"t":{"5":{"position":[[10,2]]},"22":{"position":[[7,2]]}}}],["07",{"_index":3,"t":{"1":{"position":[[10,2]]}}}],["08",{"_index":7,"t":{"9":{"position":[[10,2]]}}}],["09",{"_index":15,"t":{"24":{"position":[[10,2]]}}}],["1",{"_index":4,"t":{"5":{"position":[[0,1]]}}}],["11",{"_index":11,"t":{"17":{"position":[[10,2]]}}}],["12",{"_index":9,"t":{"11":{"position":[[10,2]]}}}],["2",{"_index":0,"t":{"1":{"position":[[0,1]]}}}],["2023",{"_index":1,"t":{"1":{"position":[[2,4]]},"5":{"position":[[2,4]]},"9":{"position":[[2,4]]},"11":{"position":[[2,4]]},"17":{"position":[[2,4]]},"22":{"position":[[2,4]]},"24":{"position":[[2,4]]}}}],["3",{"_index":6,"t":{"9":{"position":[[0,1]]}}}],["4",{"_index":14,"t":{"24":{"position":[[0,1]]}}}],["5",{"_index":10,"t":{"17":{"position":[[0,1]]}}}],["6",{"_index":8,"t":{"11":{"position":[[0,1]]}}}],["7",{"_index":12,"t":{"22":{"position":[[0,1]]}}}],["intro",{"_index":18,"t":{"158":{"position":[[0,5]]}}}],["kmp",{"_index":17,"t":{"70":{"position":[[0,7]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"Inspiraling streams of enriched gas observed around a massive galaxy 11 billion years ago","u":"/docs/English/每日翻译/2-2023-05-07","h":"#inspiraling-streams-of-enriched-gas-observed-around-a-massive-galaxy-11-billion-years-ago","p":1},{"i":7,"t":"Atmospheric nourishment of global ocean ecosystems","u":"/docs/English/每日翻译/1-2023-05-06","h":"#atmospheric-nourishment-of-global-ocean-ecosystems","p":5},{"i":13,"t":"Abstract","u":"/docs/English/每日翻译/6-2023-05-12","h":"#abstract","p":11},{"i":15,"t":"INTRODUCTION","u":"/docs/English/每日翻译/6-2023-05-12","h":"#introduction","p":11},{"i":20,"t":"Faraway","u":"/docs/English/intro","h":"","p":19},{"i":28,"t":"码制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#码制","p":26},{"i":29,"t":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":26},{"i":31,"t":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":26},{"i":33,"t":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":26},{"i":35,"t":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":26},{"i":37,"t":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":26},{"i":39,"t":"移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移位","p":26},{"i":40,"t":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":26},{"i":42,"t":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":26},{"i":44,"t":"循环移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#循环移位","p":26},{"i":45,"t":"定点数加减","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数加减","p":26},{"i":46,"t":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":26},{"i":48,"t":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":26},{"i":50,"t":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":26},{"i":52,"t":"定点数乘除","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数乘除","p":26},{"i":53,"t":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":26},{"i":55,"t":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":26},{"i":57,"t":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":26},{"i":59,"t":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":26},{"i":61,"t":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":26},{"i":63,"t":"浮点数","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数","p":26},{"i":64,"t":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":26},{"i":66,"t":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":26},{"i":68,"t":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":26},{"i":72,"t":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":70},{"i":74,"t":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":70},{"i":76,"t":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":70},{"i":78,"t":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":70},{"i":80,"t":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":70},{"i":82,"t":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":70},{"i":85,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":84},{"i":87,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":84},{"i":89,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":84},{"i":91,"t":"红黑树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":84},{"i":92,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":84},{"i":94,"t":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":84},{"i":96,"t":"B树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":84},{"i":97,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":84},{"i":99,"t":"B树高（磁盘存取次数）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b树高磁盘存取次数","p":84},{"i":100,"t":"最矮","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最矮","p":84},{"i":101,"t":"最高","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最高","p":84},{"i":102,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":84},{"i":104,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":84},{"i":106,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":84},{"i":108,"t":"B+树（常用于关系型数据库的存储）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":84},{"i":109,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":84},{"i":111,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":84},{"i":113,"t":"B和B+的类比","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b和b的类比","p":84},{"i":116,"t":"1.1基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#11基本概念","p":114},{"i":117,"t":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":114},{"i":119,"t":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":114},{"i":121,"t":"2.算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#2算法","p":114},{"i":122,"t":"2.1算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#21算法","p":114},{"i":123,"t":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":114},{"i":125,"t":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":114},{"i":129,"t":"几种常考的二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#几种常考的二叉树","p":127},{"i":130,"t":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":127},{"i":132,"t":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":127},{"i":134,"t":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":127},{"i":136,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":127},{"i":138,"t":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":127},{"i":140,"t":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":127},{"i":142,"t":"树和森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和森林","p":127},{"i":143,"t":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":127},{"i":145,"t":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":127},{"i":147,"t":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":127},{"i":149,"t":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":127},{"i":151,"t":"考试选择盲猜","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#考试选择盲猜","p":127},{"i":152,"t":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":127},{"i":154,"t":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":127},{"i":156,"t":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":127},{"i":160,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":158},{"i":163,"t":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":162},{"i":167,"t":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":165},{"i":169,"t":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":165},{"i":171,"t":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":165},{"i":173,"t":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":165},{"i":175,"t":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":165},{"i":177,"t":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":165},{"i":179,"t":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":165},{"i":181,"t":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":165},{"i":183,"t":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":165},{"i":185,"t":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":165},{"i":187,"t":"归并排序和基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序和基数排序","p":165},{"i":188,"t":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":165},{"i":190,"t":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":165},{"i":192,"t":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":165},{"i":194,"t":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":165},{"i":196,"t":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":165},{"i":199,"t":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":198},{"i":202,"t":"极限概念与性质","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"","p":201},{"i":203,"t":"主要内容","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#主要内容","p":201},{"i":205,"t":"1.极限概念","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#1极限概念","p":201},{"i":207,"t":"2.极限的性质","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#2极限的性质","p":201},{"i":209,"t":"3.极限存在准则","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#3极限存在准则","p":201},{"i":211,"t":"4.无穷","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#4无穷","p":201},{"i":214,"t":"两种方式部署","u":"/docs/Web/部署Docsaururs","h":"","p":213},{"i":215,"t":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":213},{"i":217,"t":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":213},{"i":219,"t":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":213},{"i":221,"t":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":213},{"i":223,"t":"二、GitHubAction+云服务器部署","u":"/docs/Web/部署Docsaururs","h":"#二githubaction云服务器部署","p":213},{"i":224,"t":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":213},{"i":226,"t":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":213},{"i":230,"t":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":228},{"i":232,"t":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":228},{"i":234,"t":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":228},{"i":236,"t":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":228},{"i":238,"t":"两种存储结构：矩阵和链表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#两种存储结构矩阵和链表","p":228},{"i":239,"t":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":228},{"i":241,"t":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":228},{"i":243,"t":"BFS和DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs和dfs","p":228},{"i":244,"t":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":228},{"i":246,"t":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":228},{"i":248,"t":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":228},{"i":250,"t":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":228},{"i":252,"t":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":228},{"i":254,"t":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":228},{"i":256,"t":"拓扑","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑","p":228},{"i":257,"t":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":228},{"i":259,"t":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":228},{"i":261,"t":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":228},{"i":264,"t":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":263},{"i":268,"t":"第一章","u":"/docs/Foundation/course/计算机体系结构","h":"#第一章","p":266},{"i":269,"t":"1.MIPS","u":"/docs/Foundation/course/计算机体系结构","h":"#1mips","p":266},{"i":271,"t":"2.阿姆达尔定律","u":"/docs/Foundation/course/计算机体系结构","h":"#2阿姆达尔定律","p":266},{"i":273,"t":"3.计算机系统结构性能评价标准","u":"/docs/Foundation/course/计算机体系结构","h":"#3计算机系统结构性能评价标准","p":266},{"i":275,"t":"第二章","u":"/docs/Foundation/course/计算机体系结构","h":"#第二章","p":266},{"i":277,"t":"1.哈夫曼编码","u":"/docs/Foundation/course/计算机体系结构","h":"#1哈夫曼编码","p":266},{"i":279,"t":"2.扩展码","u":"/docs/Foundation/course/计算机体系结构","h":"#2扩展码","p":266},{"i":281,"t":"第三章","u":"/docs/Foundation/course/计算机体系结构","h":"#第三章","p":266},{"i":283,"t":"1.Cache存储时间的计算","u":"/docs/Foundation/course/计算机体系结构","h":"#1cache存储时间的计算","p":266},{"i":285,"t":"2.映射","u":"/docs/Foundation/course/计算机体系结构","h":"#2映射","p":266},{"i":287,"t":"3.Cache透明性分析","u":"/docs/Foundation/course/计算机体系结构","h":"#3cache透明性分析","p":266},{"i":289,"t":"4.Cache的取算法","u":"/docs/Foundation/course/计算机体系结构","h":"#4cache的取算法","p":266},{"i":290,"t":"预取算法","u":"/docs/Foundation/course/计算机体系结构","h":"#预取算法","p":266},{"i":292,"t":"第四章","u":"/docs/Foundation/course/计算机体系结构","h":"#第四章","p":266},{"i":294,"t":"1.普通流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#1普通流水线","p":266},{"i":296,"t":"2.设计计算功能的流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#2设计计算功能的流水线","p":266},{"i":298,"t":"3.带冲突的流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#3带冲突的流水线","p":266},{"i":302,"t":"4.1 学生端","u":"/docs/Web/软件工程课设/接口文档","h":"#41-学生端","p":300},{"i":303,"t":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":300},{"i":305,"t":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":300},{"i":307,"t":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":300},{"i":309,"t":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":300},{"i":311,"t":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":300},{"i":313,"t":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":300},{"i":315,"t":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":300},{"i":317,"t":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":300},{"i":319,"t":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":300},{"i":321,"t":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":300},{"i":323,"t":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":300},{"i":325,"t":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":300},{"i":327,"t":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":300},{"i":329,"t":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":300},{"i":331,"t":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":300},{"i":333,"t":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":300},{"i":335,"t":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":300},{"i":337,"t":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":300},{"i":339,"t":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":300},{"i":341,"t":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":300},{"i":343,"t":"4.3 管理端","u":"/docs/Web/软件工程课设/接口文档","h":"#43-管理端","p":300},{"i":344,"t":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":300},{"i":346,"t":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":300},{"i":348,"t":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":300},{"i":350,"t":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":300},{"i":352,"t":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":300},{"i":354,"t":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":300},{"i":356,"t":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":300},{"i":358,"t":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":300},{"i":360,"t":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":300},{"i":362,"t":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":300},{"i":364,"t":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":300},{"i":366,"t":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":300},{"i":368,"t":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":300},{"i":370,"t":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":300},{"i":372,"t":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":300},{"i":374,"t":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":300},{"i":376,"t":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":300},{"i":378,"t":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":300},{"i":380,"t":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":300},{"i":382,"t":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":300},{"i":384,"t":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":300},{"i":386,"t":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":300},{"i":388,"t":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":300},{"i":390,"t":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":300},{"i":392,"t":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":300},{"i":394,"t":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":300},{"i":396,"t":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":300},{"i":398,"t":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":300},{"i":400,"t":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":300},{"i":402,"t":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":300},{"i":404,"t":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":300},{"i":406,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":300},{"i":408,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":300},{"i":410,"t":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":300},{"i":412,"t":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":300}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,1.184,1,1.184,2,1.184,3,1.184,4,1.184,5,1.184,6,1.184,7,1.184,8,1.184,9,1.184,10,1.184,11,1.184]],["t/7",[12,2.369,13,2.369,14,2.369,15,2.369,16,2.369]],["t/13",[17,5.532]],["t/15",[18,5.532]],["t/20",[19,5.532]],["t/28",[20,0.322]],["t/29",[20,0.322]],["t/31",[20,0.322]],["t/33",[20,0.322]],["t/35",[20,0.322]],["t/37",[20,0.322]],["t/39",[20,0.322]],["t/40",[20,0.322]],["t/42",[20,0.322]],["t/44",[20,0.322]],["t/45",[20,0.322]],["t/46",[20,0.322]],["t/48",[20,0.322]],["t/50",[20,0.322]],["t/52",[20,0.322]],["t/53",[20,0.322]],["t/55",[21,5.532]],["t/57",[20,0.322]],["t/59",[20,0.322]],["t/61",[20,0.322]],["t/63",[20,0.322]],["t/64",[20,0.322]],["t/66",[20,0.322]],["t/68",[22,5.532]],["t/72",[23,3.879]],["t/74",[24,5.532]],["t/76",[20,0.242,25,3.716]],["t/78",[26,3.716,27,3.716]],["t/80",[20,0.242,28,4.148]],["t/82",[27,3.716,29,4.148]],["t/85",[20,0.322]],["t/87",[20,0.322]],["t/89",[20,0.322]],["t/91",[20,0.322]],["t/92",[20,0.322]],["t/94",[20,0.322]],["t/96",[30,4.577]],["t/97",[20,0.322]],["t/99",[30,4.577]],["t/100",[20,0.322]],["t/101",[20,0.322]],["t/102",[20,0.322]],["t/104",[20,0.322]],["t/106",[20,0.322]],["t/108",[30,4.577]],["t/109",[20,0.322]],["t/111",[20,0.322]],["t/113",[31,5.532]],["t/116",[32,5.532]],["t/117",[20,0.322]],["t/119",[33,5.532]],["t/121",[34,3.718]],["t/122",[25,4.957]],["t/123",[20,0.322]],["t/125",[26,4.957]],["t/129",[20,0.322]],["t/130",[20,0.322]],["t/132",[20,0.322]],["t/134",[20,0.322]],["t/136",[20,0.322]],["t/138",[20,0.322]],["t/140",[20,0.322]],["t/142",[20,0.322]],["t/143",[20,0.322]],["t/145",[20,0.322]],["t/147",[20,0.322]],["t/149",[20,0.322]],["t/151",[20,0.322]],["t/152",[20,0.322]],["t/154",[20,0.322]],["t/156",[20,0.322]],["t/160",[20,0.322]],["t/163",[35,4.148,36,4.148]],["t/167",[20,0.322]],["t/169",[20,0.322]],["t/171",[20,0.322]],["t/173",[20,0.322]],["t/175",[20,0.322]],["t/177",[20,0.322]],["t/179",[20,0.322]],["t/181",[20,0.322]],["t/183",[20,0.322]],["t/185",[20,0.322]],["t/187",[20,0.322]],["t/188",[20,0.322]],["t/190",[20,0.322]],["t/192",[20,0.322]],["t/194",[20,0.322]],["t/196",[20,0.322]],["t/199",[20,0.322]],["t/202",[20,0.322]],["t/203",[20,0.322]],["t/205",[23,3.879]],["t/207",[34,3.718]],["t/209",[37,4.294]],["t/211",[38,5.532]],["t/214",[20,0.322]],["t/215",[39,5.532]],["t/217",[23,3.879]],["t/219",[34,3.718]],["t/221",[37,4.294]],["t/223",[40,5.532]],["t/224",[23,3.879]],["t/226",[41,5.532]],["t/230",[20,0.322]],["t/232",[20,0.322]],["t/234",[20,0.322]],["t/236",[20,0.322]],["t/238",[20,0.322]],["t/239",[20,0.322]],["t/241",[20,0.322]],["t/243",[42,5.532]],["t/244",[43,5.532]],["t/246",[44,5.532]],["t/248",[20,0.322]],["t/250",[45,5.532]],["t/252",[46,5.532]],["t/254",[20,0.322]],["t/256",[20,0.322]],["t/257",[47,5.532]],["t/259",[20,0.322]],["t/261",[20,0.322]],["t/264",[20,0.322]],["t/268",[20,0.322]],["t/269",[48,5.532]],["t/271",[34,3.718]],["t/273",[37,4.294]],["t/275",[20,0.322]],["t/277",[23,3.879]],["t/279",[34,3.718]],["t/281",[20,0.322]],["t/283",[49,5.532]],["t/285",[34,3.718]],["t/287",[50,5.532]],["t/289",[51,5.532]],["t/290",[20,0.322]],["t/292",[20,0.322]],["t/294",[23,3.879]],["t/296",[34,3.718]],["t/298",[37,4.294]],["t/302",[20,0.242,52,4.148]],["t/303",[20,0.242,53,4.148]],["t/305",[20,0.242,54,4.148]],["t/307",[20,0.242,55,4.148]],["t/309",[20,0.242,56,4.148]],["t/311",[20,0.242,57,4.148]],["t/313",[20,0.242,58,4.148]],["t/315",[20,0.242,59,4.148]],["t/317",[20,0.242,60,4.148]],["t/319",[20,0.242,61,4.148]],["t/321",[20,0.242,62,4.148]],["t/323",[20,0.242,63,4.148]],["t/325",[20,0.242,64,4.148]],["t/327",[20,0.242,65,4.148]],["t/329",[20,0.242,66,4.148]],["t/331",[20,0.242,67,4.148]],["t/333",[20,0.242,68,4.148]],["t/335",[20,0.242,69,4.148]],["t/337",[20,0.242,70,4.148]],["t/339",[20,0.242,71,4.148]],["t/341",[20,0.242,72,4.148]],["t/343",[20,0.242,73,4.148]],["t/344",[20,0.242,74,4.148]],["t/346",[20,0.242,75,4.148]],["t/348",[20,0.242,76,4.148]],["t/350",[20,0.242,77,4.148]],["t/352",[20,0.242,78,4.148]],["t/354",[20,0.242,79,4.148]],["t/356",[20,0.242,80,4.148]],["t/358",[20,0.242,81,4.148]],["t/360",[20,0.242,82,4.148]],["t/362",[20,0.242,83,4.148]],["t/364",[20,0.242,84,4.148]],["t/366",[20,0.242,85,4.148]],["t/368",[20,0.242,86,4.148]],["t/370",[20,0.242,87,4.148]],["t/372",[20,0.242,88,4.148]],["t/374",[20,0.242,89,4.148]],["t/376",[20,0.242,90,4.148]],["t/378",[20,0.242,91,4.148]],["t/380",[20,0.242,92,4.148]],["t/382",[20,0.242,93,4.148]],["t/384",[20,0.242,94,4.148]],["t/386",[20,0.242,95,4.148]],["t/388",[20,0.242,96,4.148]],["t/390",[20,0.242,97,4.148]],["t/392",[20,0.242,98,4.148]],["t/394",[20,0.242,99,4.148]],["t/396",[20,0.242,100,4.148]],["t/398",[20,0.242,101,4.148]],["t/400",[20,0.242,102,4.148]],["t/402",[20,0.242,103,4.148]],["t/404",[20,0.242,104,4.148]],["t/406",[20,0.242,105,3.716]],["t/408",[20,0.242,105,3.716]],["t/410",[20,0.242,106,4.148]],["t/412",[20,0.242,107,4.148]]],"invertedIndex":[["",{"_index":20,"t":{"28":{"position":[[0,2]]},"29":{"position":[[0,9]]},"31":{"position":[[0,2]]},"33":{"position":[[0,2]]},"35":{"position":[[0,2]]},"37":{"position":[[0,2]]},"39":{"position":[[0,2]]},"40":{"position":[[0,4]]},"42":{"position":[[0,4]]},"44":{"position":[[0,4]]},"45":{"position":[[0,5]]},"46":{"position":[[0,4]]},"48":{"position":[[0,4]]},"50":{"position":[[0,4]]},"52":{"position":[[0,5]]},"53":{"position":[[0,4]]},"57":{"position":[[0,10]]},"59":{"position":[[0,18]]},"61":{"position":[[0,11]]},"63":{"position":[[0,3]]},"64":{"position":[[0,8]]},"66":{"position":[[0,3]]},"76":{"position":[[4,4]]},"80":{"position":[[4,4]]},"85":{"position":[[0,5]]},"87":{"position":[[0,2]]},"89":{"position":[[0,2]]},"91":{"position":[[0,3]]},"92":{"position":[[0,2]]},"94":{"position":[[0,4]]},"97":{"position":[[0,2]]},"100":{"position":[[0,2]]},"101":{"position":[[0,2]]},"102":{"position":[[0,2]]},"104":{"position":[[0,2]]},"106":{"position":[[0,2]]},"109":{"position":[[0,2]]},"111":{"position":[[0,2]]},"117":{"position":[[0,28]]},"123":{"position":[[0,7]]},"129":{"position":[[0,8]]},"130":{"position":[[0,4]]},"132":{"position":[[0,5]]},"134":{"position":[[0,5]]},"136":{"position":[[0,5]]},"138":{"position":[[0,11]]},"140":{"position":[[0,5]]},"142":{"position":[[0,4]]},"143":{"position":[[0,8]]},"145":{"position":[[0,6]]},"147":{"position":[[0,10]]},"149":{"position":[[0,8]]},"151":{"position":[[0,6]]},"152":{"position":[[0,8]]},"154":{"position":[[0,4]]},"156":{"position":[[0,13]]},"160":{"position":[[0,30]]},"167":{"position":[[0,4]]},"169":{"position":[[0,4]]},"171":{"position":[[0,4]]},"173":{"position":[[0,4]]},"175":{"position":[[0,4]]},"177":{"position":[[0,4]]},"179":{"position":[[0,4]]},"181":{"position":[[0,4]]},"183":{"position":[[0,4]]},"185":{"position":[[0,3]]},"187":{"position":[[0,9]]},"188":{"position":[[0,4]]},"190":{"position":[[0,4]]},"192":{"position":[[0,8]]},"194":{"position":[[0,7]]},"196":{"position":[[0,9]]},"199":{"position":[[0,8]]},"202":{"position":[[0,7]]},"203":{"position":[[0,4]]},"214":{"position":[[0,6]]},"230":{"position":[[0,10]]},"232":{"position":[[0,9]]},"234":{"position":[[0,3]]},"236":{"position":[[0,3]]},"238":{"position":[[0,12]]},"239":{"position":[[0,4]]},"241":{"position":[[0,3]]},"248":{"position":[[0,3]]},"254":{"position":[[0,15]]},"256":{"position":[[0,2]]},"259":{"position":[[0,4]]},"261":{"position":[[0,4]]},"264":{"position":[[0,9]]},"268":{"position":[[0,3]]},"275":{"position":[[0,3]]},"281":{"position":[[0,3]]},"290":{"position":[[0,4]]},"292":{"position":[[0,3]]},"302":{"position":[[4,3]]},"303":{"position":[[7,2]]},"305":{"position":[[7,2]]},"307":{"position":[[7,2]]},"309":{"position":[[7,2]]},"311":{"position":[[7,4]]},"313":{"position":[[7,4]]},"315":{"position":[[7,4]]},"317":{"position":[[7,4]]},"319":{"position":[[7,4]]},"321":{"position":[[8,4]]},"323":{"position":[[8,4]]},"325":{"position":[[8,6]]},"327":{"position":[[8,5]]},"329":{"position":[[8,4]]},"331":{"position":[[8,4]]},"333":{"position":[[8,6]]},"335":{"position":[[8,6]]},"337":{"position":[[8,4]]},"339":{"position":[[8,6]]},"341":{"position":[[8,6]]},"343":{"position":[[4,3]]},"344":{"position":[[7,2]]},"346":{"position":[[7,2]]},"348":{"position":[[7,2]]},"350":{"position":[[7,4]]},"352":{"position":[[7,4]]},"354":{"position":[[7,4]]},"356":{"position":[[7,4]]},"358":{"position":[[7,6]]},"360":{"position":[[7,4]]},"362":{"position":[[8,4]]},"364":{"position":[[8,4]]},"366":{"position":[[8,4]]},"368":{"position":[[8,4]]},"370":{"position":[[8,4]]},"372":{"position":[[8,4]]},"374":{"position":[[8,4]]},"376":{"position":[[8,4]]},"378":{"position":[[8,6]]},"380":{"position":[[8,4]]},"382":{"position":[[8,4]]},"384":{"position":[[8,4]]},"386":{"position":[[8,4]]},"388":{"position":[[8,4]]},"390":{"position":[[8,4]]},"392":{"position":[[8,4]]},"394":{"position":[[8,4]]},"396":{"position":[[8,4]]},"398":{"position":[[8,4]]},"400":{"position":[[8,4]]},"402":{"position":[[8,4]]},"404":{"position":[[8,6]]},"406":{"position":[[8,6]]},"408":{"position":[[8,6]]},"410":{"position":[[8,4]]},"412":{"position":[[8,6]]}}}],["1",{"_index":23,"t":{"72":{"position":[[0,11]]},"205":{"position":[[0,6]]},"217":{"position":[[0,8]]},"224":{"position":[[0,5]]},"277":{"position":[[0,7]]},"294":{"position":[[0,7]]}}}],["1.1",{"_index":32,"t":{"116":{"position":[[0,7]]}}}],["1.2",{"_index":33,"t":{"119":{"position":[[0,10]]}}}],["1.cach",{"_index":49,"t":{"283":{"position":[[0,14]]}}}],["1.mip",{"_index":48,"t":{"269":{"position":[[0,6]]}}}],["11",{"_index":8,"t":{"3":{"position":[[69,2]]}}}],["2",{"_index":34,"t":{"121":{"position":[[0,4]]},"207":{"position":[[0,7]]},"219":{"position":[[0,6]]},"271":{"position":[[0,8]]},"279":{"position":[[0,5]]},"285":{"position":[[0,4]]},"296":{"position":[[0,12]]}}}],["2.1",{"_index":25,"t":{"76":{"position":[[0,3]]},"122":{"position":[[0,5]]}}}],["2.2",{"_index":26,"t":{"78":{"position":[[0,3]]},"125":{"position":[[0,8]]}}}],["2.3",{"_index":28,"t":{"80":{"position":[[0,3]]}}}],["2.4",{"_index":29,"t":{"82":{"position":[[0,3]]}}}],["2.kmp",{"_index":24,"t":{"74":{"position":[[0,5]]}}}],["2.项目配置action",{"_index":41,"t":{"226":{"position":[[0,17]]}}}],["3",{"_index":37,"t":{"209":{"position":[[0,8]]},"221":{"position":[[0,6]]},"273":{"position":[[0,15]]},"298":{"position":[[0,9]]}}}],["3.cach",{"_index":50,"t":{"287":{"position":[[0,12]]}}}],["4",{"_index":38,"t":{"211":{"position":[[0,4]]}}}],["4.1",{"_index":52,"t":{"302":{"position":[[0,3]]}}}],["4.1.1",{"_index":53,"t":{"303":{"position":[[0,6]]}}}],["4.1.10",{"_index":62,"t":{"321":{"position":[[0,7]]}}}],["4.1.11",{"_index":63,"t":{"323":{"position":[[0,7]]}}}],["4.1.12",{"_index":64,"t":{"325":{"position":[[0,7]]}}}],["4.1.13",{"_index":65,"t":{"327":{"position":[[0,7]]}}}],["4.1.14",{"_index":66,"t":{"329":{"position":[[0,7]]}}}],["4.1.15",{"_index":67,"t":{"331":{"position":[[0,7]]}}}],["4.1.16",{"_index":68,"t":{"333":{"position":[[0,7]]}}}],["4.1.17",{"_index":69,"t":{"335":{"position":[[0,7]]}}}],["4.1.18",{"_index":70,"t":{"337":{"position":[[0,7]]}}}],["4.1.19",{"_index":71,"t":{"339":{"position":[[0,7]]}}}],["4.1.2",{"_index":54,"t":{"305":{"position":[[0,6]]}}}],["4.1.20",{"_index":72,"t":{"341":{"position":[[0,7]]}}}],["4.1.3",{"_index":55,"t":{"307":{"position":[[0,6]]}}}],["4.1.4",{"_index":56,"t":{"309":{"position":[[0,6]]}}}],["4.1.5",{"_index":57,"t":{"311":{"position":[[0,6]]}}}],["4.1.6",{"_index":58,"t":{"313":{"position":[[0,6]]}}}],["4.1.7",{"_index":59,"t":{"315":{"position":[[0,6]]}}}],["4.1.8",{"_index":60,"t":{"317":{"position":[[0,6]]}}}],["4.1.9",{"_index":61,"t":{"319":{"position":[[0,6]]}}}],["4.3",{"_index":73,"t":{"343":{"position":[[0,3]]}}}],["4.3.1",{"_index":74,"t":{"344":{"position":[[0,6]]}}}],["4.3.10",{"_index":83,"t":{"362":{"position":[[0,7]]}}}],["4.3.11",{"_index":84,"t":{"364":{"position":[[0,7]]}}}],["4.3.12",{"_index":85,"t":{"366":{"position":[[0,7]]}}}],["4.3.13",{"_index":86,"t":{"368":{"position":[[0,7]]}}}],["4.3.14",{"_index":87,"t":{"370":{"position":[[0,7]]}}}],["4.3.15",{"_index":88,"t":{"372":{"position":[[0,7]]}}}],["4.3.16",{"_index":89,"t":{"374":{"position":[[0,7]]}}}],["4.3.17",{"_index":90,"t":{"376":{"position":[[0,7]]}}}],["4.3.18",{"_index":91,"t":{"378":{"position":[[0,7]]}}}],["4.3.19",{"_index":92,"t":{"380":{"position":[[0,7]]}}}],["4.3.2",{"_index":75,"t":{"346":{"position":[[0,6]]}}}],["4.3.20",{"_index":93,"t":{"382":{"position":[[0,7]]}}}],["4.3.21",{"_index":94,"t":{"384":{"position":[[0,7]]}}}],["4.3.22",{"_index":95,"t":{"386":{"position":[[0,7]]}}}],["4.3.23",{"_index":96,"t":{"388":{"position":[[0,7]]}}}],["4.3.24",{"_index":97,"t":{"390":{"position":[[0,7]]}}}],["4.3.25",{"_index":98,"t":{"392":{"position":[[0,7]]}}}],["4.3.26",{"_index":99,"t":{"394":{"position":[[0,7]]}}}],["4.3.27",{"_index":100,"t":{"396":{"position":[[0,7]]}}}],["4.3.28",{"_index":101,"t":{"398":{"position":[[0,7]]}}}],["4.3.29",{"_index":102,"t":{"400":{"position":[[0,7]]}}}],["4.3.3",{"_index":76,"t":{"348":{"position":[[0,6]]}}}],["4.3.30",{"_index":103,"t":{"402":{"position":[[0,7]]}}}],["4.3.31",{"_index":104,"t":{"404":{"position":[[0,7]]}}}],["4.3.32",{"_index":105,"t":{"406":{"position":[[0,7]]},"408":{"position":[[0,7]]}}}],["4.3.33",{"_index":106,"t":{"410":{"position":[[0,7]]}}}],["4.3.34",{"_index":107,"t":{"412":{"position":[[0,7]]}}}],["4.3.4",{"_index":77,"t":{"350":{"position":[[0,6]]}}}],["4.3.5",{"_index":78,"t":{"352":{"position":[[0,6]]}}}],["4.3.6",{"_index":79,"t":{"354":{"position":[[0,6]]}}}],["4.3.7",{"_index":80,"t":{"356":{"position":[[0,6]]}}}],["4.3.8",{"_index":81,"t":{"358":{"position":[[0,6]]}}}],["4.3.9",{"_index":82,"t":{"360":{"position":[[0,6]]}}}],["4.cach",{"_index":51,"t":{"289":{"position":[[0,11]]}}}],["abstract",{"_index":17,"t":{"13":{"position":[[0,8]]}}}],["ago",{"_index":11,"t":{"3":{"position":[[86,3]]}}}],["aov",{"_index":47,"t":{"257":{"position":[[0,3]]}}}],["around",{"_index":5,"t":{"3":{"position":[[45,6]]}}}],["atmospher",{"_index":12,"t":{"7":{"position":[[0,11]]}}}],["b",{"_index":30,"t":{"96":{"position":[[0,2]]},"99":{"position":[[0,11]]},"108":{"position":[[0,17]]}}}],["bf",{"_index":43,"t":{"244":{"position":[[0,3]]}}}],["bfs和df",{"_index":42,"t":{"243":{"position":[[0,7]]}}}],["billion",{"_index":9,"t":{"3":{"position":[[72,7]]}}}],["booth",{"_index":21,"t":{"55":{"position":[[0,13]]}}}],["b和b",{"_index":31,"t":{"113":{"position":[[0,7]]}}}],["df",{"_index":44,"t":{"246":{"position":[[0,3]]}}}],["ecosystem",{"_index":16,"t":{"7":{"position":[[40,10]]}}}],["enrich",{"_index":2,"t":{"3":{"position":[[23,8]]}}}],["faraway",{"_index":19,"t":{"20":{"position":[[0,7]]}}}],["foundat",{"_index":35,"t":{"163":{"position":[[0,10]]}}}],["ga",{"_index":3,"t":{"3":{"position":[[32,3]]}}}],["galaxi",{"_index":7,"t":{"3":{"position":[[62,6]]}}}],["githubact",{"_index":40,"t":{"223":{"position":[[0,21]]}}}],["githubpag",{"_index":39,"t":{"215":{"position":[[0,13]]}}}],["global",{"_index":14,"t":{"7":{"position":[[27,6]]}}}],["ieee754",{"_index":22,"t":{"68":{"position":[[0,9]]}}}],["inspir",{"_index":0,"t":{"3":{"position":[[0,11]]}}}],["introduct",{"_index":18,"t":{"15":{"position":[[0,12]]}}}],["kruskal",{"_index":46,"t":{"252":{"position":[[0,14]]}}}],["massiv",{"_index":6,"t":{"3":{"position":[[54,7]]}}}],["next",{"_index":27,"t":{"78":{"position":[[4,6]]},"82":{"position":[[4,8]]}}}],["nourish",{"_index":13,"t":{"7":{"position":[[12,11]]}}}],["observ",{"_index":4,"t":{"3":{"position":[[36,8]]}}}],["ocean",{"_index":15,"t":{"7":{"position":[[34,5]]}}}],["prim",{"_index":45,"t":{"250":{"position":[[0,9]]}}}],["road",{"_index":36,"t":{"163":{"position":[[14,4]]}}}],["stream",{"_index":1,"t":{"3":{"position":[[12,7]]}}}],["year",{"_index":10,"t":{"3":{"position":[[80,5]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":2,"t":"English 每日翻译 2-2023-05-07","s":"2-2023-05-07","u":"/docs/English/每日翻译/2-2023-05-07","h":"","p":1},{"i":4,"t":"tip 摘自[science](Inspiraling streams of enriched gas observed around a massive galaxy 11 billion years ago | Science) Editor’s summary​ Galaxies accrete gas from the surrounding intergalactic medium and then turn this gas into stars. Feedback processes such as supernova explosions enrich the gas with elements heavier than helium and can impart enough momentum to eject some gas out of the galaxy. S. Zhang et al. observed the intergalactic medium around a massive galaxy at redshift 2.3. In addition to emission lines caused by hydrogen and helium, they observed lines for carbon, indicating that the gas has been enriched with heavier elements. The kinematics are consistent with streams of gas spiraling toward the massive galaxy. The authors propose that the enriched gas has been recycled from an earlier period of star formation. —Keith T. Smith 1.编者总结​ 星系从周围的星系介质中吸收气体。类似超新星爆炸之类的反馈的过程使得气体富含比氦更重的元素，并且可以赋予足够的动量将一些气体喷射出星系。张淑贤等人在红移2.3处观测到大质量星系周围的星系介质。除了由氢氦引起的射线外，他们还观测到了碳射线，这表明了涉县中有更重的元素。运动轨迹和大质量星系的气体螺旋上升的轨迹一致。作者提出 ，富集气体是来自于早期恒星形成阶段回收的。 Abstract​ Stars form in galaxies, from gas that has been accreted from the intergalactic medium. Simulations have shown that recycling of gas—the reaccretion of gas that was previously ejected from a galaxy—could sustain star formation in the early Universe. We observe the gas surrounding a massive galaxy at redshift 2.3 and detect emission lines from neutral hydrogen, helium, and ionized carbon that extend 100 kiloparsecs from the galaxy. The kinematics of this circumgalactic gas is consistent with an inspiraling stream. The carbon abundance indicates that the gas had already been enriched with elements heavier than helium, previously ejected from a galaxy. We interpret the results as evidence of gas recycling during high-redshift galaxy assembly. 2.摘要​ 恒星在星系中形成，由从星系介质吸收积累的气体而组成。模拟表明，气体的回收(先前从星系中喷射的气体的重新吸积) ，可以维持早期宇宙中的恒星形成。我们在红移2.3处观察一个大质量星系周围的气体，并探测到中性氢，氦和电离碳的发射线，这些发射线从星系延伸100千秒差距。 这种环星系气体的运动规律和螺旋流一致。碳的高含量辨明了这些气体中已经包含了比氢还重的元素。我们解释为这为高红移星系形成过程中气体回收的证据。","s":"Inspiraling streams of enriched gas observed around a massive galaxy 11 billion years ago","u":"/docs/English/每日翻译/2-2023-05-07","h":"#inspiraling-streams-of-enriched-gas-observed-around-a-massive-galaxy-11-billion-years-ago","p":1},{"i":6,"t":"English 每日翻译 1-2023-05-06","s":"1-2023-05-06","u":"/docs/English/每日翻译/1-2023-05-06","h":"","p":5},{"i":8,"t":"tip 摘自 science Editor’s summary​ Most of the nutrients that fuel primary production in the oceans come from water upwelled to the surface from deeper depths, but atmospheric aerosols have long been recognized as another potential source. Westberry et al. used measurements of ocean color made by satellites to show that the global distribution of phytoplankton is affected by dust deposition, with impacts that vary from region to region. Climate change is expected to alter the relative importance of this mechanism. —H. Jesse Smith Abstract​ Over the vast open ocean, vital nutrients for phytoplankton growth in the sunlit surface layer are largely provided through physical transport from deep waters, but some nutrients are also provided through atmospheric deposition of desert dust. The extent and magnitude of dust-mediated effects on surface ocean ecosystems have been difficult to estimate globally. In this work, we use global satellite ocean color products to demonstrate widespread responses to atmospheric dust deposition across a diverse continuum of phytoplankton nutritional conditions. The observed responses vary regionally, with some areas exhibiting substantial changes in phytoplankton biomass, whereas in other areas, the response reflects a change in physiological status or health. Climate-driven changes in atmospheric aerosols will alter the relative importance of this nutrient source. 翻译​ 1.编者的总结​ Most of the nutrients that fuel primary production in the oceans come from water upwelled to the surface from deeper depths, but atmospheric aerosols have long been recognized as another potential source. 海洋中的初级生产提供燃料的大部分养分是来自于深处上升到地标的水分，但大气气溶胶长期以来一直被认为是另一个潜在的来源 Westberry et al. used measurements of ocean color made by satellites to show that the global distribution of phytoplankton is affected by dust deposition, with impacts that vary from region to region. Westberry et al 等人采用卫星对海洋颜色的测量表明了浮游植物的全球分布受到了尘埃沉积的影响，影响因地区而已。 Climate-driven changes in atmospheric aerosols will alter the relative importance of this nutrient source. 预计气候变化将改变这一机制的重要性。 2.摘要​ Over the vast open ocean, vital nutrients for phytoplankton growth in the sunlit surface layer are largely provided through physical transport from deep waters, but some nutrients are also provided through atmospheric deposition of desert dust. 在广阔的海洋，阳光照射表层浮游植物生长的主要养分来自深水的传输，但是另一部分的是通过沙漠尘埃的大气沉降提供的。 The extent and magnitude of dust-mediated effects on surface ocean ecosystems have been difficult to estimate globally. 尘埃对海洋表层生态系统以你影响的范围和程度很难在全球范围内进行估计 In this work, we use global satellite ocean color products to demonstrate widespread responses to atmospheric dust deposition across a diverse continuum of phytoplankton nutritional conditions. 在这项工作中，我们使用全球卫星海洋颜色产品来展示在浮游植物营养条件的不同连续体在大气尘埃沉积的反应。 The observed responses vary regionally, with some areas exhibiting substantial changes in phytoplankton biomass, whereas in other areas, the response reflects a change in physiological status or health. Climate-driven changes in atmospheric aerosols will alter the relative importance of this nutrient source. 观察到的反应受地区影响而异，一些区域的浮游植物生物量发生的重大的变化，但是在一些区域，反应反映了生理状态或者健康状态的变化。气候驱动的大气气溶胶变化将改变这种营养来源的相对重要性。","s":"Atmospheric nourishment of global ocean ecosystems","u":"/docs/English/每日翻译/1-2023-05-06","h":"#atmospheric-nourishment-of-global-ocean-ecosystems","p":5},{"i":10,"t":"English 每日翻译 3-2023-05-08","s":"3-2023-05-08","u":"/docs/English/每日翻译/3-2023-05-08","h":"","p":9},{"i":12,"t":"English 每日翻译 6-2023-05-12","s":"6-2023-05-12","u":"/docs/English/每日翻译/6-2023-05-12","h":"","p":11},{"i":14,"t":"Digital information, when converted into a DNA sequence, provides dense, stable, energy-efficient, and sustainable data storage. The most stable method for encapsulating DNA has been in an inorganic matrix of silica, iron oxide, or both, but are limited by low DNA uptake and complex recovery techniques. This study investigated a rationally designed thermally responsive functionally graded (TRFG) hydrogel as a simple and cost-effective method for storing DNA. The TRFG hydrogel shows high DNA uptake, long-term protection, and reusability due to nondestructive DNA extraction. The high loading capacity was achieved by directly absorbing DNA from the solution, which is then retained because of its interaction with a hyperbranched cationic polymer loaded into a negatively charged hydrogel matrix used as a support and because of its thermoresponsive nature, which allows DNA concentration within the hydrogel through multiple swelling/deswelling cycles. We were able to achieve a high DNA data density of 7.0 × 109 gigabytes per gram using a hydrogel-based system. 数据信息在转化为DNA序列时，提供密集、稳定、节能和可持续的数据存储。最稳定的封装DNA方法是使用二氧化硅，氧化铁或者两者的无机基质之间，但是其受限于DNA摄取和复杂的回收技术。 本研究调查了一种合理设计的TRFG水凝胶，作为一种简单的高校低成本的DNA存储方法。TRFG水凝胶具有高DNA摄取、长期保护和重复适用性，这是因为其无损的DNA提取。高装载能力是通过从DNA溶解中直接获取的，然后由于其与加载到带负电荷的水凝胶基质中的超支化阳离子聚合物相互作用而保留，该聚合物加载到用作载体的水凝胶基质中，并且由于其热响应性，这允许DNA在水凝胶内通过多个膨胀/溶胀进行循环浓缩。我们能够实现 7.0∗1097.0*10^97.0∗109的高DNA数据密度，每克千兆字节 词汇 concentration：浓度 swelling/deswelling：肿胀/溶解 gigabytes：十亿字节 gram：克","s":"Abstract","u":"/docs/English/每日翻译/6-2023-05-12","h":"#abstract","p":11},{"i":16,"t":"In today’s digital information age, the global demand for data storage is growing at an exponential rate (1–3). However, further reduction of traditional storage architectures, such as hard drives and magnetic tapes, is a growing challenge (4, 5). Current devices have reached their physical limits and can hardly maintain pace with the ever-increasing digital storage requirements. These issues might be resolved by DNA data storage, which is an emerging technology that provides substantial DNA density (5–8) with a remarkable half-life (9, 10). 在数据时代，全球对数据存储的需求以正指数级增长。然后，这也进一步减少了传统的存储架(例如硬盘和磁带)，这是一个越来越大的挑战。当前设备已经到达了他们的物理限制，已经无法跟上不断更新的数据存储需求的脚步。这些问题可能会被DNA数据存储解决，这是一项的信箱的通过DNA存储来解决的技术，可以提供DNA密度(5-8)和显著的半衰期(9-10)。 DNA storage is based on encoding data into DNA molecules expressed as a four-letter code, i.e., A, T, C, and G. On the basis of prior calculations, DNA can theoretically store up to 455 EB/g (4.55 × 1011 GB/g), which are 10 billion times higher than the traditional storage media (100 GB/g) (11, 12). However, there are several hurdles that need to be overcome before approaching this theoretical storage density. At present, DNA powder is commonly used for DNA data storage, but this approach has the following limitations: First, the DNA powder needs to be associated with other DNA protective carriers, such as silica beads, to avoid contamination and loss. However, the carrier tends to have a much higher weight than the DNA itself, which reduces the effective DNA storage capacity (DNA weight/total weight). Second, this method is prone to DNA damage and contamination. Third, DNA may require coexistence with numerous DNA stabilizers, such as trehalose and polyvinyl alcohol, to enhance its storage life, which also reduces the effective DNA storage capacity (13–16). Furthermore, DNA powder may not mix well with the DNA stabilizer. Therefore, it is important to explore other methods that can improve the DNA loading efficiency during the preservation process. DNA存储存储基于数据编码为表示为四个字母的DNA分子(ATCG)。在先前计算的基础上，DNA理论上可以存储超过455EB/g(4.55∗1011GB/g)455EB/g(4.55*1011GB/g)455EB/g(4.55∗1011GB/g)比传统的数据存储介质高校十二亿倍。但是，在接近理论存储最大密度前，需要解决一些问题。目前，DNA粉末通常用语DNA数据存储，但是在这种逼近有一定的局限性：首先是DNA粉末需要与其他的DNA保护体关联(如二氧化硅珠)，从而来避免污染和丢失。然后这种载体通常比DNA自身海还重，如此便会减少DNA存储有效的数据容量。第二，这种方法容易对DNA造成污染和破坏。第三，DNA可能需要与DNA稳定剂共存(海藻糖和聚乙烯醇)，来延长他们的存储寿命，这同样会减少DNA存储有效的数据容量。除此之外，DNA粉末无法和DNA稳定剂充分混合。因此，探索了其他的能够在保存过程提高DNA装载效率的方法十分重要。","s":"INTRODUCTION","u":"/docs/English/每日翻译/6-2023-05-12","h":"#introduction","p":11},{"i":18,"t":"English 每日翻译 5-2023-05-11","s":"5-2023-05-11","u":"/docs/English/每日翻译/5-2023-05-11","h":"","p":17},{"i":21,"t":"tip English is the universal language in the world, and as a CS worker, one needs to have a certain foundation in English. You may dislike how English brings you a lot of troubles and takes up a lot of your time. Memorizing words is indeed boring, and translation is indeed troublesome. However, this is also the simplest way to hone your patience and improve yourself. Learning a language can also be a joy.","s":"Faraway","u":"/docs/English/intro","h":"","p":19},{"i":23,"t":"English 每日翻译 7-2023-06-04","s":"7-2023-06-04","u":"/docs/English/每日翻译/7-2023-06-04","h":"","p":22},{"i":25,"t":"English 每日翻译 4-2023-05-09","s":"4-2023-05-09","u":"/docs/English/每日翻译/4-2023-05-09","h":"","p":24},{"i":27,"t":"Foundation 计算机组成原理 数组表示和运算","s":"数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"","p":26},{"i":30,"t":"除基取余法（针对整数）​ 拿十进制的数除以基数（什么进制就是什么基数），留下余数和商，继续执行除基取余，知道商为0，最后将余数从下向上串起来，得到整数部分。 乘基取整法（针对小数）​ 拿小数不断乘以基数，取掉最高位（小数点前一位），知道乘积的结果为1.000....，将结果从下向上串起来即可。","s":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":26},{"i":32,"t":"机器数的最高位表示数据的符号，剩下的数据位表示数据的绝对值真值。假设字长为n+1位。 则小数表示范围：−(1−2−n)≤x≤1−2−n-(1-2 ^{-n})\\le x \\le 1-2^{-n}−(1−2−n)≤x≤1−2−n， 整数表示范围：−(2n−1)≤x≤2n−1-(2^{n}-1) \\le x \\le 2^n -1−(2n−1)≤x≤2n−1。 其中原码的0有两种表示：10000和00000。","s":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":26},{"i":34,"t":"基于原码的不方便运算二设计的，模二运算。正数的补码和原码一样，负数的补码是在原码的基础上，除符号位外取反，末位加1（从右到左找到第一个1，前面的数取反即可）。如果是从x的补码求-x的补码，也是上述的步骤，同时将符号位进行变换即可。 对于字长n+1位。 小数表示范围：−1≤x≤1−2−n-1 \\le x \\le 1-2^{-n}−1≤x≤1−2−n 整数表示范围：−2n≤x≤2n−1-2^n \\le x \\le 2^n -1−2n≤x≤2n−1 零的表示唯一，都是0.000","s":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":26},{"i":36,"t":"正数的反码同原码，负数的反码等于原码的数值为全部取反。其中反码的零也有正负之分。","s":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":26},{"i":38,"t":"移码常常用来表示浮点数的阶码，理解为在真值上加上一个常数（偏置值），通常是2n2^n2n，相当于x在数轴上正向偏移若干单位，移码等于补码的符号位取反。 移码的零表示唯一。","s":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":26},{"i":41,"t":"码制 添加 正数 原、补、反 0 负数 原 0 补 左1 右0 反 1","s":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":26},{"i":43,"t":"无脑0","s":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":26},{"i":47,"t":"原码加减计算在计算机中容易失误得不到正确的结果，于是计算机内部的加减运算都是采用补码进行运算的，减法的本质是加法，等于加上一个负数的补码。步骤： 按二进制规则，逢二进一 加法：直接相加；减法：减数转换成负数补码后和被减数相加 符号位和数值位一起参与运算，加减法的符号位在运算中直接得到 最终运算结果的高位丢弃，保留n+1位，运算结果还是补码","s":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":26},{"i":49,"t":"零标志ZF，ZF为1代表全0 溢出标志OF，为1表示溢出，对于无符号数这个标志没用 符号标志SF，表示结果的符号 进/借位标志CF，对无符号有用，有符号数的运算没用","s":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":26},{"i":51,"t":"1）一位符号位 参加运算的两个数符号相同，结果与原操作数不同的话，表示溢出。 V=AsBsSsˉ+AsˉBsˉSsV = A_sB_s \\bar{S_s}+\\bar{A_{s}}\\bar{B_{s}}S_sV=As​Bs​Ss​ˉ​+As​ˉ​Bs​ˉ​Ss​ 逻辑表达式为1时候为溢出 2）双符号位 模四补码，运算结果两个符号位一样则不溢出，否则是溢出。 00 11 01上溢出 10下溢出 3）一位符号位 采用一位符号位结合仅为情况判断溢出，若符号位进位CF和最高位数位的进位C1一样表示没有溢出，反之溢出。","s":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":26},{"i":54,"t":"符号位单独运算，被乘数和乘数按绝对值进行运算 初始ACC里面设置为00.0000（00符号位隐藏） 乘数最低位为1，则加上被乘数，为0则加0 执行完3后，整体带上ACC的符号位进行右移（逻辑） 重复执行加法和右移n次即可 手算模拟：","s":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":26},{"i":56,"t":"在乘数后面初始加一个辅助位0，根据辅助位和乘数的最后一位的加减结果判断下一步加什么。 x和y计算出对应的x和y的补码以及-x的补码 初始ACC设置00.0000，MQ中为乘数，乘数后添加一个辅助位（辅助位就是MQ后一位） 辅助位-MQ最低位：为1则加x的补码，为0则加0，为-1则加-x的补码 执行3后，整体右移（逻辑）一位 整体执行3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n次的右移） 比较：","s":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":26},{"i":58,"t":"符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 第一步是用被除数-除数的补码 判断余数，余数为负商0，并且加上除数的补码，余数为正商0，不恢复 执行完4后，余数进行逻辑左移 加减n+1次，左移n次 流程图：","s":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":26},{"i":60,"t":"由余数和除数的符号共同决定，不需要恢复余数。 符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 被除数减去除数，判断余数正负 余数为负，商0，余数左移并且加上除数；余数为正，商1，余数左移并且减去除数 加减n+1次，左移n","s":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":26},{"i":62,"t":"符号位参与运算 计算x、y的绝对值，y的补码和-y的补码 第一步：被除数和除数同号，则被除数减去除数，被除数和除数异号，则加上除数 判断除数和余数是否同号，同号商1，余数左移减去除数；异号商0，余数左移加上除数 执行4操作n次，最后一步恒置1，“末位恒置1”","s":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":26},{"i":65,"t":"表示为：N=(−1)S∗M∗REN =(-1)^S * M*R^EN=(−1)S∗M∗RE S的取值决定正负；M表示尾数，R是基数（2,4,8...），E是阶码，表示2E2^E2E","s":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":26},{"i":67,"t":"正数：0.1xxxxx 负数：1.1xxxxx 对于基数为2的，要求小数点后一位不全为0，也就是要为1 对于基数为4的，要求小数点后两位不全为0 策略： 左规：尾数左移，则阶码要-1 右规：尾数右移，阶码+1","s":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":26},{"i":69,"t":"小概念​ 符号位：1；阶码：8；尾数：23 其中尾数前面隐含了一个1.，所以尾数的精度是24，能表示24位有效数字 符号S（31） 阶码E（23~30） 尾数M（0~22） 1+8+23组合。IEEE754标准表示成浮点数真值为：(−1)S∗1.M∗2E−127(-1)^S *1.M*2^{E-127}(−1)S∗1.M∗2E−127 其中注意阶码E是移码表示的。 阶码的全0和全1： 阶码 符号 尾数 值 全0 0 0 0 全0 1 0 -0 全1 0 0 正无穷 全1 1 0 负无穷 浮点数的加减运算​ 给定两个数，先转化成二进制表示形式。 对阶，两阶码相减，小的向大的对齐，阶码对齐过程中尾数也会进行移动 尾数加减（符号参与运算，一般都是两位符号） 将尾数规格化：正数0.1xxx，负数1.1xxx，规格化过程左移或者右移要进行阶码的改动 舍入：0舍1入、末位恒置1、截断 溢出判断 溢出的两种情况： 右规和尾数舍入，尾数大的舍入时候，末位加1，可能导致尾数溢出，此时会进行右规调整，但同时会影响到阶码，导致阶码溢出。 左规，进行左规时，阶码减1，可能导致下溢 结合一个例题：","s":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":26},{"i":71,"t":"Foundation 数据结构 算法 KMP定位子串","s":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"","p":70},{"i":73,"t":"一种很基础朴素的方法就是暴力匹配，采用定长顺序存储结构，不依赖于串的操作进行暴力匹配。 算法思想 ：采用暴力匹配的方法，对主串和模式串设置i和j两个指针，从左到右一个一个进行匹配，当出现不匹配时，主串指针回溯，模式串从新开始进行匹配。 初始处理： 进行匹配： 指针回溯： 指针回溯： 代码如下 int Index(String S,String T){ int i = 1,j = 1; while(i <= S.len && j <= T.len){ if(S.ch[i] == T.ch[i]){ // 匹配则指针向前移动 ++i; ++j; } else{ i = i - j + 2; //指针回溯 j = 1; } } if(j > T.len)return i - T.len; //匹配成功返回第一个定位 return 0;} 时间复杂度分析：分析最坏时间复杂度，如果主串前部分一直和模式串不能匹配，则指针会一直进行回溯，直到进行到最后的串，成功匹配，此时的时间复杂度取决于主串S和模式串T的长度n和m。时间复杂度为O(nm)O(nm)O(nm)","s":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":70},{"i":75,"t":"很显然如果采用暴力算法，当主串和模式串不长的情况下，时间复杂度还算可行，但是一旦长度很长，时间开销将会很大。于是三位大牛：D.E.Knuth、J.H.Morris和V.R.Prat一起发明了KMP算法，致力于解决这个主串指针回溯的问题来降低时间开销。KMP算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。KMP算法详解-彻底清楚了(转载+部分原创) - sofu6 - 博客园 (cnblogs.com)","s":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":70},{"i":77,"t":"算法思想：算法思想是按照我个人理解，KMP的核心就是基于朴素匹配算法，解决其主串指针回溯，从而降低时间开销。 过程描述对于S和T的匹配，当有相同部分，则指针将会向前移动，当出现不匹配时，是否有必要进行回溯呢？答案当然是否，因为对于主串来说，对于匹配的部分是已知信息，能否根据已知信息来判断模式串指针的下一步移动呢，从而达到降低时间复杂度的效果。由此，主串指针是不需要移动的，只需要根据已知信息来判断模式串的指针移动即可。 通过如下图片来感受下KMP的简化： 从上图发现当移动到C和D时，不匹配，肉眼观察，可以直接将j移动成如下的情况： 为什么呢？因为肉眼观察，前面的ABA是匹配的鸭！ 从上述的过程分析，我们可以发现当匹配失败时，j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k个字符是一样的。使用数学公式进行如下描述： ch[0...k−1]=ch[j−k...j−1]ch[0...k-1] = ch[j-k...j-1]ch[0...k−1]=ch[j−k...j−1] 使用如下图片进行理解： 通过上述的分析，我们可以发现，进行匹配的过程中，对于主串的指针，是一往无前，无需回溯的，算法的核心在对于模式串的指针移动，当移动到不匹配的位置时候，需要进行计算，确定指针j的下一步走向。","s":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":70},{"i":79,"t":"接下来就是重点，我们现在知道了对于算法的核心就是当出现不匹配时候，我们的指针j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next数组的方法。 1.王道老师的方法​ 根据课程的所给方法，我总结一下，该方法的相对直观，在手算中十分方便，目测观察，当主串和模式串出现不匹配时候，观察对于模式串指针，如何移动能使得在下一步匹配前，有较多模式串和主串已经匹配。如下图例，首先要初始化next数组，next数组的1和2无脑填0和1，不要问为什么，很明显，自己推一下即可： 当出现不匹配时候，在不匹配的前段，划一条竖线，观察模式串的指针j移动。 向前移动至2，o不匹配。 再向前移动到1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0的会执行++，所以没有意义) 所以在next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1处。 后面的步骤都是依次类推，该方法适合手算next。 2.重复前后缀计算法​ 当我们匹配模式串和主串到一个不匹配的位置时候，我们要进行指针j的跳转。但是由于前面匹配的信息，我们可以发现 ch[0∼k−1]=ch[j−k∼j−1]ch[0 \\sim k-1] = ch[j-k \\sim j-1]ch[0∼k−1]=ch[j−k∼j−1] 通过下图可以理解更透彻： 根据上图，当匹配到指针j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的AB相等呀，而主串中指针扫过的位置，必有AB匹配，那么我们可以直接跳过前部的AB匹配。我们可以得出公式 当出现S[i]≠T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]\\begin{aligned} &当出现S[i] \\neq T[i] \\\\ &S[i-j \\sim i-1] = T[0 \\sim j-1] \\\\ &其中T[0 \\sim k-1] = T[j-k \\sim j-1] \\\\ &所以S[i-k \\sim i-1] = T[0 \\sim k-1] \\end{aligned}​当出现S[i]=T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]​ 上述公式就是我们求解next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba}。 接下来我们来模拟感受一下这个求解过程。首先next的1和2还是直接填0和1，没有为什么。 我们来看下图 当模式串指针走到j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j-1个字符串有关。我们看前部分字符串，发现共同前后缀是AB，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是C这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是ABC？长度为2，那么next[j+1]就是在next[j]的基础上加1即可，这个是可以递推出来的。我们发现如下规律 当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]\\begin{aligned} &当有T[k] =T[j] \\\\ &可以很快得出next[j]=next[j-1]+1 \\\\ &因为我们可以得出T[0 \\sim k-1] = T[j-k \\sim j-1] (next[j] = k) \\\\ &这时候因为T[k] =T[j] 那我们可以得出T[0 \\sim k-1] + T[k] = T[j-k \\sim j-1] +T[j]\\\\ &也就是T[0 \\sim k] = T[j-k \\sim j] \\end{aligned}​当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]​ 上述讨论的是当T[j] = T[k]的情况，那如果出现不相等的情况，如何处理呢？如下图 对于这种情况，我们执行k=next[k]k=next[k]k=next[k]。为什么呢？我们再来看下图： 当到了T[k]≠T[j]T[k]\\neq T[j]T[k]=T[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是B的位置，此时执行判定T[k]=T[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k = next[k] = 1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0。 阅读文字难以理解，可以参考一个up主的讲解视频KMP算法之求next数组代码讲解_哔哩哔哩_bilibili。","s":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":70},{"i":81,"t":"阅读到这里，next数组的求解就算结束了。我们来看下next数组的求解代码： void get_next(String T,int next []){ int j = 1,k = 0; next[1] = 0; while(k<T.len){ if(k==0 ||T.ch[j] == T.ch[k]){ //如果相等 next[++j] = ++k; //next[j+1] = next[j] + 1 } else{ k = next[k]; //回头寻找 } }} KMP算法： int Index_KMP(String S,String T,int next[]){ int i = 1;j = 1; while(i<S.len && j<T.len){ if(j==0||S.ch[i] == T.ch[j]){ ++i; ++j; } else{ j = next[j]; } if(j>T.len) return i - T.len; return 0; }}","s":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":70},{"i":83,"t":"仔细观察前述的图解跟代码，会发现，尽管主串指针不会回溯，但是模式串中的指针跳转重新匹配的过程中，会出现重复匹配失败的问题，从而浪费时间。例如下图： 我们观察可以发现，匹配C和B时候会发现不匹配，此时的next会跳转到2，从AB再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟AB中的B进行匹配成功的，此时产生了一次无效匹配，然后next到1。 针对next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果T[next[j]]等于T[k]，那么直接跳过这一层匹配，改为T[next[next[j]]即可。也就是跳过了中间无效的T[next[j]]和T[k]的比较。 代码实现 void get_nextval(String T,int nextval[]){ int j = 1,k = 0; nextval[1] = 0; while(j < T.len){ if(j == 0 || T.ch[j] == T.ch[k]){ ++j; ++k; if(T.ch[j] != T.ch[k]) nextval[j] = k; //不相等，则保留原有的最长重复前后缀 else nextval[j] = nextval[k]; //相等那就跳转，减少时间开销 } else k = nextval[k] }}","s":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":70},{"i":86,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":84},{"i":88,"t":"找到合适的位置插入，然后判断类型进行处理： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":84},{"i":90,"t":"删除一个节点后，会导致一棵子树失衡，假设删除w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z的： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左 删除和插入操作类似，不同之处在于删除的调整，可能会导致另外的不平衡，需要反复多次进行调整。","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":84},{"i":93,"t":"什么是红黑树，红黑树是一种特殊的平衡二叉树，考试内容不会很深，简单清楚性质概念和插入操作即可，删除操作很难，考察概率不大。 主要性质： 每个结点或黑或红 根节点必黑 叶节点必黑，这里的叶节点是外部结点 不存在两个相邻的红节点 任意一个节点，该节点到任意一个叶节点的简单路径上，经过的黑节点数目是一样的 顺口溜： info 左根右（排序） 根叶黑 不红红 黑路同 两个结论： 从根出发到叶节点的路径不大于最短路径的一半 有n个内部红节点的红黑树高度h≤2∗log2(n+1)h \\le 2*log_{2}{(n+1)}h≤2∗log2​(n+1) 插入的节点初始化为红","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":84},{"i":95,"t":"第一步先确定要插入的位置 若为根节点，直接染黑 如果不破坏红黑树特征，正常 如果破坏了“不红红”的条件，找到父亲的兄弟结点，也就是叔结点，按照叔结点的两种情况去调整:(1)红叔叔（2）黑叔叔 （1）红叔叔 叔、父、爷结点染色（颜色反转），同时爷结点变成新节点（变黑则无所谓，变红则要再调整）。 （2）黑叔叔 找父节点和爷结点，判断当前节点对于爷结点的位置进行调整： LL：右旋，父节点换爷结点，同时父和爷染色 RR：左旋，父节点换爷结点，同时父和爷染色 LR：先左后右，当前节点先左后右，儿结点换爷结点，同时染色 RL：先右后左，当前节点先右后左，儿结点换爷结点，同时染色","s":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":84},{"i":98,"t":"info 树中每个结点至多有m个子树，即一个节点中至多m-1个关键字 根节点至少两棵子树 初根节点外的所有非叶节点，至少[m/2]（向上取整）棵子树，即至少有[m/2]（向上取整）个关键字 所有叶节点在最后一层（NULL节点，空指针）","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":84},{"i":103,"t":"在B树中找节点 在节点中中找关键字 与节点中的关键字进行比对，其中节点的左指针指向的节点集合小于该节点，右指针指向的节点集合大于节点，依据这种特性，一层层进行查找，如果到最后NULL节点，则说明找不到了。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":84},{"i":105,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1] 定位，找到应该插入的位置 插入，如果关键字个数插入后在正确范围内，则直接插入，否则进行处理 多的情况处理如下： 如下处理：","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":84},{"i":107,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1]，所以删除后节点的关键字个数不能小于（m/2）向上取整-1。 直接删除，如果删除满足关键字的最低要求，则直接删除 如果在非终端节点，则用直接前驱或者直接后继来代替 如果在兄弟够借，即目前关键字删除前为（m/2）向上取整-1，且其左（右）兄弟的关键字数目大于（m/2）向上取整，则从兄弟中拿一个节点，放到父节点中，然后从父节点中拿一下下来填充给不满足要求的节点，称为父子换位法 这里的92处已经不满足，但是左兄弟仍然充裕，则进行父子换位法： 兄弟不够借。当兄弟不够借的时候，当前节点+兄弟结点的个数为m-2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m-1，同时父节点关键字数目-1。如果父节点不满足要求，则进行兄弟够借和兄弟不够借两种试探，进行填补跟合并。如果操作使得根节点-1变为0，则直接删除根节点，换成新的根节点。(切记不可进行前驱后继填补) 此时需要父节点落下70，进行合并： 73处不满足，同时左兄弟不够借，则82落下，进行合并： 删除根节点，合并得新根节点：","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":84},{"i":110,"t":"m阶B+树每个结点最多m棵子树（也就是最多m个孩子节点） 非叶、根节点至少有两棵子树，其他每个分支节点至少有（m/2）向上取整棵子树 节点的子树个树和关键字个数一样 叶节点包含所有关键字，也就是全部关键字都会存储在叶子节点，节点内按大小排序 所有分支节点，中仅仅包含它所指向的子节点中的最大值，及其子节点的指针 叶节点之间会有指针穿在一起（支持顺序查找） 如上：3，9，15中存储的分别是三个子节点中的最大值，最后绿色的叶节点之间有指针连在一起。","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":84},{"i":112,"t":"从根出发，找到合适的位置（处于哪个子节点），过程中会在非叶节点中遇到关键字，但这并不是查找成功，要一直查到叶节点中才算成功，这是区别于B树的一个地方，B树是能够在非终端节点中就找到结果的。 如下是一个查找成功的例子，查找9，从根出发，直到叶节点。 如下是查找失败的例子：从根出发，进入15的子节点，然后进入9的子节点，对比了6->8，发现8已经大于7，则查找失败了。 总之无论成功与否，最终都一定要走到最下面的一层节点。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":84},{"i":115,"t":"Foundation 数据结构 数据结构基础知识","s":"数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"","p":114},{"i":118,"t":"数据就是信息的载体，描述客观事物的数字、字符和所有能输入到计算程序识别和处理符号的集合。 数据元素是数据的基本单位，通常当做一个整体来考虑的。例如一个简单的排队单子： 号码 取号时间 前面排队人数 上述就是数据元素，数据元素内的就是数据项 数据对象是具有相同性质的数据元素的集合，数据对象是数据的一个子集。","s":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":114},{"i":120,"t":"分为逻辑结构、物理结构、数据的运算 逻辑结构 逻辑结构可以理解为数据之间的逻辑关系，类似于函数之间的关系，一对一或者多对多之类 物理结构 物理结构就是存储结构，就是数据存储的方式，分为： 顺序存储：物理上是连续的 链式存储：不一定连续，采用指针连接 索引存储：有一个索引表，表中每项成为索引项，一般是关键字或者地址，能够快速查找 散列存储：哈希算法，散列存储 数据运算 关注的是数据之间的操作","s":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":114},{"i":124,"t":"基础的认知就是，算法是解决一个问题的方式方法，例如解决二元方程组的通用公式，这个方法就是一个算法。在计算机中，算法指的是高效处理数据，解决实际问题。 公式：程序 = 数据结构 + 算法 算法是对特定问题求解的一种描述。 例如：写一个求解最年轻富豪的程序 由公式得：设计数据结构个人信息数据元素： 个人信息 年龄 身家 设计算法： step1：对根据年龄排序 step2：输出对应的数据元素项 评价算法的两个标度：时间复杂度和空间复杂度","s":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":114},{"i":126,"t":"1.概念​ 事前预估算法的时间开销（T）与问题规模（N）的关系，T就是时间。说白了就是分析代码，算一下N情况下要花多少时间。 2.方法​ 分析代码中的执行情况，一般重点就是在循环次数、循环条件、循环内部的操作。当N足够大的时候去分析执行时间。采用大O表示法。两个结论： 可以只考虑阶数高的部分 常数项可以忽略 3.两个运算规则：​ 多项相加，取最大的 多项相乘，取乘积结果 4.常用比较：​ O(1)<O(log2n)<)(n)<O(nlong2n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)O(1)<O(log_2 n)<)(n)<O(nlong_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)O(1)<O(log2​n)<)(n)<O(nlong2​n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) 简单结论：常对幂指阶","s":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":114},{"i":128,"t":"Foundation 数据结构 树、森林的性质总结","s":"树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"","p":127},{"i":131,"t":"s 就是常见的二叉树，除了叶节点外，每个结点都是有两个分支的，这种二叉树也是最好计算的。 1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{aligned} & 1.已知树高求结点总数：sum = 2^h-1\\\\ & 2.已知编号i求双亲：(i/2)向下取整\\\\ & 3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\\\ \\end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1​","s":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":127},{"i":133,"t":"这种二叉树是少了一些结点的满二叉树，每个几点的编号都都跟1~n一一对应，也就是说，只允许在右屁股部分缺少一些叶子节点，注意，少也是少叶子节点。 上述就是一个完全二叉树的例子，需要注意，因为是1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3号结点。","s":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":127},{"i":135,"t":"以根节点为比较标准，左边的全部结点均小于根节点，右边的全部结点均大于根节点，左右子树又各自为二叉排序树。 可以从性质发现，要找最小的结点，只需去找左子树的最左叶结点即可。同理最大结点在右子树的最右叶结点。","s":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":127},{"i":137,"t":"树中任意一个结点的左子树和右子树的深度之差不超过1","s":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":127},{"i":139,"t":"1）顺序存储 typedef struct Node{ int data; int isEmpty;}TreeNode; void Init(TreeNode T[],int len){ for(int i = 0;i<len;i++){ t[i].isEmpty = 1; } } bool isEmpty(T[],int x){ if(x>=len || x<1){return ture}; else{ return fasle; }}//找到父节点int findparent(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ index = x/2; if(isEmpty(index))return 0; esle return index; }}//找右孩子int findright(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ right = 2x + 1; if(isEmpty(right))return 0; esle return right; }}//找左孩子int findleft(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ left = 2x; if(isEmpty(left))return 0; esle return left; }}//这里的代码都是按照其实结点从1开始的，如果是0开始的还要进行改变 void PreSearch(T[],int index){ if(isEmpty(index))return ; esle{ visit(T[index]); PreSearch(T[],2*index); PreSearch(T[],2*index + 1); }}//后序跟中序只需要调换顺序即可","s":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":127},{"i":141,"t":"1、非空二叉树的叶结点等于度为2的结点数加1，即n0= n2 + 1 2、二叉树第k层上最多有2k-1 个结点 3、高度为k的二叉树最多有2k -1个结点 4、对于结点i(i>1)的编码： 1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为i/2向下取整 \\\\ & 2.若i为奇数则双亲为(i-1)/2 \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 5、求树高 log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1","s":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":127},{"i":144,"t":"“左指针串糖葫芦法” 每个结点左指针指向他的第一个孩子，右指针指向它在树中的相邻右兄弟，左孩子右兄弟规则，构造后的整体看起来就是根节点出发将孩子串了起来，由于这个规则，这是一颗没有右子树的二叉树。","s":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":127},{"i":146,"t":"”孩子兄弟表示“ 将森林里面的树都变成二叉树，每个根节点都是兄弟，将第一个根节点作为二叉树的根节点，剩下的二叉树都依次接到右子树中。 森林转二叉树 摘下第一个右子树，根节点跟左子树就是第一颗树的二叉树，其剩下的右子树又可以依次进行拆解，直到没有右子树为止。","s":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":127},{"i":148,"t":"树 森林 二叉树 先根 先序 先序 后根 中序 中序","s":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":127},{"i":150,"t":"如下是三种实现的数据结构：双亲表示法、孩子表示法、孩子兄弟表示法 1）双亲表示法（顺序存储） 每个结点都设计一个伪指针指向自己的父亲 typedef struct Node{ int data; int parent;}Node*;Node n[maxsize]；for(int i = 0;i < maxsize;i++) n[i].parent = -1; 2)孩子表示法 如上图所示，每个结点后都会串着一串孩子链表 typdef struct Node{ int data; struct Node * next}Child; //对应的是左边的结构，也是一个头的开始typedef struct Tree{ ElmentType data; Child *firstChild;}*TreeList;//树节点 3）孩子兄弟表示法 typedef struct Node{ int data; struct Node* leftchild,nextsibling; //分别指向左边第一个孩子，和右边的兄弟}*Tree;","s":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":127},{"i":153,"t":"给出完全二叉树的总结点数，求解叶结点数。对于这种问题可以如下求解： 估计倒数第二层，根据估算求出最后一层有多少个叶结点，反过来求解用了上一层多少个结点，再计算上一层剩下的叶结点数，加上最后一层的结点数即可，数目大设x求解 给完全二叉树的叶结点个数，求解结点数最多的情况，求解： tip 对于这种问题求解，就要考虑完全二叉树的性质，其缺少，只能是缺少右边屁股的叶结点。估计出合适的层次范围(倒数第二层)，然后裂解到最后一层，根据叶结点个数进行分布，计算。注意看看能不能多分裂出来一些，但是叶子结点数仍然不变的情况，这里不要直接死算第一步就结束了，要记得画图观察观察。","s":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":127},{"i":155,"t":"给定结点数求树高最大最小的问题： danger 满二叉树的情况下树就是最矮的，反之每一层都有一个度为1的结点时，树最高","s":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":127},{"i":157,"t":"1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m，求解 danger 首先要搞清楚谁的右节点(右指针域为空)，对于树来说，转换后的二叉树根节点的右指针域肯定是空的，然后是根节点下来每一个分支都会到最右边的指针域为空。所以右节点的右指针域为空的总数为：非终端结点数+1，二叉树的非终端结点数为：n-m，所以总数为n-m+1 2.对于森林的也是如此，森林先转二叉树然后合并，过程是一样的，求解方法一样。","s":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":127},{"i":159,"t":"intro","s":"intro","u":"/docs/intro","h":"","p":158},{"i":161,"t":"tip 现在是过去和未来的交点 欢迎来到Rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天Rachel已经老去，但是在一个明媚温暖的午后，他能在开在河边的咖啡店里面，安静地看着自己的历程，感慨过去和未来。","s":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":158},{"i":164,"t":"tip 总会有那么几门基础学科是要学的对吧。 Welcome to Rachel NoteBook!","s":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":162},{"i":166,"t":"Foundation 数据结构 内部排序算法","s":"内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","h":"","p":165},{"i":168,"t":"插入排序就是每次都从后面未排序的序列中按照大小插入到前面已经排好的子序列中，这里会产生子序列（已经排好序的）和待排序列，当没有待排序则算法结束，每次从未排序的头部取出一个插入到子序列中合适的位置。包含有：直接插入、折半插入、希尔排序。","s":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":165},{"i":170,"t":"L[1.......i-1] L[i] L[i+1......n] 如上模拟插入排序状态，此时待排序指针指向i，前面i-1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i-1中找到适合L[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i。每次都从未排好序的中取出第一个进行插入，此处需要和后面的选择排序进行区分，当执行所以待插入的都执行完毕则算是排好啦。 s 初始第一个值默认自成一个已经排好序的子序列 采用哨兵复制L[i]，然后将子序列中大于L[i]的值进行后移，因为已经找到位置，要插入就得有空位嘛 给L[i]找到合适的插入位置 将腾出的空位放入L[i] 继续循环 弄清楚算法思想，代码是比较容易实现的，算法核心在于，从初始子序列为1的数组中，指针依次后移，为当前指向的值，从子序列中找到一个合适的位置，然后插入即可，此处可能会有疑问，插入到前面，那当前的位置呢？因为会要进行移动，所以此处的位置必然也是一个已经排好序的值。 1）代码 void InsertSort(int a[],int len){ int i,j; for(i = 2;i <= len;i++){ if(a[i]<a[i-1]){ a[0] = a[i]; for(j = i - 1;a[0] < a[j];--j){ a[j+1] = a[j]; } a[j+1] = a[0]; } }} 2）时空复杂度分析 空间上只使用了a[0]当哨兵作为辅助，故空间复杂度上为O(1)O(1)O(1) 最优时间复杂度，如果已经有序，一趟循环即可，时间复杂度为O(n)O(n)O(n) 最坏时间复杂度，初始全部乱序，两个for循环，时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性分析 s 这里第一次提及稳定性，所谓稳定性是指，数组中有a[i] == a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j]前面，假若这里反过来，就是不稳定的。如果值相同的元素在排序后相对位置没有发生改变则认为是稳定的。 据此分析，直接插入排序每次都是从未排序的数组中取出第一个进行插入，循环条件为小于号，故不会出现同值元素出现相对位置改变的情况，由此是稳定的。同时适用于顺序和链式两种结构。","s":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":165},{"i":172,"t":"折半插入是对直接插入的一个改进。在直接插入中可以发现，每次都会从子序列开头去查找一个合适插入的位置，这会带来一定的时间消耗，折半插入的改进就在于查找使用了折半查找，二分查找找到合适的位置，然后一次性进行移动。 如下图就是算法模拟步骤。默认第一个元素自成一个子序列，此时待排序指针指向5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8右移一个单位，如下所示，最后将哨兵存储的复制值放到合适的位置即可。 s 折半查找子序列找到合适的位置 右移元素 将哨兵元素插入 1）代码 void InsertSortPlus(int a[],int len){ int i,j,low,high,mid; for(i = 2;i <= len;i++){ a[0] = a[i]; low = 1;high = i - 1; while(low<=high){ mid = (low + high) / 2; if(a[mid] > a[0]) low = mid + 1; else high = mid - 1; } for(j = i - 1;j >= high + 1;j--){ a[j + 1] = a[j]; } a[high + 1] = a[0]; }} 2）时空复杂度 与直接插入排序是一样的。 空间复杂度上O(1)O(1)O(1) 时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性 这是稳定的排序算法，不会改变同大小元素的相对位置，该算法依赖初始状态，在初始相对有序且数据量不大的情况下，表现不错。","s":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":165},{"i":174,"t":"缩小增量排序，具体思想是按照一个增量将排序表分割成若干小组，小组内部进行直接插入排序。一趟完毕后增量减小，继续分组，然后进行内部的直接插入排序。知道增量为1，最后是一次完整的直接插入排序。这样的好处是，让值更大的更快跑到后面，值更小的更快到前面，在数据量大的时候，较为优秀。 info 确定初始增量，这里随便写n/2，然后对排序表按照增量分组 各组内进行一趟插入排序 增量缩小，n/2 重复步骤2，知道增量变成1 1）代码 void ShellSort(int a[],int len){ int gap,i,j; //分别定义增量和两个循环变量 for(gap = len/2;gap>=1;gap = gap/2){ //增量减小 for(i = gap+1;i<=n;i++){ //gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的pic辅助理解) if(a[i] < a[i-gap]){ //组内前一个元素大 a[0] = a[i]; //哨兵 for(j = i-gap;j>0 && a[0]<a[j];j -= gap) a[j+gap] = a[j]; a[j+gap] = a[0]; } } }} 这里随便拿两个图来看下希尔排序中i指针，在前移的过程都会进行一次组内排序。不是我们手工算的一次就直接把组内给排好的。 这里看出来49-27-76-65是一组的，此时i=3，j=1，所以要进行插入排序。 完了之后指针i向前走到4，切换到另一个组 此时对另一个组进行排序。i++后指向5，对前一个组进行排序，只不过前一个表是27-49，这次变成了27-49-76，依次类推，当i为7的时候，组内元素齐整了。 2）时空复杂度、稳定性 空间只用了一个哨兵，为O(1)O(1)O(1) 时间复杂度在数学上未能解决，分析没有结果，只知道n在某个范围的时候，时间复杂度为O(n1.3)O(n^{1.3})O(n1.3)，最坏情况是O(n2)O(n^2)O(n2) 不稳定，且只适用于顺序表","s":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":165},{"i":176,"t":"根据序列中两个元素的比较结果来交换两者的位置，所以叫交换排序。两种算法：冒泡和排序，冒泡随便，快排重点，算法题爱考","s":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":165},{"i":178,"t":"直接看图理解： 每次都把最小（大）的冒上去 1）代码 void swap(int &a,int &b){ int temp = a; a = b; b = temp;}void BubbleSort(int a[],int len){ bool = flag = false; for(int i = 0;i<n-1;i++){ for(int j = n-1;j>i;j--){ if(a[j] < a[i]) //这里的小于是确保稳定性的 swap(a[j],a[i]);flag = true; } if(!flag)return ; }} 2）时空复杂度、稳定性 空间复杂度为O(1)O(1)O(1) 最好情况下，本来就有序O(n)O(n)O(n)，否则则进行n-1躺排序，第i躺排序要进行n-i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n-1}(n-i) = \\frac{n(n-1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为O(n2)O(n^2)O(n2)，其中每次都要移动元素三次，总移动次数为比较次数的三倍 稳定","s":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":165},{"i":180,"t":"1）分而治之 快排的基本思想是分治，一个待排序表L[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得L分为两块：L[1....k-1]和L[k+1...n]，其中L[k]为pivot，使得左边表的值都小于pivot，右边都大于。然后分别再对这两个表执行上面的操作。直到每个部分只有一个元素。 2）交换 知道了分治排序，那么如何高效的将表一分为二呢？使用两个指针low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j谁有坑，另一个就得去找元素填坑。按照下面的步骤执行交换 若此时指针low的位置有坑： high向前移动，直到遇到第一个比pivot小的元素 将high位置的元素拿走（挖坑），去填low 同时low++ 若此时指针j的位置有坑： low向后移动，直到遇到第一个比pivot大的元素 将low位置的元素拿走，填high 同时high-- 3）代码 理解了分治和交换，代码如下： 先看交换部分的： int Partition(int a[],int low,int high){ int pivot = a[low]; while(low < high){ while(low<high && a[high]>=pivot) --high; //后面找元素填前面 a[low] = a[high]; while(low<high && a[low]<=pivot) ++low; //前面找元素填后面 a[high] = a[low]; } a[low] = pivot; return low;} 快排： void QuickSort(int a[],int low,int high){ if(low < high){ int pivotpos = Partition(a,low,high);//找到第一次的枢轴值点 QuickSort(a,low,pivotpos - 1); //左排序 QuickSort(a,pivotpos + 1,high); //右排序 }} 3）时空复杂度、稳定性 算法是递归的，需要一个递归栈开销，容量和递归调用的最大深度一致。最好情况下位O(log2n)O(log_{2}n)O(log2​n)，最坏需要n−1次递归调用，所以栈为O(n)n-1次递归调用，所以栈为O(n)n−1次递归调用，所以栈为O(n)，平均是O(log2n)O(log_{2}n)O(log2​n) 最坏请跨国下的时间复杂度为O(n2)O(n^2)O(n2)，理想情况是O(nlong2n)O(nlong_{2}n)O(nlong2​n) 不稳定 所有内部排序中平均性能最优","s":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":165},{"i":182,"t":"每一趟选择从待排序的元素中选取最小（大）的作为有序序列的第i个元素。分选择排序和堆排序，堆排序是重点。","s":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":165},{"i":184,"t":"跟插入排序是挺类似的，都是从待排序的序列中拿一个元素放到前面去。但是要进行区分的是，插入排序是，i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i指向的位置元素进行交换。 此时38和27进行交换（因为27最小） 按照这样执行n-1次即可 当前指向a[i]，则从a[i.....n-1]中寻找最小的元素a[k] 交换a[k]和a[i] 待排指针i前移（i++），重复上述操作 1）代码 void SelectSort(int a[],int len){ for(int i = 0;i<n-1;i++){ int min = i; for(int j = i+1;j<n;j++){ if(a[j]<a[min]) min = j; } if(i!=min) swap(a[i],a[min]); }} 2）时空复杂度分析 没有借助辅助空间，空间复杂度为O(1)O(1)O(1) 每次进行三个元素的移动，一共n-1躺，一共移动3(n-1)次元素 元素的比较次数和初始状态没有关系一共进行n(n−1)2\\frac{n(n-1)}{2}2n(n−1)​，故时间复杂度为O(n2)O(n^2)O(n2) 不稳定","s":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":165},{"i":186,"t":"1）堆 将堆看成一棵完全二叉树，其中二叉树满足性质：任意一个非根节点都小（大）于其根节点。简单来说就是每个根，存放的是该根为根节点的树中最大（小）的值。其中根最大的叫大根堆，最小的叫小根堆。如下是一个大根堆： 2）如何造堆： 这里说的是大根堆的，小根堆跟大根堆差不多。 先将数据表表示成完全二叉树的格式 最树的最后一棵子树开始，从后往前调整 3）处理上升和下坠： 若当前处理的根节点的小于左右孩子中的最大值，那么最大值会替换根节点的值，同时让根节点下坠 根节点下坠的过程，从上往下进行继续进行上述的操作1，如果有比自己还大的孩子，就下坠，直到找到合适的位置 这里贴几个图： 初始处理倒数第一棵子树 处理可能要下坠的情况，这里处理到了最后一棵树，53＜87，所以要下坠 53下坠到原87的位置，发现这棵子树不符合，所以继续下坠。 53放到了合适的位置，大根堆构建结束。 4）造堆的代码 先来看一下树中儿子和父亲的关系函数： 1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为\\frac{i}{2}向下取整 \\\\ & 2.若i为奇数则双亲为\\frac{(i-1)}{2} \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 其中要注意的是数组a是从0开始存储还是1开始存储，对应的表达式会有改变。 要点： 若表长为len，那么第一棵子树的根节点下表为len/2，从这里开始调整 若根节点需要下坠，把最大值放到根节点位置 根节点下坠到缺空处，此时需要调整指针标记值，去判断下坠位置时候符合大根堆的条件 void BuildMaxHeap(int a[],int len){ for(int i = len/2;i>0;i++) //第一棵子树的根节点下表为len/2，从这里开始调整 HeadAdjust(a,i,len);}void HeadAdjust(int a[],int k,int len){ a[0] = a[k]; //复制一份当前处理节点数据，后面交换后会被覆盖 for(int i = k*2;i<len;i*=2){ //k*2直接指向其左孩子，每次循环开始都会向下走一层 if(i<len && a[i]<a[i+1]) i++; //i标记的是左右孩子哪个更大 if(a[0]>a[i])break; //根最大，满足，不处理 else{ a[k] = a[i]; //根小孩子大，孩子上去 k = i; //将根的指针指向这个孩子的，重新循环判断寻找初始根应该放的位置 } } a[k] = a[0] } 5）堆排序 已经造好了大根堆 输出堆顶元素（堆定元素和堆底元素在完全二叉树的逻辑上进行互换） 调整大根堆 循环1和2 void HeapSort(int a[],int len){ BuildMaxHeap(a,len); for(int i = len;i>n;i--){ swap(a[i],a[1]); HeadAdjust(a,1,i-1); }} 6）时空复杂度、稳定性 空间上借助常数个空间单元O(1)O(1)O(1) 建堆时间O(n)O(n)O(n)调整时间为O(h)O(h)O(h)，最好、最坏、平均情况下的时间复杂度都是O(nlog2n)O(nlog_{2}n)O(nlog2​n) 不稳定","s":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":165},{"i":189,"t":"将两个（或多个，取决于归并路数）有序表，合并成一个新的有序表，看个图理解： 以上是二路归并，初始每个元素独立为一个有序表，则取两两合并，如有剩下不成组则单独为一组，n路归并同理。直到归并成一个完整的有序表。 1）归并 如何合并两个有序表长度分别问n和m 需要一个辅助数组b存放两个表 两个指针p1和p2分别指向两个有序表的起始位置 比较b[p1]和b[p2]，较小者放入a中，同时指针后移 当出现某一个表已经复制完了，剩下的表直接将剩余元素按序复制到a中 图例： 这是初始状态。 复制元素，指针后移，继续比较。 当一个表复制完了，剩下的直接复制进去。 3）归并代码 int *b = (int *)malloc(sizeof(int)*(n+1)); // 辅助数组void Merge(int a[],int low,int mid,int high){ //mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high] int i,j,k; for(k = low;k<=high;k++) //复制元素 b[k] = a[k]; for(i = low,j = mid+1,k = i;i<=mid && j<=high;k++){ //i做前段指针，j做后段指针 if(b[i]<=b[j]) a[k] = b[i++]; else a[k] = b[j++]; } //两种情况复制剩下的 while(i<=mid) a[k++] = b[i++]; while(j<=high) a[k++] = b[j++];} 4）n路归并排序 这里以2路归并，基于分治思想，将n个元素分解成n/2个子表，两两归并。几路就按几个元素一组来划分。 void MergeSort(int a[],int low,int high){ if(low<high){ int mid = (low+high)/2; MergeSort(a,low,mid); MergeSort(a,mid+1,high); Merge(a,low,mid,high); }} 5）时空复杂度、稳定性 需要n个辅助单元，空间复杂度O(n)O(n)O(n) 每趟归并的复杂度为O(n)O(n)O(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为O(nlog2n)O(nlog_{2}n)O(nlog2​n) 稳定","s":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":165},{"i":191,"t":"基数排序不基于比较和移动进行排序，按照关键字各个位置的大小进行比较。如果按0~999的数来比较，个人理解为，分别按个十百或者百个十进行比较。有两种关键字排序法： 最高位优先：从高位开始排序 最低位优先：从低位开始排序 1）举个🌰： 有520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999中，个十百各排序一次，需要三次。 基于上述的顺序，进行个位的分配，如下第一趟： 接下来将各个队列的值串起来（收集），从前往后： 接下来，基于这个顺序进行百位的分配和收集： 最后进行百位的分配和收集： 2）具体过程 感觉通过上面的例子都会理解了，这里还是按过程随便写一下。 给定长度n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d-1},k_j^{d-2},k_j^{d-3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0​)组成 其中，0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0 \\le k_j^{i} \\le r-1 (0 \\le j \\le n,0 \\le i \\le d-1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r称为基数 有点难说，简单认为就是，一个关键字有多少位就是几元组，关键字中的任意一位的取值范围最大值就是基数r。上述的520就是三元组，基数。 基数排序得到递减序列的过程： 设置r个空队列Qr,Qr−1.......Q0Q_r,Q_{r-1}.......Q_0Qr​,Qr−1​.......Q0​ 按各个关键字位权重递增次序，就是个十百的顺序，对关键字分配和回收 分配：如果当前处理的关键字位是n就挂到队列n的队尾中，比如520的个位是0，就挂0队列 回收：从前到后将队列元素出队，串起来 3）时空复杂度、稳定性 空间需要r个队列，Q(r)Q(r)Q(r) 需要进行d躺排序，一次分配要Q(n)Q(n)Q(n)，一次收集要Q(r)Q(r)Q(r)，所以时间复杂度为O(d(n+1))O(d(n+1))O(d(n+1)) 稳定 4）应用 基本不考大题，了解手算，一般适用于那种有关键字的比较，年月日、身份证这种。","s":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":165},{"i":193,"t":"算法 时间复杂度 空间复杂度 稳定性 最好 最坏 平均 直接插入 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 折半插入 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 希尔 \\ \\ O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 冒泡 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 快排 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(log2n)O(log_{2}n)O(log2​n) 不稳 简单选择 O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 堆 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(1)O(1)O(1) 不稳 2路归并 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n)O(n)O(n) 稳 基数 O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(r)O(r)O(r) 稳","s":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":165},{"i":195,"t":"1）希尔 2）快排 3）简单选择 4）堆","s":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":165},{"i":197,"t":"顺序表结构 直接插入、折半插入、希尔、冒泡、快排、简单选择、堆、归并、基数 链表结构 直接插入、冒泡、简单选择、基数（可能降低效率）；（快排、希尔、归并、堆都可以用，但是不推荐）","s":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":165},{"i":200,"t":"tip Mathematics is the end of all fundamental disciplines 数学是人类对事物的抽象结构与模式进行严格描述、推导的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。 对于我们来说，数学也许繁琐无味，但是确实我们认知世界的一把重要钥匙。 数学的尽头是哲学:数学是一种思维逻辑的集合。它是人类根据观察到的自然现象和自身的体验,用思维来做逻辑的推导和延伸总结出的自然运动规律的抽象结果。而哲学也就是基于人的思维和经验总结自然界和人类社会发展中的规律的学说,即研究该如何去思考和解释所观察和体验到的现象的方法论。","s":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":198},{"i":204,"t":"极限概念 极限性质 极限存在准则 无穷小和无穷大","s":"主要内容","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#主要内容","p":201},{"i":206,"t":"1.1 数列极限​ 区分数列极限和函数极限。数列极限是当n大于某个数时，后面的值，趋向于极限值，其中需要注意的是，数列极限值与前n项无关，只跟后面的n>N项有关，前者是有限项，后者是无限项。数列可以拆分成奇数列和偶数列。 1.2 函数极限​ 函数极限就是当自变量x趋向于某值的时候，函数值无限趋向于A，则A就是极限。从几何上来看就是在x>X之后的函数值都落在(a−ε,a+ε)(a-\\varepsilon,a+\\varepsilon)(a−ε,a+ε)中。如果x是趋向于x0x_0x0​的则考虑去心邻域。保证x有定义的同时，x取不到x0x_0x0​。其中记住xsin(1x)xsin(\\frac{1}{x})xsin(x1​)这一极限值是不存在的。 1.3 考虑左右极限的情况​ 分段函数 e∞e^{\\infty}e∞类型，其中e+∞=+∞e^{+\\infty} = +\\inftye+∞=+∞,e+∞=0e^{+\\infty} = 0e+∞=0 arctan∞arctan{\\infty}arctan∞类型，arctan+∞=π2arctan{+\\infty}=\\frac{\\pi}{2}arctan+∞=2π​,arctan−∞=−π2arctan{-\\infty}=-\\frac{\\pi}{2}arctan−∞=−2π​","s":"1.极限概念","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#1极限概念","p":201},{"i":208,"t":"局部有界2 保号 保序 极限值与无穷小","s":"2.极限的性质","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#2极限的性质","p":201},{"i":210,"t":"夹逼 单调有界 夹逼就是简单的找到两端相同的不等式然后夹逼求得极限，适用于可以求极限的证明。而单调有界则是首先判断单调，然后确定是否有界来确定是否存在极限。","s":"3.极限存在准则","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#3极限存在准则","p":201},{"i":212,"t":"4.1 无穷小​ 极限值趋向于0就是无穷小。 性质：有限无穷小的和、积都是无穷小。无穷小和有界量的积仍然是无穷小。 4.2 无穷大​ 极限值趋向于∞\\infty∞就是无穷大(包括正负) 4.2.1 常用无穷大比较​ 对数<<幂级数<<指数 对数<<幂级数<<指数<<阶乘<<幂指数 4.2.2 无穷大和无界变量​ 无穷大是当n>N后的都是无穷大，也就是无穷多项。而无界变量是n>N后，存在∣Xn∣|X_n|∣Xn​∣无穷大，也就是说无穷大是都很大，无界变量是部分很大。","s":"4.无穷","u":"/docs/Math/高数强化复盘/1.2023-07-15","h":"#4无穷","p":201},{"i":216,"t":"推荐采用这种方式进行部署，较为方便，采用GitHub提供的托管工具Githubpages进行静态页面部署。 GitHub Pages 是由 GitHub 提供的静态网站托管服务。它允许用户直接从他们的 GitHub 存储库托管他们的网站。GitHub Pages 支持多种静态网站生成器，并提供免费的 HTTPS 加密、自定义域和通过 Git 的版本控制。用户还可以使用 Jekyll，一个流行的静态网站生成器，在 GitHub Pages 上构建他们的网站。另外，GitHub Pages 还内置了持续集成和部署支持，使得每次您将更改推送到存储库时都可以轻松更新您的网站。 但是有一个弊端就是，单纯的Githubpages部署，每次添加新的笔记都得重新推送上远程仓库。","s":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":213},{"i":218,"t":"首先就是在远程建立一个仓库，仓库名为username.github.io，其中设置为你个人的用户名。","s":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":213},{"i":220,"t":"打开本地写好的项目终端进行远程连接仓库。 git initgit remote add origin \"你的仓库地址\"git add .git commit -m\"提交信息\"git push -u origin main 上述就是将你的代码远程上传到远程仓库了","s":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":213},{"i":222,"t":"本地首先要进行配置，将你的Docsaururs配置文件进行修改，将config配置中的代码段修改 url: 'https://username.github.io',baseUrl: '/', 改为自己的仓库地址所对应的那个名称就好，这也是部署后的访问地址。 执行 npm run buildgit checkout -b gh-pagesxcopy /E/Y build .rmdir /S /Q buildgit add .git commit -m \"Deploy Docusaurus to GitHub Pages\" git push origin gh-pages 上述代码就是将你的build后的代码上传到gh-pages分支上，接下来你只需要在仓库的setting-> pages->Branch设置为gh-pages分支来作为你的pages读取静态文件的地址即可。 部署成功后，即可通过上述配置文件中的https://username.github.io访问到你的网站。","s":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":213},{"i":225,"t":"自行购买云服务器和域名，然后对域名进行解析，同时在服务器中下载Nginx并且进行配置。 在Nginx配置文件Nginx.conf中对你的域名和端口进行配置。例如 user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events { worker_connections 1024;}http { server { listen 端口号 default_server; listen [::]:端口号 default_server; root /usr/workspace/RachelNooteBook/usr/workspace/RachelNooteBook/web; index index.html; server_name 域名 www.域名; location / { proxy_pass http://服务器IP; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main;} 通过上述配置好你的Nginx。","s":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":213},{"i":227,"t":"在项目根目录下创建文件夹.github/workflows，并且在里面创建nodejs.yml文件，进行自动化部署的配置。 name: FTP Deploy on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: '16.x' - name: Install FTP client run: sudo apt-get update && sudo apt-get install -y lftp - name: Build run: npm install && npm run build - name: FTP Deploy uses: SamKirkland/FTP-Deploy-Action@4.0.0 with: server: 域名 username: ${{ secrets.FTP_USER }} //用户名 password: ${{ secrets.FTP_PWD }} //密码 server-dir: FTP路径 local-dir: build/ 其中的secrets.FTP_USER要在github设置中进行配置，添加action的变量，然后设置好你的FTP的用户名和密码即可。同时要在FTP服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到FTP服务器上。 接下来创建一个简单的.git-ftp-include文件 加入代码： !build/ 这个是默认让其读取build目录下的静态文件。 通过这样配置，推送到远程后，就会自动化的使用action进行部署到你的服务器中，然后通过你的域名就可以正常访问。","s":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":213},{"i":229,"t":"Foundation 数据结构 图的性质总结","s":"图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","h":"","p":228},{"i":231,"t":"满足如下条件的就是简单图： 不存在重复边 不存在顶点到自己的表(自环) 多重图： 若图中某两个顶点的边数大于1 允许顶点通过一条边和自身关联 数据结构里面只讨论简单图 子图： G=(V,E)和G′=(V′,E′)G = (V,E)和G^{'}=(V^{'},E^{'})G=(V,E)和G′=(V′,E′) 其中V′是V的子集E′是E的子集V^{'}是V的子集E^{'}是E的子集V′是V的子集E′是E的子集 如果顶点集相同，则是生成子图","s":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":228},{"i":233,"t":"一个路径序列中不存在重复节点的是简单路径 除第一个顶点和最后一个顶点外，其余节点不重复出现的是简单回路","s":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":228},{"i":235,"t":"这些术语跟有向图区分开来 连通 连通图 连通分量 完全图 度 两个顶点可达 图任意两点连通 极大连通子图就是连通分量，要求包含所有边 边数为：n(n-1)/2 度数之和等于边的两倍：Sumn = 2e","s":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":228},{"i":237,"t":"强连通图 强连通分量 完全图 度 v到w和w到v都有路径 极大强连通子图就是强连通分量 边数为：n(n-1) 出度=入度=e","s":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":228},{"i":240,"t":"邻接矩阵是采用二维数组的存储方式来存储图，为v行v列的矩阵，其中若vi到vj有路径，则A[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则A[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则A[i][j]为1，或者是对应的路径权值。 当(vi,vj)是G的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{aligned} &当(v_i,v_j)是G的边，则a[i][j] = 1 \\\\ &否则a[i][j] = 0或无穷 \\\\ \\end{aligned}​当(vi​,vj​)是G的边，则a[i][j]=1否则a[i][j]=0或无穷​ 值可以是权值，有向图和无向图有着一定的区别（无向图对称，可以压缩的），能理解其表达的意思就OK。 随便写个矩阵： [0110000000011000]\\begin{bmatrix} 0 & 1 & 1& 0 \\\\ 0 & 0 & 0 &0 \\\\ 0 & 0 & 0 &1 \\\\ 1 & 0 & 0 &0 \\\\ \\end{bmatrix}⎣⎡​0001​1000​1000​0010​⎦⎤​ 其中当图是无向图的时候，矩阵是对称的。有向图则不一定，有向图中，行代表顶点的出，列代表顶点的入，比如上述矩阵，顶点v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1​的一条边。 typedef struct{ char vex[N]; int weight[N][N]; //N*N邻接矩阵，每条边的权值用int变量表示 int vexnum,arcnum; //图的当前顶点数和弧数}MGraph; 空间复杂度：显而易见空间复杂度跟顶点个数有关，为O(n2)O(n^2)O(n2) 对于AnA^nAn的元素An[i][j]A^n[i][j]An[i][j]表示的是由顶点i到j长度为n的路径有多少条。该结论了解即可 邻接矩阵适用于存储相对稠密的图。","s":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":228},{"i":242,"t":"看下图理解： 设计顶点表结点和边表结点来存储。顶点表节点由顶点域和指向第一条邻接边的指针构成，包含(顶点域data，边表头指针first)。边表结点中包含指向下一跳邻接边的指针。 typedef struct ArcNode{ //边表 int vexIndex; int weight; struct ArcNode *next; //指向下一个边表结点}ArcNode; typedef struct VNode{ //顶点表 char data; ArcNode *first; //指向第一条依附该顶点的弧的指针}VNode;typedef struct{ VNode vex[N]; int vexnum,arcnum; //图的顶点数和边数} ALGraph; //ALGraph是以邻接表存储的图类型 空间复杂度：空间复杂度跟顶点个数和边数有关，若为有向图则O(∣V∣+∣E∣)O(|V|+|E|)O(∣V∣+∣E∣)若为无向图则O(∣V∣+2∣E∣)O(|V|+2|E|)O(∣V∣+2∣E∣)。","s":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":228},{"i":245,"t":"1）树的广搜 广度优先搜索遍历是在各种算法中广泛应用的一种优先遍历算法。就是往宽了去搜索，再搜索下一层。 若树非空，根节点入队 若队列非空，队头元素出队并且访问，同时将其孩子入队 重复2直到队列为空为止 树的BFS借助了队列的帮助，与此同时因为树中不存在回路，搜索到相邻节点的时候不可能搜索到已经访问到的节点。 2）图的广搜 在图中，广度优先搜索会面临一个问题就是图若存在回路，会重复访问到已经访问过的结点，从而带来不必要的时间开销，此处需要设计一个辅助数组来标记是否被访问过，其余的思想与树的层次遍历思想大致相同，从一个节点开始，访问其邻接点，依次进行。具体思想如下： 从起始节点开始找到与顶点相邻的所有顶点(过程会有入队和出队操作) 辅助数组标记 循环递归 需要借助辅助队列 bool visited[MAX_SIZE];void BFSTraverse(Graph G){ for(i = 0;i<G.vexnuml;i++) visited[i] = fasle; InitQueue(Q); for(i = 0;i<G.vexnum;i++){ if(!visited[i]) BFS(G,i); }}void BFS(Graph G){ visit(v); visited[v] =true; EnQueue(Q,v); while(!isEmpty(Q)){ DeQueue(Q,v); for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)){ if(!visited[w]){ visit(w); visited[w] = true; EnQueue(Q,v); } } }} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：空间开销来源于辅助队列，故空间开销为O(∣V∣)O(|V|)O(∣V∣)。","s":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":228},{"i":247,"t":"图的DFS就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟BFS一样同样需要一个标记数组来标记节点是否被访问过。如下是伪代码： bool visited[MAX_SIZE];void DESTralverse(Graph G){ for(v = 0;v<G.vexnum;++v) visited[v] = false; for(v = 0;v<G.vexnum;++v) if(!visited[w]) DFS(G,v);}void DFS(Graph G,int v){ visit(v); visited[v] = true; for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)) if(!visited[w]) DFS(G,v);} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：DFS算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为O(1)O(1)O(1)，平均的为O(∣V∣)O(|V|)O(∣V∣)。","s":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":228},{"i":249,"t":"包含所有顶点的极小连通子图子图，其中结点数为n，边数为n-1，少一条边非连通，多一条边有回路。其具有性质： 不一定唯一 不唯一但是权值之和唯一(存在权值相同的边时会存在不唯一) ∣E∣=∣V∣−1|E| = |V| -1∣E∣=∣V∣−1 最小生成树的两种算法：“普利姆(Prim)和克鲁斯卡尔(Kruskal)”","s":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":228},{"i":251,"t":"这个算法是选点的算法，一开始选择一个顶点加入集合SSS，此时树中只有一个顶点，然后从剩余顶点集合TTT中选取相距树中顶点集合最近的点，并且将该边加入集合SSS中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n-1n−1次后得到最小生成树。","s":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":228},{"i":253,"t":"Prim是选点，而Kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n-1n−1次即可。","s":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":228},{"i":255,"t":"耳熟能详的算法了，大致了解算法思路，用个人理解简述： 两个集合SSS和VVV分别用来记录已选结点和剩余结点 选定初始结点v0v_0v0​加入SSS，计算出v0v_0v0​到各可达结点的距离 选出距离最短的结点vsv_svs​加入SSS 因为加入了vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来A到D距离是10，但是加入了B后，通过A->B->D的距离是5，距离更短，所以要更新) 跳转到3，执行n−1n-1n−1次即可计算出到每个节点的最短距离(可能存在不可达) 本质是贪心，时间复杂度两种数据结构都是O(∣V∣2)O(|V|^2)O(∣V∣2) 看个例子就明白了： 顶点（这一列不包含起点） 第 1 轮 第 2 轮 第 3 轮 第 4 轮 第 5 轮 第 6 轮 第 7 轮 0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ 2 4 1→2 已完成 已完成 已完成 已完成 已完成 已完成 3 ∞ ∞ 7 1→5→3 7 1→5→3 已完成 已完成 已完成 4 ∞ 13 1→2→4 13 1→2→4 13 1→2→4 13 1→2→4 已完成 已完成 5 5 1→5 5 1→5 已完成 已完成 已完成 已完成 已完成 6 5 1→6 5 1→6 5 1→6 已完成 已完成 已完成 已完成 7 ∞ ∞ ∞ ∞ ∞ 14 1→2→4→7 已完成 集合S {1, 2} {1,2,5} {1,2,5,6} {1,2,5,6,3} {1,2,5,6,3,4} {1,2,5,6,3,4,7} {1,2,5,6,3,4,7,0}","s":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":228},{"i":258,"t":"顶点VVV表示事件，<Vi,Vj><V_i,V_j><Vi​,Vj​>的这样一条边表示活动VjV_jVj​必须要ViV_iVi​在它之前执行。这两个节点互为前驱后继。","s":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":228},{"i":260,"t":"一个有向无环图的顶点序列满足以下条件： 每个顶点只出现一次 如果A在B前面，则图中不存在B到A的路径 实现步骤： AOV网中选择一个没有前驱的节点(入度为0) 删除该节点和所有以他为起点的有向边 重复1和2，知道网为空或者网中不存在无前驱的顶点位置（此时必有环） 性质： 一个顶点有多个直接后继的话，则可能导致拓扑序列不是唯一的，如果图内的唯一前驱和后继的话，序列唯一 可以对AOV网进行拓扑排序后重新编号，使得新的图用邻接矩阵存储，此时是三角阵，是可以压缩成上（下）三角的(原理？暂不懂)。由此得到一个充分性结论：邻接矩阵是三角阵则存在拓扑排序。 这里用个例子来看一下： 将这个有向无环图进行压缩存储。 有向无环图，一定可以转化为一个上三角或下三角矩阵。但是需要调整顶点的编号。 如果要用上三角矩阵表示有向无环图的邻接矩阵，可以对图进行拓扑排序，按照拓扑排序序列，重新调整各个顶点的编号。这样可以确保，所有的弧都是从小编号顶点指向大编号顶点，从而也就保证了邻接矩阵可以转化为“上三角矩阵”","s":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":228},{"i":262,"t":"恶心，算四个表，小心计算 1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k) ve(0)ve(0)ve(0)为0 ve(k)=Max[ve(j)+weight(vj,vk)]ve(k) = Max[ve(j) + weight(v_j,v_k)]ve(k)=Max[ve(j)+weight(vj​,vk​)]其中k是j的后继 从头开始顺着算，计算一个事件的最早发生时间就是，找到它的所有前驱，计算其前驱的最早发生时间加上其代价(边权)，存在多个前驱取最大的。 2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k) 终点等于ve(0)ve(0)ve(0) vl(k)=Min[vl(j)−weight(vk,vj)]vl(k) = Min[vl(j) - weight(v_k,v_j)]vl(k)=Min[vl(j)−weight(vk​,vj​)] 从最后开始逆过来算，计算一个事件的最迟发生时间，找到它的所有后继，计算该后继减去代价到该活动点的值，可能有多个后继，取差值最小的。 3）活动aia_iai​的最早开始事件e(i)e(i)e(i) 等于该活动起始点(某事件)的最早发生时间 找边，找起始点，找ve(i)ve(i)ve(i) 4）活动aia_iai​的最迟开始事件l(i)l(i)l(i) <vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i)-weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj​) 找到边，对应的终点，查该事件点的vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i)","s":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":228},{"i":265,"t":"tip Collect the technical stack required for backend development. 一个简单的后端菜汪，总得写点什么来记录下自己学了什么对吧。","s":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":263},{"i":267,"t":"Foundation course 计算机体系结构","s":"计算机体系结构","u":"/docs/Foundation/course/计算机体系结构","h":"","p":266},{"i":270,"t":"MIPS就是百万条指令每秒，还有另外一种含义，即没有内部互锁的流水线级微处理器，这里介绍的MIPS，是一个用来描述计算机性能的尺度。对于给定的程序MIPS的公式就是： MIPS=InTcpu∗106=fcCPI∗106MIPS = \\frac{I_n}{T_{cpu}*10^6} = \\frac{f_c}{CPI*10^6}MIPS=Tcpu​∗106In​​=CPI∗106fc​​ 其中：InI_nIn​就是指令条数，TcpuT_{cpu}Tcpu​就是指令执行周期数，fcf_cfc​就是时钟速率，是TcpuT_{cpu}Tcpu​倒数 使用TET_ETE​代替TcpuT_{cpu}Tcpu​得到的表达式： TE=InMIPS∗106T_E = \\frac{I_n}{MIPS*10^6}TE​=MIPS∗106In​​ 注意到这个10610^6106就是百万的意思了，除以百万。 计算 有效CPI：指令数乘以CPI然后累加，有效CPI就是公式里面要带入的CPI 程序执行时间：总指令数∗有效CPIfc\\frac{总指令数*有效CPI}{f_c}fc​总指令数∗有效CPI​","s":"1.MIPS","u":"/docs/Foundation/course/计算机体系结构","h":"#1mips","p":266},{"i":272,"t":"阿姆达尔定律是指：系统中对某一部件或功能采用某种更快执行方式所能获得的系统性能改进程度，取决于这种执行方式被使用的频率，或所占总执行时间的比例。阿姆达尔定律实际上定义了采取增强某部分功能处理后可获得的性能改进或执行时间的加速比。 加速比公式： Sp=ToldTnew=1(1−F)+(FS)S_p = \\frac{T_{old}}{T_{new}} = \\frac{1}{(1-F)+(\\frac{F}{S})}Sp​=Tnew​Told​​=(1−F)+(SF​)1​ FFF就是可以增强部分的占比，SSS就是可以增强的倍率。","s":"2.阿姆达尔定律","u":"/docs/Foundation/course/计算机体系结构","h":"#2阿姆达尔定律","p":266},{"i":274,"t":"直接看题目 计算MIPS就是用指令条数除以（执行时间*10610^6106） 然后取一个为标准，则它的各个程序就是为标准1，然后对应的用GiG_iGi​的MIPS除以标准的MIPS就可以得到对应的值。 最后进行累加开n次方，根据大小来排性能，越大性能越好","s":"3.计算机系统结构性能评价标准","u":"/docs/Foundation/course/计算机体系结构","h":"#3计算机系统结构性能评价标准","p":266},{"i":276,"t":"tip 计算编码和码长","s":"第二章","u":"/docs/Foundation/course/计算机体系结构","h":"#第二章","p":266},{"i":278,"t":"排序 每次拿两个最小的合成一个二叉树 左1右0","s":"1.哈夫曼编码","u":"/docs/Foundation/course/计算机体系结构","h":"#1哈夫曼编码","p":266},{"i":280,"t":"采用2-4编码，那就是初始2位，每次扩展多两位，扩展后出来的数目是4个。 例如下面的： 一共7个，那么就是先采用2两位编码，然后计算，如果继续采用2位的，则11位扩展的出来的4位则无法满足7，故2位的只用00和01，后面10和11用来扩展，遵循先用完位数短的，再扩展的原则。 这里的3/3/3指的是每次扩展后的数目是3个，然后每轮扩展末位加两位。 2/7则是扩展2位，然后扩展后数目是7个。 课本解释如下 平均码长：码长乘以占比后累加求和求均值","s":"2.扩展码","u":"/docs/Foundation/course/计算机体系结构","h":"#2扩展码","p":266},{"i":282,"t":"tip Cache","s":"第三章","u":"/docs/Foundation/course/计算机体系结构","h":"#第三章","p":266},{"i":284,"t":"系统等效存储周期： Ta=H∗Tc+(1−H)∗TmT_a = H*T_c+(1-H)*T_mTa​=H∗Tc​+(1−H)∗Tm​ 其中HHH就是Cache命中率，TmT_mTm​就是访问主存所用时间 若使用指令体和数据体存储周期为： Ta=fi(Hi∗Tc+(1−Hi)∗Tm)+(1−fi)(Hd∗Tc+(1−Hd)∗Tm)T_a = f_i(H_i*T_c+(1-H_i)*T_m) + (1-f_i)(H_d*T_c+(1-H_d)*T_m)Ta​=fi​(Hi​∗Tc​+(1−Hi​)∗Tm​)+(1−fi​)(Hd​∗Tc​+(1−Hd​)∗Tm​) 其中fif_ifi​就是访问指令体的占比，同样求数据体也是同理。HdH_dHd​是改进后的Cache的命中率","s":"1.Cache存储时间的计算","u":"/docs/Foundation/course/计算机体系结构","h":"#1cache存储时间的计算","p":266},{"i":286,"t":"概念：Cache高速缓冲存储器一种特殊的存储器子系统，其中复制了主存中频繁使用的数据以利于快速访问。为了便于根据CPU送来的地址信息到Cache中去读取数据，必须有某种函数把主存地址映象成Cache地址。实现这种映象的函数叫映象函数 有三种映射函数： 直接相连 全相连 组相连 1.直接相连​ 原理： 映射函数为 i = j mod m(其中i就是对应的cache块号，j是主存号，m是cache的总块数) 将主存分为若干区，每区容量与Cache总容量相等。每区块数与Cache的块数相同，这样，每区中第i块映射的位置就是Cache的第i块 维护一个块表，表的长度为Cache的块数（为了记录Cache中每块存的是主存的第几区），表中每个项目长度是主存区号的长度（为了存下块的编号）。在每次访问主存时查这个块表来对应访问Cache。 主存地址：主存区号 + 区内块号 + 块内地址 Cache地址：区内块号 + 块内地址 例：设主存容量为1MB，高速缓存Cache容量为16KB，块的大小为512字节。采用直接地址映像法。 写出主存地址格式。 写出Cache地址格式。 块表的容量是多大。 Cache块数=16KB/512B=32块 则主存每区为32块(解释：将主存分为若干区，每区容量与Cache总容量相等。每区块数与Cache的块数相同，这样，每区中第i块映射的位置就是Cache的第i块)，共1MB/16KB=64区 所以主存地址为6位区号（共2^6 =64区）+5位区内块号（共 2^5 =32块）+9位块内地址（块容量2^9=512B，按字节编址） 所以Cache地址为5位区内块号（共 2^5 =32块），9内块内地址（块容量2^9=512B，按字节编址）,Cache其实相当于主存的一个区而已 2.全相连​ 主存中每一块可存入Cache中的的任一位置 维护一个目录表，记录Cache每块存的是内存的哪一块。表的长度就为Cache块数（原因上同），每条项目的长度为主存的主存块号的长度，每次访存的时候查表访问。 3.组相连​ 组相连在全相连和直接相连之间取了折中，拥有了两者的优点，同时弥补了一定的缺点。 将Cache分组，将主存分区。主存区内的块数和Cache的组数相同(一个Cache相当于主存一个区) 主存区内的块和Cache的组采用直接相联映像法，即第主存每区的第i块都映射到Cache的第i组。 Cache每组组内采用全相联映像法，例如Cache的第3组中有个4块，Cache的第1块存了来自内存第2区的第3块，第2块存了来自内存第6区的第3快，第3、4块空. 按照上面的原则，就需要一个表来说明Cache每一组存了哪几区的内存块。访存时查表到对应的区中寻找有没有该内存块。 主存地址：区号 + 区内组号 + 块内地址 Cache地址： 组号 + 组内块号 + 块内地址 首先计算Cache：按块分组得到组数，再根据按字编还是字节编来计算块内地址。 对于主存：主存每个区的块数等于Cache的组数，计算得区数，区内块号就是Cache的组数， 直接上个例题 例：一个组相联映像Cache由64个存储块组成， 每组包含4个存储块。主存包含4096个存储块，每块由128字组成。访存地址为字地址。 1.写出主存地址位数和地址格式 2.写出Cache地址位数和地址格式； Cache组数为64/4=16组 主存每区内的块数=Cache的组数，则主存的区数为4096/16=256区，每区内有16个存储块 那么主存地址的组成为8位区号（256区）+4位区内块号（16个存储块）+7位块内地址（一块128字，按字编址）Cache地址为4位组号（16组）+2位组内块号（每组4快）+7位块内地址（一共128字，按字编址） 复习课例题： 设某计算机的Cache-主存存储层次采用组相联映像，已知主存容量为8MB，Cache容量为8KB，按4字块分组，每个字块的长度为8个字（32位/字）。 (1)设计主存地址格式和Cache地址格式，标出各字段的位数。 (2)假设Cache起始内容为空，CPU从主存单元0，1，2，……，2063依次读出2064个字，并重复此读数序列共10次。若Cache速度为主存速度的10倍，且采用LRU算法，问利用Cache后速度提高了多少倍？ ∵Cache的容量为8KB，即8KB/4B=2112^{11}211字 ∴Cache地址共需11位 ∵字块大小为8个字 ∴块内地址为3位 ∵每组为4个字块 ∴块号占2位，剩下的11-3-2=6位为组号所占的位数。 由以上分析可知，Cache地址格式如下： ∵主存的容量为8MB，即8MB/4B=2212^{21}221字 ∴主存地址共需21位 ∵主存地址格式中的组号、块号、块内地址的位数与Cache的相同 ∴区号的位数为21-6-2-3=10位 由以上分析可知，主存地址格式为： 按照要求，主存有258块，但是Cache只有256块，所以装入的时候会有替换，一开始0~255块可以装入。但是256和257就要进行替换，采用LRU，因为前256刚刚装满，所以会从第0块Cache开始装入替换，也就是如下图的0、1、2、3、256、257这六块进行替换。","s":"2.映射","u":"/docs/Foundation/course/计算机体系结构","h":"#2映射","p":266},{"i":288,"t":"两种方法： 写回法 写直达法 1.写回法​ 写回法----是指在CPU执行写操作时，信息只写入Cache，仅当需要被替换时，才将已被写入过的Cache块先送回主存，然后再调入新块。 写回法包括简单写回法和采用标志位写回法。 简单写回法----指不管块是否更新，都进行写回操作。 采用标志位写回法---只在块被更新过时，才进行写回操作。 2.写直达法​ 利用Cache-主存存储层次在处理机和主存之间的直接通路，每当处理机写入Cache的同时，也通过此通路直接写入主存。 3.两种情况​ 写Cache命中 可直接对Cache块进行写操作，根据所用更新主存内容的算法，决定何时对主存相应块的内容进行更新。 不命中 无论是写回法还是写直达法都有一个在写时是否取的问题。一般有两种方法（又称写算法或写策略）： 1.不按写分配法----当Cache写不命中时只写入主存，该写地址单元所在块不从主存调入Cache。通俗来说就是，写不命中，怎么写都不命中，只有读一次后再写就命中了 2.按分配写法----当Cache写不命中时除写入主存，还将该写地址单元所在块从主存调入Cache。读写不命中就会写入，然后下次就命中了 写回法一般采用按写分配法，写直达法一般采用不按写分配法。","s":"3.Cache透明性分析","u":"/docs/Foundation/course/计算机体系结构","h":"#3cache透明性分析","p":266},{"i":291,"t":"恒预取----是指只要访问到主存第i块的某个字，不论Cache是否命中，恒发预取命令。 不命中时预取----是指只当访问第i块的某个字不命中时，才发预取命令。 恒预取公式： H′=H+n−1nH^{'} = \\frac {H+n-1}{n}H′=nH+n−1​ H是原命中率，n是Cache块大小和数据块重复使用的次数乘积 例：如果Cache的块大小为4个字，预取到Cache中的数据的重复利用率为5次，Cache存储系统原来的命中率为H=0.8，则采用预取算法后，命中率为多少？若Tm=5Tc，则Cache-主存存储系统的访问效率e为多少？ 采用预取技术后，命中率为： H′=0.8+4∗5−14∗5=0.99H^{'} = \\frac {0.8 + 4*5 -1}{4*5} = 0.99H′=4∗50.8+4∗5−1​=0.99 Cache - 主存存储系统的访问效率e为： e=TcTa=TcH′Tc+(1−H′)Tm=0.96e = \\frac{T_c}{T_a} = \\frac{T_c}{H^{'}T_c + (1-H^{'})T_m} = 0.96e=Ta​Tc​​=H′Tc​+(1−H′)Tm​Tc​​=0.96","s":"预取算法","u":"/docs/Foundation/course/计算机体系结构","h":"#预取算法","p":266},{"i":293,"t":"tip 吞吐率、效率、加速比","s":"第四章","u":"/docs/Foundation/course/计算机体系结构","h":"#第四章","p":266},{"i":295,"t":"如下： 假设连续输入n条指令，求对应的实际吞吐率、效率 吞吐率： Tpipeline=∑1iΔti+(n−1)ΔtmaxT_{pipeline} = \\sum_1^i\\Delta t_i + (n-1) \\Delta t_{max}Tpipeline​=1∑i​Δti​+(n−1)Δtmax​ TP=nTpipelineTP = \\frac{n}{T_{pipeline}}TP=Tpipeline​n​ 其中n就是执行的指令数目，ttt就是各个段的时间，执行指令的数目，除以T得到吞吐率，也可以转化为MIPS。 效率： E=TP∗∑1iΔtimE = TP* \\frac{\\sum_1^i \\Delta t_i}{m}E=TP∗m∑1i​Δti​​ m就是段的个数。 突破瓶颈 找到最小的 Δt\\Delta tΔt ，不等于Δt\\Delta tΔt就进行修改 一般采用并联的方式 重新计算上述各值","s":"1.普通流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#1普通流水线","p":266},{"i":297,"t":"直接看题目： 对于设计画出流水线的题目： 吞吐率： TP=nm∗ΔtTP = \\frac{n}{m*\\Delta t}TP=m∗Δtn​ n是有几个结果，m是流水线完成的时间 加速比 S=n∗Tm∗ΔtS = \\frac{n*T}{m*\\Delta t}S=m∗Δtn∗T​ n是结果数目，T是各自运算不采用流水线设计要花费的时间，也就是时间求和。 效率 E=S1S2E = \\frac{S_1}{S_2}E=S2​S1​​ S1是流水线面积，S2是大矩形面积(取最大的宽和长)","s":"2.设计计算功能的流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#2设计计算功能的流水线","p":266},{"i":299,"t":"首先会获得一个一个预约表，按照如下步骤进行解答： 根据预约表得出禁止表(同一功能段可能发生冲突的时间间隔) 根据禁止表得冲突向量，禁止表对应位置上置1，无则为0，表示不冲突。例如F={1,3,4,8}则设计就是10001101 求解后继状态 冲突向量上为0的就是可以进行操作的后继状态，例如上述10001101，有2、5、6、7四个状态。 右移，然后跟原始冲突向量相或，即可得到下一个冲突向量 寻找形成的回环，计算调度策略和平均延迟时间 最大吞吐率 TP=1mΔtTP = \\frac{1}{m \\Delta t}TP=mΔt1​ 分母就是对应的最优调度策略(找最小的) 实际吞吐率 TP=nsum∗ΔtTP = \\frac{n}{sum*\\Delta t}TP=sum∗Δtn​ n为任务数目，sum为对应的时间，其中sum的计算使用的是最优调度策略(因为形成了循环)，这里注意，最后一个任务不可采用最优调度，因为不构成循环，所以采用的是原始时间。","s":"3.带冲突的流水线","u":"/docs/Foundation/course/计算机体系结构","h":"#3带冲突的流水线","p":266},{"i":301,"t":"Web 软件工程课设 接口文档","s":"接口文档","u":"/docs/Web/软件工程课设/接口文档","h":"","p":300},{"i":304,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"student\", //用户名 \"password\": \"\", //密码 \"remember\": false //下次自动登录} 返回参数： { \"userName\": \"student\", //用户名 \"imagePath\": \"\", //头像}","s":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":300},{"i":306,"t":"接口地址：/api/student/user/register 请求参数： { \"userName\": \"student5\", //用户名 \"password\": \"123456\", //密码 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":300},{"i":308,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":300},{"i":310,"t":"接口地址：/api/student/dashboard/index 请求参数：无 返回参数： { \"fixedPaper\": [ //固定试卷 { \"id\": 2399, //试卷Id \"name\": \"test33333\", //试卷名称 \"limitStartTime\": null, //考试开始时间 \"limitEndTime\": null //考试结束时间 } ], \"timeLimitPaper\": [] //时段试卷}","s":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":300},{"i":312,"t":"接口地址：/api/student/dashboard/task 请求参数：无 返回参数： [ { \"id\": 8, //任务id \"title\": \"2021-04-25作业\", //任务标题 \"paperItems\": [ { \"examPaperId\": 181, //任务试卷id \"examPaperName\": \"第一次出卷\", //任务试卷名称 \"examPaperAnswerId\": 579, //答卷id \"status\": 2 //答卷状态 } ] } ]","s":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":300},{"i":314,"t":"接口地址：/api/student/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": \"18\", //学科id \"name\": \"英语\" //学科名称 } ]}","s":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":300},{"i":316,"t":"接口地址：/api/student/exam/paper/pageList 请求参数： { \"paperType\": 1, //试卷类型 \"subjectId\": 158, //学科id \"pageIndex\": 1, //页数 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 2520, //试卷id \"name\": \"生理卫生\", //试卷名称 \"questionCount\": 1, //题目数 \"score\": 20, //试卷分数 \"createTime\": \"2021-05-31 13:34:49\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 158, //学科 \"subjectName\": \"英语\", //学科 \"paperType\": 1, //试卷类型 \"frameTextContentId\": 9016 //试卷内容 } ] }}","s":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":300},{"i":318,"t":"接口地址：/api/student/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"测试一\", //试卷名称 \"suggestTime\": 22, //建议时长 \"limitDateTime\": null, //考试时间限制 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 8, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //标题 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //顺序 } ] } ], \"score\": \"10\" }}","s":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":300},{"i":320,"t":"接口地址：/api/student/exampaper/answer/answerSubmit 请求参数： { \"questionId\": null, \"doTime\": 14, //耗时 \"answerItems\": [ { \"questionId\": 4, //题目id \"content\": null, //答题内容 \"contentArray\": [ //填空题内容 \"测试\", \"1\" ], \"completed\": true, //是否完成 \"itemOrder\": 1 //题目序号 } ], \"id\": 4 //试卷id} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"2\" //试卷得分}","s":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":300},{"i":322,"t":"接口地址：/api/student/exampaper/answer/read/4 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"paper\": { //试卷信息 \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 4, //试卷类型 \"name\": \"限时考试二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": [ //考试时间限制 \"2021-06-22 00:00:00\", \"2021-08-06 00:00:00\" ], \"titleItems\": [ { \"name\": \"一、完成题目\", //标题 \"questionItems\": [ //题目列表 { \"id\": 8, //题目id \"questionType\": 4, //题目类型 \"subjectId\": 1, //学科 \"title\": \"曲项向天歌红掌拨清波\", //题目标题 \"gradeLevel\": 1, //年级 \"items\": [ //题目选项 { \"prefix\": \"1\", //选项标识 \"content\": \"鹅鹅鹅\", //选项内容 \"score\": \"2\" //选项分数 }, { \"prefix\": \"2\", \"content\": \"白毛浮绿水\", \"score\": \"2\" } ], \"analyze\": \"咏鹅\", //解析 \"correctArray\": [ //标答 \"鹅鹅鹅\", \"白毛浮绿水\" ], \"correct\": \"\", //标答 \"score\": \"4\", //题目分数 \"difficult\": 4, //题目难度 \"itemOrder\": 1 //题目顺序 } ] } ], \"score\": \"18\" //试卷分数 }, \"answer\": { //答卷信息 \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分 \"answerItems\": [ //答题信息 { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"0\", //得分 \"questionScore\": \"4\" //题目分数 } ] } }}","s":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":300},{"i":324,"t":"接口地址：/api/student/exampaper/answer/edit 请求参数： { \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分数 \"answerItems\": [ { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题目顺序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"4\", //得分 \"questionScore\": \"4\" //题目分数 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"16\" //试卷得分}","s":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":300},{"i":326,"t":"接口地址：/api/student/exampaper/answer/pageList 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 6204, \"list\": [ { \"id\": 6534, //试卷id \"createTime\": \"2021-06-01 17:56:38\", //创建时间 \"userScore\": \"0\", //考试分数 \"subjectName\": \"数学\", //考试学科 \"subjectId\": 129, //学科id \"questionCount\": 1, //题目数量 \"questionCorrect\": 0, //题目正确数 \"paperScore\": \"3\", //试卷总分 \"doTime\": \"4 秒\", //耗时 \"paperType\": 7, //试卷类型 \"systemScore\": \"0\", //系统批改得分 \"status\": 2, //试卷状态 \"paperName\": \"智能训练试卷 - 1845\", //试卷名称 \"userName\": null //用户名 } ] }}","s":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":300},{"i":328,"t":"接口地址：/api/student/question/answer/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 17002, \"list\": [ { \"id\": 24928, //题目id \"questionType\": 1, //题型 \"createTime\": \"2021-06-02 16:07:11\", //创建时间 \"subjectName\": \"语文\", //学科 \"shortTitle\": \"666\" //题干 } ] }}","s":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":300},{"i":330,"t":"接口地址：/api/student/question/answer/select/25067 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"questionVM\": { \"id\": 507, //题目id \"questionType\": 1, //题目类型 \"subjectId\": 46, //学科id \"title\": \"111\", //题干 \"gradeLevel\": 12, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项 \"content\": \"A\", //选项内容 \"score\": null //选项分数 } ], \"analyze\": \"D\", //解析 \"correctArray\": null, //标答 \"correct\": \"D\", //标答 \"score\": \"2\", //分数 \"difficult\": 3, //难度 \"itemOrder\": null //排序 }, \"questionAnswerVM\": { //用户答案 \"id\": 25067, \"questionId\": 507, //题目id \"doRight\": false, //是否正确 \"content\": \"A\", //用户答案 \"itemOrder\": 2, //排序 \"contentArray\": null, //用户答案 \"score\": \"0\", //得分 \"questionScore\": \"2\" //题目分数 } }}","s":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":300},{"i":332,"t":"接口地址：/api/student/user/log 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 1812, \"userId\": 1, //用户id \"userName\": \"student\", //用户名 \"realName\": \"Test\", //用户真实姓名 \"content\": \"student 登录了学之思开源考试系统\", //动态内容 \"createTime\": \"2021-06-08 17:12:50\" //创建时间 } ]}","s":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":300},{"i":334,"t":"接口地址：/api/student/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 }}","s":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":300},{"i":336,"t":"接口地址：/api/student/user/update 请求参数： { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":300},{"i":338,"t":"接口地址：/api/student/user/message/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 5, \"list\": [ { \"id\": 8, \"title\": \"rwerw\", //消息标题 \"messageId\": 10, \"content\": \"sfsdf\", //消息内容 \"readed\": true, //是否已读 \"createTime\": \"2021-06-11 16:32:40\", //创建时间 \"sendUserName\": \"admin\" //发送人 } ] }}","s":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":300},{"i":340,"t":"接口地址：/api/student/user/message/read/14 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":300},{"i":342,"t":"接口地址：/api/student/user/message/unreadCount 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 0 //未读消息数量}","s":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":300},{"i":345,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"admin\", //用户名 \"password\": \"\", //密码 \"remember\": false //记住我} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": null, \"userUuid\": null, \"userName\": \"admin\", //用户名 \"password\": null, \"realName\": null, \"age\": null, \"sex\": null, \"birthDay\": null, \"userLevel\": null, \"phone\": null, \"role\": null, \"status\": null, \"imagePath\": null, \"createTime\": null, \"modifyTime\": null, \"lastActiveTime\": null, \"deleted\": null, \"wxOpenId\": null }}","s":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":300},{"i":347,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":300},{"i":349,"t":"接口地址：/api/admin/dashboard/index 请求参数：无 返回参数： { \"examPaperCount\": 2413, //试卷总数 \"questionCount\": 1025, //题目总数 \"doExamPaperCount\": 6148, //总答卷数 \"doQuestionCount\": 23945, //总题数 \"mothDayUserActionValue\": [ //活跃度 85 ], \"mothDayDoExamQuestionValue\": [ //月做题数 22 ], \"mothDayText\": [ //本月天数 \"1\" ]}","s":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":300},{"i":351,"t":"接口地址：/api/admin/user/page/list 请求参数： { \"userName\": \"\", //用户名 \"role\": 1, //角色 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 81, //总数 \"list\": [ { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } ] }}","s":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":300},{"i":353,"t":"接口地址：/api/admin/user/select/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 }}","s":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":300},{"i":355,"t":"接口地址：/api/admin/user/edit 请求参数： { \"id\": null, \"userName\": \"testzz\", //用户名 \"password\": \"123456\", //密码 \"realName\": \"tesx\", //真实姓名 \"role\": 1, //角色 \"status\": 1, //状态 \"age\": \"\", //年龄 \"sex\": \"\", //性别 \"birthDay\": null, //生日 \"phone\": null, //手机号 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 109, \"userUuid\": \"321dec89-0656-4736-ae4c-e2b07f4fcc67\", //用户id \"userName\": \"testzz\", //用户名 \"password\": \"\" //密码 \"realName\": \"tesx\", //真实姓名 \"age\": null, //年龄 \"sex\": null, //性别 \"birthDay\": null, //生日 \"userLevel\": 1, //年级 \"phone\": null, //手机号 \"role\": 1, //角色 \"status\": 1, //状态 \"imagePath\": null, //头像 \"createTime\": 1624538837259, //创建日期 \"modifyTime\": null, //修改时间 \"lastActiveTime\": 1624538837259, //最后活动时间 \"deleted\": false, //是否删除 \"wxOpenId\": null //微信openId }}","s":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":300},{"i":357,"t":"接口地址：/api/admin/user/delete/3 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":300},{"i":359,"t":"接口地址：/api/admin/user/changeStatus/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 2}","s":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":300},{"i":361,"t":"接口地址：/api/admin/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 13, //学科id \"name\": \"语文\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\", //年级名称 \"itemOrder\": null, //排序 \"deleted\": false //是否删除 } ]}","s":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":300},{"i":363,"t":"接口地址：/api/admin/education/subject/page 请求参数： { \"level\": null, //年级 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } ] }}","s":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":300},{"i":365,"t":"接口地址：/api/admin/education/subject/select/2 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 }}","s":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":300},{"i":367,"t":"接口地址：/api/admin/education/subject/edit 请求参数： { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 2, //年级 \"levelName\": \"二年级\" //年级名称} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":300},{"i":369,"t":"接口地址：/api/admin/education/subject/delete/3 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":300},{"i":371,"t":"接口地址：/api/admin/exam/paper/page 请求参数： { \"id\": null, \"level\": null, //年级 \"subjectId\": null, //学科 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页数量} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 9, \"list\": [ { \"id\": 13, //试卷id \"name\": \"中级任务二\", //试卷名称 \"questionCount\": 5, //题目总数 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:31\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 13 //试卷内容 } ] }}","s":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":300},{"i":373,"t":"接口地址：/api/admin/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"语文试卷\", //试卷名称 \"suggestTime\": 20, //考试时间 \"limitDateTime\": null, //限时考试 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 5, //题目类型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //题目选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答数组 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"10\" //试卷总分 }}","s":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":300},{"i":375,"t":"接口地址：/api/admin/exam/paper/edit 请求参数： { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ //题目列表 { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //试卷总分} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //题序 }}","s":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":300},{"i":377,"t":"接口地址：/api/admin/exam/paper/delete/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":300},{"i":379,"t":"接口地址：/api/admin/exam/paper/taskExamPage 请求参数： { \"subjectId\": null, //学科 \"level\": 1, //年级 \"paperType\": 6, //试卷类型 \"pageIndex\": 1, //页面 \"pageSize\": 5 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 13, \"name\": \"任务试卷五\", //试卷名称 \"questionCount\": 2, //题目总数 \"score\": 60, //试卷分数 \"createTime\": \"2021-08-02 14:36:26\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 26 //试卷内容 } ] }}","s":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":300},{"i":381,"t":"接口地址：/api/admin/question/page 请求参数： { \"id\": null, \"questionType\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 7, \"list\": [ { \"id\": 13, \"questionType\": 5, //题型 \"textContentId\": null, \"createTime\": \"2021-01-21 11:45:57\", //创建时间 \"subjectId\": 1, //学科 \"createUser\": 2, //创建人 \"score\": \"10\", //得分 \"status\": 1, //状态 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"analyzeTextContentId\": null, //解析 \"difficult\": 3, //难度 \"shortTitle\": \"默写咏鹅\" //题干 } ] }}","s":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":300},{"i":383,"t":"接口地址：/api/admin/question/select/508 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 508, //题目id \"questionType\": 5, //题型 \"subjectId\": 4, //学科 \"title\": \"<p>什么是快乐星球？</p>\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"照抄即可\", //解析 \"correctArray\": null, //标答 \"correct\": \"什么是快乐星球\", //正确答案 \"score\": \"5\", //题目分数 \"difficult\": 5, //难度 \"itemOrder\": null }}","s":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":300},{"i":385,"t":"接口地址：/api/admin/question/edit 请求参数： { \"id\": 13, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //正确答案 \"score\": 10, //题目分数 \"difficult\": 3, //难度 \"itemOrder\": null} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":300},{"i":387,"t":"接口地址：/api/admin/question/delete/7 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":300},{"i":389,"t":"接口地址：/api/admin/task/page 请求参数： { \"gradeLevel\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, //任务id \"title\": \"中级任务\", //任务标题 \"gradeLevel\": 1, //年级 \"createUserName\": \"admin\", //创建人用户名 \"createTime\": \"2021-01-21 11:50:24\", //创建时间 \"deleted\": false //是否删除 } ] }}","s":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":300},{"i":391,"t":"接口地址：/api/admin/task/select/22 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 12, //年级 \"title\": \"考试\", //任务标题 \"paperItems\": [ { \"id\": 592, //试卷id \"name\": \"考试\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 275, //试卷分数 \"createTime\": \"2021-08-12 15:02:50\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 46, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 2897, //试卷内容 \"allClasses\": null } ] }}","s":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":300},{"i":393,"t":"接口地址：/api/admin/task/edit 请求参数： { \"id\": 13, \"gradeLevel\": 1, \"title\": \"中级任务\", \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 1, //年级 \"title\": \"中级任务\", //任务标题 \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] }}","s":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":300},{"i":395,"t":"接口地址：/api/admin/task/delete/1 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":300},{"i":397,"t":"接口地址：/api/admin/message/page 请求参数： { \"sendUserName\": null, \"pageIndex\": 4, \"pageSize\": 10} 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 36, \"list\": [ { \"id\": 13, //消息id \"title\": \"你好，同学！\", //消息标题 \"content\": \"考试请不要作弊\", //消息内容 \"sendUserName\": \"admin\", //发送人用户名 \"receives\": \"student\", //接收人用户名 \"receiveUserCount\": 1, //接收人数量 \"readCount\": 1, //已读数量 \"createTime\": \"2020-09-22 11:37:49\" //创建时间 } ] }}","s":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":300},{"i":399,"t":"接口地址：/api/admin/message/send 请求参数： { \"title\": \"全校师生请注意\", //消息标题 \"content\": \"大家好\", //消息内容 \"receiveUserIds\": [ //接收人 1 ]} 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":300},{"i":401,"t":"接口地址：/api/admin/examPaperAnswer/page 请求参数： { \"subjectId\": null, //学科 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 4, \"list\": [ { \"id\": 13, \"createTime\": \"2021-07-07 14:03:02\", //提交时间 \"userScore\": \"16\", //用户得分 \"subjectName\": \"语文\", //学科名称 \"subjectId\": 1, //学科Id \"questionCount\": 5, //题目数量 \"questionCorrect\": 4, //正确题目数 \"paperScore\": \"18\", //试卷总分 \"doTime\": \"14 秒\", //耗时 \"paperType\": 4, //试卷类型 \"systemScore\": \"2\", //自动批改得分 \"status\": 2, //答卷状态 \"paperName\": \"限时考试二\", //试卷名称 \"userName\": \"student\" //用户名 } ] }}","s":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":300},{"i":403,"t":"接口地址：/api/admin/user/event/page/list 请求参数： { \"userId\": null, \"userName\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 68, \"list\": [ { \"id\": 13, //日志id \"userId\": 2, //用户id \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"content\": \"admin 登录了学之思开源考试系统\", //日志内容 \"createTime\": \"2021-08-24 20:05:02\" //创建时间 } ] }}","s":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":300},{"i":405,"t":"接口地址：/api/admin/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //用户年级 \"imagePath\": null //头像 }}","s":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":300},{"i":407,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, //用户id \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户标识 \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //生日 \"phone\": \"11\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-17 11:28:52\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":300},{"i":409,"t":"接口地址：/api/admin/user/selectByUserName 请求参数： student //用户名 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"name\": \"student\", //用户名 \"value\": 1 //用户id } ]}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":300},{"i":411,"t":"接口地址：/api/admin/upload/configAndUpload 请求参数：无 返回参数： { \"original\": \"头像.jpg\", \"name\": \"头像.jpg\", \"url\": \"http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_\", \"size\": 19665, \"type\": \".jpg\", \"state\": \"SUCCESS\"}","s":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":300},{"i":413,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2021-09-07 18:56:07\", //出生日期 \"phone\": \"2112112\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-31 10:08:03\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":300}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/2",[0,4.646,1,0.137,2,2.069,3,4.833,4,4.833,5,4.833]],["t/4",[1,0.09,2,0.511,6,1.037,7,1.791,8,3.595,9,5.351,10,7.864,11,4.257,12,3.066,13,4.76,14,7.121,15,1.248,16,1.602,17,1.791,18,1.791,19,1.602,20,1.602,21,1.602,22,3.066,23,3.066,24,4.019,25,4.019,26,1.791,27,4.76,28,1.791,29,1.602,30,1.602,31,1.791,32,1.791,33,4.019,34,4.019,35,4.76,36,1.791,37,1.791,38,1.791,39,4.019,40,1.791,41,1.248,42,1.791,43,1.602,44,1.602,45,4.019,46,4.019,47,1.791,48,3.066,49,4.019,50,1.791,51,3.066,52,4.019,53,3.066,54,3.066,55,3.066,56,1.791,57,1.791,58,1.791,59,1.791,60,4.019,61,1.791,62,1.791,63,3.066,64,1.791,65,1.477,66,1.602,67,0.241,68,1.602,69,1.791,70,1.791,71,1.791,72,1.791,73,1.791,74,3.066,75,1.791,76,1.602,77,1.791,78,1.602,79,1.791,80,1.791,81,1.791,82,1.791,83,1.384,84,1.791,85,1.791,86,1.791,87,1.791,88,1.791,89,1.791,90,1.791,91,1.791,92,1.602,93,1.31,94,1.791,95,1.791]],["t/6",[0,4.646,1,0.137,3,4.833,4,4.833,67,0.976,96,4.193]],["t/8",[1,0.105,2,0.332,6,0.673,11,1.875,19,1.04,20,1.04,21,1.04,43,2.561,44,2.561,66,1.04,67,0.157,68,1.04,97,5.584,98,2.097,99,2.097,100,3.503,101,5.863,102,2.097,103,3.503,104,2.097,105,4.512,106,2.097,107,2.097,108,5.584,109,4.046,110,1.875,111,2.097,112,2.097,113,2.097,114,4.046,115,2.863,116,2.708,117,2.097,118,3.503,119,2.097,120,3.503,121,1.875,122,4.036,123,2.097,124,5.271,125,2.097,126,5.271,127,4.512,128,2.097,129,3.503,130,4.512,131,3.503,132,5.271,133,1.163,134,3.503,135,3.503,136,3.133,137,1.163,138,1.163,139,1.163,140,2.097,141,2.097,142,2.097,143,2.097,144,2.097,145,2.097,146,2.097,147,2.097,148,2.89,149,3.133,150,1.875,151,2.097,152,2.097,153,2.097,154,2.097,155,2.097,156,2.097,157,1.73,158,2.097,159,1.297,160,2.097,161,2.097,162,2.097,163,2.097,164,1.195,165,2.097,166,2.097,167,2.097,168,2.097,169,3.503,170,2.097,171,1.875,172,2.097,173,2.097,174,2.097,175,2.097,176,1.084,177,2.097,178,2.863]],["t/10",[0,4.646,1,0.137,3,4.833,4,4.833,179,3,180,4.646]],["t/12",[0,4.646,1,0.137,3,4.833,4,4.833,181,4.479,182,5.298]],["t/14",[1,0.073,76,2.111,93,3.588,110,2.111,116,2.986,121,2.111,148,1.947,149,2.111,157,1.947,164,0.625,183,2.111,184,2.111,185,2.361,186,6.848,187,2.361,188,2.361,189,3.864,190,2.361,191,2.111,192,2.826,193,2.111,194,3.456,195,2.361,196,2.361,197,3.864,198,2.111,199,2.361,200,2.361,201,2.361,202,2.111,203,1.947,204,3.864,205,2.361,206,2.361,207,2.361,208,2.361,209,2.361,210,2.361,211,2.361,212,2.361,213,2.361,214,2.361,215,3.864,216,6.254,217,2.361,218,2.361,219,2.111,220,2.361,221,2.111,222,2.361,223,2.361,224,2.361,225,2.361,226,3.456,227,2.111,228,3.864,229,2.361,230,2.361,231,2.361,232,2.361,233,2.361,234,2.361,235,2.361,236,2.361,237,2.361,238,2.361,239,2.361,240,2.361,241,2.361,242,2.361,243,3.864,244,2.361,245,2.361,246,3.864,247,2.361,248,2.111,249,2.361,250,2.111,251,3.864,252,2.361,253,3.864,254,2.111,255,2.361,256,2.361,257,2.361,258,2.361]],["t/16",[1,0.03,15,1.111,16,1.426,29,1.426,30,3.292,65,1.315,83,1.232,92,1.426,116,1.232,122,1.426,136,1.426,148,1.315,150,1.426,157,2.288,171,1.426,182,1.166,183,2.48,184,1.426,186,7.328,191,1.426,192,3.218,193,6.278,194,2.48,198,1.426,202,2.48,219,1.426,221,1.426,226,1.426,227,2.48,248,2.48,254,1.426,259,1.595,260,0.953,261,1.595,262,2.773,263,1.595,264,1.595,265,1.595,266,1.595,267,1.595,268,2.773,269,1.595,270,1.595,271,1.595,272,1.595,273,1.595,274,1.595,275,0.804,276,0.785,277,1.595,278,1.595,279,1.595,280,1.595,281,1.595,282,1.595,283,1.595,284,2.48,285,1.595,286,1.595,287,1.595,288,1.595,289,1.595,290,1.595,291,1.595,292,2.773,293,1.315,294,1.769,295,1.595,296,1.595,297,1.595,298,1.595,299,1.595,300,1.595,301,1.595,302,0.429,303,1.595,304,1.426,305,1.315,306,1.595,307,1.595,308,1.595,309,2.773,310,1.426,311,1.595,312,1.595,313,1.595,314,1.595,315,2.773,316,1.426,317,2.773,318,1.595,319,1.595,320,1.595,321,2.48,322,1.595,323,1.595,324,2.773,325,1.595,326,3.68,327,1.595,328,1.595,329,1.426,330,1.595,331,2.773,332,1.595,333,1.595,334,2.773,335,1.595,336,1.595,337,1.595,338,2.48,339,1.595,340,2.773,341,1.595,342,1.595,343,1.595,344,1.595,345,1.595,346,1.595,347,1.595,348,2.773,349,1.595,350,1.595,351,1.595,352,1.595,353,1.595,354,1.595,355,1.595,356,1.595,357,1.595,358,1.595,359,1.426,360,1.595,361,1.595]],["t/18",[0,4.646,1,0.137,3,4.833,4,4.833,15,5.048,276,3.564]],["t/21",[0,4.716,6,2.631,78,4.065,310,4.065,316,4.065,321,4.065,359,4.065,362,6.37,363,4.545,364,4.545,365,4.545,366,4.545,367,4.545,368,2.915,369,4.545,370,4.545,371,6.37,372,4.545,373,4.545,374,4.545,375,4.545,376,6.37,377,4.545,378,4.545,379,4.545,380,4.545,381,4.545,382,4.545,383,4.545,384,4.545,385,4.545,386,4.545]],["t/23",[0,4.646,1,0.137,3,4.833,96,4.193,387,5.598,388,6.479]],["t/25",[0,4.646,1,0.137,3,4.833,4,4.833,275,3.652,389,4.833]],["t/27",[1,0.169,368,4.929]],["t/30",[1,0.167,390,3.62,391,7.533]],["t/32",[1,0.108,2,2.123,67,1.114,392,4.712,393,5.712,394,5.712,395,5.18,396,5.758,397,5.712,398,5.712,399,5.712,400,5.109,401,5.712,402,5.712]],["t/34",[2,1.656,67,1.012,392,4.784,395,5.8,396,6.134,400,6.715,403,5.8,404,5.8,405,5.8,406,5.8,407,5.8,408,5.8]],["t/36",[1,0.151]],["t/38",[1,0.148,409,7.845]],["t/41",[1,0.186,67,1.076,390,4.184]],["t/43",[390,3.85]],["t/47",[1,0.181,392,6.092]],["t/49",[410,7.533,411,7.533,412,7.533,413,7.533]],["t/51",[1,0.162,2,1.764,15,4.306,67,1.053,179,2.559,294,2.969,414,6.179,415,6.179,416,6.179,417,6.179,418,3.963,419,6.179]],["t/54",[1,0.163,420,7.244,421,7.244,422,7.244,423,5.048]],["t/56",[1,0.154,67,0.891,179,2.738,390,3.177,395,5.682,424,6.611,425,6.611,426,6.611,427,6.611]],["t/58",[1,0.177,275,3.454,428,5.65,429,5.294,430,6.85,431,6.127]],["t/60",[1,0.172,428,5.863,429,5.493,431,6.357,432,7.108]],["t/62",[1,0.163,428,5.975,429,5.598,433,7.244,434,7.244]],["t/65",[1,0.163,435,7.244,436,6.479,437,7.244,438,7.244]],["t/67",[1,0.159,67,1.136,439,6.977,440,6.977,441,6.977,442,6.977]],["t/69",[1,0.181,67,1.146,390,4.442,436,3.792,443,4.24,444,4.24,445,4.24,446,4.24,447,4.24,448,4.24,449,4.24,450,4.24,451,3.497,452,4.24,453,4.24,454,4.24]],["t/71",[1,0.167,368,4.831,455,6.213]],["t/73",[1,0.188,2,1.134,65,3.277,67,0.78,390,1.909,456,3.973,457,3.071,458,3.973,459,3.553,460,3.973,461,3.973,462,3.973,463,4.338,464,4.772,465,3.973,466,3.973,467,3.553,468,3.973,469,3.07,470,3.973]],["t/75",[1,0.165,471,7.385,472,7.385,473,7.385]],["t/77",[1,0.149,67,0.846,455,6.515,463,3.636,474,6.282,475,6.282,476,6.282,477,6.282,478,6.282,479,5.618,480,6.282,481,6.282]],["t/79",[1,0.17,2,0.654,67,1.1,463,4.383,479,2.048,482,2.289,483,2.289,484,2.289,485,2.289,486,2.289,487,1.888,488,2.289,489,8.441,490,6.421,491,2.289,492,2.289,493,2.289,494,4.802,495,2.289,496,2.289,497,6.617,498,7.308,499,2.289,500,2.289,501,2.289,502,2.289,503,2.289,504,2.289,505,5.565,506,2.289,507,2.289,508,2.048,509,2.289,510,2.289,511,2.289,512,2.289,513,2.048,514,2.289,515,2.289]],["t/81",[1,0.183,67,0.695,390,2.991,455,2.805,457,3.304,459,3.042,463,3.603,464,2.805,469,3.984,487,4.251,490,3.984,508,4.61,513,3.042,516,3.401,517,1.91,518,3.401,519,4.61,520,3.042,521,3.401,522,3.401,523,3.401,524,4.61,525,3.042,526,3.401,527,3.401,528,3.401,529,3.042,530,3.401,531,3.401,532,3.401,533,3.401]],["t/83",[1,0.184,390,3.359,457,2.202,463,3.454,464,3.42,467,3.709,490,5.403,517,2.329,519,3.709,520,3.709,524,3.709,525,5.337,534,4.147,535,4.147,536,4.147,537,4.147,538,4.147,539,4.147,540,4.147,541,5.968,542,5.968]],["t/86",[67,1.08]],["t/88",[1,0.139,543,6.092,544,6.092,545,6.092,546,6.092]],["t/90",[1,0.137,543,5.975,544,5.975,545,5.975,546,5.975,547,7.244]],["t/93",[1,0.19,396,4.041,548,4.784,549,5.8,550,5.8]],["t/95",[1,0.178,2,1.855,67,0.876,543,5.359,544,5.359,545,5.359,546,5.359,551,6.497]],["t/98",[1,0.137,67,0.976,548,5.975,552,7.244,553,7.244,554,2.235]],["t/103",[1,0.145,554,2.371,555,5.621]],["t/105",[1,0.179,67,0.958,556,5.863,557,6.357]],["t/107",[1,0.16,67,1.138,556,6.318,557,5.351,558,5.983,559,5.983,560,5.983,561,4.935,562,5.983,563,5.983,564,5.983,565,5.983]],["t/110",[1,0.179,556,5.863,566,7.108,567,7.108]],["t/112",[1,0.139,293,6.092,568,7.385,569,7.385,570,7.385]],["t/115",[1,0.169,368,4.929]],["t/118",[1,0.188]],["t/120",[1,0.19]],["t/124",[1,0.191,571,6.08,572,6.08]],["t/126",[1,0.177,2,1.824,67,0.861,179,2.646,275,3.221,573,6.388,574,6.388,575,6.388,576,6.388]],["t/128",[1,0.169,368,4.929]],["t/131",[1,0.177,41,4.451,67,0.861,577,6.388,578,6.388,579,6.388,580,6.388,581,6.388,582,6.388]],["t/133",[583,7.845,584,7.845]],["t/135",[1,0.171]],["t/137",[67,1.08]],["t/139",[1,0.172,67,0.823,192,1.959,390,3.419,395,5.204,457,3.543,469,4.717,517,2.403,585,2.07,586,2.07,587,2.209,588,2.678,589,2.678,590,2.678,591,1.787,592,2.07,593,2.678,594,2.678,595,2.07,596,2.678,597,2.678,598,2.678,599,2.678,600,2.396,601,2.678,602,5.345,603,5.345,604,4.78,605,2.678,606,4.28,607,6.104,608,2.678,609,4.28,610,4.28,611,2.678,612,2.678,613,4.28,614,2.678,615,2.678,616,2.678,617,2.678,618,4.28]],["t/141",[1,0.18,67,1.031,276,2.41,396,4.675,619,4.899,620,4.899,621,4.899,622,4.899,623,4.899,624,4.899,625,4.899,626,4.899,627,4.381,628,4.381,629,4.381,630,4.381,631,4.381,632,4.899,633,4.899]],["t/144",[1,0.171]],["t/146",[1,0.182]],["t/148",[1,0.189]],["t/150",[1,0.164,2,1.171,67,0.798,179,1.699,192,5.564,457,4.039,585,5.37,586,6.497,587,6.654,634,4.102,635,4.102,636,4.102,637,4.102,638,4.102,639,4.102,640,4.102,641,5.921,642,4.102,643,4.102,644,4.102,645,4.102]],["t/153",[1,0.175,6,4.275,395,5.146]],["t/155",[1,0.145,67,1.036,646,6.874]],["t/157",[2,2.069,646,6.479,647,7.244,648,7.244,649,7.244,650,7.244]],["t/159",[651,8.011]],["t/161",[1,0.145,6,4.449,652,7.686]],["t/164",[1,0.139,6,4.275,653,7.385,654,7.385,655,7.385]],["t/166",[1,0.169,368,4.929]],["t/168",[1,0.151]],["t/170",[1,0.177,2,1.057,41,3.826,67,0.976,179,1.533,457,1.965,463,2.142,517,2.078,591,2.469,656,3.7,657,6.547,658,3.7,659,3.7,660,3.7,661,3.7,662,3.7,663,3.7,664,2.373,665,3.7,666,2.706,667,3.31,668,3.31,669,3.7,670,4.244,671,4.016,672,3.052,673,3.7,674,4.529,675,5.491,676,3.7,677,3.31,678,3.7,679,3.7]],["t/172",[1,0.186,2,1.396,41,2.211,67,1.03,93,4.361,179,1.314,203,4.918,457,1.684,517,1.782,529,4.372,591,2.117,664,2.035,666,2.32,667,2.838,668,2.838,670,4.608,671,2.32,672,2.617,674,4.032,680,3.173,681,3.173,682,3.173,683,3.173,684,3.173,685,5.333,686,3.173,687,2.838,688,2.211,689,2.617]],["t/174",[1,0.181,2,0.998,67,0.709,457,1.856,517,1.963,548,2.883,591,2.332,664,2.242,666,2.556,670,4.067,671,3.848,672,2.883,674,2.883,688,2.436,690,5.262,691,3.495,692,3.495,693,3.495,694,3.495,695,3.495,696,3.495,697,3.495,698,3.495,699,3.495,700,5.262,701,3.495,702,3.495,703,5.262,704,5.262,705,3.495,706,3.495,707,3.495,708,3.495,709,3.495,710,3.495,711,3.495,712,3.495]],["t/176",[1,0.151]],["t/178",[1,0.183,2,1.078,67,0.509,423,2.63,457,2.004,463,2.185,517,2.12,555,4.844,591,2.518,592,4.306,595,2.917,664,2.421,671,2.76,688,2.63,713,3.774,714,3.774,715,3.774,716,3.774,717,3.774,718,3.774,719,2.421,720,3.376,721,3.376,722,3.774,723,3.774,724,3.774,725,2.76,726,3.774,727,3.774,728,3.774,729,3.774,730,3.774,731,3.774,732,3.774]],["t/180",[1,0.18,2,0.877,67,0.642,93,5.515,179,1.973,203,5.429,457,3.1,463,1.777,469,2.372,517,1.724,664,3.056,687,4.262,733,3.07,734,3.07,735,3.07,736,3.07,737,3.07,738,3.07,739,3.07,740,3.07,741,4.262,742,4.765,743,6.582,744,3.07,745,4.765,746,3.07,747,3.07,748,3.07,749,3.07,750,3.07,751,3.07,752,3.07,753,3.07,754,3.07,755,3.07,756,3.07,757,3.07]],["t/182",[]],["t/184",[1,0.167,2,1.253,67,0.972,423,4.329,457,2.329,463,3.596,517,2.464,591,2.927,592,4.801,664,2.814,688,3.057,720,3.924,721,3.924,758,4.387,759,4.387,760,4.387,761,4.387,762,4.387,763,4.387,764,4.387,765,6.213,766,4.387,767,4.387,768,4.387,769,4.387,770,4.387,771,4.387,772,4.387]],["t/186",[1,0.186,2,0.734,67,0.7,179,1.064,181,1.589,275,1.295,276,1.264,396,2.884,490,1.986,517,2.325,591,3.468,592,4.017,628,2.298,629,2.298,630,2.298,631,2.298,664,3.333,670,3.199,671,1.879,688,1.79,773,2.569,774,2.569,775,2.569,776,2.569,777,2.569,778,2.569,779,2.569,780,2.569,781,2.569,782,2.569,783,2.569,784,2.569,785,2.569,786,2.569,787,2.569,788,2.569,789,4.649,790,2.569,791,2.569,792,2.569,793,2.569,794,2.569,795,2.298,796,2.569,797,2.569,798,2.569,799,2.569,800,2.569,801,2.569]],["t/189",[1,0.181,67,0.401,93,3.399,179,1.231,276,1.463,423,2.072,457,3.435,517,2.61,555,3.399,664,2.981,666,2.174,685,2.659,741,4.157,789,6.278,802,2.973,803,2.973,804,2.973,805,2.973,806,2.973,807,2.973,808,2.973,809,2.973,810,2.973,811,2.973,812,2.973,813,2.973,814,2.973,815,2.973,816,2.973,817,2.973,818,2.973,819,4.648,820,4.648,821,2.973,822,2.973,823,2.973,824,2.973,825,2.973,826,2.973,827,2.973,828,2.973,829,2.973,830,2.973,831,2.973,832,2.973]],["t/191",[1,0.179,2,1.211,67,0.817,179,1.756,275,2.138,390,2.037,396,5.924,463,2.454,833,4.24,834,4.24,835,4.24,836,4.24,837,4.24,838,4.24,839,4.24,840,4.24,841,4.24,842,4.24,843,3.792,844,4.24,845,4.24,846,4.24,847,4.24,848,4.24,849,4.24,850,4.24]],["t/193",[1,0.187,2,1.007,677,5.691,688,5.549,689,7.417,851,8.693,852,3.528,853,6.364,854,3.528]],["t/195",[2,2.151,67,1.015,179,3.12,275,3.798]],["t/197",[1,0.182]],["t/200",[1,0.171,6,4.038,855,6.977,856,6.977,857,6.977,858,6.977]],["t/204",[1,0.182]],["t/206",[1,0.177,859,5.89,860,5.89,861,5.89,862,5.89,863,5.89,864,5.89,865,5.89,866,5.89,867,5.89,868,5.89,869,5.268,870,5.89]],["t/208",[1,0.177,2,2.151]],["t/210",[1,0.178]],["t/212",[1,0.183,390,3.018,869,5.618,871,6.282,872,6.282,873,6.282,874,6.282,875,6.282]],["t/216",[1,0.175,876,5.627,877,8.286,878,7.783,879,5.627,880,4.349,881,5.627,882,5.627]],["t/218",[883,8.011]],["t/220",[1,0.146,880,6.578,884,6.08,885,6.08,886,6.921,887,6.382,888,5.437,889,6.08,890,5.015,891,6.08,892,5.015]],["t/222",[1,0.149,41,3.093,555,3.246,561,3.661,877,3.97,878,6.493,880,4.841,886,3.97,887,3.661,888,3.97,890,3.661,893,4.439,894,3.97,895,4.439,896,3.97,897,3.97,898,6.264,899,4.439,900,6.264,901,4.439,902,4.439,903,3.97,904,4.439,905,4.439,906,3.97,907,4.439,908,4.439,909,4.439,910,4.439,911,4.439,912,4.439]],["t/225",[1,0.171,8,3.097,176,1.791,395,2.413,604,3.097,892,4.31,913,5.226,914,3.463,915,3.463,916,3.463,917,3.463,918,3.463,919,3.463,920,3.463,921,3.463,922,3.097,923,5.226,924,5.226,925,3.463,926,3.463,927,3.463,928,3.463,929,3.463,930,3.463,931,3.463,932,3.463,933,5.226,934,5.226,935,3.463,936,3.463,937,5.226,938,3.097,939,3.463,940,3.463,941,3.463,942,3.463,943,3.463,944,3.463,945,3.463,946,3.463,947,3.463,948,3.463,949,3.463,950,3.463,951,3.463]],["t/227",[1,0.165,116,4.957,429,2.262,587,2.414,880,2.262,890,2.414,892,2.414,896,4.106,897,5.737,903,6.232,906,5.737,922,4.106,938,2.618,952,2.927,953,3.348,954,6.968,955,2.927,956,2.927,957,2.927,958,2.927,959,2.927,960,2.927,961,2.927,962,4.591,963,2.927,964,2.927,965,2.927,966,5.665,967,2.927,968,4.591,969,4.591,970,2.927,971,2.927,972,2.927,973,2.927,974,1.476,975,2.927,976,2.141,977,2.927,978,4.591,979,2.927,980,2.927,981,2.927]],["t/229",[1,0.169,368,4.929]],["t/231",[1,0.187,67,0.861,982,6.388,983,6.388,984,6.388]],["t/233",[1,0.171]],["t/235",[1,0.188,627,5.618,985,5.618,986,6.282,987,6.282]],["t/237",[1,0.181,67,0.923,451,5.65,985,6.127,988,6.85]],["t/240",[1,0.182,67,1.038,390,4.46,457,2.894,585,2.832,586,2.832,689,3.023,989,3.665,990,3.665,991,3.665,992,3.665,993,3.665,994,3.665,995,3.665,996,3.665,997,3.665,998,3.278,999,3.278,1000,3.665,1001,3.665,1002,3.278,1003,3.665,1004,3.665]],["t/242",[1,0.155,192,3.537,329,4.325,338,4.325,457,4.035,487,3.989,585,5.139,586,6.325,998,4.325,999,4.325,1002,4.325,1005,4.836,1006,8.184,1007,4.836,1008,6.65,1009,4.836,1010,6.65,1011,4.836]],["t/245",[1,0.182,2,1.603,67,0.514,305,4.63,517,2.141,595,2.946,600,3.41,666,4.105,725,4.105,1012,3.812,1013,3.41,1014,3.812,1015,3.812,1016,3.812,1017,3.812,1018,3.812,1019,3.812,1020,3.812,1021,3.812,1022,3.41,1023,3.41,1024,5.613,1025,3.812,1026,3.812,1027,3.41,1028,3.41,1029,3.41,1030,3.41,1031,3.812,1032,3.812,1033,3.41,1034,3.812]],["t/247",[1,0.167,305,3.989,595,3.737,719,3.101,725,3.537,1013,4.325,1022,4.325,1023,5.947,1027,4.325,1028,4.325,1029,4.325,1030,5.947,1033,4.325,1035,4.836,1036,4.836,1037,6.65,1038,6.65,1039,4.836,1040,4.836,1041,4.836,1042,4.325,1043,4.836,1044,4.836]],["t/249",[1,0.17,67,0.923,1042,6.127,1045,6.85,1046,6.85,1047,6.85,1048,6.85]],["t/251",[1049,7.845,1050,6.471]],["t/253",[1050,6.471,1051,7.845]],["t/255",[1,0.189,2,1.419,41,1.676,67,0.529,179,1.625,181,2.427,275,2.506,276,3.516,387,4.431,390,1.156,555,1.76,1050,1.984,1052,2.406,1053,2.406,1054,2.406,1055,2.406,1056,2.406,1057,2.406,1058,2.406,1059,2.406,1060,3.924,1061,2.634,1062,5.734,1063,3.924,1064,4.97,1065,1.76,1066,2.406,1067,2.406,1068,2.406,1069,2.406,1070,2.406,1071,2.406,1072,2.406]],["t/258",[1073,8.011]],["t/260",[1,0.188,795,5.618,1074,6.282,1075,6.282,1076,6.282]],["t/262",[1,0.177,1077,5.465,1078,5.465,1079,5.465,1080,5.465,1081,5.465,1082,5.465,1083,5.465,1084,5.465,1085,5.465,1086,5.465,1087,5.465,1088,5.465,1089,5.465,1090,5.465,1091,5.465,1092,5.465]],["t/265",[1,0.132,6,4.038,284,6.24,1093,6.977,1094,6.977,1095,6.977,1096,6.977,1097,6.977]],["t/267",[1,0.145,368,4.929,1098,7.686]],["t/270",[1,0.17,1099,6.179,1100,6.179,1101,6.179,1102,6.179,1103,6.179,1104,6.179,1105,6.179,1106,6.179,1107,6.179,1108,6.179,1109,6.179]],["t/272",[1,0.177,1110,6.85,1111,6.85,1112,6.85,1113,6.85,1114,6.85]],["t/274",[1,0.142,423,5.249,1115,7.533,1116,7.533]],["t/276",[1,0.148,6,4.541]],["t/278",[1,0.169,1117,7.686]],["t/280",[1,0.171,2,1.992,1118,6.977,1119,6.977,1120,6.977,1121,6.977]],["t/282",[6,4.541,1122,6.063]],["t/284",[1,0.175,67,0.819,1123,6.08,1124,6.08,1125,6.08,1126,6.08,1127,6.08,1128,6.08,1129,6.08,1130,6.08,1131,6.08,1132,6.08]],["t/286",[1,0.184,2,1.272,67,0.6,179,2.289,181,1.743,275,1.421,463,1.631,1122,6.285,1133,2.818,1134,2.818,1135,2.818,1136,2.818,1137,2.818,1138,2.818,1139,2.818,1140,2.818,1141,2.818,1142,2.818,1143,4.456,1144,2.818,1145,2.818,1146,2.818,1147,2.818,1148,2.818,1149,2.818,1150,2.818,1151,2.818,1152,2.818,1153,2.818,1154,2.818,1155,2.818,1156,2.818,1157,2.818,1158,2.818,1159,2.818,1160,2.818,1161,2.818,1162,2.818,1163,1.807,1164,2.818,1165,2.818,1166,2.818,1167,2.973,1168,2.818,1169,2.818]],["t/288",[1,0.186,2,2.042,67,0.964,179,2.231,1122,6.611,1170,5.387,1171,5.387,1172,5.387]],["t/291",[1,0.182,67,0.635,451,5.39,1122,3.644,1173,4.715,1174,4.715,1175,6.535,1176,4.715,1177,4.715,1178,4.715,1179,4.715,1180,4.715,1181,4.715,1182,4.715,1183,4.715,1184,4.715,1185,4.715,1186,4.715,1187,4.715,1188,4.715,1189,4.715]],["t/293",[1,0.148,6,4.541]],["t/295",[1,0.181,67,0.652,423,4.633,561,3.989,1190,4.836,1191,4.836,1192,4.836,1193,5.947,1194,4.836,1195,4.836,1196,4.836,1197,4.836,1198,4.836,1199,4.836,1200,4.836,1201,4.836,1202,6.65,1203,6.65]],["t/297",[1,0.182,1204,5.8,1205,5.8,1206,5.8,1207,5.8,1208,5.8,1209,5.8,1210,5.8,1211,5.8,1212,5.8,1213,5.8,1214,5.8]],["t/299",[1,0.185,1193,5.109,1215,5.712,1216,5.712,1217,5.712,1218,5.712,1219,5.712,1220,5.712,1221,5.712,1222,5.712,1223,5.712]],["t/301",[1,0.169,1224,7.686]],["t/304",[1,0.186,719,3.664,974,3.748,976,4.178,1225,5.109,1226,4.96,1227,5.109,1228,3.414]],["t/306",[1,0.181,67,1.002,164,1.513,302,1.536,554,1.763,974,2.88,976,4.178,1229,5.712,1230,5.712,1231,5.109,1232,3.414,1233,1.559]],["t/308",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1234,6.018]],["t/310",[1,0.187,554,2.186,953,2.552,1235,5.311,1236,5.311,1237,2.257,1238,5.311,1239,5.311,1240,5.311,1241,5.311,1242,5.311]],["t/312",[1,0.185,2,1.381,176,2.501,388,4.325,1163,3.101,1237,2.607,1243,4.836,1244,2.567,1245,2.174,1246,4.836,1247,3.989,1248,4.836,1249,4.836,1250,4.836,1251,4.836,1252,4.836]],["t/314",[1,0.185,67,0.782,164,1.536,302,1.559,953,2.787,1233,1.583,1237,2.391,1253,5.8,1254,4.041]],["t/316",[1,0.185,2,0.98,4,2.29,67,1.062,164,0.909,294,1.649,302,0.923,953,1.649,1233,0.937,1237,1.993,1245,1.542,1255,3.432,1256,3.004,1257,2.684,1258,5.19,1259,1.822,1260,1.822,1261,1.873,1262,1.873,1263,3.432,1264,2.201,1265,1.822,1266,2.652,1267,1.479,1268,3.069,1269,3.432,1270,2.391,1271,2.652,1272,2.51,1273,3.432]],["t/318",[1,0.188,67,1.033,159,1.769,164,0.758,179,1.185,276,1.408,294,2.167,302,0.769,554,1.391,953,2.167,1163,2.892,1233,0.781,1237,2.018,1244,1.519,1256,1.656,1257,2.332,1265,2.394,1274,2.861,1275,1.656,1276,2.211,1277,2.211,1278,2.211,1279,2.211,1280,2.211,1281,1.769,1282,1.71,1283,1.909,1284,1.909,1285,1.909,1286,1.835,1287,1.71]],["t/320",[1,0.185,2,1.211,67,0.954,164,1.123,275,3.057,302,1.14,554,1.871,725,3.101,1065,3.101,1233,1.157,1237,2.255,1287,2.534,1288,4.24,1289,4.686,1290,3.101,1291,3.497,1292,2.534,1293,3.277,1294,4.24]],["t/322",[1,0.189,2,1.351,67,0.922,96,1.76,159,1.097,164,0.47,180,1.138,275,2.927,302,0.477,390,0.852,554,0.938,953,1.461,1065,1.297,1163,3.034,1233,0.484,1237,2.179,1244,0.942,1245,1.367,1254,1.236,1256,1.027,1257,1.573,1265,3.082,1266,1.371,1275,1.027,1276,1.371,1277,1.371,1278,1.371,1279,1.371,1280,1.371,1281,1.097,1282,1.06,1283,1.184,1284,1.184,1285,1.184,1286,1.138,1287,1.817,1289,1.371,1290,1.297,1291,1.463,1292,2.385,1293,1.371,1295,1.774,1296,1.774,1297,2.508,1298,2.508,1299,1.774,1300,1.463,1301,1.463]],["t/324",[1,0.185,2,1.089,67,0.898,164,1.01,275,3.359,302,1.025,554,1.732,1065,2.788,1163,3.6,1233,1.04,1237,2.495,1265,2.98,1287,2.278,1289,2.946,1290,2.788,1291,3.144,1292,2.278,1293,2.946,1300,3.144,1301,3.144,1302,3.812,1303,3.41]],["t/326",[1,0.186,2,0.914,67,0.808,96,1.852,164,0.847,176,1.655,179,1.325,275,1.613,294,1.538,302,0.86,387,2.473,390,2.88,418,2.052,554,0.987,974,1.613,1233,0.873,1237,1.909,1245,1.438,1256,1.852,1257,1.655,1259,1.699,1260,1.699,1261,1.746,1262,1.746,1264,2.052,1267,1.379,1271,2.473,1290,2.34,1304,3.2,1305,3.2,1306,3.2,1307,3.2,1308,2.862,1309,3.2,1310,2.862,1311,2.862,1312,2.862,1313,2.862,1314,3.2]],["t/328",[1,0.185,67,0.954,96,2.454,164,1.123,294,2.037,302,1.14,1233,1.157,1237,1.931,1245,1.906,1259,2.251,1260,2.251,1261,2.314,1262,2.314,1267,1.828,1271,3.277,1281,2.622,1315,4.24,1316,4.24,1317,4.24,1318,3.792,1319,4.24,1320,3.792,1321,4.24]],["t/330",[1,0.186,2,1.541,67,0.727,159,1.68,164,0.72,179,1.125,182,1.987,294,1.306,302,0.73,390,1.306,554,1.899,719,1.742,843,3.871,1233,0.741,1237,2.141,1244,1.442,1257,1.405,1259,1.442,1260,1.442,1265,2.864,1281,1.68,1282,1.624,1283,1.813,1284,1.813,1285,1.813,1286,1.742,1287,2.587,1289,2.1,1292,2.587,1293,2.1,1298,2.241,1300,2.241,1301,2.241,1322,2.717,1323,2.717,1324,4.329,1325,2.43,1326,2.717,1327,2.717,1328,2.717]],["t/332",[1,0.183,67,0.881,96,2.729,164,1.249,180,3.024,302,1.268,974,2.377,1226,4.36,1233,1.287,1237,2.081,1245,2.119,1267,2.033,1292,2.818,1329,4.715,1330,4.715,1331,4.217,1332,2.729,1333,3.889,1334,4.715]],["t/334",[1,0.18,5,2.229,67,1.051,96,1.934,164,0.885,176,1.728,260,1.997,302,0.898,389,4.108,418,2.143,974,1.684,1163,2.143,1226,2.229,1228,1.997,1232,1.997,1233,0.912,1237,1.064,1245,1.502,1254,2.328,1267,1.44,1297,2.756,1332,1.934,1333,2.756,1335,3.341,1336,2.066,1337,2.988,1338,2.988,1339,2.988,1340,2.988,1341,2.988,1342,2.066,1343,2.066,1344,2.066,1345,3.719,1346,2.066,1347,2.988,1348,2.066,1349,2.988,1350,2.066,1351,2.988,1352,2.988]],["t/336",[1,0.179,5,2.229,67,1.051,96,1.934,164,0.885,176,1.728,260,1.997,302,0.898,389,4.108,418,2.143,554,1.031,974,1.684,1163,2.143,1226,2.229,1228,1.997,1232,1.997,1233,0.912,1237,1.064,1245,1.502,1254,2.328,1267,1.44,1297,2.756,1332,1.934,1333,2.756,1336,2.066,1337,2.988,1338,2.988,1339,2.988,1340,2.988,1341,2.988,1342,2.066,1343,2.066,1344,2.066,1345,3.719,1346,2.066,1347,2.988,1348,2.066,1349,2.988,1350,2.066,1351,2.988,1352,2.988,1353,3.341]],["t/338",[1,0.184,15,2.827,67,0.792,96,2.349,164,1.075,276,1.996,294,2.823,302,1.091,725,2.968,1163,2.602,1233,1.107,1237,1.292,1244,2.154,1245,1.824,1259,2.154,1260,2.154,1261,2.214,1262,2.214,1267,1.749,1292,2.425,1354,4.058,1355,4.058,1356,4.058,1357,4.058,1358,4.058,1359,4.058,1360,3.629,1361,2.602]],["t/340",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1362,6.729]],["t/342",[1,0.179,67,0.891,164,1.751,302,1.777,390,3.177,1233,1.804,1363,6.611]],["t/345",[1,0.173,67,0.489,164,0.961,176,1.877,260,2.169,302,0.976,554,2.948,719,2.328,974,2.729,976,3.958,1225,3.246,1227,3.246,1228,2.169,1232,2.169,1233,0.99,1237,1.156,1267,1.565,1332,2.101,1336,2.244,1342,2.244,1343,2.244,1344,2.244,1346,2.244,1348,2.244,1350,2.244,1361,3.471,1364,2.805,1365,3.246]],["t/347",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1234,6.018]],["t/349",[1,0.187,67,0.66,1264,3.142,1277,3.786,1366,4.899,1367,4.899,1368,4.899,1369,4.899,1370,4.899,1371,4.899,1372,4.899,1373,4.899,1374,4.899,1375,4.899,1376,4.899,1377,4.899]],["t/351",[1,0.185,67,0.974,83,2.146,96,3.168,164,0.735,176,1.436,260,1.66,294,1.334,302,0.747,554,2.096,974,2.221,1167,3.652,1228,1.66,1232,1.66,1233,0.758,1237,1.403,1245,2.46,1259,1.474,1260,1.474,1261,1.515,1262,1.515,1267,1.197,1332,1.607,1336,1.717,1342,2.723,1343,1.717,1344,1.717,1346,1.717,1348,1.717,1350,1.717,1378,2.777,1379,2.777,1380,2.484,1381,2.484,1382,2.484,1383,2.484,1384,2.484,1385,2.146,1386,3.939,1387,2.484]],["t/353",[1,0.182,67,0.919,83,2.537,96,3.525,164,0.87,176,1.698,260,1.962,302,0.883,554,2.267,974,1.655,1167,4.064,1228,1.962,1232,1.962,1233,0.896,1237,1.598,1245,2.737,1267,1.415,1332,1.9,1336,2.03,1342,2.03,1343,2.03,1344,2.03,1346,2.03,1348,2.03,1350,2.03,1380,2.936,1381,2.936,1382,2.936,1383,2.936,1384,2.936,1385,2.537,1386,4.488,1387,2.936,1388,3.283]],["t/355",[1,0.184,67,0.99,164,0.681,176,2.14,250,2.298,260,2.474,302,0.691,554,2.498,719,1.648,974,2.087,976,3.027,1228,1.536,1231,2.298,1232,2.474,1233,0.701,1237,1.656,1267,1.108,1332,2.396,1336,1.589,1342,2.559,1343,2.559,1344,2.559,1346,2.559,1348,1.589,1350,1.589,1364,1.986,1365,2.298,1389,2.569,1390,4.139,1391,4.139,1392,2.569,1393,2.569,1394,2.569,1395,2.569,1396,2.569,1397,4.139,1398,2.569]],["t/357",[1,0.182,67,0.876,164,1.721,302,1.747,554,2.005,1233,1.773,1399,6.497]],["t/359",[1,0.175,2,1.921,67,0.907,164,1.782,302,1.809,1233,1.836,1400,6.729]],["t/361",[1,0.186,67,0.904,164,1.297,302,1.317,554,1.511,719,3.142,953,2.354,1061,2.25,1233,1.337,1237,2.137,1275,2.835,1287,2.928,1364,3.786,1401,4.899,1402,3.786]],["t/363",[1,0.186,2,1.298,67,0.991,164,1.204,294,2.184,302,1.222,554,1.402,953,2.184,1061,2.088,1233,1.24,1237,1.448,1259,2.413,1260,2.413,1261,2.48,1262,2.48,1275,3.687,1402,3.513,1403,4.545]],["t/365",[1,0.185,67,0.982,164,1.469,302,1.491,953,2.664,1061,2.547,1233,1.513,1237,1.766,1275,3.21,1402,4.285,1404,5.545]],["t/367",[1,0.184,2,1.583,67,0.747,164,1.469,302,1.491,554,1.711,953,2.664,1061,2.547,1233,1.513,1237,1.766,1275,3.21,1402,4.285,1405,5.545]],["t/369",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1406,6.729]],["t/371",[1,0.185,2,0.989,67,0.848,164,0.917,181,2.141,276,1.704,293,2.857,294,1.664,302,0.931,418,2.221,554,1.942,953,1.664,1061,2.4,1167,2.311,1233,0.945,1237,2.004,1245,1.557,1256,2.005,1257,2.702,1259,1.839,1260,1.839,1261,1.89,1262,1.89,1264,2.221,1265,1.839,1267,1.493,1270,2.413,1272,2.533,1275,2.005,1407,3.463,1408,3.097,1409,3.463]],["t/373",[1,0.189,67,1.03,159,1.756,164,0.752,179,1.176,276,1.397,294,2.154,302,0.763,554,1.383,953,2.154,1061,2.059,1233,0.775,1237,2.009,1244,1.507,1256,1.644,1257,2.318,1265,2.38,1266,2.194,1275,1.644,1276,2.194,1278,2.194,1279,2.194,1280,2.194,1281,1.756,1282,1.697,1283,1.894,1284,1.894,1285,1.894,1286,1.821,1287,1.697,1410,2.839]],["t/375",[1,0.19,2,0.775,67,0.936,159,1.678,164,0.412,179,1.124,181,1.678,302,0.418,304,2.427,390,1.304,554,1.663,953,2.078,1061,1.986,1233,0.424,1237,1.959,1244,1.441,1254,1.891,1256,1.571,1257,2.236,1265,2.862,1266,2.097,1275,1.571,1276,2.097,1278,2.097,1279,2.097,1280,2.097,1281,1.678,1282,1.622,1283,1.811,1284,1.811,1285,1.811,1286,1.74,1287,1.622,1292,1.622,1298,2.238,1411,1.555,1412,2.714,1413,2.714]],["t/377",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1414,6.729]],["t/379",[1,0.186,2,1.492,67,1.014,164,0.917,180,2.221,181,3.231,276,1.704,302,0.931,554,1.069,953,1.664,1061,1.591,1233,0.945,1237,1.103,1245,1.557,1256,3.025,1257,2.702,1259,1.839,1260,1.839,1261,1.89,1262,1.89,1264,2.221,1265,1.839,1267,1.493,1270,2.413,1272,2.533,1275,2.005,1318,3.097,1415,3.463,1416,3.463,1417,3.463,1418,3.463]],["t/381",[1,0.185,2,0.921,67,0.911,159,1.995,164,0.855,176,1.669,179,1.337,276,1.588,294,2.38,302,0.868,387,2.494,418,2.07,554,2.374,1061,1.482,1167,2.153,1233,0.881,1237,1.577,1245,1.45,1257,2.561,1259,1.713,1260,1.713,1261,1.761,1262,1.761,1265,1.713,1267,1.391,1270,2.249,1275,1.868,1281,3.062,1286,2.07,1320,2.886,1419,3.227,1420,3.227,1421,3.227,1422,3.227]],["t/383",[1,0.185,67,0.798,159,2.536,164,1.086,275,2.068,276,3.419,302,1.103,554,1.827,1233,1.119,1237,1.886,1244,2.178,1257,2.121,1265,2.178,1281,2.536,1282,2.451,1283,2.737,1284,2.737,1285,2.737,1286,2.631,1287,2.451,1423,4.102,1424,4.102,1425,4.102]],["t/385",[1,0.187,67,0.919,159,2.456,164,1.052,179,1.645,276,1.955,294,1.909,302,1.068,554,2.105,1061,1.825,1233,1.084,1237,1.843,1244,2.109,1257,2.054,1265,2.109,1281,2.456,1282,2.374,1283,2.651,1284,2.651,1285,2.651,1286,2.548,1287,2.374,1426,3.973]],["t/387",[1,0.175,67,0.907,164,1.782,302,1.809,554,2.076,1233,1.836,1427,6.729]],["t/389",[1,0.184,2,1.171,67,0.936,164,1.086,294,1.971,302,1.103,418,2.631,554,1.266,719,2.631,1061,1.884,1167,2.737,1233,1.119,1237,1.886,1244,2.178,1245,1.844,1259,2.178,1260,2.178,1261,2.238,1262,2.238,1267,1.768,1282,3.539,1361,2.631,1364,3.17,1428,4.102,1429,4.102,1430,4.102]],["t/391",[1,0.185,2,1.046,67,0.494,164,0.971,180,2.35,181,2.266,182,3.987,276,1.803,302,0.985,554,1.131,953,1.761,1061,1.683,1233,1,1237,2.296,1244,1.946,1245,1.647,1247,3.023,1256,2.121,1257,1.895,1264,2.35,1265,1.946,1267,1.58,1270,2.554,1272,2.68,1282,2.19,1325,3.278,1431,3.665,1432,3.665,1433,3.665,1434,3.665,1435,3.665,1436,3.665]],["t/393",[1,0.186,2,1.208,67,0.893,164,0.7,181,2.617,182,3.095,276,2.082,302,0.71,418,2.714,953,2.033,1061,2.781,1167,2.823,1233,0.721,1237,2.366,1244,2.247,1245,1.902,1247,3.49,1256,2.449,1257,2.188,1264,2.714,1265,2.247,1267,1.824,1270,2.949,1272,3.095,1282,2.529,1408,3.785,1437,2.641,1438,4.232]],["t/395",[1,0.182,67,0.876,164,1.721,302,1.747,554,2.005,1233,1.773,1439,6.497]],["t/397",[1,0.185,67,0.898,164,1.01,275,1.922,294,1.832,302,1.025,389,2.544,554,1.176,1061,1.751,1226,2.544,1233,1.04,1237,1.788,1244,2.024,1259,2.024,1260,2.024,1261,2.08,1262,2.08,1267,1.643,1277,2.946,1292,2.278,1360,5.02,1361,2.445,1440,3.812,1441,3.812,1442,3.812,1443,3.812,1444,3.812,1445,3.812,1446,3.812]],["t/399",[1,0.188,67,0.964,164,1.427,302,1.448,554,1.662,1233,1.47,1244,2.86,1292,3.219,1447,5.387,1448,5.387]],["t/401",[1,0.185,2,1.414,5,3.304,67,0.812,164,0.855,176,1.669,275,3.038,276,1.588,294,1.551,302,0.868,554,0.996,974,1.627,1061,1.482,1065,2.36,1226,2.153,1233,0.881,1237,1.577,1245,1.45,1254,2.249,1256,1.868,1257,2.561,1259,1.713,1260,1.713,1261,1.761,1262,1.761,1264,2.07,1267,1.391,1271,2.494,1290,2.36,1303,2.886,1308,2.886,1310,2.886,1311,2.886,1312,2.886,1313,2.886,1449,3.227,1450,3.227]],["t/403",[1,0.183,2,1.134,67,0.78,164,1.052,180,2.548,294,1.909,302,1.068,554,1.785,974,2.917,1061,1.825,1233,1.084,1237,2.173,1245,1.785,1259,2.109,1260,2.109,1261,2.168,1262,2.168,1267,1.712,1292,2.374,1331,5.174,1332,2.299,1361,3.71,1451,3.973,1452,3.973,1453,3.973,1454,3.973]],["t/405",[1,0.183,5,3.439,67,0.839,164,0.901,176,1.759,179,1.409,260,2.033,302,0.914,389,3.439,554,1.92,974,1.715,1061,1.562,1228,2.033,1232,2.033,1233,0.928,1237,1.083,1267,1.466,1332,1.969,1336,2.103,1342,2.103,1343,2.103,1344,2.103,1345,3.77,1346,2.103,1348,2.103,1350,2.103,1361,2.181,1385,2.628,1455,3.401,1456,2.805,1457,2.805,1458,2.805,1459,2.805,1460,2.805,1461,2.805,1462,2.805,1463,2.805]],["t/407",[1,0.182,5,3.348,15,2.288,67,0.821,164,0.87,176,1.698,179,1.36,180,2.105,260,1.962,302,0.883,389,3.348,554,1.879,974,1.655,1061,1.508,1228,1.962,1232,1.962,1233,0.896,1237,1.598,1245,1.476,1267,1.415,1332,1.9,1336,2.03,1342,2.03,1343,2.03,1344,2.03,1345,3.67,1346,2.03,1348,2.03,1350,2.03,1361,2.105,1456,2.708,1457,2.708,1458,2.708,1459,2.708,1460,2.708,1461,2.708,1462,2.708,1463,2.708,1464,2.936,1465,3.283,1466,3.283]],["t/409",[1,0.185,67,0.992,164,1.49,302,1.513,953,2.704,1226,4.912,1233,1.536,1237,1.792,1467,5.627,1468,5.627]],["t/411",[1,0.161,887,5.015,894,5.437,953,2.921,1469,6.08,1470,8.512,1471,6.08,1472,6.08,1473,6.08,1474,6.08,1475,6.08,1476,6.08]],["t/413",[1,0.181,5,3.37,67,0.825,164,0.877,176,1.713,179,1.372,180,2.124,260,1.979,302,0.89,389,3.37,554,1.889,974,1.67,1061,1.521,1228,1.979,1232,1.979,1233,0.904,1237,1.055,1245,2.27,1267,1.428,1268,2.962,1332,1.917,1336,2.048,1342,2.048,1343,2.048,1344,2.048,1345,2.422,1346,2.048,1348,2.048,1350,2.048,1361,2.124,1385,2.559,1456,2.731,1457,2.731,1458,2.731,1459,2.731,1460,2.731,1461,2.731,1462,2.731,1463,2.731,1464,2.962,1477,3.312,1478,3.312]]],"invertedIndex":[["",{"_index":1,"t":{"2":{"position":[[8,4]]},"4":{"position":[[106,1],[1020,21],[1807,54],[1939,70]]},"6":{"position":[[8,4]]},"8":{"position":[[4,2],[1413,3],[1631,57],[1906,45],[2059,18],[2329,55],[2505,33],[2733,50],[3094,90]]},"10":{"position":[[8,4]]},"12":{"position":[[8,4]]},"14":{"position":[[1014,1],[1404,2]]},"16":{"position":[[915,1]]},"18":{"position":[[8,4]]},"23":{"position":[[8,4]]},"25":{"position":[[8,4]]},"27":{"position":[[11,7],[19,7]]},"30":{"position":[[0,12],[79,12]]},"32":{"position":[[73,2]]},"36":{"position":[[0,40]]},"38":{"position":[[76,9]]},"41":{"position":[[0,2],[3,2],[6,2],[9,5],[17,2],[20,1],[24,1],[32,1]]},"47":{"position":[[0,72],[73,11],[85,27],[113,29]]},"51":{"position":[[8,30],[59,1],[151,27]]},"54":{"position":[[0,22],[111,5]]},"56":{"position":[[111,3],[206,3]]},"58":{"position":[[0,7],[29,8],[38,5],[104,4]]},"60":{"position":[[0,22],[23,7],[52,14]]},"62":{"position":[[0,7],[29,36]]},"65":{"position":[[18,2],[26,1]]},"67":{"position":[[73,3],[77,12]]},"69":{"position":[[0,4],[194,2],[197,2],[200,2],[203,1],[231,3],[242,3],[246,9],[256,18],[275,32],[308,21],[392,4],[397,8],[486,7]]},"71":{"position":[[11,4],[16,2]]},"73":{"position":[[0,43],[44,4],[118,5],[124,5],[130,5],[136,5],[142,4],[183,1],[189,1],[202,2],[211,2],[216,2],[238,2],[251,2],[254,9],[274,1],[284,1],[292,1],[297,6],[306,1],[311,1],[313,1],[320,1],[346,13]]},"75":{"position":[[176,14],[201,3]]},"77":{"position":[[411,1],[452,11]]},"79":{"position":[[635,1],[675,12],[903,2],[923,1],[939,2],[959,1],[977,2],[999,1],[1285,6],[1749,2],[1779,2],[1805,1],[1832,1],[1837,2],[1878,1],[1885,1],[1927,1],[2113,1],[2494,1],[2504,1]]},"81":{"position":[[71,4],[82,1],[88,1],[101,1],[140,2],[153,6],[170,1],[189,1],[199,1],[203,1],[213,1],[224,6],[231,1],[233,2],[294,1],[300,1],[319,2],[349,2],[372,1],[382,1],[393,1],[435,2]]},"83":{"position":[[0,73],[333,4],[386,1],[392,1],[408,1],[421,1],[436,2],[441,2],[452,2],[486,2],[509,1],[514,19],[550,1],[564,15],[580,1],[589,1],[602,2]]},"88":{"position":[[0,21]]},"90":{"position":[[122,45]]},"93":{"position":[[0,61],[62,5],[68,8],[77,5],[83,17],[101,11],[113,37],[151,4],[161,7],[169,3],[173,3],[177,3],[181,5],[187,21],[273,10]]},"95":{"position":[[0,12],[13,10],[24,13],[103,43],[154,28]]},"98":{"position":[[35,9]]},"103":{"position":[[8,9]]},"105":{"position":[[34,12],[47,32],[80,9],[90,5]]},"107":{"position":[[64,25],[90,24],[466,14]]},"110":{"position":[[67,15],[83,37],[121,34],[156,21]]},"112":{"position":[[184,26]]},"115":{"position":[[11,4],[16,8]]},"118":{"position":[[0,44],[45,38],[84,2],[87,4],[92,6],[99,20],[120,33]]},"120":{"position":[[0,17],[18,4],[23,40],[64,4],[69,24],[94,12],[107,17],[125,39],[165,14],[180,4],[185,11]]},"124":{"position":[[0,74],[75,5],[81,1],[83,4],[88,1],[90,2],[93,16],[110,16],[127,20],[148,4],[153,2],[156,2],[159,5],[196,21]]},"126":{"position":[[135,11],[147,7],[166,9],[176,10],[383,10]]},"128":{"position":[[11,4],[16,9]]},"131":{"position":[[2,42],[127,1],[145,1],[155,1],[180,1]]},"135":{"position":[[0,52],[53,49]]},"139":{"position":[[104,1],[133,1],[138,1],[140,1],[177,2],[269,2],[274,1],[300,1],[402,2],[407,1],[433,1],[438,1],[537,2],[542,1],[567,1],[711,1],[782,1],[788,18]]},"141":{"position":[[31,1],[52,3],[183,1],[204,2],[207,1],[228,2],[231,1],[254,2],[257,1],[284,2]]},"144":{"position":[[0,10],[11,87]]},"146":{"position":[[0,8],[9,57],[67,6],[74,54]]},"148":{"position":[[0,1],[2,2],[5,3],[9,2],[12,2],[15,2],[18,2],[21,2],[24,2]]},"150":{"position":[[0,32],[47,19],[142,1],[148,1],[175,1],[189,21],[253,1]]},"153":{"position":[[0,33],[111,27],[143,139]]},"155":{"position":[[0,16]]},"161":{"position":[[4,11]]},"164":{"position":[[4,18]]},"166":{"position":[[11,4],[16,6]]},"168":{"position":[[0,117]]},"170":{"position":[[215,21],[315,4],[504,1],[510,2],[545,1],[559,1],[572,1],[592,1],[600,1],[609,1],[617,1],[619,2],[797,2],[881,85]]},"172":{"position":[[0,104],[282,14],[297,4],[302,7],[381,1],[387,2],[405,1],[417,1],[426,1],[457,1],[464,1],[472,1],[487,1],[499,1],[505,1],[520,1],[531,1],[539,1],[549,2],[557,1],[564,2],[571,1],[576,1],[584,1],[593,1],[598,1],[606,2],[617,12],[678,58]]},"174":{"position":[[172,11],[258,15],[282,1],[301,1],[311,6],[324,1],[443,1],[456,10],[472,1],[480,4],[491,1],[503,2],[519,1],[535,1],[552,1],[560,1],[562,1],[564,2],[892,12]]},"176":{"position":[[0,57]]},"178":{"position":[[0,7],[8,13],[62,1],[69,1],[76,1],[123,1],[130,1],[149,1],[175,1],[188,2],[199,1],[207,14],[243,1],[251,1],[269,1],[271,2],[404,1],[490,2]]},"180":{"position":[[449,14],[464,8],[524,1],[544,1],[568,2],[595,10],[613,1],[639,2],[664,10],[683,1],[693,1],[702,1],[724,3],[777,1],[799,1],[867,5],[894,1],[905,5],[911,2],[1151,3],[1155,13]]},"184":{"position":[[309,1],[333,1],[348,1],[384,1],[389,1],[421,2],[571,3]]},"186":{"position":[[4,100],[113,21],[135,16],[152,18],[182,44],[279,7],[287,11],[392,18],[497,1],[526,2],[529,1],[558,2],[561,1],[584,2],[587,1],[614,2],[742,3],[782,20],[803,39],[889,1],[1000,1],[1008,24],[1043,1],[1099,2],[1156,12],[1180,1],[1188,12],[1203,1],[1208,32],[1241,1],[1243,1],[1250,1],[1257,1],[1265,8],[1274,31],[1306,5],[1381,1],[1394,2],[1435,2],[1560,3]]},"189":{"position":[[0,37],[228,3],[232,7],[240,15],[256,19],[290,1],[326,2],[438,1],[457,6],[469,1],[483,1],[491,1],[501,1],[512,2],[565,1],[585,1],[595,1],[597,11],[630,1],[662,1],[796,1],[882,2],[1008,2]]},"191":{"position":[[81,13],[95,13],[214,22],[237,23],[261,21],[283,13],[304,28],[648,14],[727,32],[804,18],[938,2],[946,37]]},"193":{"position":[[0,2],[3,5],[9,5],[15,3],[19,2],[22,2],[25,2],[28,4],[93,1],[95,4],[179,1],[181,2],[184,1],[186,1],[218,2],[221,2],[284,1],[286,2],[399,2],[402,4],[471,2],[474,1],[585,2],[702,1],[704,2],[804,1]]},"197":{"position":[[0,5],[6,31],[38,4],[43,46]]},"200":{"position":[[58,171],[230,34],[265,134]]},"204":{"position":[[0,4],[5,4],[10,6],[17,7]]},"206":{"position":[[4,5],[115,5],[329,10],[340,4],[382,1],[415,1]]},"208":{"position":[[6,2],[9,2],[12,7]]},"210":{"position":[[0,2],[3,4],[8,70]]},"212":{"position":[[4,4],[23,34],[62,4],[99,8],[108,11],[120,20],[147,9]]},"216":{"position":[[67,2],[77,23],[132,18],[157,10],[172,13],[246,41]]},"220":{"position":[[0,20],[111,19]]},"222":{"position":[[92,4],[97,32],[130,2],[341,1]]},"225":{"position":[[175,1],[207,1],[216,1],[225,3],[252,8],[378,2],[398,1],[400,1],[497,1],[499,1],[641,1],[685,1]]},"227":{"position":[[99,1],[106,1],[312,2],[375,2],[467,2],[480,3],[501,2],[504,5],[520,3],[540,2],[543,4],[728,5]]},"229":{"position":[[11,4],[16,6]]},"231":{"position":[[0,13],[14,6],[21,14],[36,4],[56,14],[71,12],[84,3],[108,1],[205,14]]},"233":{"position":[[0,20],[21,30]]},"235":{"position":[[0,12],[13,2],[16,3],[20,4],[25,3],[29,1],[31,6],[38,7],[46,20],[96,1]]},"237":{"position":[[0,4],[5,5],[11,3],[15,1],[29,14]]},"240":{"position":[[207,1],[211,2],[225,1],[232,2],[339,7],[383,1],[387,1],[394,2],[399,1],[403,1],[410,2],[415,1],[419,1],[426,2],[431,1],[435,1],[442,2],[828,16]]},"242":{"position":[[0,6],[114,4],[210,5],[316,11]]},"245":{"position":[[7,45],[53,10],[64,25],[163,122],[286,32],[319,6],[326,4],[331,8],[396,1],[428,1],[457,1],[607,1],[635,1],[695,1],[717,1],[719,1],[721,2]]},"247":{"position":[[164,1],[195,1],[210,1],[302,1],[316,1],[344,1]]},"249":{"position":[[54,5],[60,28],[102,1]]},"255":{"position":[[0,26],[282,9],[292,12],[305,1],[309,1],[311,1],[315,1],[317,1],[321,1],[323,1],[327,1],[329,1],[333,1],[335,1],[339,1],[341,1],[345,1],[349,1],[351,1],[353,1],[355,1],[357,1],[359,1],[361,1],[371,3],[375,3],[379,3],[383,3],[387,3],[391,3],[397,1],[399,1],[417,3],[421,3],[425,3],[431,1],[469,3],[473,3],[491,3],[495,3],[499,3],[503,3],[507,3],[531,3],[535,3],[539,3],[543,3],[549,1],[551,1],[553,1],[555,1],[557,1],[570,3]]},"260":{"position":[[0,19],[20,9],[51,5],[80,17],[132,3],[136,48],[275,11],[287,15],[303,37],[341,104]]},"262":{"position":[[0,12],[102,1],[114,1],[173,66],[331,1],[394,65],[492,20]]},"265":{"position":[[66,29]]},"267":{"position":[[18,7]]},"270":{"position":[[114,1],[141,1],[326,1],[396,2]]},"272":{"position":[[0,114],[115,6],[149,1],[175,1]]},"274":{"position":[[0,5]]},"276":{"position":[[4,7]]},"278":{"position":[[0,2],[3,15]]},"280":{"position":[[37,6],[196,6],[203,19]]},"284":{"position":[[0,9],[30,1],[102,16],[169,1],[196,1]]},"286":{"position":[[117,8],[126,4],[131,3],[135,3],[147,3],[151,5],[159,1],[367,9],[377,1],[379,4],[384,1],[386,4],[404,1],[406,4],[462,9],[485,9],[869,39],[1149,7],[1157,1],[1159,4],[1164,1],[1166,4],[1180,2],[1183,1],[1185,4],[1190,1],[1192,4],[1282,6],[1565,6],[2012,16]]},"288":{"position":[[0,5],[6,3],[10,4],[22,3],[91,20],[112,5],[121,17],[139,8],[150,17],[301,3],[305,45],[503,28]]},"291":{"position":[[0,3],[44,6],[80,6],[102,1],[272,13],[312,1],[325,1],[340,1],[420,1],[438,1],[460,1],[476,1]]},"293":{"position":[[4,10]]},"295":{"position":[[0,3],[28,4],[73,1],[94,1],[164,1],[258,3],[276,1],[336,4],[341,5],[382,9],[392,8]]},"297":{"position":[[0,6],[7,13],[21,4],[37,1],[88,3],[103,1],[175,2],[186,1]]},"299":{"position":[[0,24],[25,28],[114,6],[170,26],[197,21],[219,5],[235,1],[266,19],[286,5],[305,1]]},"301":{"position":[[4,6],[11,4]]},"304":{"position":[[21,5],[27,1],[52,5],[70,3],[74,4],[97,9],[107,5],[113,1],[138,5],[157,3],[161,5]]},"306":{"position":[[32,5],[38,1],[64,5],[92,4],[112,5],[118,5],[124,1],[148,5]]},"308":{"position":[[22,6],[29,5],[35,1],[59,5]]},"310":{"position":[[34,6],[41,5],[47,1],[63,1],[65,6],[72,1],[114,6],[145,8],[175,8],[184,1],[186,2],[207,2],[210,7]]},"312":{"position":[[33,6],[40,5],[46,1],[48,1],[91,6],[112,1],[114,1],[162,8],[171,8],[225,6],[232,1],[234,1],[236,1],[238,1]]},"314":{"position":[[41,6],[48,5],[54,1],[78,5],[96,1],[98,1],[127,4],[132,6],[139,1],[141,2]]},"316":{"position":[[38,5],[44,1],[62,6],[110,4],[130,7],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[239,7],[247,6],[274,5],[293,6],[337,6],[361,5],[385,4],[405,5],[411,4],[432,6],[466,6],[473,1],[475,1],[477,2]]},"318":{"position":[[38,6],[45,5],[51,1],[75,5],[93,1],[123,4],[144,4],[165,6],[180,6],[187,6],[213,6],[243,8],[266,1],[268,1],[278,8],[287,6],[311,1],[313,1],[350,4],[371,4],[385,7],[393,4],[415,4],[429,3],[433,4],[449,10],[460,4],[487,4],[503,5],[509,6],[516,6],[523,8],[532,4],[552,4],[573,4],[593,4],[598,1],[600,1],[602,1],[604,2],[621,2]]},"320":{"position":[[48,5],[54,1],[90,4],[110,1],[112,1],[155,6],[178,1],[180,7],[188,5],[198,2],[220,6],[242,6],[249,1],[251,2],[270,5],[276,1],[300,5],[322,7]]},"322":{"position":[[42,6],[49,5],[55,1],[79,5],[97,1],[108,1],[110,6],[145,4],[166,4],[187,6],[202,8],[211,6],[237,6],[261,1],[263,8],[317,2],[334,1],[336,1],[346,9],[356,4],[378,1],[380,6],[387,1],[424,6],[447,4],[461,13],[475,6],[499,4],[513,1],[515,6],[522,1],[539,6],[557,6],[564,6],[584,6],[591,2],[594,1],[622,8],[644,1],[646,2],[660,5],[666,4],[687,1],[689,4],[694,6],[701,7],[709,2],[723,3],[727,4],[746,6],[769,6],[791,6],[798,1],[800,1],[802,1],[804,2],[821,6],[828,2],[841,1],[843,6],[880,4],[899,4],[919,1],[921,6],[928,1],[987,6],[1011,6],[1034,4],[1055,1],[1057,6],[1064,5],[1074,2],[1091,4],[1117,6],[1124,1],[1126,1],[1128,1],[1130,2]]},"324":{"position":[[40,5],[46,1],[78,4],[97,5],[118,1],[120,1],[179,6],[203,6],[226,6],[249,1],[251,6],[258,5],[268,2],[285,4],[311,6],[318,1],[320,2],[323,5],[329,1],[353,5],[376,7]]},"326":{"position":[[44,5],[50,1],[68,4],[88,7],[96,5],[102,1],[126,5],[144,1],[169,1],[171,1],[229,6],[254,6],[276,5],[282,6],[334,6],[363,7],[390,6],[410,3],[414,4],[435,6],[462,8],[484,6],[504,7],[521,6],[545,5],[551,1],[553,1],[555,2]]},"328":{"position":[[39,5],[45,1],[63,4],[83,7],[91,5],[97,1],[121,5],[139,1],[165,1],[167,1],[208,4],[250,6],[272,5],[278,4],[303,4],[308,1],[310,1],[312,2]]},"330":{"position":[[47,5],[53,1],[71,4],[91,7],[99,5],[105,1],[129,5],[147,1],[163,1],[202,6],[249,4],[272,4],[286,1],[288,4],[293,1],[310,4],[331,6],[352,6],[359,1],[361,2],[380,4],[407,4],[428,4],[447,4],[468,4],[491,4],[496,2],[519,1],[521,6],[585,6],[608,6],[631,4],[658,6],[679,4],[705,6],[712,1],[714,2]]},"332":{"position":[[27,6],[34,5],[40,1],[64,5],[82,1],[84,1],[141,5],[167,8],[196,14],[211,6],[254,6],[261,1],[263,2]]},"334":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[172,5],[198,6],[216,4],[232,4],[247,4],[287,4],[314,5],[338,3],[429,4],[450,4],[472,6],[492,2],[495,6],[502,2]]},"336":{"position":[[30,5],[36,1],[122,5],[148,6],[166,4],[182,4],[197,4],[237,4],[264,5],[288,3],[379,4],[400,4],[422,6],[442,2],[445,7],[453,5],[459,1],[483,5]]},"338":{"position":[[36,5],[42,1],[60,4],[80,7],[88,5],[94,1],[118,5],[136,1],[158,1],[160,1],[189,6],[233,6],[256,6],[300,6],[331,5],[337,1],[339,1],[341,2]]},"340":{"position":[[39,6],[46,5],[52,1],[76,5]]},"342":{"position":[[43,6],[50,5],[56,1],[80,5],[100,9]]},"345":{"position":[[21,5],[27,1],[50,5],[68,3],[72,4],[95,6],[102,5],[108,1],[132,5],[150,1],[203,5],[470,2]]},"347":{"position":[[22,6],[29,5],[35,1],[59,5]]},"349":{"position":[[32,6],[39,5],[45,1],[71,6],[101,6],[134,6],[167,5],[199,1],[201,5],[210,2],[243,1],[245,6],[255,2],[273,1],[275,6],[286,2]]},"351":{"position":[[31,5],[37,1],[51,3],[55,5],[72,4],[93,4],[113,7],[121,5],[127,1],[151,5],[169,1],[184,4],[197,1],[199,1],[292,4],[297,5],[321,6],[341,4],[357,4],[375,4],[392,3],[396,6],[418,5],[465,8],[511,6],[555,6],[575,4],[596,4],[619,4],[624,1],[626,1],[628,2]]},"353":{"position":[[30,6],[37,5],[43,1],[67,5],[85,1],[178,4],[183,5],[207,6],[227,4],[243,4],[261,4],[278,3],[282,6],[304,5],[351,8],[397,6],[441,6],[461,4],[482,4],[505,4],[510,2]]},"355":{"position":[[26,5],[32,1],[68,5],[96,4],[121,6],[139,4],[157,4],[169,3],[173,4],[185,3],[189,4],[212,4],[232,5],[253,5],[259,5],[265,1],[289,5],[307,1],[401,5],[419,2],[422,4],[447,6],[467,4],[485,4],[508,4],[529,4],[549,5],[566,4],[584,4],[608,4],[642,6],[669,6],[709,8],[736,6],[771,2]]},"357":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"359":{"position":[[36,6],[43,5],[49,1],[73,5]]},"361":{"position":[[39,6],[46,5],[52,1],[76,5],[94,1],[96,1],[123,5],[129,6],[148,4],[166,6],[173,6],[199,4],[221,6],[228,1],[230,2]]},"363":{"position":[[39,5],[45,1],[62,4],[99,5],[105,1],[129,5],[147,1],[169,1],[171,1],[191,5],[197,6],[216,4],[234,5],[240,6],[247,1],[249,1],[251,2]]},"365":{"position":[[43,6],[50,5],[56,1],[80,5],[98,1],[118,5],[124,6],[143,4],[161,5],[167,6],[174,2]]},"367":{"position":[[39,5],[45,1],[65,5],[71,6],[90,4],[108,5],[114,7],[122,5],[128,1],[152,5]]},"369":{"position":[[43,6],[50,5],[56,1],[80,5]]},"371":{"position":[[32,5],[38,1],[67,4],[91,4],[112,4],[132,7],[140,5],[146,1],[170,5],[188,1],[210,1],[212,1],[239,8],[248,6],[275,6],[296,6],[340,6],[364,5],[386,4],[407,6],[439,6],[446,1],[448,1],[450,2]]},"373":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[122,4],[143,4],[164,6],[179,7],[187,6],[213,6],[243,6],[264,1],[266,1],[276,8],[285,6],[309,1],[311,1],[349,6],[372,4],[386,7],[394,4],[416,4],[430,3],[434,6],[452,10],[463,4],[490,6],[508,5],[514,6],[521,6],[528,8],[537,4],[557,6],[580,4],[600,4],[605,1],[607,1],[609,1],[611,2],[628,6],[635,2]]},"375":{"position":[[32,5],[38,1],[69,4],[90,4],[111,6],[126,8],[135,6],[161,6],[191,4],[210,1],[212,1],[222,8],[231,4],[253,1],[255,6],[262,1],[300,4],[321,4],[335,15],[351,4],[373,4],[387,1],[389,4],[394,1],[411,6],[429,8],[438,6],[460,6],[484,6],[491,1],[493,2],[507,7],[515,6],[522,6],[529,8],[538,4],[559,1],[561,6],[577,2],[598,6],[619,6],[642,4],[662,4],[667,1],[669,1],[671,1],[673,2],[690,7],[698,5],[704,1],[728,5],[746,1],[777,4],[798,4],[819,6],[834,8],[843,6],[869,6],[899,4],[918,1],[920,1],[930,8],[939,4],[961,1],[963,1],[1001,4],[1022,4],[1036,15],[1052,4],[1074,4],[1088,1],[1090,4],[1095,1],[1112,6],[1130,8],[1139,6],[1161,6],[1185,6],[1192,1],[1194,2],[1208,7],[1216,6],[1223,6],[1230,8],[1239,4],[1260,1],[1262,6],[1278,2],[1299,6],[1320,6],[1343,4],[1363,4],[1368,1],[1370,1],[1372,1],[1374,2],[1391,4],[1396,2]]},"377":{"position":[[36,6],[43,5],[49,1],[73,5]]},"379":{"position":[[40,5],[46,1],[67,4],[84,4],[105,6],[128,4],[147,1],[149,5],[155,1],[179,5],[197,1],[219,1],[221,1],[241,8],[250,6],[277,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,2]]},"381":{"position":[[30,5],[36,1],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[241,4],[306,6],[329,4],[351,5],[372,4],[390,4],[406,5],[412,6],[419,6],[426,8],[435,4],[470,4],[491,4],[510,6],[517,4],[522,1],[524,1],[526,2]]},"383":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[130,4],[151,4],[184,4],[206,4],[220,3],[224,4],[240,7],[248,4],[275,4],[291,10],[302,6],[323,6],[346,4],[369,2]]},"385":{"position":[[30,5],[36,1],[74,4],[95,4],[109,7],[117,4],[139,4],[153,3],[157,4],[173,10],[184,4],[211,4],[227,5],[233,6],[240,6],[247,8],[256,6],[276,6],[299,4],[323,5],[329,1],[353,5]]},"387":{"position":[[34,6],[41,5],[47,1],[71,5]]},"389":{"position":[[26,5],[32,1],[86,5],[92,1],[116,5],[134,1],[156,1],[158,1],[186,7],[194,6],[218,4],[250,8],[296,6],[320,6],[327,1],[329,1],[331,2]]},"391":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[123,4],[137,5],[143,6],[164,1],[166,1],[194,5],[200,6],[227,6],[248,6],[292,6],[316,5],[339,4],[360,6],[395,6],[421,1],[423,1],[425,2]]},"393":{"position":[[26,5],[32,1],[70,7],[92,1],[94,1],[121,8],[130,6],[157,6],[178,6],[222,6],[246,5],[268,4],[289,6],[321,6],[328,1],[330,2],[333,5],[339,1],[363,5],[381,1],[417,4],[431,7],[439,6],[460,1],[462,1],[489,8],[498,6],[525,6],[546,6],[590,6],[614,5],[636,4],[657,6],[689,6],[696,1],[698,1],[700,2]]},"395":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"397":{"position":[[29,5],[35,1],[91,6],[98,5],[104,1],[128,5],[146,1],[169,1],[171,1],[199,9],[209,6],[227,10],[238,6],[270,8],[302,8],[334,7],[358,6],[401,6],[408,1],[410,1],[412,2]]},"399":{"position":[[29,5],[35,1],[46,10],[57,6],[75,6],[82,6],[107,1],[109,5],[117,2],[120,5],[126,1],[139,6],[157,5],[163,6]]},"401":{"position":[[37,5],[43,1],[64,4],[101,5],[107,1],[131,5],[149,1],[171,1],[173,1],[222,6],[248,6],[270,5],[276,6],[326,6],[355,7],[383,6],[404,3],[408,4],[429,6],[456,8],[478,6],[498,8],[507,6],[536,5],[542,1],[544,1],[546,2]]},"403":{"position":[[37,5],[43,1],[111,5],[117,1],[141,5],[159,1],[182,1],[184,1],[244,5],[262,6],[269,6],[294,14],[309,6],[352,6],[359,1],[361,1],[363,2]]},"405":{"position":[[29,6],[36,5],[42,1],[66,5],[84,1],[178,5],[196,6],[203,6],[221,4],[237,4],[252,4],[292,6],[314,5],[338,3],[342,8],[388,6],[409,3],[413,6],[433,4],[457,6],[482,4],[487,2]]},"407":{"position":[[28,5],[34,1],[105,6],[133,5],[151,6],[158,6],[176,4],[192,4],[207,4],[247,4],[267,5],[291,3],[295,8],[341,6],[385,6],[405,4],[429,4],[452,5],[458,5],[464,1],[488,5]]},"409":{"position":[[38,5],[52,5],[58,5],[64,1],[88,5],[106,1],[108,1],[129,5],[153,1],[155,2]]},"411":{"position":[[39,6],[46,5],[52,1]]},"413":{"position":[[28,5],[34,1],[128,5],[146,6],[153,6],[171,4],[187,4],[202,4],[242,6],[269,5],[293,3],[297,8],[343,6],[387,6],[407,4],[431,4],[454,5],[460,5],[466,1],[490,5]]}}}],["0",{"_index":390,"t":{"30":{"position":[[13,65]]},"41":{"position":[[15,1],[22,1],[29,2]]},"43":{"position":[[0,3]]},"56":{"position":[[0,42]]},"69":{"position":[[205,2],[208,1],[210,1],[212,1],[214,2],[219,1],[222,1],[227,1],[229,1],[240,1]]},"73":{"position":[[367,3]]},"81":{"position":[[90,2],[103,2],[432,2]]},"83":{"position":[[394,2],[410,2],[439,1]]},"139":{"position":[[285,2],[332,2],[418,2],[468,2],[553,2],[597,2]]},"191":{"position":[[519,2]]},"212":{"position":[[9,13]]},"240":{"position":[[227,4],[381,1],[392,1],[397,1],[401,1],[405,1],[407,2],[413,1],[417,1],[421,1],[433,1],[437,1],[439,2]]},"255":{"position":[[347,1]]},"322":{"position":[[1086,4]]},"326":{"position":[[249,4],[360,2],[457,4]]},"330":{"position":[[674,4]]},"342":{"position":[[98,1]]},"375":{"position":[[614,4],[1315,4]]}}}],["0.000",{"_index":408,"t":{"34":{"position":[[224,14]]}}}],["0.1xxxxx",{"_index":439,"t":{"67":{"position":[[0,11]]}}}],["0.1xxx，负数1.1xxx",{"_index":453,"t":{"69":{"position":[[330,44]]}}}],["0.8",{"_index":1181,"t":{"291":{"position":[[320,4]]}}}],["0.96e=ta​tc​​=h′tc​+(1−h′)tm​tc​​=0.96",{"_index":1189,"t":{"291":{"position":[[478,38]]}}}],["0.99h′=4∗50.8+4∗5−1​=0.99",{"_index":1184,"t":{"291":{"position":[[342,25]]}}}],["00",{"_index":417,"t":{"51":{"position":[[179,2]]}}}],["00:00:00",{"_index":1297,"t":{"322":{"position":[[284,10],[307,9]]},"334":{"position":[[276,10]]},"336":{"position":[[226,10]]}}}],["01",{"_index":418,"t":{"51":{"position":[[185,5]]},"326":{"position":[[215,2]]},"334":{"position":[[273,2]]},"336":{"position":[[223,2]]},"371":{"position":[[323,2]]},"381":{"position":[[289,2]]},"389":{"position":[[279,2]]},"393":{"position":[[205,2],[573,2]]}}}],["0110000000011000]\\begin{bmatrix",{"_index":995,"t":{"240":{"position":[[347,33]]}}}],["02",{"_index":1318,"t":{"328":{"position":[[236,2]]},"379":{"position":[[327,2]]}}}],["04",{"_index":388,"t":{"23":{"position":[[23,2]]},"312":{"position":[[81,2]]}}}],["05",{"_index":4,"t":{"2":{"position":[[20,2]]},"6":{"position":[[20,2]]},"10":{"position":[[20,2]]},"12":{"position":[[20,2]]},"18":{"position":[[20,2]]},"25":{"position":[[20,2]]},"316":{"position":[[320,2]]}}}],["06",{"_index":96,"t":{"6":{"position":[[23,2]]},"23":{"position":[[20,2]]},"322":{"position":[[278,2],[304,2]]},"326":{"position":[[212,2]]},"328":{"position":[[233,2]]},"332":{"position":[[238,2]]},"334":{"position":[[399,2]]},"336":{"position":[[349,2]]},"338":{"position":[[283,2]]},"351":{"position":[[448,2],[494,2],[538,2]]},"353":{"position":[[334,2],[380,2],[424,2]]}}}],["0656",{"_index":1393,"t":{"355":{"position":[[342,4]]}}}],["07",{"_index":5,"t":{"2":{"position":[[23,2]]},"334":{"position":[[365,2]]},"336":{"position":[[315,2]]},"401":{"position":[[205,2],[208,2]]},"405":{"position":[[278,2],[374,2]]},"407":{"position":[[233,2],[327,2]]},"413":{"position":[[228,2],[329,2]]}}}],["08",{"_index":180,"t":{"10":{"position":[[23,2]]},"322":{"position":[[301,2]]},"332":{"position":[[241,2]]},"379":{"position":[[324,2]]},"391":{"position":[[275,2]]},"403":{"position":[[336,2]]},"407":{"position":[[368,2]]},"413":{"position":[[370,2]]}}}],["09",{"_index":389,"t":{"25":{"position":[[23,2]]},"334":{"position":[[270,2],[362,2],[402,2]]},"336":{"position":[[220,2],[312,2],[352,2]]},"397":{"position":[[385,2]]},"405":{"position":[[275,2],[371,2]]},"407":{"position":[[230,2],[324,2]]},"413":{"position":[[225,2],[326,2]]}}}],["0;i",{"_index":636,"t":{"150":{"position":[[144,3]]}}}],["0;i<g.vexnum;i",{"_index":1018,"t":{"245":{"position":[[459,18]]}}}],["0;i<g.vexnuml;i",{"_index":1015,"t":{"245":{"position":[[398,18]]}}}],["0;i<len;i",{"_index":593,"t":{"139":{"position":[[106,13]]}}}],["0;i<n",{"_index":720,"t":{"178":{"position":[[151,5]]},"184":{"position":[[311,5]]}}}],["0;v<g.vexnum;++v",{"_index":1038,"t":{"247":{"position":[[166,17],[212,17]]}}}],["0e+∞=0",{"_index":867,"t":{"206":{"position":[[417,6]]}}}],["0~999",{"_index":833,"t":{"191":{"position":[[0,80]]}}}],["0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0",{"_index":839,"t":{"191":{"position":[[470,28]]}}}],["0和全1",{"_index":452,"t":{"69":{"position":[[184,9]]}}}],["0有两种表示：10000和00000",{"_index":402,"t":{"32":{"position":[[179,24]]}}}],["0的就是可以进行操作的后继状态，例如上述10001101，有2、5、6、7",{"_index":1216,"t":{"299":{"position":[[121,48]]}}}],["0舍1入、末位恒置1",{"_index":454,"t":{"69":{"position":[[375,16]]}}}],["0，余数左移并且加上除数；余数为正，商1",{"_index":432,"t":{"60":{"position":[[67,37]]}}}],["0，并且加上除数的补码，余数为正商0",{"_index":430,"t":{"58":{"position":[[44,32]]}}}],["1",{"_index":67,"t":{"4":{"position":[[852,7]]},"6":{"position":[[13,1]]},"8":{"position":[[1417,8]]},"32":{"position":[[68,2],[89,1],[144,2]]},"34":{"position":[[144,1],[156,1]]},"41":{"position":[[26,2],[34,1]]},"51":{"position":[[0,7],[131,12]]},"56":{"position":[[138,3]]},"67":{"position":[[90,1],[92,12]]},"69":{"position":[[217,1],[224,2],[235,2],[238,1],[406,58],[465,20]]},"73":{"position":[[191,2],[308,2]]},"77":{"position":[[408,2]]},"79":{"position":[[193,10],[632,2],[920,2],[936,2],[956,2],[974,2],[996,2],[1012,2],[1802,2],[1820,2],[1875,2],[1900,2]]},"81":{"position":[[201,1],[302,2]]},"86":{"position":[[0,30]]},"95":{"position":[[96,6]]},"98":{"position":[[29,5]]},"105":{"position":[[31,2]]},"107":{"position":[[61,2],[321,12],[334,48]]},"126":{"position":[[0,5]]},"131":{"position":[[151,3]]},"137":{"position":[[0,25]]},"139":{"position":[[0,6],[135,2],[440,2],[784,3]]},"141":{"position":[[33,1],[50,1],[73,4]]},"150":{"position":[[33,13],[178,2]]},"155":{"position":[[24,35]]},"170":{"position":[[12,2],[320,129],[450,4],[535,4]]},"172":{"position":[[310,4],[432,2],[507,2],[528,2],[573,2],[595,2]]},"174":{"position":[[0,137],[207,4]]},"178":{"position":[[22,4]]},"180":{"position":[[0,6],[863,3]]},"184":{"position":[[187,4],[260,4],[489,5]]},"186":{"position":[[0,3],[227,51],[1431,3]]},"189":{"position":[[104,4]]},"191":{"position":[[109,7],[517,1]]},"195":{"position":[[0,4]]},"231":{"position":[[41,14]]},"237":{"position":[[52,2]]},"240":{"position":[[209,1],[385,1],[389,2],[423,2],[429,1]]},"245":{"position":[[0,6]]},"249":{"position":[[29,24]]},"255":{"position":[[307,1],[578,3]]},"284":{"position":[[198,2]]},"286":{"position":[[139,7],[1357,15]]},"288":{"position":[[15,6],[351,8]]},"291":{"position":[[462,2]]},"295":{"position":[[99,2]]},"306":{"position":[[110,1],[134,2]]},"308":{"position":[[45,2]]},"314":{"position":[[64,2]]},"316":{"position":[[59,2],[107,2],[154,2],[197,2],[271,2],[429,2]]},"318":{"position":[[61,2],[120,2],[141,2],[162,2],[368,2],[412,2],[591,1]]},"320":{"position":[[194,3],[240,1],[286,2]]},"322":{"position":[[65,2],[142,2],[163,2],[444,2],[496,2],[534,4],[789,1],[1031,2],[1070,3]]},"324":{"position":[[223,2],[264,3],[339,2]]},"326":{"position":[[65,2],[112,2],[331,2]]},"328":{"position":[[60,2],[107,2],[205,2]]},"330":{"position":[[68,2],[115,2],[199,2]]},"332":{"position":[[50,2],[108,2]]},"334":{"position":[[54,2],[229,2],[244,2],[426,2],[447,2],[466,5]]},"336":{"position":[[179,2],[194,2],[376,2],[397,2],[416,5],[469,2]]},"338":{"position":[[57,2],[104,2]]},"340":{"position":[[62,2]]},"342":{"position":[[66,2]]},"345":{"position":[[118,2]]},"347":{"position":[[45,2]]},"349":{"position":[[282,3]]},"351":{"position":[[69,2],[90,2],[137,2],[354,2],[572,2],[593,2]]},"353":{"position":[[53,2],[240,2],[458,2],[479,2]]},"355":{"position":[[136,2],[154,2],[251,1],[275,2],[526,2],[563,2],[581,2]]},"357":{"position":[[53,2]]},"359":{"position":[[59,2]]},"361":{"position":[[62,2],[145,2]]},"363":{"position":[[80,2],[115,2],[213,2]]},"365":{"position":[[66,2],[140,2]]},"367":{"position":[[138,2]]},"369":{"position":[[66,2]]},"371":{"position":[[109,2],[156,2],[383,2]]},"373":{"position":[[59,2],[119,2],[140,2],[161,2],[369,2],[413,2],[598,1]]},"375":{"position":[[66,2],[87,2],[318,2],[370,2],[660,1],[714,2],[774,2],[795,2],[1019,2],[1071,2],[1361,1]]},"377":{"position":[[59,2]]},"379":{"position":[[81,2],[125,2],[165,2],[208,2],[384,2]]},"381":{"position":[[119,2],[154,2],[326,2],[387,2]]},"383":{"position":[[59,2],[203,2]]},"385":{"position":[[92,2],[136,2],[339,2]]},"387":{"position":[[57,2]]},"389":{"position":[[67,2],[102,2],[215,2]]},"391":{"position":[[54,2]]},"393":{"position":[[58,2],[265,2],[349,2],[414,2],[633,2]]},"395":{"position":[[53,2]]},"397":{"position":[[114,2],[331,2],[355,2]]},"399":{"position":[[115,1],[136,2]]},"401":{"position":[[82,2],[117,2],[296,2]]},"403":{"position":[[92,2],[127,2]]},"405":{"position":[[52,2],[249,2],[430,2]]},"407":{"position":[[204,2],[402,2],[474,2]]},"409":{"position":[[74,2],[144,1]]},"413":{"position":[[199,2],[404,2],[476,2]]}}}],["1)/2",{"_index":627,"t":{"141":{"position":[[223,4]]},"235":{"position":[[75,4]]}}}],["1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r",{"_index":844,"t":{"191":{"position":[[548,33]]}}}],["1)^",{"_index":436,"t":{"65":{"position":[[21,4]]},"69":{"position":[[133,4]]}}}],["1)return",{"_index":603,"t":{"139":{"position":[[276,8],[409,8],[544,8]]}}}],["1)}{2",{"_index":779,"t":{"186":{"position":[[551,6]]}}}],["1)}{2}2n(n−1)​，故时间复杂度为o(n2)o(n^2)o(n2",{"_index":772,"t":{"184":{"position":[[532,38]]}}}],["1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为o(n2)o(n^2)o(n2",{"_index":732,"t":{"178":{"position":[[416,73]]}}}],["1)红叔叔（2",{"_index":551,"t":{"95":{"position":[[38,57]]}}}],["1)设计主存地址格式和cach",{"_index":1159,"t":{"286":{"position":[[1648,31]]}}}],["1+8+23组合。ieee754标准表示成浮点数真值为：(−1)s∗1.m∗2e−127",{"_index":448,"t":{"69":{"position":[[87,45]]}}}],["1,2,5",{"_index":1067,"t":{"255":{"position":[[585,7]]}}}],["1,2,5,6",{"_index":1068,"t":{"255":{"position":[[593,9]]}}}],["1,2,5,6,3",{"_index":1069,"t":{"255":{"position":[[603,11]]}}}],["1,2,5,6,3,4",{"_index":1070,"t":{"255":{"position":[[615,13]]}}}],["1,2,5,6,3,4,7",{"_index":1071,"t":{"255":{"position":[[629,15]]}}}],["1,2,5,6,3,4,7,0",{"_index":1072,"t":{"255":{"position":[[645,17]]}}}],["1,high",{"_index":754,"t":{"180":{"position":[[896,8]]}}}],["1,j",{"_index":460,"t":{"73":{"position":[[185,3]]}}}],["1,k",{"_index":520,"t":{"81":{"position":[[84,3]]},"83":{"position":[[388,3]]}}}],["1.000",{"_index":391,"t":{"30":{"position":[[92,55]]}}}],["1.1",{"_index":859,"t":{"206":{"position":[[0,3]]}}}],["1.1xxxxx",{"_index":440,"t":{"67":{"position":[[12,11]]}}}],["1.2",{"_index":861,"t":{"206":{"position":[[111,3]]}}}],["1.3",{"_index":864,"t":{"206":{"position":[[325,3]]}}}],["1.m*2^{e",{"_index":449,"t":{"69":{"position":[[138,9]]}}}],["1.已知树高求结点总数：sum",{"_index":578,"t":{"131":{"position":[[129,15]]}}}],["1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{align",{"_index":577,"t":{"131":{"position":[[45,81]]}}}],["1.若i为偶数则双亲为\\frac{i}{2",{"_index":777,"t":{"186":{"position":[[499,26]]}}}],["1.若i为偶数则双亲为i/2",{"_index":625,"t":{"141":{"position":[[185,18]]}}}],["1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":624,"t":{"141":{"position":[[95,87]]}}}],["1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":776,"t":{"186":{"position":[[411,85]]}}}],["1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m",{"_index":647,"t":{"157":{"position":[[0,32]]}}}],["1.，所以尾数的精度是24，能表示24",{"_index":444,"t":{"69":{"position":[[22,35]]}}}],["10",{"_index":294,"t":{"16":{"position":[[543,4],[713,4],[939,2]]},"51":{"position":[[191,5]]},"316":{"position":[[127,2]]},"318":{"position":[[546,5],[616,4]]},"326":{"position":[[85,2]]},"328":{"position":[[80,2]]},"330":{"position":[[88,2]]},"338":{"position":[[77,2],[209,3]]},"351":{"position":[[110,2]]},"363":{"position":[[95,3]]},"371":{"position":[[129,2]]},"373":{"position":[[551,5],[623,4]]},"381":{"position":[[134,3],[366,5]]},"385":{"position":[[272,3]]},"389":{"position":[[82,3]]},"397":{"position":[[87,3]]},"401":{"position":[[97,3]]},"403":{"position":[[107,3]]}}}],["100",{"_index":83,"t":{"4":{"position":[[1453,3]]},"16":{"position":[[998,4]]},"351":{"position":[[207,4]]},"353":{"position":[[93,4]]}}}],["1011",{"_index":314,"t":{"16":{"position":[[917,4]]}}}],["1024;}http",{"_index":921,"t":{"225":{"position":[[196,10]]}}}],["1025",{"_index":1369,"t":{"349":{"position":[[95,5]]}}}],["10610^6106",{"_index":1107,"t":{"270":{"position":[[366,29]]}}}],["109",{"_index":250,"t":{"14":{"position":[[1016,3]]},"355":{"position":[[315,4]]}}}],["10:08:03",{"_index":1478,"t":{"413":{"position":[[376,10]]}}}],["11",{"_index":15,"t":{"4":{"position":[[85,2]]},"16":{"position":[[1009,4]]},"18":{"position":[[23,2]]},"51":{"position":[[182,2]]},"338":{"position":[[286,2]]},"407":{"position":[[261,5]]}}}],["111",{"_index":1326,"t":{"330":{"position":[[242,6]]}}}],["11:28:52",{"_index":1466,"t":{"407":{"position":[[374,10]]}}}],["11:37:49",{"_index":1446,"t":{"397":{"position":[[391,9]]}}}],["11:45:57",{"_index":1421,"t":{"381":{"position":[[295,10]]}}}],["11:49:11",{"_index":1438,"t":{"393":{"position":[[211,10],[579,10]]}}}],["11:49:31",{"_index":1409,"t":{"371":{"position":[[329,10]]}}}],["11:50:24",{"_index":1430,"t":{"389":{"position":[[285,10]]}}}],["12",{"_index":182,"t":{"12":{"position":[[23,2]]},"16":{"position":[[1014,4]]},"330":{"position":[[268,3]]},"391":{"position":[[119,3],[278,2]]},"393":{"position":[[318,2],[686,2]]}}}],["123456",{"_index":1231,"t":{"306":{"position":[[82,9]]},"355":{"position":[[86,9]]}}}],["127}(−1)s∗1.m∗2e−127",{"_index":450,"t":{"69":{"position":[[148,20]]}}}],["129",{"_index":1309,"t":{"326":{"position":[[302,4]]}}}],["13",{"_index":1061,"t":{"255":{"position":[[433,2],[442,2],[451,2],[460,2]]},"361":{"position":[[104,3]]},"363":{"position":[[179,3]]},"365":{"position":[[106,3]]},"367":{"position":[[53,3]]},"371":{"position":[[220,3],[436,2]]},"373":{"position":[[99,3],[319,3]]},"375":{"position":[[46,3],[270,3],[754,3],[971,3]]},"379":{"position":[[229,3]]},"381":{"position":[[218,3]]},"385":{"position":[[44,3]]},"389":{"position":[[166,3]]},"391":{"position":[[94,3]]},"393":{"position":[[40,3],[102,3],[389,3],[470,3]]},"397":{"position":[[179,3]]},"401":{"position":[[181,3]]},"403":{"position":[[192,3]]},"405":{"position":[[92,3]]},"407":{"position":[[42,3]]},"413":{"position":[[42,3]]}}}],["13:34:49",{"_index":1269,"t":{"316":{"position":[[326,10]]}}}],["13–16",{"_index":353,"t":{"16":{"position":[[1784,8]]}}}],["14",{"_index":1065,"t":{"255":{"position":[[559,2]]},"320":{"position":[[86,3]]},"322":{"position":[[876,3]]},"324":{"position":[[74,3]]},"401":{"position":[[400,3]]}}}],["14:03:02",{"_index":1450,"t":{"401":{"position":[[211,10]]}}}],["14:36:26",{"_index":1417,"t":{"379":{"position":[[330,10]]}}}],["158",{"_index":1258,"t":{"316":{"position":[[82,4],[380,4]]}}}],["158800882",{"_index":1347,"t":{"334":{"position":[[301,12]]},"336":{"position":[[251,12]]}}}],["15:02:50",{"_index":1434,"t":{"391":{"position":[[281,10]]}}}],["15的子节点，然后进入9的子节点，对比了6",{"_index":569,"t":{"112":{"position":[[124,39]]}}}],["16",{"_index":1303,"t":{"324":{"position":[[371,4]]},"401":{"position":[[242,5]]}}}],["16.x",{"_index":962,"t":{"227":{"position":[[200,4],[253,6]]}}}],["1624538837259",{"_index":1397,"t":{"355":{"position":[[627,14],[694,14]]}}}],["16:07:11",{"_index":1319,"t":{"328":{"position":[[239,10]]}}}],["16:32:40",{"_index":1359,"t":{"338":{"position":[[289,10]]}}}],["17",{"_index":1465,"t":{"407":{"position":[[371,2]]}}}],["17002",{"_index":1316,"t":{"328":{"position":[[150,6]]}}}],["17:04:31",{"_index":1351,"t":{"334":{"position":[[405,10]]},"336":{"position":[[355,10]]}}}],["17:12:50",{"_index":1334,"t":{"332":{"position":[[244,9]]}}}],["17:56:38",{"_index":1307,"t":{"326":{"position":[[218,10]]}}}],["18",{"_index":1254,"t":{"314":{"position":[[106,5]]},"322":{"position":[[816,4]]},"334":{"position":[[212,3]]},"336":{"position":[[162,3]]},"375":{"position":[[685,4],[1386,4]]},"401":{"position":[[377,5]]}}}],["180",{"_index":1408,"t":{"371":{"position":[[291,4]]},"393":{"position":[[173,4],[541,4]]}}}],["181",{"_index":1249,"t":{"312":{"position":[[131,4]]}}}],["1812",{"_index":1330,"t":{"332":{"position":[[92,5]]}}}],["1845",{"_index":1314,"t":{"326":{"position":[[514,6]]}}}],["18:55:02",{"_index":1349,"t":{"334":{"position":[[368,10]]},"336":{"position":[[318,10]]}}}],["18:56:07",{"_index":1462,"t":{"405":{"position":[[281,10]]},"407":{"position":[[236,10]]},"413":{"position":[[231,10]]}}}],["18:56:21",{"_index":1463,"t":{"405":{"position":[[377,10]]},"407":{"position":[[330,10]]},"413":{"position":[[332,10]]}}}],["19665",{"_index":1473,"t":{"411":{"position":[[170,6]]}}}],["1;a[0",{"_index":673,"t":{"170":{"position":[[565,6]]}}}],["1;high",{"_index":683,"t":{"172":{"position":[[419,6]]}}}],["1;i",{"_index":721,"t":{"178":{"position":[[157,7]]},"184":{"position":[[317,7]]}}}],["1;j",{"_index":529,"t":{"81":{"position":[[296,3]]},"172":{"position":[[545,3],[559,3]]}}}],["1;j>i;j",{"_index":722,"t":{"178":{"position":[[179,7]]}}}],["1]+1",{"_index":507,"t":{"79":{"position":[[1774,4]]}}}],["1]ch[0...k−1]=ch[j−k...j−1",{"_index":481,"t":{"77":{"position":[[424,27]]}}}],["1]ch[0∼k−1]=ch[j−k∼j−1",{"_index":491,"t":{"79":{"position":[[651,23]]}}}],["1]中寻找最小的元素a[k",{"_index":761,"t":{"184":{"position":[[213,14]]}}}],["1]和l[k+1...n]，其中l[k]为pivot，使得左边表的值都小于pivot",{"_index":734,"t":{"180":{"position":[[76,80]]}}}],["1]，所以删除后节点的关键字个数不能小于（m/2",{"_index":558,"t":{"107":{"position":[[31,29]]}}}],["1mb，高速缓存cache容量为16kb，块的大小为512",{"_index":1138,"t":{"286":{"position":[[411,50]]}}}],["1n−1",{"_index":1050,"t":{"251":{"position":[[122,14]]},"253":{"position":[[87,8]]},"255":{"position":[[210,29]]}}}],["1}(n",{"_index":730,"t":{"178":{"position":[[396,4]]}}}],["1},k_j^{d",{"_index":836,"t":{"191":{"position":[[399,9]]}}}],["1}.......q_0qr​,qr−1​.......q0",{"_index":847,"t":{"191":{"position":[[695,31]]}}}],["1}{4*5",{"_index":1183,"t":{"291":{"position":[[332,7]]}}}],["1}{n}h′=nh+n−1",{"_index":1177,"t":{"291":{"position":[[115,15]]}}}],["1~n",{"_index":583,"t":{"133":{"position":[[0,71]]}}}],["1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3",{"_index":584,"t":{"133":{"position":[[72,84]]}}}],["1–3",{"_index":265,"t":{"16":{"position":[[105,6]]}}}],["1→2",{"_index":1059,"t":{"255":{"position":[[367,3]]}}}],["1→2→4",{"_index":1062,"t":{"255":{"position":[[436,5],[445,5],[454,5],[463,5]]}}}],["1→2→4→7",{"_index":1066,"t":{"255":{"position":[[562,7]]}}}],["1→5",{"_index":1063,"t":{"255":{"position":[[481,3],[487,3]]}}}],["1→5→3",{"_index":1060,"t":{"255":{"position":[[403,5],[411,5]]}}}],["1→6",{"_index":1064,"t":{"255":{"position":[[515,3],[521,3],[527,3]]}}}],["1−(2n−1)≤x≤2n−1",{"_index":401,"t":{"32":{"position":[[162,16]]}}}],["1−2n≤x≤2n−1",{"_index":407,"t":{"34":{"position":[[212,11]]}}}],["1−2−n)≤x≤1−2−n",{"_index":393,"t":{"32":{"position":[[43,24]]}}}],["1∣e∣=∣v∣−1",{"_index":1047,"t":{"249":{"position":[[109,10]]}}}],["1≤x≤1−2−n",{"_index":404,"t":{"34":{"position":[[126,17]]}}}],["1、非空二叉树的叶结点等于度为2的结点数加1，即n0",{"_index":619,"t":{"141":{"position":[[0,27]]}}}],["1个字符串有关。我们看前部分字符串，发现共同前后缀是ab，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是c这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是abc？长度为2，那么next[j+1]就是在next[j]的基础上加1",{"_index":503,"t":{"79":{"position":[[1345,231]]}}}],["1中找到适合l[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i",{"_index":661,"t":{"170":{"position":[[104,108]]}}}],["1变为0",{"_index":563,"t":{"107":{"position":[[383,36]]}}}],["1右0",{"_index":1117,"t":{"278":{"position":[[19,4]]}}}],["1和2",{"_index":795,"t":{"186":{"position":[[1312,5]]},"260":{"position":[[98,33]]}}}],["1开始的，如果是0",{"_index":615,"t":{"139":{"position":[[618,36]]}}}],["1次递归调用，所以栈为o(n)n−1次递归调用，所以栈为o(n)，平均是o(log2n)o(log_{2}n)o(log2​n",{"_index":756,"t":{"180":{"position":[[1016,64]]}}}],["1躺排序，第i躺排序要进行n",{"_index":728,"t":{"178":{"position":[[336,14]]}}}],["1躺，一共移动3(n",{"_index":770,"t":{"184":{"position":[[478,10]]}}}],["1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i",{"_index":660,"t":{"170":{"position":[[60,43]]}}}],["1（从右到左找到第一个1，前面的数取反即可）。如果是从x",{"_index":403,"t":{"34":{"position":[[0,88]]}}}],["1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k",{"_index":1077,"t":{"262":{"position":[[13,34]]}}}],["1，m",{"_index":557,"t":{"105":{"position":[[27,3]]},"107":{"position":[[27,3]]}}}],["1，且其左（右）兄弟的关键字数目大于（m/2",{"_index":559,"t":{"107":{"position":[[143,77]]}}}],["1，二叉树的非终端结点数为：n",{"_index":648,"t":{"157":{"position":[[40,112]]}}}],["1，余数左移减去除数；异号商0",{"_index":433,"t":{"62":{"position":[[66,39]]}}}],["1，则加上被乘数，为0则加0",{"_index":421,"t":{"54":{"position":[[50,20]]}}}],["1，无则为0，表示不冲突。例如f={1,3,4,8}则设计就是10001101",{"_index":1215,"t":{"299":{"position":[[54,59]]}}}],["1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0",{"_index":485,"t":{"79":{"position":[[401,62]]}}}],["1，然后对应的用gig_igi​的mips除以标准的mip",{"_index":1116,"t":{"274":{"position":[[39,61]]}}}],["1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0",{"_index":514,"t":{"79":{"position":[[2506,38]]}}}],["1；阶码：8；尾数：23",{"_index":443,"t":{"69":{"position":[[5,16]]}}}],["2",{"_index":2,"t":{"2":{"position":[[13,1]]},"4":{"position":[[1801,5]]},"8":{"position":[[2078,5]]},"32":{"position":[[71,1],[91,3]]},"34":{"position":[[158,3]]},"51":{"position":[[144,6]]},"73":{"position":[[294,2]]},"79":{"position":[[533,11]]},"95":{"position":[[147,6]]},"126":{"position":[[63,5]]},"150":{"position":[[181,7]]},"157":{"position":[[166,38]]},"170":{"position":[[622,9]]},"172":{"position":[[474,2],[609,7]]},"174":{"position":[[769,11]]},"178":{"position":[[274,11]]},"180":{"position":[[157,4]]},"184":{"position":[[424,9]]},"186":{"position":[[105,7]]},"191":{"position":[[297,6]]},"193":{"position":[[588,4]]},"195":{"position":[[5,4]]},"208":{"position":[[0,5]]},"245":{"position":[[90,11],[156,6]]},"255":{"position":[[313,1],[363,1],[582,2]]},"280":{"position":[[0,3]]},"286":{"position":[[754,6],[2004,1]]},"288":{"position":[[168,7],[434,7]]},"312":{"position":[[223,1]]},"316":{"position":[[358,2]]},"320":{"position":[[318,3]]},"322":{"position":[[580,3],[606,4],[640,3],[894,4]]},"324":{"position":[[92,4]]},"326":{"position":[[481,2]]},"330":{"position":[[442,4],[628,2],[701,3]]},"359":{"position":[[91,2]]},"363":{"position":[[158,2]]},"367":{"position":[[87,2]]},"371":{"position":[[361,2]]},"375":{"position":[[297,2],[998,2]]},"379":{"position":[[274,2],[362,2]]},"381":{"position":[[348,2]]},"389":{"position":[[145,2]]},"391":{"position":[[313,2]]},"393":{"position":[[243,2],[611,2]]},"401":{"position":[[451,4],[475,2]]},"403":{"position":[[213,2]]}}}],["2)假设cache起始内容为空，cpu从主存单元0，1，2，……，2063依次读出2064个字，并重复此读数序列共10次。若cache速度为主存速度的10倍，且采用lru算法，问利用cach",{"_index":1160,"t":{"286":{"position":[[1680,107]]}}}],["2*log_{2}{(n+1)}h≤2∗log2​(n+1",{"_index":550,"t":{"93":{"position":[[242,30]]}}}],["2.3",{"_index":46,"t":{"4":{"position":[[484,4],[860,159],[1361,3]]}}}],["2.3处观察一个大质量星系周围的气体，并探测到中性氢，氦和电离碳的发射线，这些发射线从星系延伸100",{"_index":95,"t":{"4":{"position":[[1862,76]]}}}],["2.写出cach",{"_index":1154,"t":{"286":{"position":[[1373,19]]}}}],["2.已知编号i求双亲：(i/2",{"_index":580,"t":{"131":{"position":[[157,22]]}}}],["2.若i为奇数则双亲为(i",{"_index":626,"t":{"141":{"position":[[209,13]]}}}],["2.若i为奇数则双亲为\\frac{(i",{"_index":778,"t":{"186":{"position":[[531,19]]}}}],["2/7则是扩展2位，然后扩展后数目是7",{"_index":1121,"t":{"280":{"position":[[174,21]]}}}],["20",{"_index":1266,"t":{"316":{"position":[[289,3]]},"322":{"position":[[233,3]]},"373":{"position":[[209,3]]},"375":{"position":[[157,3],[865,3]]}}}],["2019",{"_index":1345,"t":{"334":{"position":[[264,5],[356,5]]},"336":{"position":[[214,5],[306,5]]},"405":{"position":[[269,5],[365,5]]},"407":{"position":[[224,5],[318,5]]},"413":{"position":[[320,5]]}}}],["2020",{"_index":1445,"t":{"397":{"position":[[379,5]]}}}],["2021",{"_index":1245,"t":{"312":{"position":[[75,5]]},"316":{"position":[[314,5]]},"322":{"position":[[272,5],[295,5]]},"326":{"position":[[206,5]]},"328":{"position":[[227,5]]},"332":{"position":[[232,5]]},"334":{"position":[[393,5]]},"336":{"position":[[343,5]]},"338":{"position":[[277,5]]},"351":{"position":[[442,5],[488,5],[532,5]]},"353":{"position":[[328,5],[374,5],[418,5]]},"371":{"position":[[317,5]]},"379":{"position":[[318,5]]},"381":{"position":[[283,5]]},"389":{"position":[[273,5]]},"391":{"position":[[269,5]]},"393":{"position":[[199,5],[567,5]]},"401":{"position":[[199,5]]},"403":{"position":[[330,5]]},"407":{"position":[[362,5]]},"413":{"position":[[219,5],[364,5]]}}}],["2023",{"_index":3,"t":{"2":{"position":[[15,4]]},"6":{"position":[[15,4]]},"10":{"position":[[15,4]]},"12":{"position":[[15,4]]},"18":{"position":[[15,4]]},"23":{"position":[[15,4]]},"25":{"position":[[15,4]]}}}],["20:01:26",{"_index":1386,"t":{"351":{"position":[[454,10],[500,10]]},"353":{"position":[[340,10],[386,10]]}}}],["20:01:35",{"_index":1387,"t":{"351":{"position":[[544,10]]},"353":{"position":[[430,10]]}}}],["20:05:02",{"_index":1454,"t":{"403":{"position":[[342,9]]}}}],["21",{"_index":1167,"t":{"286":{"position":[[1949,10],[1992,9]]},"351":{"position":[[451,2],[497,2],[541,2]]},"353":{"position":[[337,2],[383,2],[427,2]]},"371":{"position":[[326,2]]},"381":{"position":[[292,2]]},"389":{"position":[[282,2]]},"393":{"position":[[208,2],[576,2]]}}}],["2112112",{"_index":1477,"t":{"413":{"position":[[258,10]]}}}],["22",{"_index":1277,"t":{"318":{"position":[[209,3]]},"322":{"position":[[281,2]]},"349":{"position":[[252,2]]},"397":{"position":[[388,2]]}}}],["23945",{"_index":1373,"t":{"349":{"position":[[160,6]]}}}],["2399",{"_index":1238,"t":{"310":{"position":[[80,5]]}}}],["24",{"_index":1453,"t":{"403":{"position":[[339,2]]}}}],["2413",{"_index":1368,"t":{"349":{"position":[[65,5]]}}}],["24928",{"_index":1317,"t":{"328":{"position":[[175,6]]}}}],["25",{"_index":1246,"t":{"312":{"position":[[84,6]]}}}],["25067",{"_index":1328,"t":{"330":{"position":[[534,6]]}}}],["2520",{"_index":1263,"t":{"316":{"position":[[218,5]]}}}],["258块，但是cache只有256块，所以装入的时候会有替换，一开始0~255块可以装入。但是256和257就要进行替换，采用lru，因为前256刚刚装满，所以会从第0块cache开始装入替换，也就是如下图的0、1、2、3、256、257",{"_index":1169,"t":{"286":{"position":[[2029,135]]}}}],["26",{"_index":1418,"t":{"379":{"position":[[437,2]]}}}],["27",{"_index":705,"t":{"174":{"position":[[634,2]]}}}],["275",{"_index":1433,"t":{"391":{"position":[[243,4]]}}}],["2897",{"_index":1435,"t":{"391":{"position":[[389,5]]}}}],["2;i",{"_index":667,"t":{"170":{"position":[[506,3]]},"172":{"position":[[383,3]]}}}],["2=6",{"_index":1165,"t":{"286":{"position":[[1881,13]]}}}],["2^5",{"_index":1143,"t":{"286":{"position":[[644,3],[699,3]]}}}],["2^h",{"_index":579,"t":{"131":{"position":[[147,3]]}}}],["2^n",{"_index":400,"t":{"32":{"position":[[157,3]]},"34":{"position":[[193,3],[207,3]]}}}],["2^{n",{"_index":399,"t":{"32":{"position":[[137,6]]}}}],["2e",{"_index":987,"t":{"235":{"position":[[98,2]]}}}],["2n2^n2n，相当于x",{"_index":409,"t":{"38":{"position":[[0,75]]}}}],["2n−1)≤x≤2n−1",{"_index":398,"t":{"32":{"position":[[115,21]]}}}],["2n≤x≤2n−1",{"_index":406,"t":{"34":{"position":[[175,17]]}}}],["2x",{"_index":610,"t":{"139":{"position":[[435,2],[569,3]]}}}],["2},k_j^{d",{"_index":837,"t":{"191":{"position":[[409,9]]}}}],["2、二叉树第k层上最多有2k",{"_index":621,"t":{"141":{"position":[[35,14]]}}}],["2位，剩下的11",{"_index":1164,"t":{"286":{"position":[[1866,12]]}}}],["2的，要求小数点后一位不全为0，也就是要为1",{"_index":441,"t":{"67":{"position":[[24,27]]}}}],["2路归并，基于分治思想，将n个元素分解成n/2",{"_index":824,"t":{"189":{"position":[[682,49]]}}}],["2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k",{"_index":1082,"t":{"262":{"position":[[240,34]]}}}],["2，o",{"_index":484,"t":{"79":{"position":[[388,12]]}}}],["2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m",{"_index":562,"t":{"107":{"position":[[284,36]]}}}],["2，知道增量变成1",{"_index":691,"t":{"174":{"position":[[193,13]]}}}],["3",{"_index":179,"t":{"10":{"position":[[13,1]]},"51":{"position":[[197,7]]},"56":{"position":[[147,15]]},"126":{"position":[[155,10]]},"150":{"position":[[360,9]]},"170":{"position":[[759,7]]},"172":{"position":[[672,5]]},"180":{"position":[[444,4],[914,11]]},"186":{"position":[[171,10]]},"189":{"position":[[276,6]]},"191":{"position":[[823,11]]},"195":{"position":[[10,6]]},"255":{"position":[[319,1],[395,1]]},"286":{"position":[[862,6],[1848,8],[1879,1]]},"288":{"position":[[235,7]]},"318":{"position":[[570,2]]},"326":{"position":[[385,4]]},"330":{"position":[[465,2]]},"373":{"position":[[577,2]]},"375":{"position":[[639,2],[1340,2]]},"381":{"position":[[488,2]]},"385":{"position":[[296,2]]},"405":{"position":[[234,2]]},"407":{"position":[[189,2]]},"413":{"position":[[184,2]]}}}],["3.2i",{"_index":628,"t":{"141":{"position":[[233,4]]},"186":{"position":[[563,4]]}}}],["3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":581,"t":{"131":{"position":[[182,28]]}}}],["3/3/3指的是每次扩展后的数目是3",{"_index":1120,"t":{"280":{"position":[[138,35]]}}}],["30",{"_index":1461,"t":{"405":{"position":[[217,3]]},"407":{"position":[[172,3]]},"413":{"position":[[167,3]]}}}],["31",{"_index":1268,"t":{"316":{"position":[[323,2]]},"413":{"position":[[373,2]]}}}],["321dec89",{"_index":1392,"t":{"355":{"position":[[332,9]]}}}],["32块(解释：将主存分为若干区，每区容量与cache总容量相等。每区块数与cache的块数相同，这样，每区中第i块映射的位置就是cache的第i块)，共1mb/16kb=64",{"_index":1140,"t":{"286":{"position":[[517,94]]}}}],["32块）+9位块内地址（块容量2^9=512b",{"_index":1144,"t":{"286":{"position":[[648,31]]}}}],["32块），9内块内地址（块容量2^9=512b，按字节编址）,cach",{"_index":1146,"t":{"286":{"position":[[703,50]]}}}],["36",{"_index":1441,"t":{"397":{"position":[[157,3]]}}}],["38和27进行交换（因为27",{"_index":759,"t":{"184":{"position":[[159,19]]}}}],["3=10",{"_index":1168,"t":{"286":{"position":[[2006,5]]}}}],["3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0",{"_index":838,"t":{"191":{"position":[[419,50]]}}}],["3、高度为k的二叉树最多有2k",{"_index":622,"t":{"141":{"position":[[56,15]]}}}],["3后，整体带上acc",{"_index":422,"t":{"54":{"position":[[71,25]]}}}],["3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n",{"_index":427,"t":{"56":{"position":[[163,42]]}}}],["3）活动aia_iai​的最早开始事件e(i)e(i)e(i",{"_index":1087,"t":{"262":{"position":[[460,31]]}}}],["3，9，15",{"_index":567,"t":{"110":{"position":[[178,45]]}}}],["3，执行n−1n",{"_index":1057,"t":{"255":{"position":[[198,11]]}}}],["4",{"_index":275,"t":{"16":{"position":[[240,3]]},"25":{"position":[[13,1]]},"58":{"position":[[77,14]]},"126":{"position":[[187,8]]},"186":{"position":[[384,7]]},"191":{"position":[[941,4]]},"195":{"position":[[17,3]]},"255":{"position":[[325,1],[365,1],[429,1]]},"286":{"position":[[1857,8]]},"320":{"position":[[128,2],[260,1]]},"322":{"position":[[184,2],[421,2],[741,4],[766,2],[960,2],[1113,3]]},"324":{"position":[[152,2],[280,4],[307,3]]},"326":{"position":[[407,2]]},"383":{"position":[[148,2]]},"397":{"position":[[72,2]]},"401":{"position":[[160,2],[352,2],[426,2]]}}}],["4*5",{"_index":1182,"t":{"291":{"position":[[327,3]]}}}],["4.1",{"_index":871,"t":{"212":{"position":[[0,3]]}}}],["4.2",{"_index":872,"t":{"212":{"position":[[58,3]]}}}],["4.2.1",{"_index":873,"t":{"212":{"position":[[93,5]]}}}],["4.2.2",{"_index":874,"t":{"212":{"position":[[141,5]]}}}],["4.2i+1",{"_index":630,"t":{"141":{"position":[[259,6]]},"186":{"position":[[589,6]]}}}],["4.55",{"_index":313,"t":{"16":{"position":[[909,5]]}}}],["4013",{"_index":1339,"t":{"334":{"position":[[124,4]]},"336":{"position":[[74,4]]}}}],["433c",{"_index":1382,"t":{"351":{"position":[[246,4]]},"353":{"position":[[132,4]]}}}],["455",{"_index":311,"t":{"16":{"position":[[900,3]]}}}],["46",{"_index":1325,"t":{"330":{"position":[[222,3]]},"391":{"position":[[335,3]]}}}],["4736",{"_index":1394,"t":{"355":{"position":[[347,4]]}}}],["49",{"_index":704,"t":{"174":{"position":[[626,7],[741,2]]}}}],["49，这次变成了27",{"_index":710,"t":{"174":{"position":[[730,10]]}}}],["4ccc",{"_index":1458,"t":{"405":{"position":[[123,4]]},"407":{"position":[[80,4]]},"413":{"position":[[73,4]]}}}],["4、对于结点i(i>1",{"_index":623,"t":{"141":{"position":[[78,16]]}}}],["4个存储块。主存包含4096个存储块，每块由128",{"_index":1153,"t":{"286":{"position":[[1314,42]]}}}],["4操作n次，最后一步恒置1，“末位恒置1",{"_index":434,"t":{"62":{"position":[[106,23]]}}}],["4的，要求小数点后两位不全为0",{"_index":442,"t":{"67":{"position":[[52,20]]}}}],["4编码，那就是初始2位，每次扩展多两位，扩展后出来的数目是4",{"_index":1118,"t":{"280":{"position":[[4,32]]}}}],["4）n",{"_index":823,"t":{"189":{"position":[[673,8]]}}}],["4）活动aia_iai​的最迟开始事件l(i)l(i)l(i",{"_index":1089,"t":{"262":{"position":[[538,31]]}}}],["5",{"_index":276,"t":{"16":{"position":[[244,3]]},"18":{"position":[[13,1]]},"141":{"position":[[375,5]]},"186":{"position":[[1259,5]]},"189":{"position":[[885,11]]},"255":{"position":[[331,1],[477,1],[479,1],[485,1],[513,1],[519,1],[525,1]]},"318":{"position":[[347,2]]},"338":{"position":[[147,2]]},"371":{"position":[[272,2]]},"373":{"position":[[346,2]]},"379":{"position":[[145,1]]},"381":{"position":[[238,2]]},"383":{"position":[[127,2],[318,4],[343,2]]},"385":{"position":[[71,2]]},"391":{"position":[[224,2]]},"393":{"position":[[154,2],[522,2]]},"401":{"position":[[323,2]]}}}],["507",{"_index":1324,"t":{"330":{"position":[[171,4],[555,4]]}}}],["508",{"_index":1424,"t":{"383":{"position":[[99,4]]}}}],["52045f5f",{"_index":1456,"t":{"405":{"position":[[108,9]]},"407":{"position":[[65,9]]},"413":{"position":[[58,9]]}}}],["520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999",{"_index":834,"t":{"191":{"position":[[117,96]]}}}],["53",{"_index":775,"t":{"186":{"position":[[364,19]]}}}],["53下坠到原87",{"_index":774,"t":{"186":{"position":[[334,29]]}}}],["53＜87",{"_index":773,"t":{"186":{"position":[[299,34]]}}}],["579",{"_index":1252,"t":{"312":{"position":[[201,4]]}}}],["592",{"_index":1432,"t":{"391":{"position":[[174,4]]}}}],["5–8",{"_index":289,"t":{"16":{"position":[[505,5]]}}}],["5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8",{"_index":680,"t":{"172":{"position":[[105,174]]}}}],["6",{"_index":181,"t":{"12":{"position":[[13,1]]},"186":{"position":[[1438,11]]},"255":{"position":[[337,1],[511,1]]},"286":{"position":[[2002,1]]},"371":{"position":[[404,2]]},"375":{"position":[[108,2],[816,2]]},"379":{"position":[[102,2],[405,2]]},"391":{"position":[[357,2]]},"393":{"position":[[286,2],[654,2]]}}}],["60",{"_index":1416,"t":{"379":{"position":[[293,3]]}}}],["6148",{"_index":1371,"t":{"349":{"position":[[128,5]]}}}],["6204",{"_index":1305,"t":{"326":{"position":[[155,5]]}}}],["64区）+5",{"_index":1142,"t":{"286":{"position":[[629,14]]}}}],["6534",{"_index":1306,"t":{"326":{"position":[[179,5]]}}}],["65是一组的，此时i=3，j=1",{"_index":707,"t":{"174":{"position":[[640,27]]}}}],["666",{"_index":1321,"t":{"328":{"position":[[297,5]]}}}],["68",{"_index":1452,"t":{"403":{"position":[[170,3]]}}}],["6位区号（共2^6",{"_index":1141,"t":{"286":{"position":[[612,16]]}}}],["7",{"_index":387,"t":{"23":{"position":[[13,1]]},"255":{"position":[[343,1],[401,1],[409,1],[547,1]]},"326":{"position":[[432,2]]},"381":{"position":[[197,2]]}}}],["7.0",{"_index":249,"t":{"14":{"position":[[1010,3]]}}}],["7.0∗1097.0*10^97.0∗109的高dna",{"_index":258,"t":{"14":{"position":[[1365,38]]}}}],["70",{"_index":564,"t":{"107":{"position":[[420,17]]}}}],["727626236f47",{"_index":1341,"t":{"334":{"position":[[134,14]]},"336":{"position":[[84,14]]}}}],["73处不满足，同时左兄弟不够借，则82",{"_index":565,"t":{"107":{"position":[[438,27]]}}}],["76",{"_index":706,"t":{"174":{"position":[[637,2]]}}}],["76，依次类推，当i为7",{"_index":711,"t":{"174":{"position":[[744,24]]}}}],["7个，那么就是先采用2两位编码，然后计算，如果继续采用2位的，则11位扩展的出来的4位则无法满足7，故2位的只用00和01，后面10和11",{"_index":1119,"t":{"280":{"position":[[44,93]]}}}],["8",{"_index":1163,"t":{"286":{"position":[[1838,9]]},"312":{"position":[[56,2]]},"318":{"position":[[101,2],[321,2]]},"322":{"position":[[123,2],[395,2],[856,2],[936,2]]},"324":{"position":[[54,2],[128,2]]},"334":{"position":[[94,2]]},"336":{"position":[[44,2]]},"338":{"position":[[168,2]]}}}],["8)和显著的半衰期(9",{"_index":296,"t":{"16":{"position":[[701,11]]}}}],["81",{"_index":1379,"t":{"351":{"position":[[180,3]]}}}],["85",{"_index":1375,"t":{"349":{"position":[[207,2]]}}}],["8dc4",{"_index":1383,"t":{"351":{"position":[[251,4]]},"353":{"position":[[137,4]]}}}],["8mb，cache容量为8kb，按4字块分组，每个字块的长度为8个字（32",{"_index":1158,"t":{"286":{"position":[[1584,63]]}}}],["8mb，即8mb/4b=2212^{21}221",{"_index":1166,"t":{"286":{"position":[[1916,32]]}}}],["8位区号（256区）+4位区内块号（16个存储块）+7位块内地址（一块128字，按字编址）cache地址为4位组号（16组）+2位组内块号（每组4快）+7位块内地址（一共128",{"_index":1157,"t":{"286":{"position":[[1459,105]]}}}],["8，发现8已经大于7",{"_index":570,"t":{"112":{"position":[[164,19]]}}}],["9",{"_index":293,"t":{"16":{"position":[[539,3]]},"112":{"position":[[95,28]]},"371":{"position":[[199,2]]}}}],["9016",{"_index":1273,"t":{"316":{"position":[[461,4]]}}}],["92",{"_index":560,"t":{"107":{"position":[[221,31]]}}}],["93dd",{"_index":1459,"t":{"405":{"position":[[128,4]]},"407":{"position":[[85,4]]},"413":{"position":[[78,4]]}}}],["a,c",{"_index":1413,"t":{"375":{"position":[[591,6],[1292,6]]}}}],["a,int",{"_index":714,"t":{"178":{"position":[[41,6]]}}}],["a13f",{"_index":1457,"t":{"405":{"position":[[118,4]]},"407":{"position":[[75,4]]},"413":{"position":[[68,4]]}}}],["a[0",{"_index":670,"t":{"170":{"position":[[540,4],[611,5]]},"172":{"position":[[400,4],[489,5],[600,5]]},"174":{"position":[[467,4],[554,5]]},"186":{"position":[[995,4],[1252,4]]}}}],["a[0]<a[j];j",{"_index":702,"t":{"174":{"position":[[506,11]]}}}],["a[0]当哨兵作为辅助，故空间复杂度上为o(1)o(1)o(1",{"_index":676,"t":{"170":{"position":[[632,39]]}}}],["a[],int",{"_index":664,"t":{"170":{"position":[[475,7]]},"172":{"position":[[339,7]]},"174":{"position":[[231,7]]},"178":{"position":[[104,7]]},"180":{"position":[[491,7],[747,7]]},"184":{"position":[[285,7]]},"186":{"position":[[865,7],[975,7],[1336,7]]},"189":{"position":[[348,7],[751,7]]}}}],["a[high",{"_index":687,"t":{"172":{"position":[[586,6]]},"180":{"position":[[615,8],[675,7]]}}}],["a[high]>=pivot",{"_index":746,"t":{"180":{"position":[[571,15]]}}}],["a[i",{"_index":671,"t":{"170":{"position":[[547,5],[769,27]]},"172":{"position":[[407,5]]},"174":{"position":[[445,3],[474,5]]},"178":{"position":[[201,5]]},"186":{"position":[[1182,5]]}}}],["a[i]<a[i+1",{"_index":793,"t":{"186":{"position":[[1102,12]]}}}],["a[i][j",{"_index":992,"t":{"240":{"position":[[214,10]]}}}],["a[i]，则从a[i.....n",{"_index":760,"t":{"184":{"position":[[192,20]]}}}],["a[j",{"_index":674,"t":{"170":{"position":[[574,5],[594,5]]},"172":{"position":[[567,3],[578,5]]},"174":{"position":[[537,5]]}}}],["a[j+1",{"_index":675,"t":{"170":{"position":[[585,6],[602,6]]}}}],["a[j+gap",{"_index":703,"t":{"174":{"position":[[526,8],[543,8]]}}}],["a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j",{"_index":679,"t":{"170":{"position":[[800,80]]}}}],["a[k",{"_index":789,"t":{"186":{"position":[[1002,5],[1175,4],[1245,4]]},"189":{"position":[[471,5],[560,4],[580,4],[623,6],[655,6]]}}}],["a[k]和a[i",{"_index":762,"t":{"184":{"position":[[228,11]]}}}],["a[low",{"_index":743,"t":{"180":{"position":[[526,7],[606,6],[685,7],[695,6]]}}}],["a[low]<=pivot",{"_index":747,"t":{"180":{"position":[[642,14]]}}}],["a_sb_",{"_index":415,"t":{"51":{"position":[[61,6]]}}}],["aba",{"_index":476,"t":{"77":{"position":[[268,24]]}}}],["absorb",{"_index":230,"t":{"14":{"position":[[631,9]]}}}],["abstract",{"_index":68,"t":{"4":{"position":[[1042,9]]},"8":{"position":[[534,9]]}}}],["abund",{"_index":87,"t":{"4":{"position":[[1581,9]]}}}],["access_log",{"_index":950,"t":{"225":{"position":[[733,10]]}}}],["accret",{"_index":22,"t":{"4":{"position":[[144,7],[1099,8]]}}}],["acc设置00.0000，mq中为乘数，乘数后添加一个辅助位（辅助位就是mq",{"_index":425,"t":{"56":{"position":[[66,44]]}}}],["acc里面设置为00.0000（00",{"_index":420,"t":{"54":{"position":[[23,26]]}}}],["achiev",{"_index":228,"t":{"14":{"position":[[610,8],[975,7]]}}}],["action",{"_index":981,"t":{"227":{"position":[[766,56]]}}}],["action@4.0.0",{"_index":973,"t":{"227":{"position":[[440,12]]}}}],["actions/checkout@v2",{"_index":960,"t":{"227":{"position":[[160,19]]}}}],["actions/setup",{"_index":963,"t":{"227":{"position":[[211,13]]}}}],["add",{"_index":886,"t":{"220":{"position":[[40,3],[63,3]]},"222":{"position":[[209,3]]}}}],["addit",{"_index":47,"t":{"4":{"position":[[492,8]]}}}],["admin",{"_index":1361,"t":{"338":{"position":[[323,7]]},"345":{"position":[[41,8],[194,8]]},"389":{"position":[[241,8]]},"397":{"position":[[261,8]]},"403":{"position":[[235,8],[287,6]]},"405":{"position":[[169,8]]},"407":{"position":[[124,8]]},"413":{"position":[[119,8]]}}}],["ae4c",{"_index":1395,"t":{"355":{"position":[[352,4]]}}}],["aerosol",{"_index":109,"t":{"8":{"position":[[174,8],[1344,8],[1567,8],[1990,8],[3025,8]]}}}],["affect",{"_index":125,"t":{"8":{"position":[[364,8],[1815,8]]}}}],["ag",{"_index":260,"t":{"16":{"position":[[31,4]]},"334":{"position":[[205,6]]},"336":{"position":[[155,6]]},"345":{"position":[[245,6]]},"351":{"position":[[328,6]]},"353":{"position":[[214,6]]},"355":{"position":[[162,6],[454,6]]},"405":{"position":[[210,6]]},"407":{"position":[[165,6]]},"413":{"position":[[160,6]]}}}],["ago",{"_index":18,"t":{"4":{"position":[[102,3]]}}}],["al",{"_index":44,"t":{"4":{"position":[[410,3]]},"8":{"position":[[251,3],[1702,3],[1903,2]]}}}],["alcohol",{"_index":351,"t":{"16":{"position":[[1692,8]]}}}],["algraph",{"_index":1010,"t":{"242":{"position":[[328,8],[337,20]]}}}],["allclass",{"_index":1436,"t":{"391":{"position":[[402,13]]}}}],["allow",{"_index":242,"t":{"14":{"position":[[869,6]]}}}],["alreadi",{"_index":88,"t":{"4":{"position":[[1618,7]]}}}],["alter",{"_index":134,"t":{"8":{"position":[[469,5],[1358,5],[2004,5],[3039,5]]}}}],["ana^nan的元素an[i][j]a^n[i][j]an[i][j]表示的是由顶点i到j长度为n",{"_index":1004,"t":{"240":{"position":[[761,66]]}}}],["analyz",{"_index":1284,"t":{"318":{"position":[[438,10]]},"322":{"position":[[649,10]]},"330":{"position":[[364,10]]},"373":{"position":[[441,10]]},"375":{"position":[[496,10],[1197,10]]},"383":{"position":[[229,10]]},"385":{"position":[[162,10]]}}}],["analyzetextcontentid",{"_index":1422,"t":{"381":{"position":[[440,23]]}}}],["anoth",{"_index":112,"t":{"8":{"position":[[212,7],[1605,7]]}}}],["answer",{"_index":1299,"t":{"322":{"position":[[831,9]]}}}],["answeritem",{"_index":1291,"t":{"320":{"position":[[95,14]]},"322":{"position":[[904,14]]},"324":{"position":[[103,14]]}}}],["aov",{"_index":1076,"t":{"260":{"position":[[185,89]]}}}],["aov网中选择一个没有前驱的节点(入度为0",{"_index":1075,"t":{"260":{"position":[[57,22]]}}}],["api/admin/dashboard/index",{"_index":1366,"t":{"349":{"position":[[0,31]]}}}],["api/admin/education/subject/delete/3",{"_index":1406,"t":{"369":{"position":[[0,42]]}}}],["api/admin/education/subject/edit",{"_index":1405,"t":{"367":{"position":[[0,38]]}}}],["api/admin/education/subject/list",{"_index":1401,"t":{"361":{"position":[[0,38]]}}}],["api/admin/education/subject/pag",{"_index":1403,"t":{"363":{"position":[[0,38]]}}}],["api/admin/education/subject/select/2",{"_index":1404,"t":{"365":{"position":[[0,42]]}}}],["api/admin/exam/paper/delete/9",{"_index":1414,"t":{"377":{"position":[[0,35]]}}}],["api/admin/exam/paper/edit",{"_index":1411,"t":{"375":{"position":[[0,31]]}}}],["api/admin/exam/paper/pag",{"_index":1407,"t":{"371":{"position":[[0,31]]}}}],["api/admin/exam/paper/select/9",{"_index":1410,"t":{"373":{"position":[[0,35]]}}}],["api/admin/exam/paper/taskexampag",{"_index":1415,"t":{"379":{"position":[[0,39]]}}}],["api/admin/exampaperanswer/pag",{"_index":1449,"t":{"401":{"position":[[0,36]]}}}],["api/admin/message/pag",{"_index":1440,"t":{"397":{"position":[[0,28]]}}}],["api/admin/message/send",{"_index":1447,"t":{"399":{"position":[[0,28]]}}}],["api/admin/question/delete/7",{"_index":1427,"t":{"387":{"position":[[0,33]]}}}],["api/admin/question/edit",{"_index":1426,"t":{"385":{"position":[[0,29]]}}}],["api/admin/question/pag",{"_index":1419,"t":{"381":{"position":[[0,29]]}}}],["api/admin/question/select/508",{"_index":1423,"t":{"383":{"position":[[0,35]]}}}],["api/admin/task/delete/1",{"_index":1439,"t":{"395":{"position":[[0,29]]}}}],["api/admin/task/edit",{"_index":1437,"t":{"393":{"position":[[0,25]]}}}],["api/admin/task/pag",{"_index":1428,"t":{"389":{"position":[[0,25]]}}}],["api/admin/task/select/22",{"_index":1431,"t":{"391":{"position":[[0,30]]}}}],["api/admin/upload/configandupload",{"_index":1469,"t":{"411":{"position":[[0,38]]}}}],["api/admin/user/changestatus/1",{"_index":1400,"t":{"359":{"position":[[0,35]]}}}],["api/admin/user/curr",{"_index":1455,"t":{"405":{"position":[[0,28]]}}}],["api/admin/user/delete/3",{"_index":1399,"t":{"357":{"position":[[0,29]]}}}],["api/admin/user/edit",{"_index":1389,"t":{"355":{"position":[[0,25]]}}}],["api/admin/user/event/page/list",{"_index":1451,"t":{"403":{"position":[[0,36]]}}}],["api/admin/user/page/list",{"_index":1378,"t":{"351":{"position":[[0,30]]}}}],["api/admin/user/select/1",{"_index":1388,"t":{"353":{"position":[[0,29]]}}}],["api/admin/user/selectbyusernam",{"_index":1467,"t":{"409":{"position":[[0,37]]}}}],["api/admin/user/upd",{"_index":1464,"t":{"407":{"position":[[0,27]]},"413":{"position":[[0,27]]}}}],["api/student/dashboard/index",{"_index":1235,"t":{"310":{"position":[[0,33]]}}}],["api/student/dashboard/task",{"_index":1243,"t":{"312":{"position":[[0,32]]}}}],["api/student/education/subject/list",{"_index":1253,"t":{"314":{"position":[[0,40]]}}}],["api/student/exam/paper/pagelist",{"_index":1255,"t":{"316":{"position":[[0,37]]}}}],["api/student/exam/paper/select/9",{"_index":1274,"t":{"318":{"position":[[0,37]]}}}],["api/student/exampaper/answer/answersubmit",{"_index":1288,"t":{"320":{"position":[[0,47]]}}}],["api/student/exampaper/answer/edit",{"_index":1302,"t":{"324":{"position":[[0,39]]}}}],["api/student/exampaper/answer/pagelist",{"_index":1304,"t":{"326":{"position":[[0,43]]}}}],["api/student/exampaper/answer/read/4",{"_index":1295,"t":{"322":{"position":[[0,41]]}}}],["api/student/question/answer/pag",{"_index":1315,"t":{"328":{"position":[[0,38]]}}}],["api/student/question/answer/select/25067",{"_index":1322,"t":{"330":{"position":[[0,46]]}}}],["api/student/user/curr",{"_index":1335,"t":{"334":{"position":[[0,30]]}}}],["api/student/user/log",{"_index":1329,"t":{"332":{"position":[[0,26]]}}}],["api/student/user/message/pag",{"_index":1354,"t":{"338":{"position":[[0,35]]}}}],["api/student/user/message/read/14",{"_index":1362,"t":{"340":{"position":[[0,38]]}}}],["api/student/user/message/unreadcount",{"_index":1363,"t":{"342":{"position":[[0,42]]}}}],["api/student/user/regist",{"_index":1229,"t":{"306":{"position":[[0,31]]}}}],["api/student/user/upd",{"_index":1353,"t":{"336":{"position":[[0,29]]}}}],["api/user/login",{"_index":1225,"t":{"304":{"position":[[0,20]]},"345":{"position":[[0,20]]}}}],["api/user/logout",{"_index":1234,"t":{"308":{"position":[[0,21]]},"347":{"position":[[0,21]]}}}],["application/octet",{"_index":941,"t":{"225":{"position":[[545,17]]}}}],["approach",{"_index":324,"t":{"16":{"position":[[1086,11],[1203,8]]}}}],["apt",{"_index":969,"t":{"227":{"position":[[297,3],[320,3]]}}}],["architectur",{"_index":269,"t":{"16":{"position":[[162,14]]}}}],["arcnod",{"_index":1006,"t":{"242":{"position":[[105,8],[152,7],[167,20],[227,7]]}}}],["arctan∞arctan{\\infty}arctan∞类型，arctan+∞=π2arctan{+\\infty}=\\frac{\\pi}{2}arctan+∞=2π​,arctan−∞=−π2arctan",{"_index":868,"t":{"206":{"position":[[424,103]]}}}],["area",{"_index":169,"t":{"8":{"position":[[1153,5],[1233,6],[2834,5],[2914,6]]}}}],["around",{"_index":12,"t":{"4":{"position":[[61,6],[448,6]]}}}],["assembl",{"_index":94,"t":{"4":{"position":[[1791,9]]}}}],["associ",{"_index":330,"t":{"16":{"position":[[1277,10]]}}}],["atmospher",{"_index":108,"t":{"8":{"position":[[162,11],[750,11],[1007,11],[1332,11],[1555,11],[1978,11],[2290,11],[2637,11],[3013,11]]}}}],["author",{"_index":58,"t":{"4":{"position":[[738,7]]}}}],["auto;error_log",{"_index":917,"t":{"225":{"position":[[109,14]]}}}],["avoid",{"_index":333,"t":{"16":{"position":[[1349,5]]}}}],["a在b前面，则图中不存在b到a",{"_index":1074,"t":{"260":{"position":[[30,20]]}}}],["a是从0开始存储还是1",{"_index":781,"t":{"186":{"position":[[705,36]]}}}],["b",{"_index":555,"t":{"103":{"position":[[0,7]]},"178":{"position":[[48,4],[71,2],[74,1]]},"189":{"position":[[127,14],[287,2]]},"222":{"position":[[160,1]]},"255":{"position":[[175,2]]}}}],["b874",{"_index":1340,"t":{"334":{"position":[[129,4]]},"336":{"position":[[79,4]]}}}],["b[i",{"_index":819,"t":{"189":{"position":[[567,7],[632,7]]}}}],["b[j",{"_index":820,"t":{"189":{"position":[[587,7],[664,8]]}}}],["b[k",{"_index":812,"t":{"189":{"position":[[464,4]]}}}],["b[p1]和b[p2]，较小者放入a",{"_index":804,"t":{"189":{"position":[[166,28]]}}}],["backend",{"_index":1096,"t":{"265":{"position":[[45,7]]}}}],["bar{s_s}+\\bar{a_{s}}\\bar{b_{s}}s_sv=as​bs​ss​ˉ​+as​ˉ​bs​ˉ​ss",{"_index":416,"t":{"51":{"position":[[68,62]]}}}],["base",{"_index":254,"t":{"14":{"position":[[1056,5]]},"16":{"position":[[733,5]]}}}],["basi",{"_index":306,"t":{"16":{"position":[[837,5]]}}}],["bead",{"_index":332,"t":{"16":{"position":[[1339,6]]}}}],["befor",{"_index":323,"t":{"16":{"position":[[1079,6]]}}}],["bf",{"_index":1012,"t":{"245":{"position":[[102,53]]}}}],["bfs(g,i",{"_index":1020,"t":{"245":{"position":[[494,9]]}}}],["bfs(graph",{"_index":1021,"t":{"245":{"position":[[511,9]]}}}],["bfstraverse(graph",{"_index":1014,"t":{"245":{"position":[[368,17]]}}}],["billion",{"_index":16,"t":{"4":{"position":[[88,7]]},"16":{"position":[[942,7]]}}}],["biomass",{"_index":172,"t":{"8":{"position":[[1207,8],[2888,8]]}}}],["birthday",{"_index":1344,"t":{"334":{"position":[[252,11]]},"336":{"position":[[202,11]]},"345":{"position":[[271,11]]},"351":{"position":[[380,11]]},"353":{"position":[[266,11]]},"355":{"position":[[194,11],[490,11]]},"405":{"position":[[257,11]]},"407":{"position":[[212,11]]},"413":{"position":[[207,11]]}}}],["body_bytes_s",{"_index":946,"t":{"225":{"position":[[652,16]]}}}],["bool",{"_index":595,"t":{"139":{"position":[[142,4]]},"178":{"position":[[118,4]]},"245":{"position":[[340,4]]},"247":{"position":[[107,4]]}}}],["bore",{"_index":377,"t":{"21":{"position":[[240,7]]}}}],["both",{"_index":201,"t":{"14":{"position":[[232,5]]}}}],["branch",{"_index":955,"t":{"227":{"position":[[89,9]]}}}],["branch设置为gh",{"_index":910,"t":{"222":{"position":[[349,12]]}}}],["bring",{"_index":370,"t":{"21":{"position":[[151,6]]}}}],["bubblesort(int",{"_index":717,"t":{"178":{"position":[[89,14]]}}}],["build",{"_index":903,"t":{"222":{"position":[[181,5]]},"227":{"position":[[352,5],[386,5],[577,6],[734,7],[742,23]]}}}],["buildgit",{"_index":898,"t":{"222":{"position":[[141,8],[200,8]]}}}],["buildmaxheap(a,len",{"_index":797,"t":{"186":{"position":[[1350,20]]}}}],["buildmaxheap(int",{"_index":783,"t":{"186":{"position":[[848,16]]}}}],["build后的代码上传到gh",{"_index":908,"t":{"222":{"position":[[289,23]]}}}],["b树的一个地方，b",{"_index":568,"t":{"112":{"position":[[0,94]]}}}],["c",{"_index":304,"t":{"16":{"position":[[820,2]]},"375":{"position":[[573,3],[1274,3]]}}}],["c07e653d390a",{"_index":1384,"t":{"351":{"position":[[256,14]]},"353":{"position":[[142,14]]}}}],["c32f",{"_index":1381,"t":{"351":{"position":[[241,4]]},"353":{"position":[[127,4]]}}}],["cach",{"_index":1122,"t":{"282":{"position":[[4,5]]},"286":{"position":[[391,12],[472,12],[761,21],[1092,56],[1171,8],[1197,38],[1572,11],[1895,20],[1960,31]]},"288":{"position":[[176,7],[184,50],[243,8],[252,48]]},"291":{"position":[[368,5]]}}}],["cache写不命中时只写入主存，该写地址单元所在块不从主存调入cach",{"_index":1171,"t":{"288":{"position":[[363,70]]}}}],["cache写不命中时除写入主存，还将该写地址单元所在块从主存调入cach",{"_index":1172,"t":{"288":{"position":[[445,57]]}}}],["cache分组，将主存分区。主存区内的块数和cache的组数相同(一个cach",{"_index":1148,"t":{"286":{"position":[[909,50]]}}}],["cache地址为5",{"_index":1145,"t":{"286":{"position":[[680,18]]}}}],["cache地址共需11",{"_index":1162,"t":{"286":{"position":[[1824,13]]}}}],["cache块数=16kb/512b=32",{"_index":1139,"t":{"286":{"position":[[495,21]]}}}],["cache总容量相等。每区块数与cache的块数相同，这样，每区中第i块映射的位置就是cache的第i",{"_index":1136,"t":{"286":{"position":[[204,66]]}}}],["cache每块存的是内存的哪一块。表的长度就为cach",{"_index":1147,"t":{"286":{"position":[[783,78]]}}}],["cache每组组内采用全相联映像法，例如cache的第3组中有个4块，cache的第1块存了来自内存第2区的第3块，第2块存了来自内存第6区的第3快，第3、4",{"_index":1150,"t":{"286":{"position":[[1009,82]]}}}],["cache由64",{"_index":1152,"t":{"286":{"position":[[1289,24]]}}}],["cache的块大小为4个字，预取到cache中的数据的重复利用率为5次，cache存储系统原来的命中率为h=0.8，则采用预取算法后，命中率为多少？若tm=5tc，则cach",{"_index":1179,"t":{"291":{"position":[[162,92]]}}}],["cache的块数（为了记录cache中每块存的是主存的第几区），表中每个项目长度是主存区号的长度（为了存下块的编号）。在每次访问主存时查这个块表来对应访问cach",{"_index":1137,"t":{"286":{"position":[[271,95]]}}}],["cache的容量为8kb，即8kb/4b=2112^{11}211",{"_index":1161,"t":{"286":{"position":[[1788,35]]}}}],["cache的组数，则主存的区数为4096/16=256区，每区内有16",{"_index":1156,"t":{"286":{"position":[[1410,48]]}}}],["cache的组数，计算得区数，区内块号就是cach",{"_index":1151,"t":{"286":{"position":[[1236,45]]}}}],["cache的组采用直接相联映像法，即第主存每区的第i块都映射到cache的第i",{"_index":1149,"t":{"286":{"position":[[960,48]]}}}],["cache组数为64/4=16",{"_index":1155,"t":{"286":{"position":[[1393,16]]}}}],["cache高速缓冲存储器一种特殊的存储器子系统，其中复制了主存中频繁使用的数据以利于快速访问。为了便于根据cpu送来的地址信息到cache中去读取数据，必须有某种函数把主存地址映象成cach",{"_index":1133,"t":{"286":{"position":[[0,116]]}}}],["calcul",{"_index":308,"t":{"16":{"position":[[852,13]]}}}],["capac",{"_index":227,"t":{"14":{"position":[[597,8]]},"16":{"position":[[1496,8],[1775,8]]}}}],["carbon",{"_index":52,"t":{"4":{"position":[[574,7],[1434,6],[1574,6]]}}}],["carrier",{"_index":331,"t":{"16":{"position":[[1314,9],[1392,7]]}}}],["cation",{"_index":235,"t":{"14":{"position":[[735,8]]}}}],["caus",{"_index":50,"t":{"4":{"position":[[519,6]]}}}],["certain",{"_index":367,"t":{"21":{"position":[[92,7]]}}}],["cf",{"_index":413,"t":{"49":{"position":[[57,25]]}}}],["cf和最高位数位的进位c1",{"_index":419,"t":{"51":{"position":[[205,51]]}}}],["ch[0...k−1]=ch[j−k...j−1]ch[0...k",{"_index":478,"t":{"77":{"position":[[374,33]]}}}],["ch[0∼k−1]=ch[j−k∼j−1]ch[0",{"_index":488,"t":{"79":{"position":[[599,25]]}}}],["ch[j",{"_index":479,"t":{"77":{"position":[[413,4]]},"79":{"position":[[637,4]]}}}],["challeng",{"_index":274,"t":{"16":{"position":[[230,9]]}}}],["chang",{"_index":132,"t":{"8":{"position":[[447,6],[1182,7],[1264,6],[1321,7],[1967,7],[2863,7],[2945,6],[3002,7]]}}}],["char",{"_index":998,"t":{"240":{"position":[[624,4]]},"242":{"position":[[216,4]]}}}],["charg",{"_index":238,"t":{"14":{"position":[[777,7]]}}}],["checkout",{"_index":899,"t":{"222":{"position":[[150,8]]}}}],["child",{"_index":643,"t":{"150":{"position":[[325,5]]}}}],["circumgalact",{"_index":85,"t":{"4":{"position":[[1509,14]]}}}],["class",{"_index":1352,"t":{"334":{"position":[[455,10]]},"336":{"position":[[405,10]]}}}],["client",{"_index":967,"t":{"227":{"position":[[280,6]]}}}],["climat",{"_index":131,"t":{"8":{"position":[[439,7],[1306,7],[1952,7],[2987,7]]}}}],["cnblogs.com",{"_index":473,"t":{"75":{"position":[[205,13]]}}}],["code",{"_index":302,"t":{"16":{"position":[[802,5]]},"306":{"position":[[126,7]]},"308":{"position":[[37,7]]},"314":{"position":[[56,7]]},"316":{"position":[[146,7]]},"318":{"position":[[53,7]]},"320":{"position":[[278,7]]},"322":{"position":[[57,7]]},"324":{"position":[[331,7]]},"326":{"position":[[104,7]]},"328":{"position":[[99,7]]},"330":{"position":[[107,7]]},"332":{"position":[[42,7]]},"334":{"position":[[46,7]]},"336":{"position":[[461,7]]},"338":{"position":[[96,7]]},"340":{"position":[[54,7]]},"342":{"position":[[58,7]]},"345":{"position":[[110,7]]},"347":{"position":[[37,7]]},"351":{"position":[[129,7]]},"353":{"position":[[45,7]]},"355":{"position":[[267,7]]},"357":{"position":[[45,7]]},"359":{"position":[[51,7]]},"361":{"position":[[54,7]]},"363":{"position":[[107,7]]},"365":{"position":[[58,7]]},"367":{"position":[[130,7]]},"369":{"position":[[58,7]]},"371":{"position":[[148,7]]},"373":{"position":[[51,7]]},"375":{"position":[[706,7]]},"377":{"position":[[51,7]]},"379":{"position":[[157,7]]},"381":{"position":[[146,7]]},"383":{"position":[[51,7]]},"385":{"position":[[331,7]]},"387":{"position":[[49,7]]},"389":{"position":[[94,7]]},"391":{"position":[[46,7]]},"393":{"position":[[341,7]]},"395":{"position":[[45,7]]},"397":{"position":[[106,7]]},"399":{"position":[[128,7]]},"401":{"position":[[109,7]]},"403":{"position":[[119,7]]},"405":{"position":[[44,7]]},"407":{"position":[[466,7]]},"409":{"position":[[66,7]]},"413":{"position":[[468,7]]}}}],["coexist",{"_index":346,"t":{"16":{"position":[[1617,11]]}}}],["collect",{"_index":1093,"t":{"265":{"position":[[4,7]]}}}],["color",{"_index":118,"t":{"8":{"position":[[282,5],[953,5],[1733,5],[2583,5]]}}}],["come",{"_index":102,"t":{"8":{"position":[[98,4],[1491,4]]}}}],["commit",{"_index":888,"t":{"220":{"position":[[72,6]]},"222":{"position":[[218,6]]}}}],["commonli",{"_index":327,"t":{"16":{"position":[[1158,8]]}}}],["complet",{"_index":1294,"t":{"320":{"position":[[201,12]]}}}],["complex",{"_index":205,"t":{"14":{"position":[[276,7]]}}}],["concentr",{"_index":243,"t":{"14":{"position":[[880,13],[1407,16]]}}}],["condit",{"_index":168,"t":{"8":{"position":[[1091,11],[2721,11]]}}}],["consist",{"_index":55,"t":{"4":{"position":[[666,10],[1531,10]]}}}],["contamin",{"_index":334,"t":{"16":{"position":[[1355,13],[1579,14]]}}}],["content",{"_index":1292,"t":{"320":{"position":[[138,10]]},"322":{"position":[[546,10],[611,10],[994,10]]},"324":{"position":[[186,10]]},"330":{"position":[[315,10],[592,10]]},"332":{"position":[[176,10]]},"338":{"position":[[213,10]]},"375":{"position":[[418,10],[1119,10]]},"397":{"position":[[216,10]]},"399":{"position":[[64,10]]},"403":{"position":[[276,10]]}}}],["contentarray",{"_index":1293,"t":{"320":{"position":[[162,15]]},"322":{"position":[[1039,15]]},"324":{"position":[[233,15]]},"330":{"position":[[636,15]]}}}],["continuum",{"_index":166,"t":{"8":{"position":[[1052,9],[2682,9]]}}}],["convert",{"_index":185,"t":{"14":{"position":[[26,9]]}}}],["correct",{"_index":1286,"t":{"318":{"position":[[492,10]]},"322":{"position":[[712,10]]},"330":{"position":[[412,10]]},"373":{"position":[[497,10]]},"375":{"position":[[580,10],[1281,10]]},"381":{"position":[[395,10]]},"383":{"position":[[280,10]]},"385":{"position":[[216,10]]}}}],["correctarray",{"_index":1285,"t":{"318":{"position":[[465,15]]},"322":{"position":[[671,15]]},"330":{"position":[[385,15]]},"373":{"position":[[468,15]]},"375":{"position":[[543,15],[1244,15]]},"383":{"position":[[253,15]]},"385":{"position":[[189,15]]}}}],["cost",{"_index":218,"t":{"14":{"position":[[424,4]]}}}],["cours",{"_index":1098,"t":{"267":{"position":[[11,6]]}}}],["cpifc\\frac{总指令数*有效cpi}{f_c}fc​总指令数∗有效cpi",{"_index":1109,"t":{"270":{"position":[[437,55]]}}}],["cpi：指令数乘以cpi然后累加，有效cpi就是公式里面要带入的cpi",{"_index":1108,"t":{"270":{"position":[[399,37]]}}}],["cpu执行写操作时，信息只写入cache，仅当需要被替换时，才将已被写入过的cach",{"_index":1170,"t":{"288":{"position":[[29,61]]}}}],["createtim",{"_index":1267,"t":{"316":{"position":[[300,13]]},"326":{"position":[[192,13]]},"328":{"position":[[213,13]]},"332":{"position":[[218,13]]},"334":{"position":[[342,13]]},"336":{"position":[[292,13]]},"338":{"position":[[263,13]]},"345":{"position":[[372,13]]},"351":{"position":[[474,13]]},"353":{"position":[[360,13]]},"355":{"position":[[613,13]]},"371":{"position":[[303,13]]},"379":{"position":[[304,13]]},"381":{"position":[[269,13]]},"389":{"position":[[259,13]]},"391":{"position":[[255,13]]},"393":{"position":[[185,13],[553,13]]},"397":{"position":[[365,13]]},"401":{"position":[[185,13]]},"403":{"position":[[316,13]]},"405":{"position":[[351,13]]},"407":{"position":[[304,13]]},"413":{"position":[[306,13]]}}}],["createus",{"_index":1270,"t":{"316":{"position":[[344,13]]},"371":{"position":[[347,13]]},"379":{"position":[[348,13]]},"381":{"position":[[334,13]]},"391":{"position":[[299,13]]},"393":{"position":[[229,13],[597,13]]}}}],["createusernam",{"_index":1429,"t":{"389":{"position":[[223,17]]}}}],["cs",{"_index":364,"t":{"21":{"position":[[61,2]]}}}],["current",{"_index":277,"t":{"16":{"position":[[248,7]]}}}],["cycl",{"_index":247,"t":{"14":{"position":[[951,7]]}}}],["c和b时候会发现不匹配，此时的next会跳转到2，从ab再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟ab中的b进行匹配成功的，此时产生了一次无效匹配，然后next到1",{"_index":534,"t":{"83":{"position":[[74,103]]}}}],["c和d时，不匹配，肉眼观察，可以直接将j",{"_index":475,"t":{"77":{"position":[[229,38]]}}}],["d",{"_index":843,"t":{"191":{"position":[[546,1]]},"330":{"position":[[375,4],[423,4]]}}}],["d.e.knuth、j.h.morris和v.r.prat一起发明了kmp算法，致力于解决这个主串指针回溯的问题来降低时间开销。kmp算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。kmp",{"_index":471,"t":{"75":{"position":[[0,175]]}}}],["d2d29da2",{"_index":1337,"t":{"334":{"position":[[109,9]]},"336":{"position":[[59,9]]}}}],["damag",{"_index":344,"t":{"16":{"position":[[1568,6]]}}}],["danger",{"_index":646,"t":{"155":{"position":[[17,6]]},"157":{"position":[[33,6]]}}}],["data",{"_index":192,"t":{"14":{"position":[[115,4],[994,4]]},"16":{"position":[[58,4],[421,4],[751,4],[1180,4]]},"139":{"position":[[32,5]]},"150":{"position":[[92,5],[235,5],[319,5],[395,5]]},"242":{"position":[[221,5]]}}}],["data，边表头指针first",{"_index":1005,"t":{"242":{"position":[[7,82]]}}}],["dcb3",{"_index":1338,"t":{"334":{"position":[[119,4]]},"336":{"position":[[69,4]]}}}],["deep",{"_index":152,"t":{"8":{"position":[[692,4],[2232,4]]}}}],["deeper",{"_index":106,"t":{"8":{"position":[[143,6],[1536,6]]}}}],["default_serv",{"_index":924,"t":{"225":{"position":[[229,15],[261,15]]}}}],["default_typ",{"_index":940,"t":{"225":{"position":[[532,12]]}}}],["delet",{"_index":1364,"t":{"345":{"position":[[436,10]]},"355":{"position":[[718,10]]},"361":{"position":[[204,10]]},"389":{"position":[[303,10]]}}}],["delta",{"_index":1193,"t":{"295":{"position":[[102,6],[297,6]]},"299":{"position":[[248,6]]}}}],["demand",{"_index":261,"t":{"16":{"position":[[47,6]]}}}],["demonstr",{"_index":162,"t":{"8":{"position":[[971,11],[2601,11]]}}}],["dens",{"_index":188,"t":{"14":{"position":[[66,6]]}}}],["densiti",{"_index":248,"t":{"14":{"position":[[999,7]]},"16":{"position":[[497,7],[1123,8]]}}}],["deploy",{"_index":906,"t":{"222":{"position":[[228,7]]},"227":{"position":[[72,6],[114,7],[404,6],[433,6]]}}}],["deposit",{"_index":127,"t":{"8":{"position":[[381,11],[762,10],[1024,10],[1832,11],[2302,10],[2654,10]]}}}],["depth",{"_index":107,"t":{"8":{"position":[[150,7],[1543,7]]}}}],["dequeue(q,v",{"_index":1026,"t":{"245":{"position":[[587,13]]}}}],["desert",{"_index":153,"t":{"8":{"position":[[776,6],[2316,6]]}}}],["design",{"_index":211,"t":{"14":{"position":[[342,8]]}}}],["destralverse(graph",{"_index":1036,"t":{"247":{"position":[[135,18]]}}}],["detect",{"_index":79,"t":{"4":{"position":[[1369,6]]}}}],["develop",{"_index":1097,"t":{"265":{"position":[[53,12]]}}}],["devic",{"_index":278,"t":{"16":{"position":[[256,7]]}}}],["dfs(g,v",{"_index":1043,"t":{"247":{"position":[[381,10]]}}}],["dfs(g,v);}void",{"_index":1039,"t":{"247":{"position":[[246,14]]}}}],["dfs(graph",{"_index":1040,"t":{"247":{"position":[[261,9]]}}}],["dfs就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟bf",{"_index":1035,"t":{"247":{"position":[[0,106]]}}}],["dfs算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为o(1)o(1)o(1)，平均的为o(∣v∣)o(|v|)o(∣v",{"_index":1044,"t":{"247":{"position":[[593,82]]}}}],["difficult",{"_index":159,"t":{"8":{"position":[[877,9],[2473,9]]},"318":{"position":[[557,12]]},"322":{"position":[[753,12]]},"330":{"position":[[452,12]]},"373":{"position":[[564,12]]},"375":{"position":[[626,12],[1327,12]]},"381":{"position":[[475,12]]},"383":{"position":[[330,12]]},"385":{"position":[[283,12]]}}}],["digit",{"_index":183,"t":{"14":{"position":[[0,7]]},"16":{"position":[[11,7],[353,7]]}}}],["dir",{"_index":978,"t":{"227":{"position":[[555,4],[572,4]]}}}],["directli",{"_index":229,"t":{"14":{"position":[[622,8]]}}}],["disciplin",{"_index":858,"t":{"200":{"position":[[46,11]]}}}],["dislik",{"_index":369,"t":{"21":{"position":[[131,7]]}}}],["distribut",{"_index":123,"t":{"8":{"position":[[331,12],[1782,12]]}}}],["divers",{"_index":165,"t":{"8":{"position":[[1044,7],[2674,7]]}}}],["dna",{"_index":186,"t":{"14":{"position":[[43,3],[170,3],[261,3],[458,4],[492,3],[564,3],[641,3],[876,3],[990,3]]},"16":{"position":[[417,3],[493,3],[718,3],[761,3],[866,3],[1144,3],[1176,3],[1254,3],[1299,3],[1444,3],[1484,3],[1505,4],[1564,3],[1601,3],[1643,3],[1763,3],[1806,3],[1843,3],[1932,3]]}}}],["dna存储存储基于数据编码为表示为四个字母的dna分子(atcg)。在先前计算的基础上，dna理论上可以存储超过455eb/g(4.55∗1011gb/g)455eb/g(4.55*1011gb/g)455eb/g(4.55∗1011gb/g)比传统的数据存储介质高校十二亿倍。但是，在接近理论存储最大密度前，需要解决一些问题。目前，dna粉末通常用语dna数据存储，但是在这种逼近有一定的局限性：首先是dna粉末需要与其他的dna保护体关联(如二氧化硅珠)，从而来避免污染和丢失。然后这种载体通常比dna自身海还重，如此便会减少dna存储有效的数据容量。第二，这种方法容易对dna造成污染和破坏。第三，dna可能需要与dna稳定剂共存(海藻糖和聚乙烯醇)，来延长他们的存储寿命，这同样会减少dna存储有效的数据容量。除此之外，dna粉末无法和dna稳定剂充分混合。因此，探索了其他的能够在保存过程提高dna",{"_index":361,"t":{"16":{"position":[[1988,416]]}}}],["dna序列时，提供密集、稳定、节能和可持续的数据存储。最稳定的封装dna方法是使用二氧化硅，氧化铁或者两者的无机基质之间，但是其受限于dna",{"_index":256,"t":{"14":{"position":[[1070,89]]}}}],["dna数据存储解决，这是一项的信箱的通过dna存储来解决的技术，可以提供dna密度(5",{"_index":295,"t":{"16":{"position":[[548,152]]}}}],["docsaururs配置文件进行修改，将config",{"_index":893,"t":{"222":{"position":[[0,48]]}}}],["docusauru",{"_index":907,"t":{"222":{"position":[[236,10]]}}}],["doexampapercount",{"_index":1370,"t":{"349":{"position":[[108,19]]}}}],["doquestioncount",{"_index":1372,"t":{"349":{"position":[[141,18]]}}}],["doright",{"_index":1300,"t":{"322":{"position":[[970,10]]},"324":{"position":[[162,10]]},"330":{"position":[[567,10]]}}}],["dotim",{"_index":1290,"t":{"320":{"position":[[76,9]]},"322":{"position":[[866,9]]},"324":{"position":[[64,9]]},"326":{"position":[[397,9]]},"401":{"position":[[390,9]]}}}],["drive",{"_index":271,"t":{"16":{"position":[[190,6]]}}}],["driven",{"_index":178,"t":{"8":{"position":[[1314,6],[1960,6],[2995,6]]}}}],["due",{"_index":223,"t":{"14":{"position":[[542,3]]}}}],["dure",{"_index":92,"t":{"4":{"position":[[1763,6]]},"16":{"position":[[1955,6]]}}}],["dust",{"_index":126,"t":{"8":{"position":[[376,4],[783,5],[817,4],[1019,4],[1827,4],[2323,5],[2413,4],[2649,4]]}}}],["d的距离是5",{"_index":1056,"t":{"255":{"position":[[178,19]]}}}],["d躺排序，一次分配要q(n)q(n)q(n)，一次收集要q(r)q(r)q(r)，所以时间复杂度为o(d(n+1))o(d(n+1))o(d(n+1",{"_index":850,"t":{"191":{"position":[[857,80]]}}}],["e",{"_index":451,"t":{"69":{"position":[[169,14]]},"237":{"position":[[55,7]]},"291":{"position":[[255,16],[376,14]]}}}],["e/i",{"_index":902,"t":{"222":{"position":[[176,4]]}}}],["e2b07f4fcc67",{"_index":1396,"t":{"355":{"position":[[357,14]]}}}],["e=s1s2",{"_index":1212,"t":{"297":{"position":[[178,7]]}}}],["e=tcta=tch′tc+(1−h′)tm=0.96",{"_index":1185,"t":{"291":{"position":[[391,28]]}}}],["e=tp∗∑1iδtim",{"_index":1198,"t":{"295":{"position":[[262,13]]}}}],["earli",{"_index":77,"t":{"4":{"position":[[1285,5]]}}}],["earlier",{"_index":61,"t":{"4":{"position":[[802,7]]}}}],["eb/g",{"_index":312,"t":{"16":{"position":[[904,4]]}}}],["ecosystem",{"_index":158,"t":{"8":{"position":[[856,10],[2452,10]]}}}],["editor’",{"_index":20,"t":{"4":{"position":[[117,8]]},"8":{"position":[[15,8]]}}}],["effect",{"_index":157,"t":{"8":{"position":[[831,7],[2427,7]]},"14":{"position":[[429,9]]},"16":{"position":[[1474,9],[1753,9]]}}}],["effici",{"_index":191,"t":{"14":{"position":[[88,10]]},"16":{"position":[[1944,10]]}}}],["eject",{"_index":39,"t":{"4":{"position":[[364,5],[1227,7],[1686,7]]}}}],["element",{"_index":33,"t":{"4":{"position":[[301,8],[637,9],[1645,8]]}}}],["elmenttyp",{"_index":642,"t":{"150":{"position":[[308,10]]}}}],["emerg",{"_index":287,"t":{"16":{"position":[[447,8]]}}}],["emiss",{"_index":48,"t":{"4":{"position":[[504,8],[1376,8]]}}}],["encapsul",{"_index":195,"t":{"14":{"position":[[156,13]]}}}],["encod",{"_index":297,"t":{"16":{"position":[[742,8]]}}}],["end",{"_index":856,"t":{"200":{"position":[[23,3]]}}}],["end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":582,"t":{"131":{"position":[[211,81]]}}}],["end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":780,"t":{"186":{"position":[[617,87]]}}}],["end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":632,"t":{"141":{"position":[[287,87]]}}}],["end{aligned}​当(vi​,vj​)是g的边，则a[i][j]=1否则a[i][j]=0",{"_index":993,"t":{"240":{"position":[[235,54]]}}}],["end{aligned}​当出现s[i]=t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1",{"_index":499,"t":{"79":{"position":[[1015,89]]}}}],["end{aligned}​当有t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j",{"_index":509,"t":{"79":{"position":[[1943,157]]}}}],["end{bmatrix}⎣⎡​0001​1000​1000​0010",{"_index":996,"t":{"240":{"position":[[445,39]]}}}],["energi",{"_index":190,"t":{"14":{"position":[[81,6]]}}}],["english",{"_index":0,"t":{"2":{"position":[[0,7]]},"6":{"position":[[0,7]]},"10":{"position":[[0,7]]},"12":{"position":[[0,7]]},"18":{"position":[[0,7]]},"21":{"position":[[4,7],[114,8],[143,7]]},"23":{"position":[[0,7]]},"25":{"position":[[0,7]]}}}],["enhanc",{"_index":352,"t":{"16":{"position":[[1704,7]]}}}],["enough",{"_index":37,"t":{"4":{"position":[[345,6]]}}}],["enqueue(q,v",{"_index":1024,"t":{"245":{"position":[[553,13],[703,13]]}}}],["enrich",{"_index":9,"t":{"4":{"position":[[39,8],[281,6],[615,8],[763,8],[1631,8]]}}}],["esl",{"_index":607,"t":{"139":{"position":[[335,4],[471,4],[600,4],[713,5]]}}}],["estim",{"_index":160,"t":{"8":{"position":[[890,8],[2486,8]]}}}],["et",{"_index":43,"t":{"4":{"position":[[407,2]]},"8":{"position":[[248,2],[1699,2],[1900,2]]}}}],["etc/nginx/mime.typ",{"_index":939,"t":{"225":{"position":[[509,22]]}}}],["evid",{"_index":91,"t":{"4":{"position":[[1737,8]]}}}],["exampaperanswerid",{"_index":1251,"t":{"312":{"position":[[180,20]]}}}],["exampapercount",{"_index":1367,"t":{"349":{"position":[[47,17]]}}}],["exampaperid",{"_index":1248,"t":{"312":{"position":[[116,14]]}}}],["exampapernam",{"_index":1250,"t":{"312":{"position":[[145,16]]}}}],["exhibit",{"_index":170,"t":{"8":{"position":[[1159,10],[2840,10]]}}}],["expect",{"_index":133,"t":{"8":{"position":[[457,8]]}}}],["explor",{"_index":358,"t":{"16":{"position":[[1889,7]]}}}],["explos",{"_index":32,"t":{"4":{"position":[[270,10]]}}}],["exponenti",{"_index":263,"t":{"16":{"position":[[88,11]]}}}],["express",{"_index":299,"t":{"16":{"position":[[775,9]]}}}],["extend",{"_index":82,"t":{"4":{"position":[[1446,6]]}}}],["extent",{"_index":154,"t":{"8":{"position":[[793,6],[2389,6]]}}}],["extract",{"_index":225,"t":{"14":{"position":[[568,11]]}}}],["e∞e^{\\infty}e∞类型，其中e+∞=+∞e^{+\\infti",{"_index":865,"t":{"206":{"position":[[345,36]]}}}],["e∣=∣v∣−1|",{"_index":1046,"t":{"249":{"position":[[89,12]]}}}],["e（23~30",{"_index":446,"t":{"69":{"position":[[66,10]]}}}],["f)+(\\frac{f}{s})}sp​=tnew​told​​=(1−f)+(sf​)1",{"_index":1113,"t":{"272":{"position":[[189,46]]}}}],["f7ee8270ad4c",{"_index":1460,"t":{"405":{"position":[[133,14]]},"407":{"position":[[90,14]]},"413":{"position":[[83,14]]}}}],["f_i(h_i*t_c+(1",{"_index":1128,"t":{"284":{"position":[[171,14]]}}}],["f_i)(h_d*t_c+(1",{"_index":1130,"t":{"284":{"position":[[201,15]]}}}],["fals",{"_index":719,"t":{"178":{"position":[[132,6]]},"247":{"position":[[197,6]]},"304":{"position":[[91,5]]},"330":{"position":[[578,6]]},"345":{"position":[[89,5]]},"355":{"position":[[729,6]]},"361":{"position":[[215,5]]},"389":{"position":[[314,5]]}}}],["fasl",{"_index":600,"t":{"139":{"position":[[212,6]]},"245":{"position":[[430,6]]}}}],["fd31ab62",{"_index":1380,"t":{"351":{"position":[[231,9]]},"353":{"position":[[117,9]]}}}],["feedback",{"_index":28,"t":{"4":{"position":[[233,8]]}}}],["fff就是可以增强部分的占比，sss",{"_index":1114,"t":{"272":{"position":[[236,28]]}}}],["fif_ifi​就是访问指令体的占比，同样求数据体也是同理。hdh_dhd​是改进后的cach",{"_index":1132,"t":{"284":{"position":[[284,54]]}}}],["findleft(t[],int",{"_index":612,"t":{"139":{"position":[[502,16]]}}}],["findparent(t[],int",{"_index":601,"t":{"139":{"position":[[232,18]]}}}],["findright(t[],int",{"_index":608,"t":{"139":{"position":[[366,17]]}}}],["first",{"_index":329,"t":{"16":{"position":[[1243,6]]},"242":{"position":[[235,7]]}}}],["firstchild;}*treelist",{"_index":644,"t":{"150":{"position":[[331,28]]}}}],["firstneighbor(g,v);w>=0;w",{"_index":1028,"t":{"245":{"position":[[609,25]]},"247":{"position":[[318,25]]}}}],["fixedpap",{"_index":1236,"t":{"310":{"position":[[49,13]]}}}],["flag",{"_index":718,"t":{"178":{"position":[[125,4]]}}}],["follow",{"_index":328,"t":{"16":{"position":[[1220,9]]}}}],["for(gap",{"_index":694,"t":{"174":{"position":[[274,7]]}}}],["for(i",{"_index":666,"t":{"170":{"position":[[498,5]]},"172":{"position":[[375,5]]},"174":{"position":[[318,5]]},"189":{"position":[[477,5]]},"245":{"position":[[390,5],[451,5]]}}}],["for(int",{"_index":592,"t":{"139":{"position":[[94,7]]},"178":{"position":[[139,7],[165,7]]},"184":{"position":[[299,7],[338,7]]},"186":{"position":[[879,7],[1033,7],[1371,7]]}}}],["for(j",{"_index":672,"t":{"170":{"position":[[553,5]]},"172":{"position":[[533,5]]},"174":{"position":[[485,5]]}}}],["for(k",{"_index":810,"t":{"189":{"position":[[432,5]]}}}],["for(v",{"_index":1037,"t":{"247":{"position":[[158,5],[204,5]]}}}],["for(w",{"_index":1027,"t":{"245":{"position":[[601,5]]},"247":{"position":[[310,5]]}}}],["form",{"_index":69,"t":{"4":{"position":[[1058,4]]}}}],["format",{"_index":63,"t":{"4":{"position":[[825,10],[1268,9]]}}}],["for循环，时间复杂度为o(n2)o(n^2)o(n2",{"_index":678,"t":{"170":{"position":[[713,45]]}}}],["foundat",{"_index":368,"t":{"21":{"position":[[100,10]]},"27":{"position":[[0,10]]},"71":{"position":[[0,10]]},"115":{"position":[[0,10]]},"128":{"position":[[0,10]]},"166":{"position":[[0,10]]},"229":{"position":[[0,10]]},"267":{"position":[[0,10]]}}}],["four",{"_index":300,"t":{"16":{"position":[[790,4]]}}}],["frac",{"_index":1175,"t":{"291":{"position":[[104,5],[314,5]]}}}],["frac{1}{(1",{"_index":1112,"t":{"272":{"position":[[177,11]]}}}],["frac{1}{m",{"_index":1218,"t":{"299":{"position":[[237,10]]}}}],["frac{\\pi}{2}arctan−∞=−2",{"_index":870,"t":{"206":{"position":[[537,26]]}}}],["frac{\\sum_1^i",{"_index":1200,"t":{"295":{"position":[[282,14]]}}}],["frac{f_c}{cpi*10^6}mips=tcpu​∗106in​​=cpi∗106fc",{"_index":1102,"t":{"270":{"position":[[143,50]]}}}],["frac{i_n}{mips*10^6}te​=mips∗106in",{"_index":1106,"t":{"270":{"position":[[328,37]]}}}],["frac{i_n}{t_{cpu}*10^6",{"_index":1101,"t":{"270":{"position":[[116,24]]}}}],["frac{n(n",{"_index":731,"t":{"178":{"position":[[406,9]]}}}],["frac{n*t}{m*\\delta",{"_index":1209,"t":{"297":{"position":[[105,19]]}}}],["frac{n}{m*\\delta",{"_index":1205,"t":{"297":{"position":[[39,17]]}}}],["frac{n}{sum*\\delta",{"_index":1221,"t":{"299":{"position":[[307,19]]}}}],["frac{n}{t_{pipeline}}tp=tpipeline​n",{"_index":1196,"t":{"295":{"position":[[166,37]]}}}],["frac{s_1}{s_2}e=s2​s1",{"_index":1213,"t":{"297":{"position":[[188,24]]}}}],["frac{t_c}{h^{'}t_c",{"_index":1187,"t":{"291":{"position":[[440,19]]}}}],["frac{t_c}{t_a",{"_index":1186,"t":{"291":{"position":[[422,15]]}}}],["frac{t_{old}}{t_{new",{"_index":1111,"t":{"272":{"position":[[151,23]]}}}],["frametextcontentid",{"_index":1272,"t":{"316":{"position":[[439,21]]},"371":{"position":[[414,21]]},"379":{"position":[[415,21]]},"391":{"position":[[367,21]]},"393":{"position":[[296,21],[664,21]]}}}],["ftp",{"_index":954,"t":{"227":{"position":[[68,3],[276,3],[400,3],[560,5],[714,3]]}}}],["fuel",{"_index":98,"t":{"8":{"position":[[60,4],[1453,4]]}}}],["function",{"_index":213,"t":{"14":{"position":[[372,12]]}}}],["fundament",{"_index":857,"t":{"200":{"position":[[34,11]]}}}],["further",{"_index":266,"t":{"16":{"position":[[121,7]]}}}],["furthermor",{"_index":354,"t":{"16":{"position":[[1793,12]]}}}],["g",{"_index":305,"t":{"16":{"position":[[827,2]]},"245":{"position":[[386,3],[521,3]]},"247":{"position":[[154,3]]}}}],["g,int",{"_index":1041,"t":{"247":{"position":[[271,5]]}}}],["g=(v,e)和g′=(v′,e′)g",{"_index":982,"t":{"231":{"position":[[88,19]]}}}],["ga",{"_index":10,"t":{"4":{"position":[[48,3],[152,3],[217,3],[292,3],[375,3],[602,3],[693,3],[772,3],[1081,3],[1203,3],[1316,3],[1524,3],[1610,3],[1749,3]]}}}],["galaxi",{"_index":14,"t":{"4":{"position":[[78,6],[135,8],[390,7],[465,6],[726,7],[1066,9],[1342,6],[1478,7],[1701,7],[1784,6]]}}}],["galaxy—could",{"_index":75,"t":{"4":{"position":[[1242,12]]}}}],["gap",{"_index":700,"t":{"174":{"position":[[449,6],[521,4]]}}}],["gap+1;i<=n;i",{"_index":697,"t":{"174":{"position":[[326,16]]}}}],["gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的p",{"_index":698,"t":{"174":{"position":[[343,91]]}}}],["gap,i,j",{"_index":693,"t":{"174":{"position":[[249,8]]}}}],["gap/2",{"_index":696,"t":{"174":{"position":[[303,7]]}}}],["gap;j>0",{"_index":701,"t":{"174":{"position":[[495,7]]}}}],["gas—th",{"_index":72,"t":{"4":{"position":[[1180,7]]}}}],["gb/g",{"_index":315,"t":{"16":{"position":[[922,6],[1003,5]]}}}],["get_next(str",{"_index":518,"t":{"81":{"position":[[44,15]]}}}],["get_nextval(str",{"_index":536,"t":{"83":{"position":[[343,18]]}}}],["gh",{"_index":900,"t":{"222":{"position":[[162,2],[280,2]]}}}],["gigabyt",{"_index":251,"t":{"14":{"position":[[1020,9],[1450,14]]}}}],["git",{"_index":880,"t":{"216":{"position":[[168,3]]},"220":{"position":[[21,3],[51,11],[67,4]]},"222":{"position":[[213,4],[264,3]]},"227":{"position":[[699,14]]}}}],["github",{"_index":877,"t":{"216":{"position":[[54,6],[70,6],[101,6],[108,17],[208,6],[221,18]]},"222":{"position":[[250,6]]}}}],["github/workflows，并且在里面创建nodejs.yml",{"_index":952,"t":{"227":{"position":[[0,61]]}}}],["githubpag",{"_index":882,"t":{"216":{"position":[[288,47]]}}}],["github提供的托管工具githubpag",{"_index":876,"t":{"216":{"position":[[0,53]]}}}],["global",{"_index":122,"t":{"8":{"position":[[324,6],[899,9],[930,6],[1775,6],[2495,9],[2560,6]]},"16":{"position":[[40,6]]}}}],["grade",{"_index":214,"t":{"14":{"position":[[385,6]]}}}],["gradelevel",{"_index":1282,"t":{"318":{"position":[[398,13]]},"322":{"position":[[482,13]]},"330":{"position":[[254,13]]},"373":{"position":[[399,13]]},"375":{"position":[[356,13],[1057,13]]},"383":{"position":[[189,13]]},"385":{"position":[[122,13]]},"389":{"position":[[34,13],[201,13]]},"391":{"position":[[105,13]]},"393":{"position":[[44,13],[400,13]]}}}],["gram",{"_index":253,"t":{"14":{"position":[[1034,4],[1465,6]]}}}],["grow",{"_index":262,"t":{"16":{"position":[[74,7],[222,7]]}}}],["growth",{"_index":144,"t":{"8":{"position":[[604,6],[2144,6]]}}}],["h",{"_index":138,"t":{"8":{"position":[[518,3]]}}}],["h)*t_mta​=h∗tc​+(1−h)∗tm",{"_index":1125,"t":{"284":{"position":[[41,25]]}}}],["h*t_c+(1",{"_index":1124,"t":{"284":{"position":[[32,8]]}}}],["h+n",{"_index":1176,"t":{"291":{"position":[[110,4]]}}}],["h^{'})t_m",{"_index":1188,"t":{"291":{"position":[[465,10]]}}}],["h_d)*t_m)ta​=fi​(hi​∗tc​+(1−hi​)∗tm​)+(1−fi​)(hd​∗tc​+(1−hd​)∗tm",{"_index":1131,"t":{"284":{"position":[[217,66]]}}}],["h_i)*t_m",{"_index":1129,"t":{"284":{"position":[[186,9]]}}}],["half",{"_index":291,"t":{"16":{"position":[[529,4]]}}}],["hard",{"_index":270,"t":{"16":{"position":[[185,4]]}}}],["hardli",{"_index":280,"t":{"16":{"position":[[307,6]]}}}],["headadjust(a,1,i",{"_index":800,"t":{"186":{"position":[[1414,16]]}}}],["headadjust(a,i,len);}void",{"_index":786,"t":{"186":{"position":[[934,25]]}}}],["headadjust(int",{"_index":787,"t":{"186":{"position":[[960,14]]}}}],["health",{"_index":177,"t":{"8":{"position":[[1298,7],[2979,7]]}}}],["heapsort(int",{"_index":796,"t":{"186":{"position":[[1323,12]]}}}],["heavier",{"_index":34,"t":{"4":{"position":[[310,7],[629,7],[1654,7]]}}}],["helium",{"_index":35,"t":{"4":{"position":[[323,6],[542,7],[1414,7],[1667,7]]}}}],["hhh就是cache命中率，tmt_mtm",{"_index":1126,"t":{"284":{"position":[[67,34]]}}}],["high",{"_index":93,"t":{"4":{"position":[[1770,4]]},"14":{"position":[[487,4],[584,4],[985,4]]},"172":{"position":[[466,5],[515,4],[552,4]]},"180":{"position":[[435,6],[507,6],[546,6],[589,5],[763,6],[779,6]]},"189":{"position":[[372,6],[767,6]]}}}],["higher",{"_index":317,"t":{"16":{"position":[[956,6],[1421,6]]}}}],["high位置的元素拿走（挖坑），去填low",{"_index":737,"t":{"180":{"position":[[347,22]]}}}],["high向前移动，直到遇到第一个比pivot",{"_index":736,"t":{"180":{"position":[[320,26]]}}}],["hone",{"_index":382,"t":{"21":{"position":[[329,4]]}}}],["host",{"_index":934,"t":{"225":{"position":[[444,4],[449,6]]}}}],["http",{"_index":879,"t":{"216":{"position":[[151,5]]}}}],["http://xzs.file.mindskip.net/fi4vlef1ri4vmgsonwn2ch0o8ed_",{"_index":1471,"t":{"411":{"position":[[101,60]]}}}],["http://服务器ip",{"_index":932,"t":{"225":{"position":[[413,13]]}}}],["http_refer",{"_index":947,"t":{"225":{"position":[[669,15]]}}}],["http_user_ag",{"_index":948,"t":{"225":{"position":[[687,19]]}}}],["http_x_forwarded_for",{"_index":949,"t":{"225":{"position":[[707,25]]}}}],["https://username.github.io",{"_index":912,"t":{"222":{"position":[[392,52]]}}}],["https://username.github.io',baseurl",{"_index":895,"t":{"222":{"position":[[54,37]]}}}],["hurdl",{"_index":320,"t":{"16":{"position":[[1046,7]]}}}],["hydrogel",{"_index":216,"t":{"14":{"position":[[399,8],[472,8],[785,8],[905,8],[1047,8]]}}}],["hydrogen",{"_index":51,"t":{"4":{"position":[[529,8],[1404,9]]}}}],["hyperbranch",{"_index":234,"t":{"14":{"position":[[721,13]]}}}],["h′=0.8+4∗5−14∗5=0.99h",{"_index":1180,"t":{"291":{"position":[[286,25]]}}}],["h′=h+n−1nh",{"_index":1174,"t":{"291":{"position":[[87,14]]}}}],["h是原命中率，n是cach",{"_index":1178,"t":{"291":{"position":[[131,30]]}}}],["i++后指向5，对前一个组进行排序，只不过前一个表是27",{"_index":709,"t":{"174":{"position":[[689,40]]}}}],["i+1;j<n;j",{"_index":766,"t":{"184":{"position":[[350,13]]}}}],["i,j",{"_index":665,"t":{"170":{"position":[[493,4]]}}}],["i,j,k",{"_index":809,"t":{"189":{"position":[[425,6]]}}}],["i,j,low,high,mid",{"_index":682,"t":{"172":{"position":[[357,17]]}}}],["i.",{"_index":303,"t":{"16":{"position":[[808,5]]}}}],["i;i<=mid",{"_index":815,"t":{"189":{"position":[[503,8]]}}}],["id",{"_index":1237,"t":{"310":{"position":[[74,5],[86,6]]},"312":{"position":[[50,5],[59,6],[136,8],[206,6]]},"314":{"position":[[100,5],[112,6]]},"316":{"position":[[87,6],[212,5],[224,6]]},"318":{"position":[[95,5],[104,6],[315,5],[324,6]]},"320":{"position":[[131,6],[254,5],[262,7]]},"322":{"position":[[117,5],[126,6],[389,5],[398,6],[850,5],[859,6],[930,5],[939,6],[963,6]]},"324":{"position":[[48,5],[57,6],[122,5],[131,6],[155,6]]},"326":{"position":[[173,5],[185,6],[307,6]]},"328":{"position":[[169,5],[182,6]]},"330":{"position":[[165,5],[176,6],[226,6],[528,5],[560,6]]},"332":{"position":[[86,5],[111,6]]},"334":{"position":[[88,5]]},"336":{"position":[[38,5]]},"338":{"position":[[162,5]]},"345":{"position":[[152,5]]},"351":{"position":[[201,5],[212,6]]},"353":{"position":[[87,5],[98,6]]},"355":{"position":[[34,5],[309,5],[372,6]]},"361":{"position":[[98,5],[108,6]]},"363":{"position":[[173,5]]},"365":{"position":[[100,5]]},"367":{"position":[[47,5]]},"371":{"position":[[40,5],[214,5],[224,6]]},"373":{"position":[[93,5],[103,6],[313,5],[323,6]]},"375":{"position":[[40,5],[50,6],[264,5],[274,6],[748,5],[758,6],[965,5],[975,6]]},"379":{"position":[[223,5]]},"381":{"position":[[38,5],[212,5]]},"383":{"position":[[93,5],[104,6]]},"385":{"position":[[38,5],[48,6]]},"389":{"position":[[160,5],[170,6]]},"391":{"position":[[88,5],[98,6],[168,5],[179,6]]},"393":{"position":[[34,5],[96,5],[106,6],[383,5],[393,6],[464,5],[474,6]]},"397":{"position":[[173,5],[183,6]]},"401":{"position":[[175,5],[299,6]]},"403":{"position":[[186,5],[196,6],[216,6]]},"405":{"position":[[86,5]]},"407":{"position":[[36,5],[46,6]]},"409":{"position":[[146,6]]},"413":{"position":[[36,5]]}}}],["if(!flag)return",{"_index":726,"t":{"178":{"position":[[253,15]]}}}],["if(!visited[i",{"_index":1019,"t":{"245":{"position":[[478,15]]}}}],["if(!visited[w",{"_index":1030,"t":{"245":{"position":[[657,16]]},"247":{"position":[[230,15],[365,15]]}}}],["if(a[0]>a[i])break",{"_index":794,"t":{"186":{"position":[[1136,19]]}}}],["if(a[i",{"_index":699,"t":{"174":{"position":[[435,7]]}}}],["if(a[i]<a[i",{"_index":669,"t":{"170":{"position":[[523,11]]}}}],["if(a[j",{"_index":723,"t":{"178":{"position":[[191,7]]}}}],["if(a[j]<a[min",{"_index":767,"t":{"184":{"position":[[364,15]]}}}],["if(a[mid",{"_index":686,"t":{"172":{"position":[[477,9]]}}}],["if(b[i]<=b[j",{"_index":818,"t":{"189":{"position":[[545,14]]}}}],["if(i!=min",{"_index":768,"t":{"184":{"position":[[391,10]]}}}],["if(i<len",{"_index":792,"t":{"186":{"position":[[1090,8]]}}}],["if(isempty(index))return",{"_index":606,"t":{"139":{"position":[[307,24],[686,24]]}}}],["if(isempty(left))return",{"_index":614,"t":{"139":{"position":[[573,23]]}}}],["if(isempty(right))return",{"_index":611,"t":{"139":{"position":[[443,24]]}}}],["if(isempty(x",{"_index":602,"t":{"139":{"position":[[255,13],[388,13],[523,13]]}}}],["if(j",{"_index":467,"t":{"73":{"position":[[315,4]]},"83":{"position":[[431,4]]}}}],["if(j==0||s.ch[i",{"_index":532,"t":{"81":{"position":[[332,16]]}}}],["if(j>t.len",{"_index":533,"t":{"81":{"position":[[395,11]]}}}],["if(k==0",{"_index":523,"t":{"81":{"position":[[122,7]]}}}],["if(low",{"_index":749,"t":{"180":{"position":[[770,6]]}}}],["if(low<high",{"_index":826,"t":{"189":{"position":[[774,13]]}}}],["if(s.ch[i",{"_index":465,"t":{"73":{"position":[[227,10]]}}}],["if(t.ch[j",{"_index":540,"t":{"83":{"position":[[475,10]]}}}],["if(x>=len",{"_index":597,"t":{"139":{"position":[[167,9]]}}}],["imagepath",{"_index":1228,"t":{"304":{"position":[[144,12]]},"334":{"position":[[479,12]]},"336":{"position":[[429,12]]},"345":{"position":[[353,12]]},"351":{"position":[[601,12]]},"353":{"position":[[487,12]]},"355":{"position":[[589,12]]},"405":{"position":[[464,12]]},"407":{"position":[[434,12]]},"413":{"position":[[436,12]]}}}],["impact",{"_index":128,"t":{"8":{"position":[[398,7],[1849,7]]}}}],["impart",{"_index":36,"t":{"4":{"position":[[338,6]]}}}],["import",{"_index":136,"t":{"8":{"position":[[488,10],[1377,10],[2023,10],[3058,10]]},"16":{"position":[[1876,9]]}}}],["improv",{"_index":359,"t":{"16":{"position":[[1920,7]]},"21":{"position":[[352,7]]}}}],["includ",{"_index":938,"t":{"225":{"position":[[501,7]]},"227":{"position":[[718,9]]}}}],["increas",{"_index":283,"t":{"16":{"position":[[342,10]]}}}],["inde",{"_index":376,"t":{"21":{"position":[[233,6],[267,6]]}}}],["index",{"_index":604,"t":{"139":{"position":[[294,5],[347,6],[678,7]]},"225":{"position":[[348,5]]}}}],["index(str",{"_index":458,"t":{"73":{"position":[[151,12]]}}}],["index.html",{"_index":927,"t":{"225":{"position":[[354,11]]}}}],["index_kmp(str",{"_index":528,"t":{"81":{"position":[[247,16]]}}}],["indic",{"_index":53,"t":{"4":{"position":[[582,10],[1591,9]]}}}],["info",{"_index":548,"t":{"93":{"position":[[156,4]]},"98":{"position":[[0,4]]},"174":{"position":[[138,4]]}}}],["inform",{"_index":184,"t":{"14":{"position":[[8,12]]},"16":{"position":[[19,11]]}}}],["infti",{"_index":869,"t":{"206":{"position":[[528,8]]},"212":{"position":[[67,25]]}}}],["inftye+∞=+∞,e+∞=0e^{+\\infti",{"_index":866,"t":{"206":{"position":[[384,30]]}}}],["ini_nin​就是指令条数，tcput_{cpu}tcpu​就是指令执行周期数，fcf_cfc​就是时钟速率，是tcput_{cpu}tcpu",{"_index":1103,"t":{"270":{"position":[[194,78]]}}}],["init(treenod",{"_index":589,"t":{"139":{"position":[[66,13]]}}}],["initgit",{"_index":884,"t":{"220":{"position":[[25,7]]}}}],["initqueue(q",{"_index":1017,"t":{"245":{"position":[[437,13]]}}}],["inorgan",{"_index":196,"t":{"14":{"position":[[189,9]]}}}],["insertsort(int",{"_index":663,"t":{"170":{"position":[[460,14]]}}}],["insertsortplus(int",{"_index":681,"t":{"172":{"position":[[320,18]]}}}],["inspir",{"_index":86,"t":{"4":{"position":[[1550,11]]}}}],["instal",{"_index":966,"t":{"227":{"position":[[268,7],[328,7],[367,7]]}}}],["int",{"_index":457,"t":{"73":{"position":[[147,3],[177,3]]},"81":{"position":[[76,3],[243,3],[288,3]]},"83":{"position":[[380,3]]},"139":{"position":[[28,3],[38,3],[219,12],[354,11],[490,11]]},"150":{"position":[[88,3],[98,3],[231,3],[391,3]]},"170":{"position":[[489,3]]},"172":{"position":[[353,3]]},"174":{"position":[[245,3]]},"178":{"position":[[53,3]]},"180":{"position":[[473,3],[514,3],[786,3]]},"184":{"position":[[325,3]]},"189":{"position":[[283,3],[292,4],[421,3],[788,3]]},"240":{"position":[[637,3],[680,3]]},"242":{"position":[[119,3],[133,3],[297,3]]}}}],["interact",{"_index":233,"t":{"14":{"position":[[702,11]]}}}],["intergalact",{"_index":24,"t":{"4":{"position":[[177,13],[427,13],[1117,13]]}}}],["interpret",{"_index":89,"t":{"4":{"position":[[1712,9]]}}}],["intro",{"_index":651,"t":{"159":{"position":[[0,5]]}}}],["investig",{"_index":209,"t":{"14":{"position":[[316,12]]}}}],["ioniz",{"_index":81,"t":{"4":{"position":[[1426,7]]}}}],["ip",{"_index":936,"t":{"225":{"position":[[480,2]]}}}],["iron",{"_index":199,"t":{"14":{"position":[[217,4]]}}}],["isempty(t[],int",{"_index":596,"t":{"139":{"position":[[147,15]]}}}],["isempty;}treenod",{"_index":588,"t":{"139":{"position":[[42,18]]}}}],["issu",{"_index":285,"t":{"16":{"position":[[389,6]]}}}],["item",{"_index":1283,"t":{"318":{"position":[[420,8]]},"322":{"position":[[504,8]]},"330":{"position":[[277,8]]},"373":{"position":[[421,8]]},"375":{"position":[[378,8],[1079,8]]},"383":{"position":[[211,8]]},"385":{"position":[[144,8]]}}}],["itemord",{"_index":1287,"t":{"318":{"position":[[578,12]]},"320":{"position":[[227,12]]},"322":{"position":[[776,12],[1018,12]]},"324":{"position":[[210,12]]},"330":{"position":[[473,12],[615,12]]},"361":{"position":[[180,12]]},"373":{"position":[[585,12]]},"375":{"position":[[647,12],[1348,12]]},"383":{"position":[[351,12]]},"385":{"position":[[304,12]]}}}],["itemuuid",{"_index":1412,"t":{"375":{"position":[[467,11],[1168,11]]}}}],["itself",{"_index":339,"t":{"16":{"position":[[1448,7]]}}}],["i做前段指针，j",{"_index":817,"t":{"189":{"position":[[529,15]]}}}],["i前移（i",{"_index":763,"t":{"184":{"position":[[240,19]]}}}],["i向前走到4",{"_index":708,"t":{"174":{"position":[[668,20]]}}}],["i和j",{"_index":456,"t":{"73":{"position":[[49,68]]}}}],["i块的某个字，不论cach",{"_index":1173,"t":{"291":{"position":[[7,36]]}}}],["i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i",{"_index":758,"t":{"184":{"position":[[0,158]]}}}],["i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n",{"_index":729,"t":{"178":{"position":[[351,44]]}}}],["i，前面i",{"_index":659,"t":{"170":{"position":[[34,25]]}}}],["j",{"_index":463,"t":{"73":{"position":[[214,1],[269,4],[290,1],[304,1]]},"77":{"position":[[464,93]]},"79":{"position":[[352,35],[545,53],[649,1],[911,1],[934,1],[972,1],[1818,1],[1898,1],[1940,2]]},"81":{"position":[[80,1],[367,4],[380,1]]},"83":{"position":[[384,1],[465,4]]},"170":{"position":[[581,3]]},"178":{"position":[[173,1]]},"180":{"position":[[378,12]]},"184":{"position":[[346,1],[386,2]]},"191":{"position":[[526,1]]},"286":{"position":[[161,1]]}}}],["j<=high;k",{"_index":816,"t":{"189":{"position":[[515,13]]}}}],["j<t.len",{"_index":531,"t":{"81":{"position":[[322,9]]}}}],["jekyl",{"_index":881,"t":{"216":{"position":[[186,21]]}}}],["jess",{"_index":139,"t":{"8":{"position":[[522,5]]}}}],["job",{"_index":956,"t":{"227":{"position":[[108,5]]}}}],["joy",{"_index":386,"t":{"21":{"position":[[404,4]]}}}],["jpg",{"_index":1470,"t":{"411":{"position":[[66,9],[84,9],[185,7]]}}}],["j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j",{"_index":502,"t":{"79":{"position":[[1292,52]]}}}],["j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的ab相等呀，而主串中指针扫过的位置，必有ab匹配，那么我们可以直接跳过前部的ab",{"_index":492,"t":{"79":{"position":[[688,106]]}}}],["j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k",{"_index":477,"t":{"77":{"position":[[293,80]]}}}],["j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next",{"_index":482,"t":{"79":{"position":[[0,192]]}}}],["k",{"_index":490,"t":{"79":{"position":[[630,1],[642,1],[954,1],[965,1],[987,1],[1010,1],[1800,1],[1811,1],[1834,2],[1873,1],[1891,1],[1924,2],[1933,1]]},"81":{"position":[[172,4],[211,1]]},"83":{"position":[[470,4],[511,2],[587,1]]},"186":{"position":[[1201,1]]}}}],["k*2",{"_index":791,"t":{"186":{"position":[[1062,27]]}}}],["k*2;i<len;i*=2",{"_index":790,"t":{"186":{"position":[[1045,16]]}}}],["k,int",{"_index":788,"t":{"186":{"position":[[983,5]]}}}],["k...j",{"_index":480,"t":{"77":{"position":[[418,5]]}}}],["k=next[k]k=next[k]k=next[k",{"_index":510,"t":{"79":{"position":[[2145,52]]}}}],["k_j^{i",{"_index":840,"t":{"191":{"position":[[503,7]]}}}],["keith",{"_index":64,"t":{"4":{"position":[[836,6]]}}}],["kiloparsec",{"_index":84,"t":{"4":{"position":[[1457,11]]}}}],["kinemat",{"_index":54,"t":{"4":{"position":[[651,10],[1490,10]]}}}],["kmp",{"_index":455,"t":{"71":{"position":[[19,7]]},"77":{"position":[[0,54],[211,17]]},"81":{"position":[[236,6]]}}}],["l[1.......i",{"_index":656,"t":{"170":{"position":[[0,11]]}}}],["l[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得l分为两块：l[1....k",{"_index":733,"t":{"180":{"position":[[7,68]]}}}],["l[i",{"_index":657,"t":{"170":{"position":[[15,4],[287,14],[302,12]]}}}],["l[i+1......n",{"_index":658,"t":{"170":{"position":[[20,13]]}}}],["l[i]，然后将子序列中大于l[i",{"_index":662,"t":{"170":{"position":[[237,49]]}}}],["languag",{"_index":362,"t":{"21":{"position":[[29,8],[381,8]]}}}],["larg",{"_index":147,"t":{"8":{"position":[[643,7],[2183,7]]}}}],["lastactivetim",{"_index":1348,"t":{"334":{"position":[[320,17]]},"336":{"position":[[270,17]]},"345":{"position":[[412,17]]},"351":{"position":[[424,17]]},"353":{"position":[[310,17]]},"355":{"position":[[676,17]]},"405":{"position":[[320,17]]},"407":{"position":[[273,17]]},"413":{"position":[[275,17]]}}}],["latest",{"_index":958,"t":{"227":{"position":[[138,6]]}}}],["layer",{"_index":146,"t":{"8":{"position":[[633,5],[2173,5]]}}}],["le",{"_index":396,"t":{"32":{"position":[[85,3],[147,3],[153,3]]},"34":{"position":[[146,3],[152,3],[197,3],[203,3]]},"93":{"position":[[238,3]]},"141":{"position":[[238,3],[266,3]]},"186":{"position":[[568,3],[596,3]]},"191":{"position":[[499,3],[511,3],[522,3],[528,3],[536,3],[542,3]]}}}],["learn",{"_index":385,"t":{"21":{"position":[[370,8]]}}}],["left",{"_index":613,"t":{"139":{"position":[[562,4],[612,5]]}}}],["leftchild,nexts",{"_index":645,"t":{"150":{"position":[[414,22]]}}}],["len",{"_index":591,"t":{"139":{"position":[[88,5]]},"170":{"position":[[483,5]]},"172":{"position":[[347,5]]},"174":{"position":[[239,5]]},"178":{"position":[[112,5]]},"184":{"position":[[293,5]]},"186":{"position":[[873,5],[989,5],[1344,5]]}}}],["len/2",{"_index":785,"t":{"186":{"position":[[906,27]]}}}],["len/2;gap>=1;gap",{"_index":695,"t":{"174":{"position":[[284,16]]}}}],["len/2;i>0;i",{"_index":784,"t":{"186":{"position":[[891,14]]}}}],["len;i",{"_index":668,"t":{"170":{"position":[[513,9]]},"172":{"position":[[390,9]]}}}],["len;i>n;i",{"_index":798,"t":{"186":{"position":[[1383,9]]}}}],["len，那么第一棵子树的根节点下表为len/2",{"_index":782,"t":{"186":{"position":[[746,35]]}}}],["letter",{"_index":301,"t":{"16":{"position":[[795,6]]}}}],["level",{"_index":1275,"t":{"318":{"position":[[111,8]]},"322":{"position":[[133,8]]},"361":{"position":[[136,8]]},"363":{"position":[[47,8],[204,8]]},"365":{"position":[[131,8]]},"367":{"position":[[78,8]]},"371":{"position":[[52,8]]},"373":{"position":[[110,8]]},"375":{"position":[[57,8],[765,8]]},"379":{"position":[[72,8]]},"381":{"position":[[72,8]]}}}],["levelnam",{"_index":1402,"t":{"361":{"position":[[153,12]]},"363":{"position":[[221,12]]},"365":{"position":[[148,12]]},"367":{"position":[[95,12]]}}}],["lftp",{"_index":971,"t":{"227":{"position":[[339,4]]}}}],["life",{"_index":292,"t":{"16":{"position":[[534,4],[1724,5]]}}}],["limit",{"_index":202,"t":{"14":{"position":[[246,7]]},"16":{"position":[[292,6],[1230,12]]}}}],["limitdatetim",{"_index":1278,"t":{"318":{"position":[[220,16]]},"322":{"position":[[244,16]]},"373":{"position":[[220,16]]},"375":{"position":[[168,16],[876,16]]}}}],["limitendtim",{"_index":1241,"t":{"310":{"position":[[154,15]]}}}],["limitstarttim",{"_index":1240,"t":{"310":{"position":[[121,17]]}}}],["line",{"_index":49,"t":{"4":{"position":[[513,5],[564,5],[1385,5]]}}}],["list",{"_index":1262,"t":{"316":{"position":[[200,7]]},"326":{"position":[[161,7]]},"328":{"position":[[157,7]]},"338":{"position":[[150,7]]},"351":{"position":[[189,7]]},"363":{"position":[[161,7]]},"371":{"position":[[202,7]]},"379":{"position":[[211,7]]},"381":{"position":[[200,7]]},"389":{"position":[[148,7]]},"397":{"position":[[161,7]]},"401":{"position":[[163,7]]},"403":{"position":[[174,7]]}}}],["listen",{"_index":923,"t":{"225":{"position":[[218,6],[245,6]]}}}],["ll",{"_index":543,"t":{"88":{"position":[[22,5]]},"90":{"position":[[94,5]]},"95":{"position":[[183,21]]}}}],["load",{"_index":226,"t":{"14":{"position":[[589,7],[752,6]]},"16":{"position":[[1936,7]]}}}],["local",{"_index":979,"t":{"227":{"position":[[566,5]]}}}],["locat",{"_index":930,"t":{"225":{"position":[[389,8]]}}}],["log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1",{"_index":633,"t":{"141":{"position":[[381,94]]}}}],["log_format",{"_index":942,"t":{"225":{"position":[[571,10]]}}}],["long",{"_index":110,"t":{"8":{"position":[[188,4],[1581,4]]},"14":{"position":[[504,4]]}}}],["loss",{"_index":335,"t":{"16":{"position":[[1373,5]]}}}],["lot",{"_index":371,"t":{"21":{"position":[[164,3],[195,3]]}}}],["low",{"_index":203,"t":{"14":{"position":[[257,3]]},"172":{"position":[[413,3],[459,4],[495,3]]},"180":{"position":[[305,14],[370,7],[657,6],[718,5]]}}}],["low+high)/2",{"_index":827,"t":{"189":{"position":[[798,13]]}}}],["low,int",{"_index":741,"t":{"180":{"position":[[499,7],[755,7]]},"189":{"position":[[356,7],[759,7]]}}}],["low,j",{"_index":813,"t":{"189":{"position":[[485,5]]}}}],["low;k<=high;k",{"_index":811,"t":{"189":{"position":[[440,16]]}}}],["low位置的元素拿走，填high",{"_index":739,"t":{"180":{"position":[[417,17]]}}}],["low向后移动，直到遇到第一个比pivot",{"_index":738,"t":{"180":{"position":[[391,25]]}}}],["low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j",{"_index":735,"t":{"180":{"position":[[162,142]]}}}],["lr",{"_index":545,"t":{"88":{"position":[[34,7]]},"90":{"position":[[106,7]]},"95":{"position":[[227,29]]}}}],["m",{"_index":561,"t":{"107":{"position":[[253,30]]},"222":{"position":[[226,1]]},"295":{"position":[[327,8]]}}}],["m\"提交信息\"git",{"_index":889,"t":{"220":{"position":[[80,10]]}}}],["m(其中i就是对应的cache块号，j是主存号，m是cach",{"_index":1135,"t":{"286":{"position":[[167,36]]}}}],["m*r^en=(−1)s∗m∗r",{"_index":437,"t":{"65":{"position":[[28,17]]}}}],["m+1",{"_index":650,"t":{"157":{"position":[[162,3]]}}}],["m/2",{"_index":556,"t":{"105":{"position":[[0,26]]},"107":{"position":[[0,26],[115,27]]},"110":{"position":[[29,37]]}}}],["m/2]（向上取整）棵子树，即至少有[m/2",{"_index":553,"t":{"98":{"position":[[45,49]]}}}],["made",{"_index":119,"t":{"8":{"position":[[288,4],[1739,4]]}}}],["magnet",{"_index":272,"t":{"16":{"position":[[201,8]]}}}],["magnitud",{"_index":155,"t":{"8":{"position":[[804,9],[2400,9]]}}}],["main",{"_index":892,"t":{"220":{"position":[[106,4]]},"225":{"position":[[582,4],[770,6]]},"227":{"position":[[101,4]]}}}],["maintain",{"_index":281,"t":{"16":{"position":[[314,8]]}}}],["malloc(sizeof(int)*(n+1",{"_index":805,"t":{"189":{"position":[[297,28]]}}}],["massiv",{"_index":13,"t":{"4":{"position":[[70,7],[457,7],[718,7],[1334,7]]}}}],["mathemat",{"_index":855,"t":{"200":{"position":[[4,11]]}}}],["matrix",{"_index":197,"t":{"14":{"position":[[199,6],[794,6]]}}}],["max[ve(j",{"_index":1080,"t":{"262":{"position":[[104,9]]}}}],["maxsize;i",{"_index":637,"t":{"150":{"position":[[150,12]]}}}],["measur",{"_index":117,"t":{"8":{"position":[[260,12],[1711,12]]}}}],["mechan",{"_index":137,"t":{"8":{"position":[[507,10]]}}}],["media",{"_index":318,"t":{"16":{"position":[[992,5]]}}}],["mediat",{"_index":156,"t":{"8":{"position":[[822,8],[2418,8]]}}}],["medium",{"_index":25,"t":{"4":{"position":[[191,6],[441,6],[1131,7]]}}}],["memor",{"_index":374,"t":{"21":{"position":[[213,10]]}}}],["merge(a,low,mid,high",{"_index":830,"t":{"189":{"position":[[859,22]]}}}],["merge(int",{"_index":806,"t":{"189":{"position":[[338,9]]}}}],["mergesort(a,low,mid",{"_index":828,"t":{"189":{"position":[[812,21]]}}}],["mergesort(a,mid+1,high",{"_index":829,"t":{"189":{"position":[[834,24]]}}}],["mergesort(int",{"_index":825,"t":{"189":{"position":[[737,13]]}}}],["messag",{"_index":1233,"t":{"306":{"position":[[137,10]]},"308":{"position":[[48,10]]},"314":{"position":[[67,10]]},"316":{"position":[[157,10]]},"318":{"position":[[64,10]]},"320":{"position":[[289,10]]},"322":{"position":[[68,10]]},"324":{"position":[[342,10]]},"326":{"position":[[115,10]]},"328":{"position":[[110,10]]},"330":{"position":[[118,10]]},"332":{"position":[[53,10]]},"334":{"position":[[57,10]]},"336":{"position":[[472,10]]},"338":{"position":[[107,10]]},"340":{"position":[[65,10]]},"342":{"position":[[69,10]]},"345":{"position":[[121,10]]},"347":{"position":[[48,10]]},"351":{"position":[[140,10]]},"353":{"position":[[56,10]]},"355":{"position":[[278,10]]},"357":{"position":[[63,10]]},"359":{"position":[[62,10]]},"361":{"position":[[65,10]]},"363":{"position":[[118,10]]},"365":{"position":[[69,10]]},"367":{"position":[[141,10]]},"369":{"position":[[69,10]]},"371":{"position":[[159,10]]},"373":{"position":[[62,10]]},"375":{"position":[[717,10]]},"377":{"position":[[62,10]]},"379":{"position":[[168,10]]},"381":{"position":[[157,10]]},"383":{"position":[[62,10]]},"385":{"position":[[342,10]]},"387":{"position":[[60,10]]},"389":{"position":[[105,10]]},"391":{"position":[[57,10]]},"393":{"position":[[352,10]]},"395":{"position":[[63,10]]},"397":{"position":[[117,10]]},"399":{"position":[[146,10]]},"401":{"position":[[120,10]]},"403":{"position":[[130,10]]},"405":{"position":[[55,10]]},"407":{"position":[[477,10]]},"409":{"position":[[77,10]]},"413":{"position":[[479,10]]}}}],["messageid",{"_index":1356,"t":{"338":{"position":[[196,12]]}}}],["method",{"_index":194,"t":{"14":{"position":[[145,6],[439,6]]},"16":{"position":[[1545,6],[1903,7]]}}}],["mgraph",{"_index":1003,"t":{"240":{"position":[[699,20]]}}}],["mid",{"_index":685,"t":{"172":{"position":[[453,3],[501,3],[522,3]]},"189":{"position":[[792,3]]}}}],["mid+1,k",{"_index":814,"t":{"189":{"position":[[493,7]]}}}],["mid,int",{"_index":807,"t":{"189":{"position":[[364,7]]}}}],["mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high",{"_index":808,"t":{"189":{"position":[[379,41]]}}}],["min",{"_index":765,"t":{"184":{"position":[[329,3],[380,3]]}}}],["min[vl(j",{"_index":1085,"t":{"262":{"position":[[333,9]]}}}],["mips=intcpu∗106=fccpi∗106mip",{"_index":1100,"t":{"270":{"position":[[84,29]]}}}],["mips就是用指令条数除以（执行时间*10610^6106",{"_index":1115,"t":{"274":{"position":[[6,32]]}}}],["mips就是百万条指令每秒，还有另外一种含义，即没有内部互锁的流水线级微处理器，这里介绍的mips，是一个用来描述计算机性能的尺度。对于给定的程序mip",{"_index":1099,"t":{"270":{"position":[[0,83]]}}}],["mix",{"_index":355,"t":{"16":{"position":[[1825,3]]}}}],["mod",{"_index":1134,"t":{"286":{"position":[[163,3]]}}}],["modifytim",{"_index":1350,"t":{"334":{"position":[[379,13]]},"336":{"position":[[329,13]]},"345":{"position":[[392,13]]},"351":{"position":[[518,13]]},"353":{"position":[[404,13]]},"355":{"position":[[649,13]]},"405":{"position":[[395,13]]},"407":{"position":[[348,13]]},"413":{"position":[[350,13]]}}}],["molecul",{"_index":298,"t":{"16":{"position":[[765,9]]}}}],["momentum",{"_index":38,"t":{"4":{"position":[[352,8]]}}}],["mothdaydoexamquestionvalu",{"_index":1376,"t":{"349":{"position":[[213,29]]}}}],["mothdaytext",{"_index":1377,"t":{"349":{"position":[[258,14]]}}}],["mothdayuseractionvalu",{"_index":1374,"t":{"349":{"position":[[173,25]]}}}],["mq最低位：为1则加x的补码，为0则加0",{"_index":426,"t":{"56":{"position":[[115,22]]}}}],["much",{"_index":337,"t":{"16":{"position":[[1416,4]]}}}],["multipl",{"_index":245,"t":{"14":{"position":[[922,8]]}}}],["m个子树，即一个节点中至多m",{"_index":552,"t":{"98":{"position":[[5,23]]}}}],["m阶b+树每个结点最多m棵子树（也就是最多m",{"_index":566,"t":{"110":{"position":[[0,28]]}}}],["m（0~22",{"_index":447,"t":{"69":{"position":[[77,9]]}}}],["m，所以总数为n",{"_index":649,"t":{"157":{"position":[[153,8]]}}}],["n",{"_index":423,"t":{"54":{"position":[[97,13]]},"178":{"position":[[177,1]]},"184":{"position":[[179,7],[462,15]]},"189":{"position":[[38,65]]},"274":{"position":[[101,26]]},"295":{"position":[[4,23],[96,2]]}}}],["n(n",{"_index":985,"t":{"235":{"position":[[67,7]]},"237":{"position":[[44,7]]}}}],["n(n−1)2\\frac{n(n",{"_index":771,"t":{"184":{"position":[[495,36]]}}}],["n)<)(n)<o(nlong_2n)<o(n^2)<o(n^3)<o(2^n)<o(n!)<o(n^n)o(1)<o(log2​n)<)(n)<o(nlong2​n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":576,"t":{"126":{"position":[[268,114]]}}}],["n*n邻接矩阵，每条边的权值用int",{"_index":1001,"t":{"240":{"position":[[655,24]]}}}],["n+1",{"_index":392,"t":{"32":{"position":[[0,42]]},"34":{"position":[[116,9]]},"47":{"position":[[143,27]]}}}],["n+1次，左移n",{"_index":431,"t":{"58":{"position":[[92,11]]},"60":{"position":[[105,10]]}}}],["n,0",{"_index":842,"t":{"191":{"position":[[532,3]]}}}],["n/2",{"_index":690,"t":{"174":{"position":[[143,28],[184,8]]}}}],["n2",{"_index":620,"t":{"141":{"position":[[28,2]]}}}],["n=(−1)s∗m∗ren",{"_index":435,"t":{"65":{"position":[[0,17]]}}}],["n>n后的都是无穷大，也就是无穷多项。而无界变量是n>n后，存在∣xn∣|x_n|∣xn",{"_index":875,"t":{"212":{"position":[[157,77]]}}}],["n[i].par",{"_index":638,"t":{"150":{"position":[[163,11]]}}}],["n[maxsize]；for(int",{"_index":635,"t":{"150":{"position":[[121,18]]}}}],["name",{"_index":953,"t":{"227":{"position":[[62,5],[182,5],[262,5],[346,5],[394,5]]},"310":{"position":[[93,7]]},"314":{"position":[[119,7]]},"316":{"position":[[231,7]]},"318":{"position":[[172,7],[270,7]]},"322":{"position":[[194,7],[338,7]]},"361":{"position":[[115,7]]},"363":{"position":[[183,7]]},"365":{"position":[[110,7]]},"367":{"position":[[57,7]]},"371":{"position":[[231,7]]},"373":{"position":[[171,7],[268,7]]},"375":{"position":[[118,7],[214,7],[826,7],[922,7]]},"379":{"position":[[233,7]]},"391":{"position":[[186,7]]},"393":{"position":[[113,7],[481,7]]},"409":{"position":[[110,7]]},"411":{"position":[[76,7]]}}}],["natur",{"_index":241,"t":{"14":{"position":[[855,7]]}}}],["need",{"_index":321,"t":{"16":{"position":[[1059,4],[1265,5]]},"21":{"position":[[76,5]]}}}],["neg",{"_index":237,"t":{"14":{"position":[[766,10]]}}}],["neq",{"_index":495,"t":{"79":{"position":[[893,4]]}}}],["neutral",{"_index":80,"t":{"4":{"position":[[1396,7]]}}}],["next",{"_index":487,"t":{"79":{"position":[[508,24]]},"81":{"position":[[66,4],[279,8]]},"242":{"position":[[160,6]]}}}],["next[++j",{"_index":526,"t":{"81":{"position":[[160,9]]}}}],["next[1",{"_index":521,"t":{"81":{"position":[[93,7]]}}}],["next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1",{"_index":486,"t":{"79":{"position":[[464,43]]}}}],["next[j",{"_index":508,"t":{"79":{"position":[[1823,8]]},"81":{"position":[[191,7],[384,8]]}}}],["next[j+1",{"_index":527,"t":{"81":{"position":[[177,11]]}}}],["next[j]=next[j",{"_index":506,"t":{"79":{"position":[[1752,21]]}}}],["next[k",{"_index":513,"t":{"79":{"position":[[2496,7]]},"81":{"position":[[215,8]]}}}],["nextneighbor(g,v",{"_index":1029,"t":{"245":{"position":[[637,19]]},"247":{"position":[[346,18]]}}}],["nextval",{"_index":537,"t":{"83":{"position":[[368,11]]}}}],["nextval[1",{"_index":538,"t":{"83":{"position":[[397,10]]}}}],["nextval[j",{"_index":541,"t":{"83":{"position":[[498,10],[539,10]]}}}],["nextval[k",{"_index":542,"t":{"83":{"position":[[552,11],[591,10]]}}}],["next}child",{"_index":640,"t":{"150":{"position":[[255,11]]}}}],["next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba",{"_index":500,"t":{"79":{"position":[[1105,134]]}}}],["next数组的求解就算结束了。我们来看下next",{"_index":516,"t":{"81":{"position":[[0,38]]}}}],["next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果t[next[j]]等于t[k]，那么直接跳过这一层匹配，改为t[next[next[j]]即可。也就是跳过了中间无效的t[next[j]]和t[k",{"_index":535,"t":{"83":{"position":[[178,154]]}}}],["next数组，next数组的1和2无脑填0和1",{"_index":483,"t":{"79":{"position":[[204,147]]}}}],["next的1和2还是直接填0和1",{"_index":501,"t":{"79":{"position":[[1240,44]]}}}],["nginx",{"_index":913,"t":{"225":{"position":[[0,43],[777,15]]}}}],["nginx;worker_process",{"_index":916,"t":{"225":{"position":[[86,22]]}}}],["nginx配置文件nginx.conf",{"_index":914,"t":{"225":{"position":[[44,36]]}}}],["node",{"_index":587,"t":{"139":{"position":[[22,5]]},"150":{"position":[[82,5],[225,5],[248,4],[385,5],[408,5]]},"227":{"position":[[239,4]]}}}],["node.j",{"_index":961,"t":{"227":{"position":[[192,7]]}}}],["node@v2",{"_index":964,"t":{"227":{"position":[[225,7]]}}}],["nondestruct",{"_index":224,"t":{"14":{"position":[[549,14]]}}}],["notebook",{"_index":655,"t":{"164":{"position":[[41,9]]}}}],["npm",{"_index":896,"t":{"222":{"position":[[133,3]]},"227":{"position":[[363,3],[378,3]]}}}],["null",{"_index":554,"t":{"98":{"position":[[95,22]]},"103":{"position":[[18,84]]},"306":{"position":[[166,5]]},"308":{"position":[[77,5]]},"310":{"position":[[139,5],[170,4]]},"318":{"position":[[237,5],[481,5]]},"320":{"position":[[70,5],[149,5]]},"322":{"position":[[981,5],[1005,5]]},"324":{"position":[[173,5],[197,5]]},"326":{"position":[[540,4]]},"330":{"position":[[347,4],[401,5],[486,4],[652,5]]},"336":{"position":[[501,5]]},"340":{"position":[[94,5]]},"345":{"position":[[158,5],[176,5],[221,5],[239,5],[252,5],[265,5],[283,5],[302,5],[317,5],[331,5],[347,5],[366,5],[386,5],[406,5],[430,5],[447,5],[465,4]]},"347":{"position":[[77,5]]},"351":{"position":[[315,5],[335,5],[369,5],[412,5],[614,4]]},"353":{"position":[[201,5],[221,5],[255,5],[298,5],[500,4]]},"355":{"position":[[40,5],[206,5],[226,5],[461,5],[479,5],[502,5],[543,5],[602,5],[663,5],[755,4]]},"357":{"position":[[99,5]]},"361":{"position":[[193,5]]},"363":{"position":[[56,5]]},"367":{"position":[[170,5]]},"369":{"position":[[98,5]]},"371":{"position":[[46,5],[61,5],[85,5]]},"373":{"position":[[237,5],[484,5]]},"375":{"position":[[185,5],[454,5],[479,4],[893,5],[1155,5],[1180,4]]},"377":{"position":[[91,5]]},"379":{"position":[[61,5]]},"381":{"position":[[44,5],[66,5],[81,5],[100,5],[263,5],[464,5]]},"383":{"position":[[269,5],[364,4]]},"385":{"position":[[205,5],[317,5],[371,5]]},"387":{"position":[[89,5]]},"389":{"position":[[48,5]]},"391":{"position":[[416,4]]},"395":{"position":[[99,5]]},"397":{"position":[[53,5]]},"399":{"position":[[182,5]]},"401":{"position":[[58,5]]},"403":{"position":[[55,5],[73,5]]},"405":{"position":[[308,5],[451,5],[477,4]]},"407":{"position":[[423,5],[447,4],[506,5]]},"413":{"position":[[425,5],[449,4],[508,5]]}}}],["numer",{"_index":347,"t":{"16":{"position":[[1634,8]]}}}],["nutrient",{"_index":97,"t":{"8":{"position":[[45,9],[576,9],[714,9],[1396,8],[1438,9],[2042,8],[2116,9],[2254,9],[3077,8]]}}}],["nutrit",{"_index":167,"t":{"8":{"position":[[1079,11],[2709,11]]}}}],["n})\\le",{"_index":394,"t":{"32":{"position":[[76,6]]}}}],["n}−(1−2−n)≤x≤1−2−n",{"_index":397,"t":{"32":{"position":[[95,19]]}}}],["n}−1≤x≤1−2−n",{"_index":405,"t":{"34":{"position":[[162,12]]}}}],["n个内部红节点的红黑树高度h≤2∗log2(n+1)h",{"_index":549,"t":{"93":{"position":[[209,28]]}}}],["n个辅助单元，空间复杂度o(n)o(n)o(n",{"_index":831,"t":{"189":{"position":[[897,26]]}}}],["n为任务数目，sum为对应的时间，其中sum",{"_index":1223,"t":{"299":{"position":[[341,84]]}}}],["n和m",{"_index":802,"t":{"189":{"position":[[109,17]]}}}],["n在某个范围的时候，时间复杂度为o(n1.3)o(n^{1.3})o(n1.3)，最坏情况是o(n2)o(n^2)o(n2",{"_index":712,"t":{"174":{"position":[[805,86]]}}}],["n大于某个数时，后面的值，趋向于极限值，其中需要注意的是，数列极限值与前n项无关，只跟后面的n>n",{"_index":860,"t":{"206":{"position":[[10,100]]}}}],["n就挂到队列n的队尾中，比如520的个位是0，就挂0",{"_index":848,"t":{"191":{"position":[[760,43]]}}}],["n就是执行的指令数目，ttt就是各个段的时间，执行指令的数目，除以t得到吞吐率，也可以转化为mip",{"_index":1197,"t":{"295":{"position":[[204,53]]}}}],["n时，i的右孩子是2i+1",{"_index":631,"t":{"141":{"position":[[270,13]]},"186":{"position":[[600,13]]}}}],["n时，i的左孩子是2i",{"_index":629,"t":{"141":{"position":[[242,11]]},"186":{"position":[[572,11]]}}}],["n是有几个结果，m",{"_index":1207,"t":{"297":{"position":[[69,18]]}}}],["n是结果数目，t",{"_index":1211,"t":{"297":{"position":[[138,36]]}}}],["n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d",{"_index":835,"t":{"191":{"position":[[333,65]]}}}],["n足够大的时候去分析执行时间。采用大o",{"_index":574,"t":{"126":{"position":[[69,65]]}}}],["n，边数为n",{"_index":1045,"t":{"249":{"position":[[0,28]]}}}],["o(1)<o(log2n)<)(n)<o(nlong2n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn)o(1)<o(log_2",{"_index":575,"t":{"126":{"position":[[196,71]]}}}],["o(1)o(1)o(1",{"_index":688,"t":{"172":{"position":[[630,18]]},"174":{"position":[[781,23]]},"178":{"position":[[286,18]]},"184":{"position":[[434,27]]},"186":{"position":[[1450,24]]},"193":{"position":[[80,12],[166,12],[205,12],[271,12],[458,12],[572,12]]}}}],["o(d(r+1))o(d(r+1))o(d(r+1",{"_index":853,"t":{"193":{"position":[[707,27],[735,27],[763,27]]}}}],["o(log2n)o(log_{2}n)o(log2​n",{"_index":852,"t":{"193":{"position":[[370,28]]}}}],["o(log2n)o(log_{2}n)o(log2​n)，最坏需要n−1次递归调用，所以栈为o(n)n",{"_index":755,"t":{"180":{"position":[[926,89]]}}}],["o(n)o(n)o(n",{"_index":677,"t":{"170":{"position":[[672,40]]},"193":{"position":[[33,12],[224,12],[689,12]]}}}],["o(n)o(n)o(n)调整时间为o(h)o(h)o(h)，最好、最坏、平均情况下的时间复杂度都是o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":801,"t":{"186":{"position":[[1475,84]]}}}],["o(n)o(n)o(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":832,"t":{"189":{"position":[[924,83]]}}}],["o(n)o(n)o(n)，否则则进行n",{"_index":727,"t":{"178":{"position":[[305,30]]}}}],["o(n2)o(n^2)o(n2",{"_index":689,"t":{"172":{"position":[[649,22]]},"193":{"position":[[46,16],[63,16],[132,16],[149,16],[188,16],[237,16],[254,16],[353,16],[407,16],[424,16],[441,16]]},"240":{"position":[[720,40]]}}}],["o(n2)o(n^2)o(n2)，理想情况是o(nlong2n)o(nlong_{2}n)o(nlong2​n",{"_index":757,"t":{"180":{"position":[[1081,69]]}}}],["o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":851,"t":{"193":{"position":[[100,31],[289,31],[321,31],[476,31],[508,31],[540,31],[593,31],[625,31],[657,31]]}}}],["o(r)o(r)o(r",{"_index":854,"t":{"193":{"position":[[791,12]]}}}],["o(∣v∣)o(|v|)o(∣v",{"_index":1034,"t":{"245":{"position":[[925,45]]}}}],["o(∣v∣)o(|v|)o(∣v∣)次，搜索邻接边需要o(∣e∣)o(|e|)o(∣e∣)，故为o(∣v∣+∣e)o(|v|+|e)o(∣v∣+∣e)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":1033,"t":{"245":{"position":[[724,200]]},"247":{"position":[[392,200]]}}}],["o(∣v∣+∣e∣)o(|v|+|e|)o(∣v∣+∣e∣)若为无向图则o(∣v∣+2∣e∣)o(|v|+2|e|)o(∣v∣+2∣",{"_index":1011,"t":{"242":{"position":[[358,98]]}}}],["o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":1058,"t":{"255":{"position":[[240,41]]}}}],["observ",{"_index":11,"t":{"4":{"position":[[52,8],[414,8],[555,8],[1304,7]]},"8":{"position":[[1107,8],[2788,8]]}}}],["ocean",{"_index":101,"t":{"8":{"position":[[91,6],[276,5],[563,6],[850,5],[947,5],[1484,6],[1727,5],[2103,6],[2446,5],[2577,5]]}}}],["of，为1",{"_index":411,"t":{"49":{"position":[[15,26]]}}}],["ok",{"_index":994,"t":{"240":{"position":[[290,48]]}}}],["on",{"_index":366,"t":{"21":{"position":[[72,3]]}}}],["open",{"_index":142,"t":{"8":{"position":[[558,4],[2098,4]]}}}],["openid",{"_index":1398,"t":{"355":{"position":[[760,10]]}}}],["origin",{"_index":887,"t":{"220":{"position":[[44,6],[99,6]]},"222":{"position":[[273,6]]},"411":{"position":[[54,11]]}}}],["out",{"_index":40,"t":{"4":{"position":[[379,3]]}}}],["over",{"_index":140,"t":{"8":{"position":[[544,4],[2084,4]]}}}],["overcom",{"_index":322,"t":{"16":{"position":[[1070,8]]}}}],["oxid",{"_index":200,"t":{"14":{"position":[[222,6]]}}}],["p1和p2",{"_index":803,"t":{"189":{"position":[[142,23]]}}}],["p>什么是快乐星球？</p",{"_index":1425,"t":{"383":{"position":[[165,18]]}}}],["pace",{"_index":282,"t":{"16":{"position":[[323,4]]}}}],["page",{"_index":878,"t":{"216":{"position":[[61,5],[126,5],[215,5],[240,5]]},"222":{"position":[[257,6],[283,5],[343,5]]}}}],["pageindex",{"_index":1259,"t":{"316":{"position":[[94,12]]},"326":{"position":[[52,12]]},"328":{"position":[[47,12]]},"330":{"position":[[55,12]]},"338":{"position":[[44,12]]},"351":{"position":[[77,12]]},"363":{"position":[[67,12]]},"371":{"position":[[96,12]]},"379":{"position":[[112,12]]},"381":{"position":[[106,12]]},"389":{"position":[[54,12]]},"397":{"position":[[59,12]]},"401":{"position":[[69,12]]},"403":{"position":[[79,12]]}}}],["pages",{"_index":1260,"t":{"316":{"position":[[115,11]]},"326":{"position":[[73,11]]},"328":{"position":[[68,11]]},"330":{"position":[[76,11]]},"338":{"position":[[65,11]]},"351":{"position":[[98,11]]},"363":{"position":[[83,11]]},"371":{"position":[[117,11]]},"379":{"position":[[133,11]]},"381":{"position":[[122,11]]},"389":{"position":[[70,11]]},"397":{"position":[[75,11]]},"401":{"position":[[85,11]]},"403":{"position":[[95,11]]}}}],["pagesxcopi",{"_index":901,"t":{"222":{"position":[[165,10]]}}}],["pages分支上，接下来你只需要在仓库的set",{"_index":909,"t":{"222":{"position":[[313,27]]}}}],["pages分支来作为你的pag",{"_index":911,"t":{"222":{"position":[[362,29]]}}}],["paper",{"_index":1296,"t":{"322":{"position":[[99,8]]}}}],["paperitem",{"_index":1247,"t":{"312":{"position":[[98,13]]},"391":{"position":[[150,13]]},"393":{"position":[[78,13],[446,13]]}}}],["papernam",{"_index":1313,"t":{"326":{"position":[[491,12]]},"401":{"position":[[485,12]]}}}],["paperscor",{"_index":1311,"t":{"326":{"position":[[371,13]]},"401":{"position":[[363,13]]}}}],["papertyp",{"_index":1256,"t":{"316":{"position":[[46,12],[416,12]]},"318":{"position":[[149,12]]},"322":{"position":[[171,12]]},"326":{"position":[[419,12]]},"371":{"position":[[391,12]]},"373":{"position":[[148,12]]},"375":{"position":[[95,12],[803,12]]},"379":{"position":[[89,12],[392,12]]},"391":{"position":[[344,12]]},"393":{"position":[[273,12],[641,12]]},"401":{"position":[[413,12]]}}}],["parent;}node*;nod",{"_index":634,"t":{"150":{"position":[[102,18]]}}}],["partition(a,low,high",{"_index":751,"t":{"180":{"position":[[801,34]]}}}],["partition(int",{"_index":740,"t":{"180":{"position":[[477,13]]}}}],["password",{"_index":976,"t":{"227":{"position":[[510,9]]},"304":{"position":[[58,11]]},"306":{"position":[[70,11]]},"345":{"position":[[56,11],[209,11]]},"355":{"position":[[74,11],[407,11]]}}}],["patienc",{"_index":383,"t":{"21":{"position":[[339,8]]}}}],["per",{"_index":252,"t":{"14":{"position":[[1030,3]]}}}],["period",{"_index":62,"t":{"4":{"position":[[810,6]]}}}],["phone",{"_index":1346,"t":{"334":{"position":[[292,8]]},"336":{"position":[[242,8]]},"345":{"position":[[308,8]]},"351":{"position":[[403,8]]},"353":{"position":[[289,8]]},"355":{"position":[[217,8],[534,8]]},"405":{"position":[[299,8]]},"407":{"position":[[252,8]]},"413":{"position":[[249,8]]}}}],["physic",{"_index":150,"t":{"8":{"position":[[668,8],[2208,8]]},"16":{"position":[[283,8]]}}}],["physiolog",{"_index":175,"t":{"8":{"position":[[1274,13],[2955,13]]}}}],["phytoplankton",{"_index":124,"t":{"8":{"position":[[347,13],[590,13],[1065,13],[1193,13],[1798,13],[2130,13],[2695,13],[2874,13]]}}}],["pivot",{"_index":742,"t":{"180":{"position":[[518,5],[704,6]]}}}],["pivotpo",{"_index":750,"t":{"180":{"position":[[790,8]]}}}],["polym",{"_index":236,"t":{"14":{"position":[[744,7]]}}}],["polyvinyl",{"_index":350,"t":{"16":{"position":[[1682,9]]}}}],["potenti",{"_index":113,"t":{"8":{"position":[[220,9],[1613,9]]}}}],["powder",{"_index":326,"t":{"16":{"position":[[1148,6],[1258,6],[1810,6]]}}}],["prefix",{"_index":1298,"t":{"322":{"position":[[524,9],[596,9]]},"330":{"position":[[295,9]]},"375":{"position":[[396,9],[1097,9]]}}}],["presearch(t[],2*index",{"_index":618,"t":{"139":{"position":[[736,23],[760,21]]}}}],["presearch(t[],int",{"_index":616,"t":{"139":{"position":[[660,17]]}}}],["present",{"_index":325,"t":{"16":{"position":[[1135,8]]}}}],["preserv",{"_index":360,"t":{"16":{"position":[[1966,12]]}}}],["previous",{"_index":74,"t":{"4":{"position":[[1216,10],[1675,10]]}}}],["prim)和克鲁斯卡尔(krusk",{"_index":1048,"t":{"249":{"position":[[120,37]]}}}],["primari",{"_index":99,"t":{"8":{"position":[[65,7],[1458,7]]}}}],["prim是选点，而kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n",{"_index":1051,"t":{"253":{"position":[[0,86]]}}}],["prior",{"_index":307,"t":{"16":{"position":[[846,5]]}}}],["process",{"_index":29,"t":{"4":{"position":[[242,9]]},"16":{"position":[[1979,8]]}}}],["product",{"_index":100,"t":{"8":{"position":[[73,10],[959,8],[1466,10],[2589,8]]}}}],["prone",{"_index":343,"t":{"16":{"position":[[1555,5]]}}}],["propos",{"_index":59,"t":{"4":{"position":[[746,7]]}}}],["protect",{"_index":221,"t":{"14":{"position":[[514,11]]},"16":{"position":[[1303,10]]}}}],["provid",{"_index":148,"t":{"8":{"position":[[651,8],[733,8],[2191,8],[2273,8]]},"14":{"position":[[57,8]]},"16":{"position":[[472,8]]}}}],["proxy_pass",{"_index":931,"t":{"225":{"position":[[402,10]]}}}],["proxy_set_head",{"_index":933,"t":{"225":{"position":[[427,16],[456,16]]}}}],["push",{"_index":890,"t":{"220":{"position":[[91,4]]},"222":{"position":[[268,4]]},"227":{"position":[[83,5]]}}}],["q",{"_index":905,"t":{"222":{"position":[[197,2]]}}}],["questionanswervm",{"_index":1327,"t":{"330":{"position":[[499,19]]}}}],["questioncorrect",{"_index":1310,"t":{"326":{"position":[[341,18]]},"401":{"position":[[333,18]]}}}],["questioncount",{"_index":1264,"t":{"316":{"position":[[254,16]]},"326":{"position":[[314,16]]},"349":{"position":[[78,16]]},"371":{"position":[[255,16]]},"379":{"position":[[257,16]]},"391":{"position":[[207,16]]},"393":{"position":[[137,16],[505,16]]},"401":{"position":[[306,16]]}}}],["questionid",{"_index":1289,"t":{"320":{"position":[[56,13],[114,13]]},"322":{"position":[[946,13]]},"324":{"position":[[138,13]]},"330":{"position":[[541,13]]}}}],["questionitem",{"_index":1280,"t":{"318":{"position":[[294,16]]},"322":{"position":[[361,16]]},"373":{"position":[[292,16]]},"375":{"position":[[236,16],[944,16]]}}}],["questionscor",{"_index":1301,"t":{"322":{"position":[[1096,16]]},"324":{"position":[[290,16]]},"330":{"position":[[684,16]]}}}],["questiontyp",{"_index":1281,"t":{"318":{"position":[[331,15]]},"322":{"position":[[405,15]]},"328":{"position":[[189,15]]},"330":{"position":[[183,15]]},"373":{"position":[[330,15]]},"375":{"position":[[281,15],[982,15]]},"381":{"position":[[50,15],[222,15]]},"383":{"position":[[111,15]]},"385":{"position":[[55,15]]}}}],["questionvm",{"_index":1323,"t":{"330":{"position":[[149,13]]}}}],["quicksort(a,low,pivotpo",{"_index":752,"t":{"180":{"position":[[836,24]]}}}],["quicksort(a,pivotpo",{"_index":753,"t":{"180":{"position":[[873,20]]}}}],["quicksort(int",{"_index":748,"t":{"180":{"position":[[733,13]]}}}],["r",{"_index":841,"t":{"191":{"position":[[515,1]]}}}],["rachel",{"_index":654,"t":{"164":{"position":[[34,6]]}}}],["rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天rachel",{"_index":652,"t":{"161":{"position":[[16,119]]}}}],["rate",{"_index":264,"t":{"16":{"position":[[100,4]]}}}],["ration",{"_index":210,"t":{"14":{"position":[[331,10]]}}}],["reaccret",{"_index":73,"t":{"4":{"position":[[1188,11]]}}}],["reach",{"_index":279,"t":{"16":{"position":[[269,7]]}}}],["read",{"_index":1358,"t":{"338":{"position":[[240,9]]}}}],["readcount",{"_index":1444,"t":{"397":{"position":[[342,12]]}}}],["real",{"_index":935,"t":{"225":{"position":[[475,4]]}}}],["realnam",{"_index":1332,"t":{"332":{"position":[[147,11]]},"334":{"position":[[178,11]]},"336":{"position":[[128,11]]},"345":{"position":[[227,11]]},"351":{"position":[[303,11]]},"353":{"position":[[189,11]]},"355":{"position":[[101,11],[427,11]]},"403":{"position":[[250,11]]},"405":{"position":[[184,11]]},"407":{"position":[[139,11]]},"413":{"position":[[134,11]]}}}],["receiv",{"_index":1442,"t":{"397":{"position":[[279,11]]}}}],["receiveusercount",{"_index":1443,"t":{"397":{"position":[[311,19]]}}}],["receiveuserid",{"_index":1448,"t":{"399":{"position":[[89,17]]}}}],["recogn",{"_index":111,"t":{"8":{"position":[[198,10],[1591,10]]}}}],["recoveri",{"_index":206,"t":{"14":{"position":[[284,8]]}}}],["recycl",{"_index":60,"t":{"4":{"position":[[785,8],[1167,9],[1753,9]]}}}],["redshift",{"_index":45,"t":{"4":{"position":[[475,8],[1352,8],[1775,8]]}}}],["reduc",{"_index":340,"t":{"16":{"position":[[1462,7],[1741,7]]}}}],["reduct",{"_index":267,"t":{"16":{"position":[[129,9]]}}}],["reflect",{"_index":174,"t":{"8":{"position":[[1253,8],[2934,8]]}}}],["region",{"_index":130,"t":{"8":{"position":[[421,6],[431,7],[1131,11],[1872,6],[1882,7],[2812,11]]}}}],["rel",{"_index":135,"t":{"8":{"position":[[479,8],[1368,8],[2014,8],[3049,8]]}}}],["remark",{"_index":290,"t":{"16":{"position":[[518,10]]}}}],["rememb",{"_index":1227,"t":{"304":{"position":[[79,11]]},"345":{"position":[[77,11]]}}}],["remot",{"_index":885,"t":{"220":{"position":[[33,6]]}}}],["remote_addr",{"_index":937,"t":{"225":{"position":[[483,13],[587,13]]}}}],["remote_us",{"_index":943,"t":{"225":{"position":[[603,12]]}}}],["request",{"_index":945,"t":{"225":{"position":[[630,10]]}}}],["requir",{"_index":284,"t":{"16":{"position":[[369,13],[1609,7]]},"265":{"position":[[32,8]]}}}],["resolv",{"_index":286,"t":{"16":{"position":[[405,8]]}}}],["respons",{"_index":164,"t":{"8":{"position":[[994,9],[1116,9],[1244,8],[2624,9],[2797,9],[2925,8]]},"14":{"position":[[361,10]]},"306":{"position":[[154,11]]},"308":{"position":[[65,11]]},"314":{"position":[[84,11]]},"316":{"position":[[174,11]]},"318":{"position":[[81,11]]},"320":{"position":[[306,11]]},"322":{"position":[[85,11]]},"324":{"position":[[359,11]]},"326":{"position":[[132,11]]},"328":{"position":[[127,11]]},"330":{"position":[[135,11]]},"332":{"position":[[70,11]]},"334":{"position":[[74,11]]},"336":{"position":[[489,11]]},"338":{"position":[[124,11]]},"340":{"position":[[82,11]]},"342":{"position":[[86,11]]},"345":{"position":[[138,11]]},"347":{"position":[[65,11]]},"351":{"position":[[157,11]]},"353":{"position":[[73,11]]},"355":{"position":[[295,11]]},"357":{"position":[[87,11]]},"359":{"position":[[79,11]]},"361":{"position":[[82,11]]},"363":{"position":[[135,11]]},"365":{"position":[[86,11]]},"367":{"position":[[158,11]]},"369":{"position":[[86,11]]},"371":{"position":[[176,11]]},"373":{"position":[[79,11]]},"375":{"position":[[734,11]]},"377":{"position":[[79,11]]},"379":{"position":[[185,11]]},"381":{"position":[[174,11]]},"383":{"position":[[79,11]]},"385":{"position":[[359,11]]},"387":{"position":[[77,11]]},"389":{"position":[[122,11]]},"391":{"position":[[74,11]]},"393":{"position":[[369,11]]},"395":{"position":[[87,11]]},"397":{"position":[[134,11]]},"399":{"position":[[170,11]]},"401":{"position":[[137,11]]},"403":{"position":[[147,11]]},"405":{"position":[[72,11]]},"407":{"position":[[494,11]]},"409":{"position":[[94,11]]},"413":{"position":[[496,11]]}}}],["result",{"_index":90,"t":{"4":{"position":[[1726,7]]}}}],["retain",{"_index":232,"t":{"14":{"position":[[678,8]]}}}],["return",{"_index":469,"t":{"73":{"position":[[360,6]]},"81":{"position":[[407,6],[425,6]]},"139":{"position":[[205,6],[340,6],[476,6],[605,6]]},"180":{"position":[[711,6]]}}}],["reusabl",{"_index":222,"t":{"14":{"position":[[530,11]]}}}],["right",{"_index":609,"t":{"139":{"position":[[427,5],[483,6]]}}}],["rl",{"_index":546,"t":{"88":{"position":[[42,7]]},"90":{"position":[[114,7]]},"95":{"position":[[257,29]]}}}],["rmdir",{"_index":904,"t":{"222":{"position":[[187,6]]}}}],["role",{"_index":1342,"t":{"334":{"position":[[221,7]]},"336":{"position":[[171,7]]},"345":{"position":[[323,7]]},"351":{"position":[[61,7],[346,7]]},"353":{"position":[[232,7]]},"355":{"position":[[128,7],[555,7]]},"405":{"position":[[226,7]]},"407":{"position":[[181,7]]},"413":{"position":[[176,7]]}}}],["root",{"_index":925,"t":{"225":{"position":[[277,4]]}}}],["rr",{"_index":544,"t":{"88":{"position":[[28,5]]},"90":{"position":[[100,5]]},"95":{"position":[[205,21]]}}}],["run",{"_index":897,"t":{"222":{"position":[[137,3]]},"227":{"position":[[122,4],[287,4],[358,4],[382,3]]}}}],["run/nginx.pid;ev",{"_index":919,"t":{"225":{"position":[[153,21]]}}}],["rwerw",{"_index":1355,"t":{"338":{"position":[[180,8]]}}}],["r。上述的520",{"_index":845,"t":{"191":{"position":[[582,65]]}}}],["r个空队列qr,qr−1.......q0q_r,q_{r",{"_index":846,"t":{"191":{"position":[[663,31]]}}}],["r个队列，q(r)q(r)q(r",{"_index":849,"t":{"191":{"position":[[835,21]]}}}],["s",{"_index":41,"t":{"4":{"position":[[398,2]]},"131":{"position":[[0,1]]},"170":{"position":[[213,1],[767,1]]},"172":{"position":[[280,1]]},"222":{"position":[[194,2]]},"255":{"position":[[574,3]]}}}],["s,string",{"_index":459,"t":{"73":{"position":[[164,8]]},"81":{"position":[[264,8]]}}}],["s.len",{"_index":462,"t":{"73":{"position":[[205,5]]}}}],["s1是流水线面积，s2",{"_index":1214,"t":{"297":{"position":[[213,26]]}}}],["s=n∗tm∗δt",{"_index":1208,"t":{"297":{"position":[[92,10]]}}}],["s[i",{"_index":494,"t":{"79":{"position":[[884,8],[906,4],[980,6]]}}}],["s[i]≠t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1]\\begin{align",{"_index":493,"t":{"79":{"position":[[795,88]]}}}],["samkirkland/ftp",{"_index":972,"t":{"227":{"position":[[417,15]]}}}],["satellit",{"_index":120,"t":{"8":{"position":[[296,10],[937,9],[1747,10],[2567,9]]}}}],["scienc",{"_index":19,"t":{"4":{"position":[[108,8]]},"8":{"position":[[7,7]]}}}],["science](inspir",{"_index":7,"t":{"4":{"position":[[4,23]]}}}],["score",{"_index":1265,"t":{"316":{"position":[[280,8]]},"318":{"position":[[537,8],[607,8]]},"322":{"position":[[571,8],[631,8],[732,8],[807,8],[885,8],[1077,8]]},"324":{"position":[[83,8],[271,8]]},"330":{"position":[[338,8],[433,8],[665,8]]},"371":{"position":[[282,8]]},"373":{"position":[[542,8],[614,8]]},"375":{"position":[[445,8],[605,8],[676,8],[1146,8],[1306,8],[1377,8]]},"379":{"position":[[284,8]]},"381":{"position":[[357,8]]},"383":{"position":[[309,8]]},"385":{"position":[[263,8]]},"391":{"position":[[234,8]]},"393":{"position":[[164,8],[532,8]]}}}],["second",{"_index":342,"t":{"16":{"position":[[1532,7]]}}}],["secrets.ftp_pwd",{"_index":977,"t":{"227":{"position":[[524,15]]}}}],["secrets.ftp_us",{"_index":975,"t":{"227":{"position":[[484,16]]}}}],["secrets.ftp_user要在github设置中进行配置，添加action的变量，然后设置好你的ftp的用户名和密码即可。同时要在ftp服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到ftp",{"_index":980,"t":{"227":{"position":[[584,114]]}}}],["selectsort(int",{"_index":764,"t":{"184":{"position":[[270,14]]}}}],["sendusernam",{"_index":1360,"t":{"338":{"position":[[307,15]]},"397":{"position":[[37,15],[245,15]]}}}],["sequenc",{"_index":187,"t":{"14":{"position":[[47,9]]}}}],["server",{"_index":922,"t":{"225":{"position":[[209,6]]},"227":{"position":[[459,7],[548,6]]}}}],["server_nam",{"_index":928,"t":{"225":{"position":[[366,11]]}}}],["sever",{"_index":319,"t":{"16":{"position":[[1038,7]]}}}],["sex",{"_index":1343,"t":{"334":{"position":[[237,6]]},"336":{"position":[[187,6]]},"345":{"position":[[258,6]]},"351":{"position":[[362,6]]},"353":{"position":[[248,6]]},"355":{"position":[[178,6],[472,6]]},"405":{"position":[[242,6]]},"407":{"position":[[197,6]]},"413":{"position":[[192,6]]}}}],["sf",{"_index":412,"t":{"49":{"position":[[42,14]]}}}],["sfsdf",{"_index":1357,"t":{"338":{"position":[[224,8]]}}}],["shellsort(int",{"_index":692,"t":{"174":{"position":[[217,13]]}}}],["shorttitl",{"_index":1320,"t":{"328":{"position":[[283,13]]},"381":{"position":[[496,13]]}}}],["show",{"_index":121,"t":{"8":{"position":[[310,4],[1761,4]]},"14":{"position":[[481,5]]}}}],["shown",{"_index":71,"t":{"4":{"position":[[1156,5]]}}}],["silica",{"_index":198,"t":{"14":{"position":[[209,7]]},"16":{"position":[[1332,6]]}}}],["sim",{"_index":489,"t":{"79":{"position":[[625,4],[644,4],[913,4],[929,4],[949,4],[967,4],[989,4],[1005,4],[1795,4],[1813,4],[1868,4],[1893,4],[1919,4],[1935,4]]}}}],["simpl",{"_index":217,"t":{"14":{"position":[[413,6]]}}}],["simplest",{"_index":380,"t":{"21":{"position":[[313,8]]}}}],["simul",{"_index":70,"t":{"4":{"position":[[1139,11]]}}}],["size",{"_index":1472,"t":{"411":{"position":[[162,7]]}}}],["smith",{"_index":66,"t":{"4":{"position":[[846,5]]},"8":{"position":[[528,5]]}}}],["sofu6",{"_index":472,"t":{"75":{"position":[[193,5]]}}}],["solut",{"_index":231,"t":{"14":{"position":[[654,9]]}}}],["sourc",{"_index":114,"t":{"8":{"position":[[230,7],[1405,7],[1623,7],[2051,7],[3086,7]]}}}],["sp=toldtnew=1(1−f)+(fs)s_p",{"_index":1110,"t":{"272":{"position":[[122,26]]}}}],["spiral",{"_index":56,"t":{"4":{"position":[[697,9]]}}}],["sss和vvv",{"_index":1052,"t":{"255":{"position":[[27,26]]}}}],["sss，此时树中只有一个顶点，然后从剩余顶点集合ttt中选取相距树中顶点集合最近的点，并且将该边加入集合sss中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n",{"_index":1049,"t":{"251":{"position":[[0,121]]}}}],["stabil",{"_index":348,"t":{"16":{"position":[[1647,12],[1847,11]]}}}],["stabl",{"_index":189,"t":{"14":{"position":[[73,7],[138,6]]}}}],["stack",{"_index":1095,"t":{"265":{"position":[[26,5]]}}}],["star",{"_index":27,"t":{"4":{"position":[[226,6],[820,4],[1052,5],[1263,4]]}}}],["state",{"_index":1475,"t":{"411":{"position":[[193,8]]}}}],["statu",{"_index":176,"t":{"8":{"position":[[1288,6],[2969,6]]},"225":{"position":[[643,8]]},"312":{"position":[[213,9]]},"326":{"position":[[471,9]]},"334":{"position":[[416,9]]},"336":{"position":[[366,9]]},"345":{"position":[[337,9]]},"351":{"position":[[562,9]]},"353":{"position":[[448,9]]},"355":{"position":[[144,9],[571,9]]},"381":{"position":[[377,9]]},"401":{"position":[[465,9]]},"405":{"position":[[420,9]]},"407":{"position":[[392,9]]},"413":{"position":[[394,9]]}}}],["step",{"_index":959,"t":{"227":{"position":[[145,6]]}}}],["step1",{"_index":571,"t":{"124":{"position":[[165,13]]}}}],["step2",{"_index":572,"t":{"124":{"position":[[179,16]]}}}],["storag",{"_index":193,"t":{"14":{"position":[[120,8]]},"16":{"position":[[63,7],[154,7],[361,7],[426,8],[722,7],[984,7],[1115,7],[1185,8],[1488,7],[1716,7],[1767,7]]}}}],["store",{"_index":219,"t":{"14":{"position":[[450,7]]},"16":{"position":[[888,5]]}}}],["stream",{"_index":8,"t":{"4":{"position":[[28,7],[682,7],[1562,7]]},"225":{"position":[[563,7]]}}}],["struct",{"_index":586,"t":{"139":{"position":[[15,6]]},"150":{"position":[[75,6],[218,6],[241,6],[295,6],[378,6],[401,6]]},"240":{"position":[[616,7]]},"242":{"position":[[98,6],[145,6],[196,6],[275,7]]}}}],["student",{"_index":1226,"t":{"304":{"position":[[41,10],[127,10]]},"332":{"position":[[130,10],[187,8]]},"334":{"position":[[161,10]]},"336":{"position":[[111,10]]},"397":{"position":[[291,10]]},"401":{"position":[[526,9]]},"409":{"position":[[44,7],[118,10]]}}}],["student5",{"_index":1230,"t":{"306":{"position":[[52,11]]}}}],["studi",{"_index":208,"t":{"14":{"position":[[310,5]]}}}],["subjectid",{"_index":1257,"t":{"316":{"position":[[69,12],[367,12]]},"318":{"position":[[128,12],[355,12]]},"322":{"position":[[150,12],[431,12]]},"326":{"position":[[289,12]]},"330":{"position":[[209,12]]},"371":{"position":[[72,12],[370,12]]},"373":{"position":[[127,12],[356,12]]},"375":{"position":[[74,12],[305,12],[782,12],[1006,12]]},"379":{"position":[[48,12],[371,12]]},"381":{"position":[[87,12],[313,12]]},"383":{"position":[[135,12]]},"385":{"position":[[79,12]]},"391":{"position":[[322,12]]},"393":{"position":[[252,12],[620,12]]},"401":{"position":[[45,12],[283,12]]}}}],["subjectnam",{"_index":1271,"t":{"316":{"position":[[390,14]]},"326":{"position":[[261,14]]},"328":{"position":[[257,14]]},"401":{"position":[[255,14]]}}}],["substanti",{"_index":171,"t":{"8":{"position":[[1170,11],[2851,11]]},"16":{"position":[[481,11]]}}}],["success",{"_index":1476,"t":{"411":{"position":[[202,10]]}}}],["such",{"_index":30,"t":{"4":{"position":[[252,4]]},"16":{"position":[[177,4],[1324,4],[1660,4]]}}}],["sudo",{"_index":968,"t":{"227":{"position":[[292,4],[315,4]]}}}],["suggesttim",{"_index":1276,"t":{"318":{"position":[[194,14]]},"322":{"position":[[218,14]]},"373":{"position":[[194,14]]},"375":{"position":[[142,14],[850,14]]}}}],["sum_1^i\\delta",{"_index":1191,"t":{"295":{"position":[[75,14]]}}}],["summari",{"_index":21,"t":{"4":{"position":[[126,8]]},"8":{"position":[[24,8]]}}}],["sumn",{"_index":986,"t":{"235":{"position":[[80,15]]}}}],["sunlit",{"_index":145,"t":{"8":{"position":[[618,6],[2158,6]]}}}],["supernova",{"_index":31,"t":{"4":{"position":[[260,9]]}}}],["support",{"_index":239,"t":{"14":{"position":[[811,7]]}}}],["surfac",{"_index":105,"t":{"8":{"position":[[130,7],[625,7],[842,7],[1523,7],[2165,7],[2438,7]]}}}],["surround",{"_index":23,"t":{"4":{"position":[[165,11],[1320,11]]}}}],["sustain",{"_index":76,"t":{"4":{"position":[[1255,7]]},"14":{"position":[[103,11]]}}}],["swap(a[i],a[1",{"_index":799,"t":{"186":{"position":[[1397,16]]}}}],["swap(a[i],a[min",{"_index":769,"t":{"184":{"position":[[402,18]]}}}],["swap(a[j],a[i]);flag",{"_index":724,"t":{"178":{"position":[[222,20]]}}}],["swap(int",{"_index":713,"t":{"178":{"position":[[32,8]]}}}],["swelling/deswel",{"_index":246,"t":{"14":{"position":[[931,19],[1424,25]]}}}],["system",{"_index":255,"t":{"14":{"position":[[1062,7]]}}}],["systemscor",{"_index":1312,"t":{"326":{"position":[[442,14]]},"401":{"position":[[436,14]]}}}],["s和t",{"_index":474,"t":{"77":{"position":[[55,155]]}}}],["s和模式串t的长度n和m。时间复杂度为o(nm)o(nm)o(nm",{"_index":470,"t":{"73":{"position":[[371,109]]}}}],["s的取值决定正负；m表示尾数，r是基数（2,4,8...），e是阶码，表示2e2^e2",{"_index":438,"t":{"65":{"position":[[46,44]]}}}],["s（31",{"_index":445,"t":{"69":{"position":[[58,7]]}}}],["t",{"_index":65,"t":{"4":{"position":[[843,2]]},"16":{"position":[[817,2]]},"73":{"position":[[173,3]]}}}],["t,int",{"_index":519,"t":{"81":{"position":[[60,5],[273,5]]},"83":{"position":[[362,5]]}}}],["t.ch[i",{"_index":466,"t":{"73":{"position":[[241,9]]}}}],["t.ch[j",{"_index":524,"t":{"81":{"position":[[130,9],[352,9]]},"83":{"position":[[444,7]]}}}],["t.ch[k",{"_index":525,"t":{"81":{"position":[[143,9]]},"83":{"position":[[455,9],[489,8]]}}}],["t.len",{"_index":464,"t":{"73":{"position":[[219,7],[339,6]]},"81":{"position":[[418,6]]},"83":{"position":[[423,7]]}}}],["t.len)return",{"_index":468,"t":{"73":{"position":[[322,12]]}}}],["t[0",{"_index":497,"t":{"79":{"position":[[925,3],[942,6],[1001,3],[1782,12],[1857,10],[1911,7]]}}}],["t[],int",{"_index":590,"t":{"139":{"position":[[80,7]]}}}],["t[i",{"_index":496,"t":{"79":{"position":[[898,4]]}}}],["t[i].isempti",{"_index":594,"t":{"139":{"position":[[120,12]]}}}],["t[j",{"_index":498,"t":{"79":{"position":[[961,3],[1743,5],[1807,3],[1851,5],[1887,3],[1903,7],[1929,3],[2101,11]]}}}],["t[j]t[k]=t[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是b的位置，此时执行判定t[k]=t[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k",{"_index":512,"t":{"79":{"position":[[2219,274]]}}}],["t[k",{"_index":505,"t":{"79":{"position":[[1735,7],[1840,10],[1880,4],[2115,29]]}}}],["t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j]\\begin{align",{"_index":504,"t":{"79":{"position":[[1577,157]]}}}],["t[k]≠t[j]t[k]\\neq",{"_index":511,"t":{"79":{"position":[[2198,20]]}}}],["t\\delta",{"_index":1202,"t":{"295":{"position":[[347,8],[360,12]]}}}],["t_i",{"_index":1192,"t":{"295":{"position":[[90,3]]}}}],["t_i}{m}e=tp∗m∑1i​δti",{"_index":1201,"t":{"295":{"position":[[304,22]]}}}],["t_{max}tpipeline​=1∑i​δti​+(n−1)δtmax",{"_index":1194,"t":{"295":{"position":[[109,38]]}}}],["ta=fi(hi∗tc+(1−hi)∗tm)+(1−fi)(hd∗tc+(1−hd)∗tm)t_a",{"_index":1127,"t":{"284":{"position":[[119,49]]}}}],["ta=h∗tc+(1−h)∗tmt_a",{"_index":1123,"t":{"284":{"position":[[10,19]]}}}],["take",{"_index":373,"t":{"21":{"position":[[184,5]]}}}],["tape",{"_index":273,"t":{"16":{"position":[[210,6]]}}}],["te=inmips∗106t_",{"_index":1105,"t":{"270":{"position":[[309,16]]}}}],["technic",{"_index":1094,"t":{"265":{"position":[[16,9]]}}}],["techniqu",{"_index":207,"t":{"14":{"position":[[293,11]]}}}],["technolog",{"_index":288,"t":{"16":{"position":[[456,10]]}}}],["temp",{"_index":715,"t":{"178":{"position":[[57,4]]}}}],["temp;}void",{"_index":716,"t":{"178":{"position":[[78,10]]}}}],["tend",{"_index":336,"t":{"16":{"position":[[1400,5]]}}}],["term",{"_index":220,"t":{"14":{"position":[[509,4]]}}}],["test",{"_index":1333,"t":{"332":{"position":[[159,7]]},"334":{"position":[[190,7]]},"336":{"position":[[140,7]]}}}],["test33333",{"_index":1239,"t":{"310":{"position":[[101,12]]}}}],["testzz",{"_index":1390,"t":{"355":{"position":[[58,9],[391,9]]}}}],["tesx",{"_index":1391,"t":{"355":{"position":[[113,7],[439,7]]}}}],["tet_ete​代替tcput_{cpu}tcpu",{"_index":1104,"t":{"270":{"position":[[273,35]]}}}],["textcontentid",{"_index":1420,"t":{"381":{"position":[[246,16]]}}}],["theoret",{"_index":309,"t":{"16":{"position":[[874,13],[1103,11]]}}}],["therefor",{"_index":357,"t":{"16":{"position":[[1859,10]]}}}],["thermal",{"_index":212,"t":{"14":{"position":[[351,9]]}}}],["thermorespons",{"_index":240,"t":{"14":{"position":[[838,16]]}}}],["third",{"_index":345,"t":{"16":{"position":[[1594,6]]}}}],["through",{"_index":149,"t":{"8":{"position":[[660,7],[742,7],[2200,7],[2282,7]]},"14":{"position":[[914,7]]}}}],["time",{"_index":316,"t":{"16":{"position":[[950,5]]},"21":{"position":[[207,5]]}}}],["time_loc",{"_index":944,"t":{"225":{"position":[[616,13]]}}}],["timelimitpap",{"_index":1242,"t":{"310":{"position":[[189,17]]}}}],["tip",{"_index":6,"t":{"4":{"position":[[0,3]]},"8":{"position":[[0,3]]},"21":{"position":[[0,3]]},"153":{"position":[[139,3]]},"161":{"position":[[0,3]]},"164":{"position":[[0,3]]},"200":{"position":[[0,3]]},"265":{"position":[[0,3]]},"276":{"position":[[0,3]]},"282":{"position":[[0,3]]},"293":{"position":[[0,3]]}}}],["titl",{"_index":1244,"t":{"312":{"position":[[66,8]]},"318":{"position":[[376,8]]},"322":{"position":[[452,8]]},"330":{"position":[[233,8]]},"338":{"position":[[171,8]]},"373":{"position":[[377,8]]},"375":{"position":[[326,8],[1027,8]]},"383":{"position":[[156,8]]},"385":{"position":[[100,8]]},"389":{"position":[[177,8]]},"391":{"position":[[128,8]]},"393":{"position":[[61,8],[422,8]]},"397":{"position":[[190,8]]},"399":{"position":[[37,8]]}}}],["titleitem",{"_index":1279,"t":{"318":{"position":[[252,13]]},"322":{"position":[[320,13]]},"373":{"position":[[250,13]]},"375":{"position":[[196,13],[904,13]]}}}],["today’",{"_index":259,"t":{"16":{"position":[[3,7]]}}}],["total",{"_index":1261,"t":{"316":{"position":[[188,8]]},"326":{"position":[[146,8]]},"328":{"position":[[141,8]]},"338":{"position":[[138,8]]},"351":{"position":[[171,8]]},"363":{"position":[[149,8]]},"371":{"position":[[190,8]]},"379":{"position":[[199,8]]},"381":{"position":[[188,8]]},"389":{"position":[[136,8]]},"397":{"position":[[148,8]]},"401":{"position":[[151,8]]},"403":{"position":[[161,8]]}}}],["toward",{"_index":57,"t":{"4":{"position":[[707,6]]}}}],["tp",{"_index":1199,"t":{"295":{"position":[[278,3]]}}}],["tp=1mδttp",{"_index":1217,"t":{"299":{"position":[[225,9]]}}}],["tp=nm∗δttp",{"_index":1204,"t":{"297":{"position":[[26,10]]}}}],["tp=nsum∗δttp",{"_index":1220,"t":{"299":{"position":[[292,12]]}}}],["tp=ntpipelinetp",{"_index":1195,"t":{"295":{"position":[[148,15]]}}}],["tpipeline=∑1iδti+(n−1)δtmaxt_{pipelin",{"_index":1190,"t":{"295":{"position":[[33,39]]}}}],["tradit",{"_index":268,"t":{"16":{"position":[[142,11],[972,11]]}}}],["translat",{"_index":378,"t":{"21":{"position":[[252,11]]}}}],["transport",{"_index":151,"t":{"8":{"position":[[677,9],[2217,9]]}}}],["tree",{"_index":641,"t":{"150":{"position":[[302,5],[437,27]]}}}],["trehalos",{"_index":349,"t":{"16":{"position":[[1668,9]]}}}],["trfg",{"_index":215,"t":{"14":{"position":[[392,6],[467,4]]}}}],["trfg水凝胶，作为一种简单的高校低成本的dna存储方法。trfg水凝胶具有高dna摄取、长期保护和重复适用性，这是因为其无损的dna提取。高装载能力是通过从dna溶解中直接获取的，然后由于其与加载到带负电荷的水凝胶基质中的超支化阳离子聚合物相互作用而保留，该聚合物加载到用作载体的水凝胶基质中，并且由于其热响应性，这允许dna",{"_index":257,"t":{"14":{"position":[[1160,204]]}}}],["troubl",{"_index":372,"t":{"21":{"position":[[171,8]]}}}],["troublesom",{"_index":379,"t":{"21":{"position":[[274,12]]}}}],["true",{"_index":725,"t":{"178":{"position":[[245,5]]},"245":{"position":[[546,6],[697,5]]},"247":{"position":[[304,5]]},"320":{"position":[[214,5]]},"338":{"position":[[250,5]]}}}],["ture",{"_index":599,"t":{"139":{"position":[[192,6]]}}}],["turn",{"_index":26,"t":{"4":{"position":[[207,4]]}}}],["typdef",{"_index":639,"t":{"150":{"position":[[211,6]]}}}],["type",{"_index":1474,"t":{"411":{"position":[[177,7]]}}}],["typedef",{"_index":585,"t":{"139":{"position":[[7,7]]},"150":{"position":[[67,7],[267,27],[370,7]]},"240":{"position":[[608,7]]},"242":{"position":[[90,7],[188,7]]}}}],["t}s=m∗δtn∗t",{"_index":1210,"t":{"297":{"position":[[125,12]]}}}],["t}tp=mδt1",{"_index":1219,"t":{"299":{"position":[[255,10]]}}}],["t}tp=m∗δtn",{"_index":1206,"t":{"297":{"position":[[57,11]]}}}],["t}tp=sum∗δtn",{"_index":1222,"t":{"299":{"position":[[327,13]]}}}],["tδt",{"_index":1203,"t":{"295":{"position":[[356,3],[373,8]]}}}],["t）与问题规模（n）的关系，t就是时间。说白了就是分析代码，算一下n",{"_index":573,"t":{"126":{"position":[[6,56]]}}}],["u",{"_index":891,"t":{"220":{"position":[[97,1]]}}}],["ubuntu",{"_index":957,"t":{"227":{"position":[[131,6]]}}}],["univers",{"_index":78,"t":{"4":{"position":[[1291,9]]},"21":{"position":[[19,9]]}}}],["up",{"_index":310,"t":{"16":{"position":[[894,2]]},"21":{"position":[[190,2]]}}}],["updat",{"_index":970,"t":{"227":{"position":[[305,6]]}}}],["uptak",{"_index":204,"t":{"14":{"position":[[265,6],[496,7]]}}}],["upwel",{"_index":104,"t":{"8":{"position":[[114,8],[1507,8]]}}}],["up主的讲解视频kmp算法之求next数组代码讲解_哔哩哔哩_bilibili",{"_index":515,"t":{"79":{"position":[[2545,55]]}}}],["url",{"_index":894,"t":{"222":{"position":[[49,4]]},"411":{"position":[[94,6]]}}}],["us",{"_index":116,"t":{"8":{"position":[[255,4],[926,3],[1706,4],[2556,3]]},"14":{"position":[[801,4],[1039,5]]},"16":{"position":[[1167,4]]},"227":{"position":[[154,5],[188,3],[205,5],[411,5]]}}}],["user",{"_index":915,"t":{"225":{"position":[[81,4]]}}}],["userid",{"_index":1331,"t":{"332":{"position":[[98,9]]},"403":{"position":[[45,9],[203,9]]}}}],["userlevel",{"_index":1232,"t":{"306":{"position":[[97,12]]},"334":{"position":[[434,12]]},"336":{"position":[[384,12]]},"345":{"position":[[289,12]]},"351":{"position":[[580,12]]},"353":{"position":[[466,12]]},"355":{"position":[[238,12],[513,12]]},"405":{"position":[[438,12]]},"407":{"position":[[410,12]]},"413":{"position":[[412,12]]}}}],["usernam",{"_index":974,"t":{"227":{"position":[[470,9]]},"304":{"position":[[29,11],[115,11]]},"306":{"position":[[40,11]]},"326":{"position":[[528,11]]},"332":{"position":[[118,11]]},"334":{"position":[[149,11]]},"336":{"position":[[99,11]]},"345":{"position":[[29,11],[182,11]]},"351":{"position":[[39,11],[280,11]]},"353":{"position":[[166,11]]},"355":{"position":[[46,11],[379,11]]},"401":{"position":[[514,11]]},"403":{"position":[[61,11],[223,11]]},"405":{"position":[[157,11]]},"407":{"position":[[112,11]]},"413":{"position":[[107,11]]}}}],["username.github.io",{"_index":883,"t":{"218":{"position":[[0,50]]}}}],["userscor",{"_index":1308,"t":{"326":{"position":[[236,12]]},"401":{"position":[[229,12]]}}}],["useruuid",{"_index":1336,"t":{"334":{"position":[[97,11]]},"336":{"position":[[47,11]]},"345":{"position":[[164,11]]},"351":{"position":[[219,11]]},"353":{"position":[[105,11]]},"355":{"position":[[320,11]]},"405":{"position":[[96,11]]},"407":{"position":[[53,11]]},"413":{"position":[[46,11]]}}}],["usr/workspace/rachelnootebook/usr/workspace/rachelnootebook/web",{"_index":926,"t":{"225":{"position":[[282,65]]}}}],["uuid",{"_index":1385,"t":{"351":{"position":[[271,8]]},"353":{"position":[[157,8]]},"405":{"position":[[148,8]]},"413":{"position":[[98,8]]}}}],["v",{"_index":1042,"t":{"247":{"position":[[277,3]]},"249":{"position":[[104,3]]}}}],["v,e)和g^{'}=(v^{'},e^{'})g=(v,e)和g′=(v′,",{"_index":983,"t":{"231":{"position":[[110,43]]}}}],["v0v_0v0​加入sss，计算出v0v_0v0",{"_index":1053,"t":{"255":{"position":[[54,40]]}}}],["v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1",{"_index":997,"t":{"240":{"position":[[485,122]]}}}],["v=asbsssˉ+asˉbsˉssv",{"_index":414,"t":{"51":{"position":[[39,19]]}}}],["v_i,v_j)是g的边，则a[i][j",{"_index":991,"t":{"240":{"position":[[182,24]]}}}],["valu",{"_index":1468,"t":{"409":{"position":[[135,8]]}}}],["var/log/nginx/access.log",{"_index":951,"t":{"225":{"position":[[744,25]]}}}],["var/log/nginx/error.log;pid",{"_index":918,"t":{"225":{"position":[[124,28]]}}}],["varepsilon,a+\\varepsilon)(a−ε,a+ε)中。如果x是趋向于x0x_0x0​的则考虑去心邻域。保证x有定义的同时，x取不到x0x_0x0​。其中记住xsin(1x)xsin(\\frac{1}{x})xsin(x1",{"_index":863,"t":{"206":{"position":[[191,133]]}}}],["vari",{"_index":129,"t":{"8":{"position":[[411,4],[1126,4],[1862,4],[2807,4]]}}}],["vast",{"_index":141,"t":{"8":{"position":[[553,4],[2093,4]]}}}],["ve(0)ve(0)ve(0",{"_index":1083,"t":{"262":{"position":[[275,19]]}}}],["ve(0)ve(0)ve(0)为0",{"_index":1078,"t":{"262":{"position":[[48,17]]}}}],["ve(i)ve(i)ve(i",{"_index":1088,"t":{"262":{"position":[[513,24]]}}}],["ve(k)=max[ve(j)+weight(vj,vk)]ve(k",{"_index":1079,"t":{"262":{"position":[[66,35]]}}}],["version",{"_index":965,"t":{"227":{"position":[[244,8]]}}}],["vex[n",{"_index":999,"t":{"240":{"position":[[629,7]]},"242":{"position":[[289,7]]}}}],["vexindex",{"_index":1007,"t":{"242":{"position":[[123,9]]}}}],["vexnum,arcnum",{"_index":1002,"t":{"240":{"position":[[684,14]]},"242":{"position":[[301,14]]}}}],["vi,vj)是g的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{align",{"_index":990,"t":{"240":{"position":[[129,52]]}}}],["visit(t[index",{"_index":617,"t":{"139":{"position":[[719,16]]}}}],["visit(v",{"_index":1022,"t":{"245":{"position":[[525,9]]},"247":{"position":[[281,9]]}}}],["visit(w",{"_index":1031,"t":{"245":{"position":[[674,9]]}}}],["visited[i",{"_index":1016,"t":{"245":{"position":[[417,10]]}}}],["visited[max_size];void",{"_index":1013,"t":{"245":{"position":[[345,22]]},"247":{"position":[[112,22]]}}}],["visited[v",{"_index":1023,"t":{"245":{"position":[[535,10]]},"247":{"position":[[184,10],[291,10]]}}}],["visited[w",{"_index":1032,"t":{"245":{"position":[[684,10]]}}}],["vital",{"_index":143,"t":{"8":{"position":[[570,5],[2110,5]]}}}],["vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i",{"_index":1090,"t":{"262":{"position":[[570,73]]}}}],["vl(k)=min[vl(j)−weight(vk,vj)]vl(k",{"_index":1084,"t":{"262":{"position":[[295,35]]}}}],["vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i",{"_index":1092,"t":{"262":{"position":[[686,54]]}}}],["vnode",{"_index":1008,"t":{"242":{"position":[[203,6],[283,5]]}}}],["vnode;typedef",{"_index":1009,"t":{"242":{"position":[[243,31]]}}}],["void",{"_index":517,"t":{"81":{"position":[[39,4]]},"83":{"position":[[338,4]]},"139":{"position":[[61,4],[655,4]]},"170":{"position":[[455,4]]},"172":{"position":[[315,4]]},"174":{"position":[[212,4]]},"178":{"position":[[27,4]]},"180":{"position":[[728,4]]},"184":{"position":[[265,4]]},"186":{"position":[[843,4],[1318,4]]},"189":{"position":[[329,8],[732,4]]},"245":{"position":[[504,6]]}}}],["vsv_svs​加入sss",{"_index":1054,"t":{"255":{"position":[[95,22]]}}}],["vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来a到d距离是10，但是加入了b后，通过a",{"_index":1055,"t":{"255":{"position":[[118,56]]}}}],["vvv表示事件，<vi,vj><v_i,v_j><vi​,vj​>的这样一条边表示活动vjv_jvj​必须要viv_ivi",{"_index":1073,"t":{"258":{"position":[[0,83]]}}}],["v′是v的子集e′是e的子集v^{'}是v的子集e^{'}是e的子集v′是v的子集e′是",{"_index":984,"t":{"231":{"position":[[154,50]]}}}],["v到w和w到v",{"_index":988,"t":{"237":{"position":[[17,11]]}}}],["v行v列的矩阵，其中若vi到vj有路径，则a[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则a[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则a[i][j]为1",{"_index":989,"t":{"240":{"position":[[0,128]]}}}],["water",{"_index":103,"t":{"8":{"position":[[108,5],[697,7],[1501,5],[2237,7]]}}}],["way",{"_index":381,"t":{"21":{"position":[[322,3]]}}}],["web",{"_index":1224,"t":{"301":{"position":[[0,3]]}}}],["weight",{"_index":338,"t":{"16":{"position":[[1428,6],[1523,8]]},"242":{"position":[[137,7]]}}}],["weight(v_j,v_k)]ve(k)=max[ve(j)+weight(vj​,vk​)]其中k是j",{"_index":1081,"t":{"262":{"position":[[116,56]]}}}],["weight(v_k,v_j)]vl(k)=min[vl(j)−weight(vk​,vj",{"_index":1086,"t":{"262":{"position":[[345,48]]}}}],["weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj",{"_index":1091,"t":{"262":{"position":[[644,41]]}}}],["weight/tot",{"_index":341,"t":{"16":{"position":[[1510,12]]}}}],["weight[n][n",{"_index":1000,"t":{"240":{"position":[[641,13]]}}}],["welcom",{"_index":653,"t":{"164":{"position":[[23,7]]}}}],["well",{"_index":356,"t":{"16":{"position":[[1829,4]]}}}],["westberri",{"_index":115,"t":{"8":{"position":[[238,9],[1689,9],[1890,9]]}}}],["wherea",{"_index":173,"t":{"8":{"position":[[1216,7],[2897,7]]}}}],["while(!isempty(q",{"_index":1025,"t":{"245":{"position":[[567,19]]}}}],["while(i",{"_index":461,"t":{"73":{"position":[[194,7]]}}}],["while(i<=mid",{"_index":821,"t":{"189":{"position":[[609,13]]}}}],["while(i<s.len",{"_index":530,"t":{"81":{"position":[[305,13]]}}}],["while(j",{"_index":539,"t":{"83":{"position":[[413,7]]}}}],["while(j<=high",{"_index":822,"t":{"189":{"position":[[640,14]]}}}],["while(k<t.len",{"_index":522,"t":{"81":{"position":[[106,15]]}}}],["while(low",{"_index":744,"t":{"180":{"position":[[534,9]]}}}],["while(low<=high",{"_index":684,"t":{"172":{"position":[[435,17]]}}}],["while(low<high",{"_index":745,"t":{"180":{"position":[[553,14],[624,14]]}}}],["widespread",{"_index":163,"t":{"8":{"position":[[983,10],[2613,10]]}}}],["within",{"_index":244,"t":{"14":{"position":[[894,6]]}}}],["word",{"_index":375,"t":{"21":{"position":[[224,5]]}}}],["work",{"_index":161,"t":{"8":{"position":[[917,5],[2547,5]]}}}],["worker",{"_index":365,"t":{"21":{"position":[[64,7]]}}}],["worker_connect",{"_index":920,"t":{"225":{"position":[[177,18]]}}}],["world",{"_index":363,"t":{"21":{"position":[[45,6]]}}}],["www",{"_index":929,"t":{"225":{"position":[[381,7]]}}}],["wxopenid",{"_index":1365,"t":{"345":{"position":[[453,11]]},"355":{"position":[[743,11]]}}}],["w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z",{"_index":547,"t":{"90":{"position":[[0,93]]}}}],["x",{"_index":395,"t":{"32":{"position":[[83,1],[151,1]]},"34":{"position":[[89,26],[150,1],[201,1]]},"56":{"position":[[61,4],[142,4]]},"139":{"position":[[163,3],[251,3],[272,1],[384,3],[405,1],[519,3],[540,1]]},"153":{"position":[[34,76]]},"225":{"position":[[473,1]]}}}],["x/2",{"_index":605,"t":{"139":{"position":[[302,4]]}}}],["x<1){return",{"_index":598,"t":{"139":{"position":[[180,11]]}}}],["x、y的绝对值，i",{"_index":428,"t":{"58":{"position":[[8,15]]},"60":{"position":[[31,15]]},"62":{"position":[[8,15]]}}}],["x和y计算出对应的x和i",{"_index":424,"t":{"56":{"position":[[43,17]]}}}],["x趋向于某值的时候，函数值无限趋向于a，则a就是极限。从几何上来看就是在x>x之后的函数值都落在(a−ε,a+ε)(a",{"_index":862,"t":{"206":{"position":[[121,69]]}}}],["y",{"_index":429,"t":{"58":{"position":[[24,4]]},"60":{"position":[[47,4]]},"62":{"position":[[24,4]]},"227":{"position":[[337,1]]}}}],["year",{"_index":17,"t":{"4":{"position":[[96,5]]}}}],["yourself",{"_index":384,"t":{"21":{"position":[[360,9]]}}}],["zf，zf为1代表全0",{"_index":410,"t":{"49":{"position":[[0,14]]}}}],["zhang",{"_index":42,"t":{"4":{"position":[[401,5]]}}}]],"pipeline":["stemmer"]}}]