[{"documents":[{"i":1,"t":"","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","b":["Foundation","Foundation","数据结构"]},{"i":32,"t":"","u":"/docs/Foundation/计算机组成原理/数组表示和运算","b":["Foundation","Foundation","计算机组成原理"]},{"i":76,"t":"","u":"/docs/Foundation/数据结构/查找","b":["Foundation","Foundation","数据结构"]},{"i":95,"t":"KMP定位子串","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","b":["Foundation","Foundation","数据结构","2.1-算法"]},{"i":109,"t":"","u":"/docs/Foundation/数据结构/数据结构基础知识","b":["Foundation","Foundation","数据结构"]},{"i":122,"t":"","u":"/docs/Foundation/数据结构/树、森林的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":153,"t":"","u":"/docs/Foundation/数据结构/图的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":188,"t":"","u":"/docs/Foundation/数据结构/内部排序算法","b":["Foundation","Foundation","数据结构"]},{"i":221,"t":"","u":"/docs/Foundation/intro","b":["Foundation","Foundation"]},{"i":224,"t":"intro","u":"/docs/intro","b":[]},{"i":228,"t":"","u":"/docs/Foundation/数据库/数据库系统概论复试","b":["Foundation","Foundation","数据库"]},{"i":246,"t":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","b":["Math","DeepLearning"]},{"i":258,"t":"","u":"/docs/Web/Docker/Docker入门","b":["Web","Web","Docker"]},{"i":269,"t":"","u":"/docs/Math/intro","b":["Math"]},{"i":272,"t":"","u":"/docs/Web/部署Docaururs/部署Docsaururs","b":["Web","Web","部署Docaururs"]},{"i":288,"t":"","u":"/docs/Web/软件工程课设/接口文档","b":["Web","Web","软件工程课设"]},{"i":402,"t":"","u":"/docs/Web/intro","b":["Web","Web"]},{"i":405,"t":"","u":"/docs/Work/拼板分板配置","b":["Work"]},{"i":424,"t":"","u":"/docs/Work/清洗板","b":["Work"]},{"i":457,"t":"","u":"/docs/Work/研控报表组装","b":["Work"]},{"i":468,"t":"","u":"/docs/Work/重构看板","b":["Work"]},{"i":493,"t":"","u":"/docs/Work/PDF解析","b":["Work"]},{"i":507,"t":"","u":"/docs/Web/Redis/Redis 持久化","b":["Web","Web","Redis"]},{"i":533,"t":"","u":"/docs/Web/Redis/Redis安装&&十大数据","b":["Web","Web","Redis"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/32",[]],["t/76",[]],["t/95",[0,0.728]],["t/109",[]],["t/122",[]],["t/153",[]],["t/188",[]],["t/221",[]],["t/224",[1,0.728]],["t/228",[]],["t/246",[2,0.728]],["t/258",[]],["t/269",[]],["t/272",[]],["t/288",[]],["t/402",[]],["t/405",[]],["t/424",[]],["t/457",[]],["t/468",[]],["t/493",[]],["t/507",[]],["t/533",[]]],"invertedIndex":[["",{"_index":2,"t":{"246":{"position":[[0,8]]}}}],["intro",{"_index":1,"t":{"224":{"position":[[0,5]]}}}],["kmp",{"_index":0,"t":{"95":{"position":[[0,7]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":2,"t":"8-几种奇怪恶心的树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":3,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":5,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":7,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":9,"t":"红黑树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":10,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":12,"t":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":14,"t":"B树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":15,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":17,"t":"B树高（磁盘存取次数）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b树高磁盘存取次数","p":1},{"i":18,"t":"最矮","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最矮","p":1},{"i":19,"t":"最高","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最高","p":1},{"i":20,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":22,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":24,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":26,"t":"B+树（常用于关系型数据库的存储）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":27,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":29,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":31,"t":"B和B+的类比","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b和b的类比","p":1},{"i":33,"t":"2-数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"","p":32},{"i":34,"t":"码制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#码制","p":32},{"i":35,"t":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":32},{"i":37,"t":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":32},{"i":39,"t":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":32},{"i":41,"t":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":32},{"i":43,"t":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":32},{"i":45,"t":"移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移位","p":32},{"i":46,"t":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":32},{"i":48,"t":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":32},{"i":50,"t":"循环移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#循环移位","p":32},{"i":51,"t":"定点数加减","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数加减","p":32},{"i":52,"t":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":32},{"i":54,"t":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":32},{"i":56,"t":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":32},{"i":58,"t":"定点数乘除","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数乘除","p":32},{"i":59,"t":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":32},{"i":61,"t":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":32},{"i":63,"t":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":32},{"i":65,"t":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":32},{"i":67,"t":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":32},{"i":69,"t":"浮点数","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数","p":32},{"i":70,"t":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":32},{"i":72,"t":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":32},{"i":74,"t":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":32},{"i":77,"t":"9-查找","u":"/docs/Foundation/数据结构/查找","h":"","p":76},{"i":78,"t":"折半查找","u":"/docs/Foundation/数据结构/查找","h":"#折半查找","p":76},{"i":79,"t":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":76},{"i":81,"t":"构造二叉树","u":"/docs/Foundation/数据结构/查找","h":"#构造二叉树","p":76},{"i":82,"t":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":76},{"i":84,"t":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":76},{"i":86,"t":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":76},{"i":88,"t":"散列查找","u":"/docs/Foundation/数据结构/查找","h":"#散列查找","p":76},{"i":89,"t":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":76},{"i":91,"t":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":76},{"i":93,"t":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":76},{"i":97,"t":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":95},{"i":99,"t":"2.KMP","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#2kmp","p":95},{"i":101,"t":"2.1 算法思想","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#21-算法思想","p":95},{"i":103,"t":"2.2 next数组","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#22-next数组","p":95},{"i":105,"t":"2.3 求解代码","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#23-求解代码","p":95},{"i":107,"t":"2.4 next数组优化","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#24-next数组优化","p":95},{"i":110,"t":"0-数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"","p":109},{"i":111,"t":"1.1基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#11基本概念","p":109},{"i":112,"t":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":109},{"i":114,"t":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":109},{"i":116,"t":"2.算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#2算法","p":109},{"i":117,"t":"2.1算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#21算法","p":109},{"i":118,"t":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":109},{"i":120,"t":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":109},{"i":123,"t":"5-树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"","p":122},{"i":124,"t":"几种常考的二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#几种常考的二叉树","p":122},{"i":125,"t":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":122},{"i":127,"t":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":122},{"i":129,"t":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":122},{"i":131,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":122},{"i":133,"t":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":122},{"i":135,"t":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":122},{"i":137,"t":"树和森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和森林","p":122},{"i":138,"t":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":122},{"i":140,"t":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":122},{"i":142,"t":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":122},{"i":144,"t":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":122},{"i":146,"t":"考试选择盲猜","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#考试选择盲猜","p":122},{"i":147,"t":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":122},{"i":149,"t":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":122},{"i":151,"t":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":122},{"i":154,"t":"6-图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","h":"","p":153},{"i":155,"t":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":153},{"i":157,"t":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":153},{"i":159,"t":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":153},{"i":161,"t":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":153},{"i":163,"t":"两种存储结构：矩阵和链表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#两种存储结构矩阵和链表","p":153},{"i":164,"t":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":153},{"i":166,"t":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":153},{"i":168,"t":"BFS和DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs和dfs","p":153},{"i":169,"t":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":153},{"i":171,"t":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":153},{"i":173,"t":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":153},{"i":175,"t":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":153},{"i":177,"t":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":153},{"i":179,"t":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":153},{"i":181,"t":"拓扑","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑","p":153},{"i":182,"t":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":153},{"i":184,"t":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":153},{"i":186,"t":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":153},{"i":189,"t":"7-内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","h":"","p":188},{"i":190,"t":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":188},{"i":192,"t":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":188},{"i":194,"t":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":188},{"i":196,"t":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":188},{"i":198,"t":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":188},{"i":200,"t":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":188},{"i":202,"t":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":188},{"i":204,"t":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":188},{"i":206,"t":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":188},{"i":208,"t":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":188},{"i":210,"t":"归并排序和基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序和基数排序","p":188},{"i":211,"t":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":188},{"i":213,"t":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":188},{"i":215,"t":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":188},{"i":217,"t":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":188},{"i":219,"t":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":188},{"i":222,"t":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":221},{"i":226,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":224},{"i":229,"t":"1-数据库系统概论复试","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"","p":228},{"i":230,"t":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":228},{"i":232,"t":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":228},{"i":234,"t":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":228},{"i":236,"t":"3.SQL","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#3sql","p":228},{"i":237,"t":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":228},{"i":239,"t":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":228},{"i":241,"t":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":228},{"i":243,"t":"4.关系数据理论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#4关系数据理论","p":228},{"i":244,"t":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":228},{"i":248,"t":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":246},{"i":250,"t":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":246},{"i":252,"t":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":246},{"i":254,"t":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":246},{"i":256,"t":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":246},{"i":259,"t":"1-Docker入门","u":"/docs/Web/Docker/Docker入门","h":"","p":258},{"i":260,"t":"1.容器&镜像&仓库","u":"/docs/Web/Docker/Docker入门","h":"#1容器镜像仓库","p":258},{"i":261,"t":"1.1 镜像","u":"/docs/Web/Docker/Docker入门","h":"#11-镜像","p":258},{"i":263,"t":"1.2 容器","u":"/docs/Web/Docker/Docker入门","h":"#12-容器","p":258},{"i":265,"t":"1.3 仓库","u":"/docs/Web/Docker/Docker入门","h":"#13-仓库","p":258},{"i":267,"t":"2.常用指令","u":"/docs/Web/Docker/Docker入门","h":"#2常用指令","p":258},{"i":270,"t":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":269},{"i":273,"t":"2-部署Docsaururs","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"","p":272},{"i":274,"t":"两种方式部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"","p":272},{"i":275,"t":"一、GitHubPages","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#一githubpages","p":272},{"i":277,"t":"1.远程创建仓库","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1远程创建仓库","p":272},{"i":279,"t":"2.本地连接","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2本地连接","p":272},{"i":281,"t":"3.打包部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#3打包部署","p":272},{"i":283,"t":"二、GitHubAction+云服务器部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#二githubaction云服务器部署","p":272},{"i":284,"t":"1.云服务","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1云服务","p":272},{"i":286,"t":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2项目配置action自动化脚本","p":272},{"i":289,"t":"1-接口文档","u":"/docs/Web/软件工程课设/接口文档","h":"","p":288},{"i":290,"t":"4.1 学生端","u":"/docs/Web/软件工程课设/接口文档","h":"#41-学生端","p":288},{"i":291,"t":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":288},{"i":293,"t":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":288},{"i":295,"t":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":288},{"i":297,"t":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":288},{"i":299,"t":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":288},{"i":301,"t":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":288},{"i":303,"t":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":288},{"i":305,"t":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":288},{"i":307,"t":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":288},{"i":309,"t":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":288},{"i":311,"t":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":288},{"i":313,"t":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":288},{"i":315,"t":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":288},{"i":317,"t":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":288},{"i":319,"t":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":288},{"i":321,"t":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":288},{"i":323,"t":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":288},{"i":325,"t":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":288},{"i":327,"t":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":288},{"i":329,"t":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":288},{"i":331,"t":"4.3 管理端","u":"/docs/Web/软件工程课设/接口文档","h":"#43-管理端","p":288},{"i":332,"t":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":288},{"i":334,"t":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":288},{"i":336,"t":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":288},{"i":338,"t":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":288},{"i":340,"t":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":288},{"i":342,"t":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":288},{"i":344,"t":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":288},{"i":346,"t":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":288},{"i":348,"t":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":288},{"i":350,"t":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":288},{"i":352,"t":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":288},{"i":354,"t":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":288},{"i":356,"t":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":288},{"i":358,"t":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":288},{"i":360,"t":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":288},{"i":362,"t":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":288},{"i":364,"t":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":288},{"i":366,"t":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":288},{"i":368,"t":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":288},{"i":370,"t":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":288},{"i":372,"t":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":288},{"i":374,"t":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":288},{"i":376,"t":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":288},{"i":378,"t":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":288},{"i":380,"t":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":288},{"i":382,"t":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":288},{"i":384,"t":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":288},{"i":386,"t":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":288},{"i":388,"t":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":288},{"i":390,"t":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":288},{"i":392,"t":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":288},{"i":394,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":288},{"i":396,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":288},{"i":398,"t":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":288},{"i":400,"t":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":288},{"i":403,"t":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":402},{"i":406,"t":"3-拼板分板配置","u":"/docs/Work/拼板分板配置","h":"","p":405},{"i":408,"t":"1. 业务背景","u":"/docs/Work/拼板分板配置","h":"#1-业务背景","p":405},{"i":410,"t":"1.1 任务","u":"/docs/Work/拼板分板配置","h":"#11-任务","p":405},{"i":412,"t":"2.数据库设计","u":"/docs/Work/拼板分板配置","h":"#2数据库设计","p":405},{"i":414,"t":"3.JPA工具 && SQL执行","u":"/docs/Work/拼板分板配置","h":"#3jpa工具--sql执行","p":405},{"i":415,"t":"3.1 JPA","u":"/docs/Work/拼板分板配置","h":"#31-jpa","p":405},{"i":417,"t":"3.2 SQL执行","u":"/docs/Work/拼板分板配置","h":"#32-sql执行","p":405},{"i":419,"t":"4.服务和接口手记","u":"/docs/Work/拼板分板配置","h":"#4服务和接口手记","p":405},{"i":420,"t":"4.1 服务编写","u":"/docs/Work/拼板分板配置","h":"#41-服务编写","p":405},{"i":422,"t":"4.2 接口编写","u":"/docs/Work/拼板分板配置","h":"#42-接口编写","p":405},{"i":425,"t":"5-清洗板","u":"/docs/Work/清洗板","h":"","p":424},{"i":427,"t":"1.SQL记录","u":"/docs/Work/清洗板","h":"#1sql记录","p":424},{"i":429,"t":"2.设计思路","u":"/docs/Work/清洗板","h":"#2设计思路","p":424},{"i":430,"t":"2.1 清洗模块","u":"/docs/Work/清洗板","h":"#21-清洗模块","p":424},{"i":432,"t":"2.2 审核模块","u":"/docs/Work/清洗板","h":"#22-审核模块","p":424},{"i":434,"t":"3.后端开发手记","u":"/docs/Work/清洗板","h":"#3后端开发手记","p":424},{"i":436,"t":"4.前端开发手记","u":"/docs/Work/清洗板","h":"#4前端开发手记","p":424},{"i":438,"t":"4.1 引入后端接口","u":"/docs/Work/清洗板","h":"#41-引入后端接口","p":424},{"i":440,"t":"4.2 注册vue的路径","u":"/docs/Work/清洗板","h":"#42-注册vue的路径","p":424},{"i":442,"t":"4.3 Vue页面","u":"/docs/Work/清洗板","h":"#43-vue页面","p":424},{"i":444,"t":"5.总结","u":"/docs/Work/清洗板","h":"#5总结","p":424},{"i":446,"t":"5.1 Git学习新纪录","u":"/docs/Work/清洗板","h":"#51-git学习新纪录","p":424},{"i":448,"t":"5.2 冲突解决","u":"/docs/Work/清洗板","h":"#52-冲突解决","p":424},{"i":450,"t":"6.修复手记","u":"/docs/Work/清洗板","h":"#6修复手记","p":424},{"i":451,"t":"6.1 界面按钮确认","u":"/docs/Work/清洗板","h":"#61-界面按钮确认","p":424},{"i":453,"t":"6.2 自动生成条码并带出","u":"/docs/Work/清洗板","h":"#62-自动生成条码并带出","p":424},{"i":455,"t":"6.3 删除IPQC，改用消息推送","u":"/docs/Work/清洗板","h":"#63-删除ipqc改用消息推送","p":424},{"i":458,"t":"4-研控报表组装","u":"/docs/Work/研控报表组装","h":"","p":457},{"i":459,"t":"1.产能报表需求","u":"/docs/Work/研控报表组装","h":"#1产能报表需求","p":457},{"i":461,"t":"2.接口设计","u":"/docs/Work/研控报表组装","h":"#2接口设计","p":457},{"i":462,"t":"2.1 处理工序为空","u":"/docs/Work/研控报表组装","h":"#21-处理工序为空","p":457},{"i":464,"t":"2.2 实体设计","u":"/docs/Work/研控报表组装","h":"#22-实体设计","p":457},{"i":466,"t":"2.3 数据导出","u":"/docs/Work/研控报表组装","h":"#23-数据导出","p":457},{"i":469,"t":"2-看板重构","u":"/docs/Work/重构看板","h":"","p":468},{"i":471,"t":"1.本次SQL学习","u":"/docs/Work/重构看板","h":"#1本次sql学习","p":468},{"i":472,"t":"1.1 case字句","u":"/docs/Work/重构看板","h":"#11-case字句","p":468},{"i":474,"t":"1.2 with as字句","u":"/docs/Work/重构看板","h":"#12-with-as字句","p":468},{"i":476,"t":"1.3 Group by","u":"/docs/Work/重构看板","h":"#13-group-by","p":468},{"i":478,"t":"1.4 ROW_NUMBER（）","u":"/docs/Work/重构看板","h":"#14-row_number","p":468},{"i":480,"t":"1.5 连接","u":"/docs/Work/重构看板","h":"#15-连接","p":468},{"i":482,"t":"1.6 按行分组求和","u":"/docs/Work/重构看板","h":"#16-按行分组求和","p":468},{"i":484,"t":"1.7 字符串拼接","u":"/docs/Work/重构看板","h":"#17-字符串拼接","p":468},{"i":486,"t":"2.优化后的SQL","u":"/docs/Work/重构看板","h":"#2优化后的sql","p":468},{"i":488,"t":"3.接口设计","u":"/docs/Work/重构看板","h":"#3接口设计","p":468},{"i":489,"t":"3.1数据类型设计","u":"/docs/Work/重构看板","h":"#31数据类型设计","p":468},{"i":491,"t":"4.上线测试手记","u":"/docs/Work/重构看板","h":"#4上线测试手记","p":468},{"i":494,"t":"1-PDF解析","u":"/docs/Work/PDF解析","h":"","p":493},{"i":495,"t":"1.PDF读取解析","u":"/docs/Work/PDF解析","h":"#1pdf读取解析","p":493},{"i":497,"t":"2.解析策略","u":"/docs/Work/PDF解析","h":"#2解析策略","p":493},{"i":499,"t":"3.总结","u":"/docs/Work/PDF解析","h":"#3总结","p":493},{"i":501,"t":"3.1数据库连接","u":"/docs/Work/PDF解析","h":"#31数据库连接","p":493},{"i":503,"t":"3.2Git工具使用","u":"/docs/Work/PDF解析","h":"#32git工具使用","p":493},{"i":505,"t":"3.3 8月23日~25日BUG排查日志","u":"/docs/Work/PDF解析","h":"#33-8月23日25日bug排查日志","p":493},{"i":508,"t":"1.持久化","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":509,"t":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":507},{"i":511,"t":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":513,"t":"2.1 配置文件和操作","u":"/docs/Web/Redis/Redis 持久化","h":"#21-配置文件和操作","p":507},{"i":514,"t":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":507},{"i":516,"t":"2.2操作","u":"/docs/Web/Redis/Redis 持久化","h":"#22操作","p":507},{"i":517,"t":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":507},{"i":519,"t":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":507},{"i":521,"t":"3.AOF","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":522,"t":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":507},{"i":524,"t":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":507},{"i":526,"t":"3.3操作","u":"/docs/Web/Redis/Redis 持久化","h":"#33操作","p":507},{"i":527,"t":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":507},{"i":529,"t":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":507},{"i":531,"t":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":534,"t":"1.Linux中的安装和启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":533},{"i":535,"t":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":533},{"i":537,"t":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":533},{"i":539,"t":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":533},{"i":541,"t":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":533},{"i":543,"t":"2.十大数据类型","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":533},{"i":544,"t":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":533},{"i":546,"t":"2.1.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#211常用指令","p":533},{"i":547,"t":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":533},{"i":549,"t":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":533},{"i":551,"t":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":533},{"i":553,"t":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":533},{"i":555,"t":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":533},{"i":557,"t":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":533},{"i":559,"t":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":533},{"i":561,"t":"2.4.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#241常用指令","p":533},{"i":562,"t":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":533},{"i":564,"t":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":533},{"i":566,"t":"2.5.2常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#252常用指令","p":533},{"i":567,"t":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":533},{"i":569,"t":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":533},{"i":571,"t":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":533},{"i":573,"t":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":533},{"i":575,"t":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":533},{"i":577,"t":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":533},{"i":579,"t":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":533}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/2",[0,4.522,1,0.38]],["t/3",[1,0.506]],["t/5",[1,0.506]],["t/7",[1,0.506]],["t/9",[1,0.506]],["t/10",[1,0.506]],["t/12",[1,0.506]],["t/14",[2,5.065]],["t/15",[1,0.506]],["t/17",[2,5.065]],["t/18",[1,0.506]],["t/19",[1,0.506]],["t/20",[1,0.506]],["t/22",[1,0.506]],["t/24",[1,0.506]],["t/26",[2,5.065]],["t/27",[1,0.506]],["t/29",[1,0.506]],["t/31",[3,6.023]],["t/33",[1,0.38,4,2.722]],["t/34",[1,0.506]],["t/35",[1,0.506]],["t/37",[1,0.506]],["t/39",[1,0.506]],["t/41",[1,0.506]],["t/43",[1,0.506]],["t/45",[1,0.506]],["t/46",[1,0.506]],["t/48",[1,0.506]],["t/50",[1,0.506]],["t/51",[1,0.506]],["t/52",[1,0.506]],["t/54",[1,0.506]],["t/56",[1,0.506]],["t/58",[1,0.506]],["t/59",[1,0.506]],["t/61",[5,6.023]],["t/63",[1,0.506]],["t/65",[1,0.506]],["t/67",[1,0.506]],["t/69",[1,0.506]],["t/70",[1,0.506]],["t/72",[1,0.506]],["t/74",[6,6.023]],["t/77",[1,0.38,7,4.522]],["t/78",[1,0.506]],["t/79",[1,0.506]],["t/81",[1,0.506]],["t/82",[8,6.023]],["t/84",[1,0.506]],["t/86",[9,6.023]],["t/88",[1,0.506]],["t/89",[1,0.506]],["t/91",[1,0.506]],["t/93",[1,0.506]],["t/97",[10,3.626]],["t/99",[11,6.023]],["t/101",[1,0.38,12,3.277]],["t/103",[13,3.277,14,4.088]],["t/105",[1,0.38,15,3.803]],["t/107",[14,4.088,16,4.088]],["t/110",[1,0.38,17,4.522]],["t/111",[18,4.365]],["t/112",[1,0.506]],["t/114",[19,4.781]],["t/116",[4,3.626]],["t/117",[12,4.365]],["t/118",[1,0.506]],["t/120",[13,4.365]],["t/123",[1,0.38,20,3.589]],["t/124",[1,0.506]],["t/125",[1,0.506]],["t/127",[1,0.506]],["t/129",[1,0.506]],["t/131",[1,0.506]],["t/133",[1,0.506]],["t/135",[1,0.506]],["t/137",[1,0.506]],["t/138",[1,0.506]],["t/140",[1,0.506]],["t/142",[1,0.506]],["t/144",[1,0.506]],["t/146",[1,0.506]],["t/147",[1,0.506]],["t/149",[1,0.506]],["t/151",[1,0.506]],["t/154",[1,0.38,21,4.088]],["t/155",[1,0.506]],["t/157",[1,0.506]],["t/159",[1,0.506]],["t/161",[1,0.506]],["t/163",[1,0.506]],["t/164",[1,0.506]],["t/166",[1,0.506]],["t/168",[22,6.023]],["t/169",[23,6.023]],["t/171",[24,6.023]],["t/173",[1,0.506]],["t/175",[25,6.023]],["t/177",[26,6.023]],["t/179",[1,0.506]],["t/181",[1,0.506]],["t/182",[27,6.023]],["t/184",[1,0.506]],["t/186",[1,0.506]],["t/189",[1,0.38,28,4.522]],["t/190",[1,0.506]],["t/192",[1,0.506]],["t/194",[1,0.506]],["t/196",[1,0.506]],["t/198",[1,0.506]],["t/200",[1,0.506]],["t/202",[1,0.506]],["t/204",[1,0.506]],["t/206",[1,0.506]],["t/208",[1,0.506]],["t/210",[1,0.506]],["t/211",[1,0.506]],["t/213",[1,0.506]],["t/215",[1,0.506]],["t/217",[1,0.506]],["t/219",[1,0.506]],["t/222",[29,4.522,30,4.522]],["t/226",[1,0.506]],["t/229",[1,0.38,10,2.722]],["t/230",[10,3.626]],["t/232",[4,3.626]],["t/234",[1,0.38,12,3.277]],["t/236",[31,6.023]],["t/237",[1,0.38,32,3.419]],["t/239",[33,3.803,34,4.522]],["t/241",[1,0.38,35,3.803]],["t/243",[36,4.365]],["t/244",[1,0.38,37,3.589]],["t/248",[38,6.023]],["t/250",[39,6.023]],["t/252",[40,6.023]],["t/254",[41,6.023]],["t/256",[20,4.781]],["t/259",[10,2.722,42,4.522]],["t/260",[10,3.626]],["t/261",[1,0.38,18,3.277]],["t/263",[1,0.38,19,3.589]],["t/265",[1,0.38,43,3.803]],["t/267",[4,3.626]],["t/270",[1,0.506]],["t/273",[4,2.722,44,4.522]],["t/274",[1,0.506]],["t/275",[45,6.023]],["t/277",[10,3.626]],["t/279",[4,3.626]],["t/281",[46,4.554]],["t/283",[47,6.023]],["t/284",[10,3.626]],["t/286",[48,6.023]],["t/289",[1,0.38,10,2.722]],["t/290",[1,0.38,37,3.589]],["t/291",[1,0.38,49,4.522]],["t/293",[1,0.38,50,4.522]],["t/295",[1,0.38,51,4.522]],["t/297",[1,0.38,52,4.522]],["t/299",[1,0.38,53,4.522]],["t/301",[1,0.38,54,4.522]],["t/303",[1,0.38,55,4.522]],["t/305",[1,0.38,56,4.522]],["t/307",[1,0.38,57,4.522]],["t/309",[1,0.38,58,4.522]],["t/311",[1,0.38,59,4.522]],["t/313",[1,0.38,60,4.522]],["t/315",[1,0.38,61,4.522]],["t/317",[1,0.38,62,4.522]],["t/319",[1,0.38,63,4.522]],["t/321",[1,0.38,64,4.522]],["t/323",[1,0.38,65,4.522]],["t/325",[1,0.38,66,4.522]],["t/327",[1,0.38,67,4.522]],["t/329",[1,0.38,68,4.522]],["t/331",[1,0.38,69,4.088]],["t/332",[1,0.38,70,4.522]],["t/334",[1,0.38,71,4.522]],["t/336",[1,0.38,72,4.522]],["t/338",[1,0.38,73,4.522]],["t/340",[1,0.38,74,4.522]],["t/342",[1,0.38,75,4.522]],["t/344",[1,0.38,76,4.522]],["t/346",[1,0.38,77,4.522]],["t/348",[1,0.38,78,4.522]],["t/350",[1,0.38,79,4.522]],["t/352",[1,0.38,80,4.522]],["t/354",[1,0.38,81,4.522]],["t/356",[1,0.38,82,4.522]],["t/358",[1,0.38,83,4.522]],["t/360",[1,0.38,84,4.522]],["t/362",[1,0.38,85,4.522]],["t/364",[1,0.38,86,4.522]],["t/366",[1,0.38,87,4.522]],["t/368",[1,0.38,88,4.522]],["t/370",[1,0.38,89,4.522]],["t/372",[1,0.38,90,4.522]],["t/374",[1,0.38,91,4.522]],["t/376",[1,0.38,92,4.522]],["t/378",[1,0.38,93,4.522]],["t/380",[1,0.38,94,4.522]],["t/382",[1,0.38,95,4.522]],["t/384",[1,0.38,96,4.522]],["t/386",[1,0.38,97,4.522]],["t/388",[1,0.38,98,4.522]],["t/390",[1,0.38,99,4.522]],["t/392",[1,0.38,100,4.522]],["t/394",[1,0.38,101,4.088]],["t/396",[1,0.38,101,4.088]],["t/398",[1,0.38,102,4.522]],["t/400",[1,0.38,103,4.522]],["t/403",[1,0.506]],["t/406",[1,0.38,46,3.419]],["t/408",[1,0.38,10,2.722]],["t/410",[1,0.38,18,3.277]],["t/412",[4,3.626]],["t/414",[1,0.304,104,3.619,105,3.272]],["t/415",[32,3.419,106,4.522]],["t/417",[33,3.803,105,4.088]],["t/419",[36,4.365]],["t/420",[1,0.38,37,3.589]],["t/422",[1,0.38,107,4.088]],["t/425",[1,0.38,20,3.589]],["t/427",[108,6.023]],["t/429",[4,3.626]],["t/430",[1,0.38,12,3.277]],["t/432",[1,0.38,13,3.277]],["t/434",[46,4.554]],["t/436",[36,4.365]],["t/438",[1,0.38,37,3.589]],["t/440",[107,4.088,109,4.088]],["t/442",[69,4.088,109,4.088]],["t/444",[20,4.781]],["t/446",[110,4.522,111,4.522]],["t/448",[1,0.38,112,4.522]],["t/450",[21,5.445]],["t/451",[1,0.38,113,4.522]],["t/453",[1,0.38,114,4.522]],["t/455",[115,4.522,116,4.522]],["t/458",[1,0.38,36,3.277]],["t/459",[10,3.626]],["t/461",[4,3.626]],["t/462",[1,0.38,12,3.277]],["t/464",[1,0.38,13,3.277]],["t/466",[1,0.38,15,3.803]],["t/469",[1,0.38,4,2.722]],["t/471",[117,6.023]],["t/472",[18,3.277,118,4.522]],["t/474",[19,4.781]],["t/476",[43,3.803,119,4.522]],["t/478",[120,4.088,121,4.522]],["t/480",[1,0.38,122,4.522]],["t/482",[1,0.38,123,4.522]],["t/484",[1,0.38,124,4.522]],["t/486",[125,6.023]],["t/488",[46,4.554]],["t/489",[32,4.554]],["t/491",[36,4.365]],["t/494",[10,2.722,126,4.522]],["t/495",[127,6.023]],["t/497",[4,3.626]],["t/499",[46,4.554]],["t/501",[32,4.554]],["t/503",[128,6.023]],["t/505",[35,3.803,129,4.522]],["t/508",[10,3.626]],["t/509",[1,0.38,18,3.277]],["t/511",[130,6.023]],["t/513",[1,0.38,12,3.277]],["t/514",[131,5.445]],["t/516",[13,4.365]],["t/517",[132,5.445]],["t/519",[133,6.023]],["t/521",[134,6.023]],["t/522",[1,0.38,32,3.419]],["t/524",[1,0.38,33,3.803]],["t/526",[35,5.065]],["t/527",[135,6.023]],["t/529",[136,6.023]],["t/531",[36,4.365]],["t/534",[137,6.023]],["t/535",[1,0.38,18,3.277]],["t/537",[19,4.781]],["t/539",[1,0.38,43,3.803]],["t/541",[120,5.445]],["t/543",[4,3.626]],["t/544",[138,6.023]],["t/546",[131,5.445]],["t/547",[139,6.023]],["t/549",[140,6.023]],["t/551",[1,0.38,13,3.277]],["t/553",[132,5.445]],["t/555",[15,5.065]],["t/557",[141,6.023]],["t/559",[16,5.445]],["t/561",[142,6.023]],["t/562",[143,6.023]],["t/564",[144,6.023]],["t/566",[145,6.023]],["t/567",[146,6.023]],["t/569",[147,6.023]],["t/571",[148,6.023]],["t/573",[149,6.023]],["t/575",[150,6.023]],["t/577",[151,6.023]],["t/579",[152,6.023]]],"invertedIndex":[["",{"_index":1,"t":{"2":{"position":[[2,8]]},"3":{"position":[[0,5]]},"5":{"position":[[0,2]]},"7":{"position":[[0,2]]},"9":{"position":[[0,3]]},"10":{"position":[[0,2]]},"12":{"position":[[0,4]]},"15":{"position":[[0,2]]},"18":{"position":[[0,2]]},"19":{"position":[[0,2]]},"20":{"position":[[0,2]]},"22":{"position":[[0,2]]},"24":{"position":[[0,2]]},"27":{"position":[[0,2]]},"29":{"position":[[0,2]]},"33":{"position":[[2,7]]},"34":{"position":[[0,2]]},"35":{"position":[[0,9]]},"37":{"position":[[0,2]]},"39":{"position":[[0,2]]},"41":{"position":[[0,2]]},"43":{"position":[[0,2]]},"45":{"position":[[0,2]]},"46":{"position":[[0,4]]},"48":{"position":[[0,4]]},"50":{"position":[[0,4]]},"51":{"position":[[0,5]]},"52":{"position":[[0,4]]},"54":{"position":[[0,4]]},"56":{"position":[[0,4]]},"58":{"position":[[0,5]]},"59":{"position":[[0,4]]},"63":{"position":[[0,10]]},"65":{"position":[[0,18]]},"67":{"position":[[0,11]]},"69":{"position":[[0,3]]},"70":{"position":[[0,8]]},"72":{"position":[[0,3]]},"77":{"position":[[2,2]]},"78":{"position":[[0,4]]},"79":{"position":[[0,2]]},"81":{"position":[[0,5]]},"84":{"position":[[0,4]]},"88":{"position":[[0,4]]},"89":{"position":[[0,4]]},"91":{"position":[[0,4]]},"93":{"position":[[0,7]]},"101":{"position":[[4,4]]},"105":{"position":[[4,4]]},"110":{"position":[[2,8]]},"112":{"position":[[0,28]]},"118":{"position":[[0,7]]},"123":{"position":[[2,9]]},"124":{"position":[[0,8]]},"125":{"position":[[0,4]]},"127":{"position":[[0,5]]},"129":{"position":[[0,5]]},"131":{"position":[[0,5]]},"133":{"position":[[0,11]]},"135":{"position":[[0,5]]},"137":{"position":[[0,4]]},"138":{"position":[[0,8]]},"140":{"position":[[0,6]]},"142":{"position":[[0,10]]},"144":{"position":[[0,8]]},"146":{"position":[[0,6]]},"147":{"position":[[0,8]]},"149":{"position":[[0,4]]},"151":{"position":[[0,13]]},"154":{"position":[[2,6]]},"155":{"position":[[0,10]]},"157":{"position":[[0,9]]},"159":{"position":[[0,3]]},"161":{"position":[[0,3]]},"163":{"position":[[0,12]]},"164":{"position":[[0,4]]},"166":{"position":[[0,3]]},"173":{"position":[[0,3]]},"179":{"position":[[0,15]]},"181":{"position":[[0,2]]},"184":{"position":[[0,4]]},"186":{"position":[[0,4]]},"189":{"position":[[2,6]]},"190":{"position":[[0,4]]},"192":{"position":[[0,4]]},"194":{"position":[[0,4]]},"196":{"position":[[0,4]]},"198":{"position":[[0,4]]},"200":{"position":[[0,4]]},"202":{"position":[[0,4]]},"204":{"position":[[0,4]]},"206":{"position":[[0,4]]},"208":{"position":[[0,3]]},"210":{"position":[[0,9]]},"211":{"position":[[0,4]]},"213":{"position":[[0,4]]},"215":{"position":[[0,8]]},"217":{"position":[[0,7]]},"219":{"position":[[0,9]]},"226":{"position":[[0,30]]},"229":{"position":[[2,9]]},"234":{"position":[[4,6]]},"237":{"position":[[4,2]]},"241":{"position":[[4,2]]},"244":{"position":[[4,4]]},"261":{"position":[[4,2]]},"263":{"position":[[4,2]]},"265":{"position":[[4,2]]},"270":{"position":[[0,8]]},"274":{"position":[[0,6]]},"289":{"position":[[2,4]]},"290":{"position":[[4,3]]},"291":{"position":[[7,2]]},"293":{"position":[[7,2]]},"295":{"position":[[7,2]]},"297":{"position":[[7,2]]},"299":{"position":[[7,4]]},"301":{"position":[[7,4]]},"303":{"position":[[7,4]]},"305":{"position":[[7,4]]},"307":{"position":[[7,4]]},"309":{"position":[[8,4]]},"311":{"position":[[8,4]]},"313":{"position":[[8,6]]},"315":{"position":[[8,5]]},"317":{"position":[[8,4]]},"319":{"position":[[8,4]]},"321":{"position":[[8,6]]},"323":{"position":[[8,6]]},"325":{"position":[[8,4]]},"327":{"position":[[8,6]]},"329":{"position":[[8,6]]},"331":{"position":[[4,3]]},"332":{"position":[[7,2]]},"334":{"position":[[7,2]]},"336":{"position":[[7,2]]},"338":{"position":[[7,4]]},"340":{"position":[[7,4]]},"342":{"position":[[7,4]]},"344":{"position":[[7,4]]},"346":{"position":[[7,6]]},"348":{"position":[[7,4]]},"350":{"position":[[8,4]]},"352":{"position":[[8,4]]},"354":{"position":[[8,4]]},"356":{"position":[[8,4]]},"358":{"position":[[8,4]]},"360":{"position":[[8,4]]},"362":{"position":[[8,4]]},"364":{"position":[[8,4]]},"366":{"position":[[8,6]]},"368":{"position":[[8,4]]},"370":{"position":[[8,4]]},"372":{"position":[[8,4]]},"374":{"position":[[8,4]]},"376":{"position":[[8,4]]},"378":{"position":[[8,4]]},"380":{"position":[[8,4]]},"382":{"position":[[8,4]]},"384":{"position":[[8,4]]},"386":{"position":[[8,4]]},"388":{"position":[[8,4]]},"390":{"position":[[8,4]]},"392":{"position":[[8,6]]},"394":{"position":[[8,6]]},"396":{"position":[[8,6]]},"398":{"position":[[8,4]]},"400":{"position":[[8,6]]},"403":{"position":[[0,9]]},"406":{"position":[[2,6]]},"408":{"position":[[3,4]]},"410":{"position":[[4,2]]},"414":{"position":[[8,2]]},"420":{"position":[[4,4]]},"422":{"position":[[4,4]]},"425":{"position":[[2,3]]},"430":{"position":[[4,4]]},"432":{"position":[[4,4]]},"438":{"position":[[4,6]]},"448":{"position":[[4,4]]},"451":{"position":[[4,6]]},"453":{"position":[[4,9]]},"458":{"position":[[2,6]]},"462":{"position":[[4,6]]},"464":{"position":[[4,4]]},"466":{"position":[[4,4]]},"469":{"position":[[2,4]]},"480":{"position":[[4,2]]},"482":{"position":[[4,6]]},"484":{"position":[[4,5]]},"509":{"position":[[4,6]]},"513":{"position":[[4,7]]},"522":{"position":[[4,4]]},"524":{"position":[[4,6]]},"535":{"position":[[4,5]]},"539":{"position":[[4,4]]},"551":{"position":[[4,2]]}}}],["0",{"_index":17,"t":{"110":{"position":[[0,1]]}}}],["1",{"_index":10,"t":{"97":{"position":[[0,11]]},"229":{"position":[[0,1]]},"230":{"position":[[0,4]]},"259":{"position":[[0,1]]},"260":{"position":[[0,10]]},"277":{"position":[[0,8]]},"284":{"position":[[0,5]]},"289":{"position":[[0,1]]},"408":{"position":[[0,2]]},"459":{"position":[[0,8]]},"494":{"position":[[0,1]]},"508":{"position":[[0,5]]}}}],["1.1",{"_index":18,"t":{"111":{"position":[[0,7]]},"261":{"position":[[0,3]]},"410":{"position":[[0,3]]},"472":{"position":[[0,3]]},"509":{"position":[[0,3]]},"535":{"position":[[0,3]]}}}],["1.2",{"_index":19,"t":{"114":{"position":[[0,10]]},"263":{"position":[[0,3]]},"474":{"position":[[0,3]]},"537":{"position":[[0,5]]}}}],["1.3",{"_index":43,"t":{"265":{"position":[[0,3]]},"476":{"position":[[0,3]]},"539":{"position":[[0,3]]}}}],["1.4",{"_index":120,"t":{"478":{"position":[[0,3]]},"541":{"position":[[0,5]]}}}],["1.5",{"_index":122,"t":{"480":{"position":[[0,3]]}}}],["1.6",{"_index":123,"t":{"482":{"position":[[0,3]]}}}],["1.7",{"_index":124,"t":{"484":{"position":[[0,3]]}}}],["1.linux",{"_index":137,"t":{"534":{"position":[[0,14]]}}}],["1.pdf",{"_index":127,"t":{"495":{"position":[[0,9]]}}}],["1.sql",{"_index":108,"t":{"427":{"position":[[0,7]]}}}],["1.交并比iou交并比iou交并比i",{"_index":38,"t":{"248":{"position":[[0,20]]}}}],["1.本次sql",{"_index":117,"t":{"471":{"position":[[0,9]]}}}],["2",{"_index":4,"t":{"33":{"position":[[0,1]]},"116":{"position":[[0,4]]},"232":{"position":[[0,8]]},"267":{"position":[[0,6]]},"273":{"position":[[0,1]]},"279":{"position":[[0,6]]},"412":{"position":[[0,7]]},"429":{"position":[[0,6]]},"461":{"position":[[0,6]]},"469":{"position":[[0,1]]},"497":{"position":[[0,6]]},"543":{"position":[[0,8]]}}}],["2.1",{"_index":12,"t":{"101":{"position":[[0,3]]},"117":{"position":[[0,5]]},"234":{"position":[[0,3]]},"430":{"position":[[0,3]]},"462":{"position":[[0,3]]},"513":{"position":[[0,3]]}}}],["2.1.1",{"_index":131,"t":{"514":{"position":[[0,7]]},"546":{"position":[[0,9]]}}}],["2.1.2",{"_index":139,"t":{"547":{"position":[[0,9]]}}}],["2.1.3",{"_index":140,"t":{"549":{"position":[[0,9]]}}}],["2.1字符串string",{"_index":138,"t":{"544":{"position":[[0,12]]}}}],["2.2",{"_index":13,"t":{"103":{"position":[[0,3]]},"120":{"position":[[0,8]]},"432":{"position":[[0,3]]},"464":{"position":[[0,3]]},"516":{"position":[[0,5]]},"551":{"position":[[0,3]]}}}],["2.2.1",{"_index":132,"t":{"517":{"position":[[0,9]]},"553":{"position":[[0,9]]}}}],["2.2.2",{"_index":133,"t":{"519":{"position":[[0,9]]}}}],["2.3",{"_index":15,"t":{"105":{"position":[[0,3]]},"466":{"position":[[0,3]]},"555":{"position":[[0,5]]}}}],["2.3.1",{"_index":141,"t":{"557":{"position":[[0,9]]}}}],["2.4",{"_index":16,"t":{"107":{"position":[[0,3]]},"559":{"position":[[0,5]]}}}],["2.4.1",{"_index":142,"t":{"561":{"position":[[0,9]]}}}],["2.5",{"_index":143,"t":{"562":{"position":[[0,7]]}}}],["2.5.1跟set",{"_index":144,"t":{"564":{"position":[[0,12]]}}}],["2.5.2",{"_index":145,"t":{"566":{"position":[[0,9]]}}}],["2.6",{"_index":146,"t":{"567":{"position":[[0,9]]}}}],["2.6.1",{"_index":147,"t":{"569":{"position":[[0,7]]}}}],["2.6.2",{"_index":148,"t":{"571":{"position":[[0,7]]}}}],["2.7hyperloglog",{"_index":149,"t":{"573":{"position":[[0,14]]}}}],["2.8",{"_index":150,"t":{"575":{"position":[[0,4]]}}}],["2.8.1",{"_index":151,"t":{"577":{"position":[[0,8]]}}}],["2.8.2",{"_index":152,"t":{"579":{"position":[[0,9]]}}}],["2.dicedicedic",{"_index":39,"t":{"250":{"position":[[0,16]]}}}],["2.kmp",{"_index":11,"t":{"99":{"position":[[0,5]]}}}],["2.rdb",{"_index":130,"t":{"511":{"position":[[0,5]]}}}],["2.优化后的sql",{"_index":125,"t":{"486":{"position":[[0,9]]}}}],["2.项目配置action",{"_index":48,"t":{"286":{"position":[[0,17]]}}}],["3",{"_index":46,"t":{"281":{"position":[[0,6]]},"406":{"position":[[0,1]]},"434":{"position":[[0,8]]},"488":{"position":[[0,6]]},"499":{"position":[[0,4]]}}}],["3.1",{"_index":32,"t":{"237":{"position":[[0,3]]},"415":{"position":[[0,3]]},"489":{"position":[[0,9]]},"501":{"position":[[0,8]]},"522":{"position":[[0,3]]}}}],["3.2",{"_index":33,"t":{"239":{"position":[[0,3]]},"417":{"position":[[0,3]]},"524":{"position":[[0,3]]}}}],["3.2git",{"_index":128,"t":{"503":{"position":[[0,10]]}}}],["3.3",{"_index":35,"t":{"241":{"position":[[0,3]]},"505":{"position":[[0,3]]},"526":{"position":[[0,5]]}}}],["3.3.1",{"_index":135,"t":{"527":{"position":[[0,7]]}}}],["3.3.2aof",{"_index":136,"t":{"529":{"position":[[0,13]]}}}],["3.aof",{"_index":134,"t":{"521":{"position":[[0,5]]}}}],["3.jpa",{"_index":104,"t":{"414":{"position":[[0,7]]}}}],["3.sql",{"_index":31,"t":{"236":{"position":[[0,5]]}}}],["3.召回率recallrecallrecal",{"_index":40,"t":{"252":{"position":[[0,23]]}}}],["4",{"_index":36,"t":{"243":{"position":[[0,8]]},"419":{"position":[[0,9]]},"436":{"position":[[0,8]]},"458":{"position":[[0,1]]},"491":{"position":[[0,8]]},"531":{"position":[[0,6]]}}}],["4.1",{"_index":37,"t":{"244":{"position":[[0,3]]},"290":{"position":[[0,3]]},"420":{"position":[[0,3]]},"438":{"position":[[0,3]]}}}],["4.1.1",{"_index":49,"t":{"291":{"position":[[0,6]]}}}],["4.1.10",{"_index":58,"t":{"309":{"position":[[0,7]]}}}],["4.1.11",{"_index":59,"t":{"311":{"position":[[0,7]]}}}],["4.1.12",{"_index":60,"t":{"313":{"position":[[0,7]]}}}],["4.1.13",{"_index":61,"t":{"315":{"position":[[0,7]]}}}],["4.1.14",{"_index":62,"t":{"317":{"position":[[0,7]]}}}],["4.1.15",{"_index":63,"t":{"319":{"position":[[0,7]]}}}],["4.1.16",{"_index":64,"t":{"321":{"position":[[0,7]]}}}],["4.1.17",{"_index":65,"t":{"323":{"position":[[0,7]]}}}],["4.1.18",{"_index":66,"t":{"325":{"position":[[0,7]]}}}],["4.1.19",{"_index":67,"t":{"327":{"position":[[0,7]]}}}],["4.1.2",{"_index":50,"t":{"293":{"position":[[0,6]]}}}],["4.1.20",{"_index":68,"t":{"329":{"position":[[0,7]]}}}],["4.1.3",{"_index":51,"t":{"295":{"position":[[0,6]]}}}],["4.1.4",{"_index":52,"t":{"297":{"position":[[0,6]]}}}],["4.1.5",{"_index":53,"t":{"299":{"position":[[0,6]]}}}],["4.1.6",{"_index":54,"t":{"301":{"position":[[0,6]]}}}],["4.1.7",{"_index":55,"t":{"303":{"position":[[0,6]]}}}],["4.1.8",{"_index":56,"t":{"305":{"position":[[0,6]]}}}],["4.1.9",{"_index":57,"t":{"307":{"position":[[0,6]]}}}],["4.2",{"_index":107,"t":{"422":{"position":[[0,3]]},"440":{"position":[[0,3]]}}}],["4.3",{"_index":69,"t":{"331":{"position":[[0,3]]},"442":{"position":[[0,3]]}}}],["4.3.1",{"_index":70,"t":{"332":{"position":[[0,6]]}}}],["4.3.10",{"_index":79,"t":{"350":{"position":[[0,7]]}}}],["4.3.11",{"_index":80,"t":{"352":{"position":[[0,7]]}}}],["4.3.12",{"_index":81,"t":{"354":{"position":[[0,7]]}}}],["4.3.13",{"_index":82,"t":{"356":{"position":[[0,7]]}}}],["4.3.14",{"_index":83,"t":{"358":{"position":[[0,7]]}}}],["4.3.15",{"_index":84,"t":{"360":{"position":[[0,7]]}}}],["4.3.16",{"_index":85,"t":{"362":{"position":[[0,7]]}}}],["4.3.17",{"_index":86,"t":{"364":{"position":[[0,7]]}}}],["4.3.18",{"_index":87,"t":{"366":{"position":[[0,7]]}}}],["4.3.19",{"_index":88,"t":{"368":{"position":[[0,7]]}}}],["4.3.2",{"_index":71,"t":{"334":{"position":[[0,6]]}}}],["4.3.20",{"_index":89,"t":{"370":{"position":[[0,7]]}}}],["4.3.21",{"_index":90,"t":{"372":{"position":[[0,7]]}}}],["4.3.22",{"_index":91,"t":{"374":{"position":[[0,7]]}}}],["4.3.23",{"_index":92,"t":{"376":{"position":[[0,7]]}}}],["4.3.24",{"_index":93,"t":{"378":{"position":[[0,7]]}}}],["4.3.25",{"_index":94,"t":{"380":{"position":[[0,7]]}}}],["4.3.26",{"_index":95,"t":{"382":{"position":[[0,7]]}}}],["4.3.27",{"_index":96,"t":{"384":{"position":[[0,7]]}}}],["4.3.28",{"_index":97,"t":{"386":{"position":[[0,7]]}}}],["4.3.29",{"_index":98,"t":{"388":{"position":[[0,7]]}}}],["4.3.3",{"_index":72,"t":{"336":{"position":[[0,6]]}}}],["4.3.30",{"_index":99,"t":{"390":{"position":[[0,7]]}}}],["4.3.31",{"_index":100,"t":{"392":{"position":[[0,7]]}}}],["4.3.32",{"_index":101,"t":{"394":{"position":[[0,7]]},"396":{"position":[[0,7]]}}}],["4.3.33",{"_index":102,"t":{"398":{"position":[[0,7]]}}}],["4.3.34",{"_index":103,"t":{"400":{"position":[[0,7]]}}}],["4.3.4",{"_index":73,"t":{"338":{"position":[[0,6]]}}}],["4.3.5",{"_index":74,"t":{"340":{"position":[[0,6]]}}}],["4.3.6",{"_index":75,"t":{"342":{"position":[[0,6]]}}}],["4.3.7",{"_index":76,"t":{"344":{"position":[[0,6]]}}}],["4.3.8",{"_index":77,"t":{"346":{"position":[[0,6]]}}}],["4.3.9",{"_index":78,"t":{"348":{"position":[[0,6]]}}}],["4.准确率accaccacc",{"_index":41,"t":{"254":{"position":[[0,14]]}}}],["5",{"_index":20,"t":{"123":{"position":[[0,1]]},"256":{"position":[[0,4]]},"425":{"position":[[0,1]]},"444":{"position":[[0,4]]}}}],["5.1",{"_index":110,"t":{"446":{"position":[[0,3]]}}}],["5.2",{"_index":112,"t":{"448":{"position":[[0,3]]}}}],["6",{"_index":21,"t":{"154":{"position":[[0,1]]},"450":{"position":[[0,6]]}}}],["6.1",{"_index":113,"t":{"451":{"position":[[0,3]]}}}],["6.2",{"_index":114,"t":{"453":{"position":[[0,3]]}}}],["6.3",{"_index":115,"t":{"455":{"position":[[0,3]]}}}],["7",{"_index":28,"t":{"189":{"position":[[0,1]]}}}],["8",{"_index":0,"t":{"2":{"position":[[0,1]]}}}],["8月23日~25日bug",{"_index":129,"t":{"505":{"position":[[4,16]]}}}],["9",{"_index":7,"t":{"77":{"position":[[0,1]]}}}],["aov",{"_index":27,"t":{"182":{"position":[[0,3]]}}}],["asl",{"_index":9,"t":{"86":{"position":[[0,3]]}}}],["asl和失败asl",{"_index":8,"t":{"82":{"position":[[0,13]]}}}],["b",{"_index":2,"t":{"14":{"position":[[0,2]]},"17":{"position":[[0,11]]},"26":{"position":[[0,17]]}}}],["bf",{"_index":23,"t":{"169":{"position":[[0,3]]}}}],["bfs和df",{"_index":22,"t":{"168":{"position":[[0,7]]}}}],["booth",{"_index":5,"t":{"61":{"position":[[0,13]]}}}],["b和b",{"_index":3,"t":{"31":{"position":[[0,7]]}}}],["case",{"_index":118,"t":{"472":{"position":[[4,6]]}}}],["crud",{"_index":34,"t":{"239":{"position":[[4,4]]}}}],["df",{"_index":24,"t":{"171":{"position":[[0,3]]}}}],["docker",{"_index":42,"t":{"259":{"position":[[2,8]]}}}],["docsaurur",{"_index":44,"t":{"273":{"position":[[2,12]]}}}],["foundat",{"_index":29,"t":{"222":{"position":[[0,10]]}}}],["git",{"_index":111,"t":{"446":{"position":[[4,8]]}}}],["githubact",{"_index":47,"t":{"283":{"position":[[0,21]]}}}],["githubpag",{"_index":45,"t":{"275":{"position":[[0,13]]}}}],["group",{"_index":119,"t":{"476":{"position":[[4,5]]}}}],["ieee754",{"_index":6,"t":{"74":{"position":[[0,9]]}}}],["ipqc",{"_index":116,"t":{"455":{"position":[[4,13]]}}}],["jpa",{"_index":106,"t":{"415":{"position":[[4,3]]}}}],["kruskal",{"_index":26,"t":{"177":{"position":[[0,14]]}}}],["next",{"_index":14,"t":{"103":{"position":[[4,6]]},"107":{"position":[[4,8]]}}}],["pdf",{"_index":126,"t":{"494":{"position":[[2,5]]}}}],["prim",{"_index":25,"t":{"175":{"position":[[0,9]]}}}],["road",{"_index":30,"t":{"222":{"position":[[14,4]]}}}],["row_numb",{"_index":121,"t":{"478":{"position":[[4,12]]}}}],["sql",{"_index":105,"t":{"414":{"position":[[11,5]]},"417":{"position":[[4,5]]}}}],["vue",{"_index":109,"t":{"440":{"position":[[4,8]]},"442":{"position":[[4,5]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":4,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":6,"t":"找到合适的位置插入，然后判断类型进行处理： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":8,"t":"删除一个节点后，会导致一棵子树失衡，假设删除w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z的： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左 删除和插入操作类似，不同之处在于删除的调整，可能会导致另外的不平衡，需要反复多次进行调整。","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":11,"t":"什么是红黑树，红黑树是一种特殊的二叉排序树，考试内容不会很深，简单清楚性质概念和插入操作即可，删除操作很难，考察概率不大。 主要性质： 每个结点或黑或红 根节点必黑 叶节点必黑，这里的叶节点是外部结点 不存在两个相邻的红节点 任意一个节点，该节点到任意一个叶节点的简单路径上，经过的黑节点数目是一样的 顺口溜： info 左根右（排序） 根叶黑 不红红 黑路同 两个结论： 从根出发到叶节点的路径不大于最短路径的一半 有n个内部红节点的红黑树高度h≤2∗log2(n+1)h \\le 2*log_{2}{(n+1)}h≤2∗log2​(n+1) 插入的节点初始化为红","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":13,"t":"第一步先确定要插入的位置 若为根节点，直接染黑 如果不破坏红黑树特征，正常 如果破坏了“不红红”的条件，找到父亲的兄弟结点，也就是叔结点，按照叔结点的两种情况去调整:(1)红叔叔（2）黑叔叔 （1）红叔叔 叔、父、爷结点染色（颜色反转），同时爷结点变成新节点（变黑则无所谓，变红则要再调整）。 （2）黑叔叔 找父节点和爷结点，判断当前节点对于爷结点的位置进行调整： LL：右旋，父节点换爷结点，同时父和爷染色 RR：左旋，父节点换爷结点，同时父和爷染色 LR：先左后右，当前节点先左后右，儿结点换爷结点，同时染色 RL：先右后左，当前节点先右后左，儿结点换爷结点，同时染色","s":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":16,"t":"info 树中每个结点至多有m个子树，即一个节点中至多m-1个关键字 根节点至少两棵子树 初根节点外的所有非叶节点，至少[m/2]（向上取整）棵子树，即至少有[m/2]（向上取整）-1个关键字 所有叶节点在最后一层（NULL节点，空指针）","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":21,"t":"在B树中找节点 在节点中中找关键字 与节点中的关键字进行比对，其中节点的左指针指向的节点集合小于该节点，右指针指向的节点集合大于节点，依据这种特性，一层层进行查找，如果到最后NULL节点，则说明找不到了。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":23,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1] 定位，找到应该插入的位置 插入，如果关键字个数插入后在正确范围内，则直接插入，否则进行处理 多的情况处理如下： 如下处理：","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":25,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1]，所以删除后节点的关键字个数不能小于（m/2）向上取整-1。 直接删除，如果删除满足关键字的最低要求，则直接删除 如果在非终端节点，则用直接前驱或者直接后继来代替 如果在兄弟够借，即目前关键字删除前为（m/2）向上取整-1，且其左（右）兄弟的关键字数目大于（m/2）向上取整，则从兄弟中拿一个节点，放到父节点中，然后从父节点中拿一下下来填充给不满足要求的节点，称为父子换位法 这里的92处已经不满足，但是左兄弟仍然充裕，则进行父子换位法： 兄弟不够借。当兄弟不够借的时候，当前节点+兄弟结点的个数为m-2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m-1，同时父节点关键字数目-1。如果父节点不满足要求，则进行兄弟够借和兄弟不够借两种试探，进行填补跟合并。如果操作使得根节点-1变为0，则直接删除根节点，换成新的根节点。(切记不可进行前驱后继填补) 此时需要父节点落下70，进行合并： 73处不满足，同时左兄弟不够借，则82落下，进行合并： 删除根节点，合并得新根节点：","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":28,"t":"m阶B+树每个结点最多m棵子树（也就是最多m个孩子节点） 非叶、根节点至少有两棵子树，其他每个分支节点至少有（m/2）向上取整棵子树 节点的子树个树和关键字个数一样 叶节点包含所有关键字，也就是全部关键字都会存储在叶子节点，节点内按大小排序 所有分支节点，中仅仅包含它所指向的子节点中的最大值，及其子节点的指针 叶节点之间会有指针穿在一起（支持顺序查找） 如上：3，9，15中存储的分别是三个子节点中的最大值，最后绿色的叶节点之间有指针连在一起。","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":30,"t":"从根出发，找到合适的位置（处于哪个子节点），过程中会在非叶节点中遇到关键字，但这并不是查找成功，要一直查到叶节点中才算成功，这是区别于B树的一个地方，B树是能够在非终端节点中就找到结果的。 如下是一个查找成功的例子，查找9，从根出发，直到叶节点。 如下是查找失败的例子：从根出发，进入15的子节点，然后进入9的子节点，对比了6->8，发现8已经大于7，则查找失败了。 总之无论成功与否，最终都一定要走到最下面的一层节点。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":36,"t":"除基取余法（针对整数）​ 拿十进制的数除以基数（什么进制就是什么基数），留下余数和商，继续执行除基取余，知道商为0，最后将余数从下向上串起来，得到整数部分。 乘基取整法（针对小数）​ 拿小数不断乘以基数，取掉最高位（小数点前一位），知道乘积的结果为1.000....，将结果从下向上串起来即可。","s":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":32},{"i":38,"t":"机器数的最高位表示数据的符号，剩下的数据位表示数据的绝对值真值。假设字长为n+1位。 则小数表示范围：−(1−2−n)≤x≤1−2−n-(1-2 ^{-n})\\le x \\le 1-2^{-n}−(1−2−n)≤x≤1−2−n， 整数表示范围：−(2n−1)≤x≤2n−1-(2^{n}-1) \\le x \\le 2^n -1−(2n−1)≤x≤2n−1。 其中原码的0有两种表示：10000和00000。","s":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":32},{"i":40,"t":"基于原码的不方便运算二设计的，模二运算。正数的补码和原码一样，负数的补码是在原码的基础上，除符号位外取反，末位加1（从右到左找到第一个1，前面的数取反即可）。如果是从x的补码求-x的补码，也是上述的步骤，同时将符号位进行变换即可。 对于字长n+1位。 小数表示范围：−1≤x≤1−2−n-1 \\le x \\le 1-2^{-n}−1≤x≤1−2−n 整数表示范围：−2n≤x≤2n−1-2^n \\le x \\le 2^n -1−2n≤x≤2n−1 零的表示唯一，都是0.000","s":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":32},{"i":42,"t":"正数的反码同原码，负数的反码等于原码的数值为全部取反。其中反码的零也有正负之分。","s":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":32},{"i":44,"t":"移码常常用来表示浮点数的阶码，理解为在真值上加上一个常数（偏置值），通常是2n2^n2n，相当于x在数轴上正向偏移若干单位，移码等于补码的符号位取反。 移码的零表示唯一。","s":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":32},{"i":47,"t":"码制 添加 正数 原、补、反 0 负数 原 0 补 左1 右0 反 1","s":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":32},{"i":49,"t":"无脑0","s":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":32},{"i":53,"t":"原码加减计算在计算机中容易失误得不到正确的结果，于是计算机内部的加减运算都是采用补码进行运算的，减法的本质是加法，等于加上一个负数的补码。步骤： 按二进制规则，逢二进一 加法：直接相加；减法：减数转换成负数补码后和被减数相加 符号位和数值位一起参与运算，加减法的符号位在运算中直接得到 最终运算结果的高位丢弃，保留n+1位，运算结果还是补码","s":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":32},{"i":55,"t":"零标志ZF，ZF为1代表全0 溢出标志OF，为1表示溢出，对于无符号数这个标志没用 符号标志SF，表示结果的符号 进/借位标志CF，对无符号有用，有符号数的运算没用","s":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":32},{"i":57,"t":"1）一位符号位 参加运算的两个数符号相同，结果与原操作数不同的话，表示溢出。 V=AsBsSsˉ+AsˉBsˉSsV = A_sB_s \\bar{S_s}+\\bar{A_{s}}\\bar{B_{s}}S_sV=As​Bs​Ss​ˉ​+As​ˉ​Bs​ˉ​Ss​ 逻辑表达式为1时候为溢出 2）双符号位 模四补码，运算结果两个符号位一样则不溢出，否则是溢出。 00 11 01上溢出 10下溢出 3）一位符号位 采用一位符号位结合仅为情况判断溢出，若符号位进位CF和最高位数位的进位C1一样表示没有溢出，反之溢出。","s":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":32},{"i":60,"t":"符号位单独运算，被乘数和乘数按绝对值进行运算 初始ACC里面设置为00.0000（00符号位隐藏） 乘数最低位为1，则加上被乘数，为0则加0 执行完3后，整体带上ACC的符号位进行右移（逻辑） 重复执行加法和右移n次即可 手算模拟：","s":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":32},{"i":62,"t":"在乘数后面初始加一个辅助位0，根据辅助位和乘数的最后一位的加减结果判断下一步加什么。 x和y计算出对应的x和y的补码以及-x的补码 初始ACC设置00.0000，MQ中为乘数，乘数后添加一个辅助位（辅助位就是MQ后一位） 辅助位-MQ最低位：为1则加x的补码，为0则加0，为-1则加-x的补码 执行3后，整体右移（逻辑）一位 整体执行3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n次的右移） 比较：","s":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":32},{"i":64,"t":"符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 第一步是用被除数-除数的补码 判断余数，余数为负商0，并且加上除数的补码，余数为正商0，不恢复 执行完4后，余数进行逻辑左移 加减n+1次，左移n次 流程图：","s":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":32},{"i":66,"t":"由余数和除数的符号共同决定，不需要恢复余数。 符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 被除数减去除数，判断余数正负 余数为负，商0，余数左移并且加上除数；余数为正，商1，余数左移并且减去除数 加减n+1次，左移n","s":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":32},{"i":68,"t":"符号位参与运算 计算x、y的绝对值，y的补码和-y的补码 第一步：被除数和除数同号，则被除数减去除数，被除数和除数异号，则加上除数 判断除数和余数是否同号，同号商1，余数左移减去除数；异号商0，余数左移加上除数 执行4操作n次，最后一步恒置1，“末位恒置1”","s":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":32},{"i":71,"t":"表示为：N=(−1)S∗M∗REN =(-1)^S * M*R^EN=(−1)S∗M∗RE S的取值决定正负；M表示尾数，R是基数（2,4,8...），E是阶码，表示2E2^E2E","s":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":32},{"i":73,"t":"正数：0.1xxxxx 负数：1.1xxxxx 对于基数为2的，要求小数点后一位不全为0，也就是要为1 对于基数为4的，要求小数点后两位不全为0 策略： 左规：尾数左移，则阶码要-1 右规：尾数右移，阶码+1","s":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":32},{"i":75,"t":"小概念​ 符号位：1；阶码：8；尾数：23 其中尾数前面隐含了一个1.，所以尾数的精度是24，能表示24位有效数字 符号S（31） 阶码E（23~30） 尾数M（0~22） 1+8+23组合。IEEE754标准表示成浮点数真值为：(−1)S∗1.M∗2E−127(-1)^S *1.M*2^{E-127}(−1)S∗1.M∗2E−127 其中注意阶码E是移码表示的。 阶码的全0和全1： 阶码 符号 尾数 值 全0 0 0 0 全0 1 0 -0 全1 0 0 正无穷 全1 1 0 负无穷 浮点数的加减运算​ 给定两个数，先转化成二进制表示形式。 对阶，两阶码相减，小的向大的对齐，阶码对齐过程中尾数也会进行移动 尾数加减（符号参与运算，一般都是两位符号） 将尾数规格化：正数0.1xxx，负数1.1xxx，规格化过程左移或者右移要进行阶码的改动 舍入：0舍1入、末位恒置1、截断 溢出判断 溢出的两种情况： 右规和尾数舍入，尾数大的舍入时候，末位加1，可能导致尾数溢出，此时会进行右规调整，但同时会影响到阶码，导致阶码溢出。 左规，进行左规时，阶码减1，可能导致下溢 结合一个例题：","s":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":32},{"i":80,"t":"折半查找思想，将给定值key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high的时候会结束查找，最终显示查找失败。折半不适用于链式存储 直接看算法： int Binary_Search(int a[],int key){ int len = len(a); int low = 0;high = len - 1; while(low<=high){ mid = (low + high)/2; if(mid == key)reutrn mid; if(mid < key){ high = mid - 1; } else{ low = mid + 1; } } return }","s":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":76},{"i":83,"t":"1）成功： 层数乘以结点数求和再除以长度 成功ASL为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4​ 2）失败： 将图中的二叉树补上结点，原来的每个叶子结点都补成度为2的结点 这些失败结点是虚拟的，实际是不存在的，所以计算的时候，层数是按它的父节点来计算 所以图中的失败ASL为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12是失败结点。","s":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":76},{"i":85,"t":"分块查找综合了顺序查找和折半查找的优点，将数据分组，组内可以无序，但是组间必定有序，然后分别记录各组内的最值key。查找的时候先找最值Key，再按分组指针去顺序查找。 下图举例：","s":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":76},{"i":87,"t":"1）成功 先找到分块的key节点，计数一次，然后去块间顺序查找，依次+1 2）失败 整体失败的情况无法预估，题目更可能考察某一个点的查找失败，与成功类似，块间顺序查找完全部元素，即为查找失败，其实就是块长+1","s":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":76},{"i":90,"t":"一种特殊的数据结构，能够根据元素关键字计算出他在散列表中的存储地址","s":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":76},{"i":92,"t":"散列哈希函数：Addr=H(key)Addr = H(key)Addr=H(key)建立起关键字和散列地址的映射关系，408一般考察除留余数法。 散列表表长是m，取不大于m的最大质数p，构建函数H(key)=key%pH(key) = key \\% pH(key)=key%p，则产生的地址落在区间[0,p−1][0,p-1][0,p−1] 处理冲突：冲突是指经过散列函数映射的地址上已经有关键字，则需要采取一定处理办法解决冲突。如下解决冲突办法： 开放地址法​ 1、线性探测： 一个一个向下探测，按di=0,1,2...d_i = 0,1,2...di​=0,1,2...进行探测 2、平方探测（二次探测法）： 按照di=02,12,−12,22,−22.........k2,−k2d_i = 0^2,1^2,-1^2,2^2,-2^2.........k^2,-k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k \\le m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3的素数 3、双散列 两个散列函数：Hi=(H(key)+i∗Hash2(key))%mH_i = (H(key)+i*Hash_2(key)) \\% mHi​=(H(key)+i∗Hash2​(key))%m 4、伪随机序列法 当did_idi​为伪随机数序列时候 拉链法​ 一张图理解","s":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":76},{"i":94,"t":"查找成功是针对关键字的，计算出查找每个关键字查找成功的次数，除以关键字个数即可 查找失败是针对散列函数的，由散列函数的质数p可知:散列地址在[0,p−1][0,p-1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p即可","s":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":76},{"i":96,"t":"Foundation 数据结构 2.1-算法 KMP定位子串","s":"KMP定位子串","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"","p":95},{"i":98,"t":"一种很基础朴素的方法就是暴力匹配，采用定长顺序存储结构，不依赖于串的操作进行暴力匹配。 算法思想 ：采用暴力匹配的方法，对主串和模式串设置i和j两个指针，从左到右一个一个进行匹配，当出现不匹配时，主串指针回溯，模式串从新开始进行匹配。 初始处理： 进行匹配： 指针回溯： 指针回溯： 代码如下 int Index(String S,String T){ int i = 1,j = 1; while(i <= S.len && j <= T.len){ if(S.ch[i] == T.ch[i]){ // 匹配则指针向前移动 ++i; ++j; } else{ i = i - j + 2; //指针回溯 j = 1; } } if(j > T.len)return i - T.len; //匹配成功返回第一个定位 return 0;} 时间复杂度分析：分析最坏时间复杂度，如果主串前部分一直和模式串不能匹配，则指针会一直进行回溯，直到进行到最后的串，成功匹配，此时的时间复杂度取决于主串S和模式串T的长度n和m。时间复杂度为O(nm)O(nm)O(nm)","s":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":95},{"i":100,"t":"很显然如果采用暴力算法，当主串和模式串不长的情况下，时间复杂度还算可行，但是一旦长度很长，时间开销将会很大。于是三位大牛：D.E.Knuth、J.H.Morris和V.R.Prat一起发明了KMP算法，致力于解决这个主串指针回溯的问题来降低时间开销。KMP算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。KMP算法详解-彻底清楚了(转载+部分原创) - sofu6 - 博客园 (cnblogs.com)","s":"2.KMP","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#2kmp","p":95},{"i":102,"t":"算法思想：算法思想是按照我个人理解，KMP的核心就是基于朴素匹配算法，解决其主串指针回溯，从而降低时间开销。 过程描述对于S和T的匹配，当有相同部分，则指针将会向前移动，当出现不匹配时，是否有必要进行回溯呢？答案当然是否，因为对于主串来说，对于匹配的部分是已知信息，能否根据已知信息来判断模式串指针的下一步移动呢，从而达到降低时间复杂度的效果。由此，主串指针是不需要移动的，只需要根据已知信息来判断模式串的指针移动即可。 通过如下图片来感受下KMP的简化： 从上图发现当移动到C和D时，不匹配，肉眼观察，可以直接将j移动成如下的情况： 为什么呢？因为肉眼观察，前面的ABA是匹配的鸭！ 从上述的过程分析，我们可以发现当匹配失败时，j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k个字符是一样的。使用数学公式进行如下描述： ch[0...k−1]=ch[j−k...j−1]ch[0...k-1] = ch[j-k...j-1]ch[0...k−1]=ch[j−k...j−1] 使用如下图片进行理解： 通过上述的分析，我们可以发现，进行匹配的过程中，对于主串的指针，是一往无前，无需回溯的，算法的核心在对于模式串的指针移动，当移动到不匹配的位置时候，需要进行计算，确定指针j的下一步走向。","s":"2.1 算法思想","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#21-算法思想","p":95},{"i":104,"t":"接下来就是重点，我们现在知道了对于算法的核心就是当出现不匹配时候，我们的指针j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next数组的方法。 1.王道老师的方法​ 根据课程的所给方法，我总结一下，该方法的相对直观，在手算中十分方便，目测观察，当主串和模式串出现不匹配时候，观察对于模式串指针，如何移动能使得在下一步匹配前，有较多模式串和主串已经匹配。如下图例，首先要初始化next数组，next数组的1和2无脑填0和1，不要问为什么，很明显，自己推一下即可： 当出现不匹配时候，在不匹配的前段，划一条竖线，观察模式串的指针j移动。 向前移动至2，o不匹配。 再向前移动到1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0的会执行++，所以没有意义) 所以在next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1处。 后面的步骤都是依次类推，该方法适合手算next。 2.重复前后缀计算法​ 当我们匹配模式串和主串到一个不匹配的位置时候，我们要进行指针j的跳转。但是由于前面匹配的信息，我们可以发现 ch[0∼k−1]=ch[j−k∼j−1]ch[0 \\sim k-1] = ch[j-k \\sim j-1]ch[0∼k−1]=ch[j−k∼j−1] 通过下图可以理解更透彻： 根据上图，当匹配到指针j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的AB相等呀，而主串中指针扫过的位置，必有AB匹配，那么我们可以直接跳过前部的AB匹配。我们可以得出公式 当出现S[i]≠T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]\\begin{aligned} &当出现S[i] \\neq T[i] \\\\ &S[i-j \\sim i-1] = T[0 \\sim j-1] \\\\ &其中T[0 \\sim k-1] = T[j-k \\sim j-1] \\\\ &所以S[i-k \\sim i-1] = T[0 \\sim k-1] \\end{aligned}​当出现S[i]=T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]​ 上述公式就是我们求解next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba}。 接下来我们来模拟感受一下这个求解过程。首先next的1和2还是直接填0和1，没有为什么。 我们来看下图 当模式串指针走到j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j-1个字符串有关。我们看前部分字符串，发现共同前后缀是AB，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是C这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是ABC？长度为2，那么next[j+1]就是在next[j]的基础上加1即可，这个是可以递推出来的。我们发现如下规律 当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]\\begin{aligned} &当有T[k] =T[j] \\\\ &可以很快得出next[j]=next[j-1]+1 \\\\ &因为我们可以得出T[0 \\sim k-1] = T[j-k \\sim j-1] (next[j] = k) \\\\ &这时候因为T[k] =T[j] 那我们可以得出T[0 \\sim k-1] + T[k] = T[j-k \\sim j-1] +T[j]\\\\ &也就是T[0 \\sim k] = T[j-k \\sim j] \\end{aligned}​当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]​ 上述讨论的是当T[j] = T[k]的情况，那如果出现不相等的情况，如何处理呢？如下图 对于这种情况，我们执行k=next[k]k=next[k]k=next[k]。为什么呢？我们再来看下图： 当到了T[k]≠T[j]T[k]\\neq T[j]T[k]=T[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是B的位置，此时执行判定T[k]=T[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k = next[k] = 1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0。 阅读文字难以理解，可以参考一个up主的讲解视频KMP算法之求next数组代码讲解_哔哩哔哩_bilibili。","s":"2.2 next数组","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#22-next数组","p":95},{"i":106,"t":"阅读到这里，next数组的求解就算结束了。我们来看下next数组的求解代码： void get_next(String T,int next []){ int j = 1,k = 0; next[1] = 0; while(k<T.len){ if(k==0 ||T.ch[j] == T.ch[k]){ //如果相等 next[++j] = ++k; //next[j+1] = next[j] + 1 } else{ k = next[k]; //回头寻找 } }} KMP算法： int Index_KMP(String S,String T,int next[]){ int i = 1;j = 1; while(i<S.len && j<T.len){ if(j==0||S.ch[i] == T.ch[j]){ ++i; ++j; } else{ j = next[j]; } if(j>T.len) return i - T.len; return 0; }}","s":"2.3 求解代码","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#23-求解代码","p":95},{"i":108,"t":"仔细观察前述的图解跟代码，会发现，尽管主串指针不会回溯，但是模式串中的指针跳转重新匹配的过程中，会出现重复匹配失败的问题，从而浪费时间。例如下图： 我们观察可以发现，匹配C和B时候会发现不匹配，此时的next会跳转到2，从AB再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟AB中的B进行匹配成功的，此时产生了一次无效匹配，然后next到1。 针对next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果T[next[j]]等于T[k]，那么直接跳过这一层匹配，改为T[next[next[j]]即可。也就是跳过了中间无效的T[next[j]]和T[k]的比较。 代码实现 void get_nextval(String T,int nextval[]){ int j = 1,k = 0; nextval[1] = 0; while(j < T.len){ if(j == 0 || T.ch[j] == T.ch[k]){ ++j; ++k; if(T.ch[j] != T.ch[k]) nextval[j] = k; //不相等，则保留原有的最长重复前后缀 else nextval[j] = nextval[k]; //相等那就跳转，减少时间开销 } else k = nextval[k] }}","s":"2.4 next数组优化","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#24-next数组优化","p":95},{"i":113,"t":"数据就是信息的载体，描述客观事物的数字、字符和所有能输入到计算程序识别和处理符号的集合。 数据元素是数据的基本单位，通常当做一个整体来考虑的。例如一个简单的排队单子： 号码 取号时间 前面排队人数 上述就是数据元素，数据元素内的就是数据项 数据对象是具有相同性质的数据元素的集合，数据对象是数据的一个子集。","s":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":109},{"i":115,"t":"分为逻辑结构、物理结构、数据的运算 逻辑结构 逻辑结构可以理解为数据之间的逻辑关系，类似于函数之间的关系，一对一或者多对多之类 物理结构 物理结构就是存储结构，就是数据存储的方式，分为： 顺序存储：物理上是连续的 链式存储：不一定连续，采用指针连接 索引存储：有一个索引表，表中每项成为索引项，一般是关键字或者地址，能够快速查找 散列存储：哈希算法，散列存储 数据运算 关注的是数据之间的操作","s":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":109},{"i":119,"t":"基础的认知就是，算法是解决一个问题的方式方法，例如解决二元方程组的通用公式，这个方法就是一个算法。在计算机中，算法指的是高效处理数据，解决实际问题。 公式：程序 = 数据结构 + 算法 算法是对特定问题求解的一种描述。 例如：写一个求解最年轻富豪的程序 由公式得：设计数据结构个人信息数据元素： 个人信息 年龄 身家 设计算法： step1：对根据年龄排序 step2：输出对应的数据元素项 评价算法的两个标度：时间复杂度和空间复杂度","s":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":109},{"i":121,"t":"1.概念​ 事前预估算法的时间开销（T）与问题规模（N）的关系，T就是时间。说白了就是分析代码，算一下N情况下要花多少时间。 2.方法​ 分析代码中的执行情况，一般重点就是在循环次数、循环条件、循环内部的操作。当N足够大的时候去分析执行时间。采用大O表示法。两个结论： 可以只考虑阶数高的部分 常数项可以忽略 3.两个运算规则：​ 多项相加，取最大的 多项相乘，取乘积结果 4.常用比较：​ O(1)<O(log2n)<)(n)<O(nlong2n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)O(1)<O(log_2 n)<)(n)<O(nlong_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)O(1)<O(log2​n)<)(n)<O(nlong2​n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) 简单结论：常对幂指阶","s":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":109},{"i":126,"t":"s 就是常见的二叉树，除了叶节点外，每个结点都是有两个分支的，这种二叉树也是最好计算的。 1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{aligned} & 1.已知树高求结点总数：sum = 2^h-1\\\\ & 2.已知编号i求双亲：(i/2)向下取整\\\\ & 3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\\\ \\end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1​","s":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":122},{"i":128,"t":"这种二叉树是少了一些结点的满二叉树，每个几点的编号都都跟1~n一一对应，也就是说，只允许在右屁股部分缺少一些叶子节点，注意，少也是少叶子节点。 上述就是一个完全二叉树的例子，需要注意，因为是1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3号结点。","s":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":122},{"i":130,"t":"以根节点为比较标准，左边的全部结点均小于根节点，右边的全部结点均大于根节点，左右子树又各自为二叉排序树。 可以从性质发现，要找最小的结点，只需去找左子树的最左叶结点即可。同理最大结点在右子树的最右叶结点。","s":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":122},{"i":132,"t":"树中任意一个结点的左子树和右子树的深度之差不超过1","s":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":122},{"i":134,"t":"1）顺序存储 typedef struct Node{ int data; int isEmpty;}TreeNode; void Init(TreeNode T[],int len){ for(int i = 0;i<len;i++){ t[i].isEmpty = 1; } } bool isEmpty(T[],int x){ if(x>=len || x<1){return ture}; else{ return fasle; }}//找到父节点int findparent(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ index = x/2; if(isEmpty(index))return 0; esle return index; }}//找右孩子int findright(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ right = 2x + 1; if(isEmpty(right))return 0; esle return right; }}//找左孩子int findleft(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ left = 2x; if(isEmpty(left))return 0; esle return left; }}//这里的代码都是按照其实结点从1开始的，如果是0开始的还要进行改变 void PreSearch(T[],int index){ if(isEmpty(index))return ; esle{ visit(T[index]); PreSearch(T[],2*index); PreSearch(T[],2*index + 1); }}//后序跟中序只需要调换顺序即可","s":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":122},{"i":136,"t":"1、非空二叉树的叶结点等于度为2的结点数加1，即n0= n2 + 1 2、二叉树第k层上最多有2k-1 个结点 3、高度为k的二叉树最多有2k -1个结点 4、对于结点i(i>1)的编码： 1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为i/2向下取整 \\\\ & 2.若i为奇数则双亲为(i-1)/2 \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 5、求树高 log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1","s":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":122},{"i":139,"t":"“左指针串糖葫芦法” 每个结点左指针指向他的第一个孩子，右指针指向它在树中的相邻右兄弟，左孩子右兄弟规则，构造后的整体看起来就是根节点出发将孩子串了起来，由于这个规则，这是一颗没有右子树的二叉树。","s":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":122},{"i":141,"t":"”孩子兄弟表示“ 将森林里面的树都变成二叉树，每个根节点都是兄弟，将第一个根节点作为二叉树的根节点，剩下的二叉树都依次接到右子树中。 森林转二叉树 摘下第一个右子树，根节点跟左子树就是第一颗树的二叉树，其剩下的右子树又可以依次进行拆解，直到没有右子树为止。","s":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":122},{"i":143,"t":"树 森林 二叉树 先根 先序 先序 后根 中序 中序","s":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":122},{"i":145,"t":"如下是三种实现的数据结构：双亲表示法、孩子表示法、孩子兄弟表示法 1）双亲表示法（顺序存储） 每个结点都设计一个伪指针指向自己的父亲 typedef struct Node{ int data; int parent;}Node*;Node n[maxsize]；for(int i = 0;i < maxsize;i++) n[i].parent = -1; 2)孩子表示法 如上图所示，每个结点后都会串着一串孩子链表 typdef struct Node{ int data; struct Node * next}Child; //对应的是左边的结构，也是一个头的开始typedef struct Tree{ ElmentType data; Child *firstChild;}*TreeList;//树节点 3）孩子兄弟表示法 typedef struct Node{ int data; struct Node* leftchild,nextsibling; //分别指向左边第一个孩子，和右边的兄弟}*Tree;","s":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":122},{"i":148,"t":"给出完全二叉树的总结点数，求解叶结点数。对于这种问题可以如下求解： 估计倒数第二层，根据估算求出最后一层有多少个叶结点，反过来求解用了上一层多少个结点，再计算上一层剩下的叶结点数，加上最后一层的结点数即可，数目大设x求解 给完全二叉树的叶结点个数，求解结点数最多的情况，求解： tip 对于这种问题求解，就要考虑完全二叉树的性质，其缺少，只能是缺少右边屁股的叶结点。估计出合适的层次范围(倒数第二层)，然后裂解到最后一层，根据叶结点个数进行分布，计算。注意看看能不能多分裂出来一些，但是叶子结点数仍然不变的情况，这里不要直接死算第一步就结束了，要记得画图观察观察。","s":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":122},{"i":150,"t":"给定结点数求树高最大最小的问题： danger 满二叉树的情况下树就是最矮的，反之每一层都有一个度为1的结点时，树最高","s":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":122},{"i":152,"t":"1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m，求解 danger 首先要搞清楚谁的右节点(右指针域为空)，对于树来说，转换后的二叉树根节点的右指针域肯定是空的，然后是根节点下来每一个分支都会到最右边的指针域为空。所以右节点的右指针域为空的总数为：非终端结点数+1，二叉树的非终端结点数为：n-m，所以总数为n-m+1 2.对于森林的也是如此，森林先转二叉树然后合并，过程是一样的，求解方法一样。","s":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":122},{"i":156,"t":"满足如下条件的就是简单图： 不存在重复边 不存在顶点到自己的表(自环) 多重图： 若图中某两个顶点的边数大于1 允许顶点通过一条边和自身关联 数据结构里面只讨论简单图 子图： G=(V,E)和G′=(V′,E′)G = (V,E)和G^{'}=(V^{'},E^{'})G=(V,E)和G′=(V′,E′) 其中V′是V的子集E′是E的子集V^{'}是V的子集E^{'}是E的子集V′是V的子集E′是E的子集 如果顶点集相同，则是生成子图","s":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":153},{"i":158,"t":"一个路径序列中不存在重复节点的是简单路径 除第一个顶点和最后一个顶点外，其余节点不重复出现的是简单回路","s":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":153},{"i":160,"t":"这些术语跟有向图区分开来 连通 连通图 连通分量 完全图 度 两个顶点可达 图任意两点连通 极大连通子图就是连通分量，要求包含所有边 边数为：n(n-1)/2 度数之和等于边的两倍：Sumn = 2e","s":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":153},{"i":162,"t":"强连通图 强连通分量 完全图 度 v到w和w到v都有路径 极大强连通子图就是强连通分量 边数为：n(n-1) 出度=入度=e","s":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":153},{"i":165,"t":"邻接矩阵是采用二维数组的存储方式来存储图，为v行v列的矩阵，其中若vi到vj有路径，则A[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则A[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则A[i][j]为1，或者是对应的路径权值。 当(vi,vj)是G的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{aligned} &当(v_i,v_j)是G的边，则a[i][j] = 1 \\\\ &否则a[i][j] = 0或无穷 \\\\ \\end{aligned}​当(vi​,vj​)是G的边，则a[i][j]=1否则a[i][j]=0或无穷​ 值可以是权值，有向图和无向图有着一定的区别（无向图对称，可以压缩的），能理解其表达的意思就OK。 随便写个矩阵： [0110000000011000]\\begin{bmatrix} 0 & 1 & 1& 0 \\\\ 0 & 0 & 0 &0 \\\\ 0 & 0 & 0 &1 \\\\ 1 & 0 & 0 &0 \\\\ \\end{bmatrix}⎣⎡​0001​1000​1000​0010​⎦⎤​ 其中当图是无向图的时候，矩阵是对称的。有向图则不一定，有向图中，行代表顶点的出，列代表顶点的入，比如上述矩阵，顶点v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1​的一条边。 typedef struct{ char vex[N]; int weight[N][N]; //N*N邻接矩阵，每条边的权值用int变量表示 int vexnum,arcnum; //图的当前顶点数和弧数}MGraph; 空间复杂度：显而易见空间复杂度跟顶点个数有关，为O(n2)O(n^2)O(n2) 对于AnA^nAn的元素An[i][j]A^n[i][j]An[i][j]表示的是由顶点i到j长度为n的路径有多少条。该结论了解即可 邻接矩阵适用于存储相对稠密的图。","s":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":153},{"i":167,"t":"看下图理解： 设计顶点表结点和边表结点来存储。顶点表节点由顶点域和指向第一条邻接边的指针构成，包含(顶点域data，边表头指针first)。边表结点中包含指向下一跳邻接边的指针。 typedef struct ArcNode{ //边表 int vexIndex; int weight; struct ArcNode *next; //指向下一个边表结点}ArcNode; typedef struct VNode{ //顶点表 char data; ArcNode *first; //指向第一条依附该顶点的弧的指针}VNode;typedef struct{ VNode vex[N]; int vexnum,arcnum; //图的顶点数和边数} ALGraph; //ALGraph是以邻接表存储的图类型 空间复杂度：空间复杂度跟顶点个数和边数有关，若为有向图则O(∣V∣+∣E∣)O(|V|+|E|)O(∣V∣+∣E∣)若为无向图则O(∣V∣+2∣E∣)O(|V|+2|E|)O(∣V∣+2∣E∣)。","s":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":153},{"i":170,"t":"1）树的广搜 广度优先搜索遍历是在各种算法中广泛应用的一种优先遍历算法。就是往宽了去搜索，再搜索下一层。 若树非空，根节点入队 若队列非空，队头元素出队并且访问，同时将其孩子入队 重复2直到队列为空为止 树的BFS借助了队列的帮助，与此同时因为树中不存在回路，搜索到相邻节点的时候不可能搜索到已经访问到的节点。 2）图的广搜 在图中，广度优先搜索会面临一个问题就是图若存在回路，会重复访问到已经访问过的结点，从而带来不必要的时间开销，此处需要设计一个辅助数组来标记是否被访问过，其余的思想与树的层次遍历思想大致相同，从一个节点开始，访问其邻接点，依次进行。具体思想如下： 从起始节点开始找到与顶点相邻的所有顶点(过程会有入队和出队操作) 辅助数组标记 循环递归 需要借助辅助队列 bool visited[MAX_SIZE];void BFSTraverse(Graph G){ for(i = 0;i<G.vexnuml;i++) visited[i] = fasle; InitQueue(Q); for(i = 0;i<G.vexnum;i++){ if(!visited[i]) BFS(G,i); }}void BFS(Graph G){ visit(v); visited[v] =true; EnQueue(Q,v); while(!isEmpty(Q)){ DeQueue(Q,v); for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)){ if(!visited[w]){ visit(w); visited[w] = true; EnQueue(Q,v); } } }} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：空间开销来源于辅助队列，故空间开销为O(∣V∣)O(|V|)O(∣V∣)。","s":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":153},{"i":172,"t":"图的DFS就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟BFS一样同样需要一个标记数组来标记节点是否被访问过。如下是伪代码： bool visited[MAX_SIZE];void DESTralverse(Graph G){ for(v = 0;v<G.vexnum;++v) visited[v] = false; for(v = 0;v<G.vexnum;++v) if(!visited[w]) DFS(G,v);}void DFS(Graph G,int v){ visit(v); visited[v] = true; for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)) if(!visited[w]) DFS(G,v);} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：DFS算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为O(1)O(1)O(1)，平均的为O(∣V∣)O(|V|)O(∣V∣)。","s":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":153},{"i":174,"t":"包含所有顶点的极小连通子图子图，其中结点数为n，边数为n-1，少一条边非连通，多一条边有回路。其具有性质： 不一定唯一 不唯一但是权值之和唯一(存在权值相同的边时会存在不唯一) ∣E∣=∣V∣−1|E| = |V| -1∣E∣=∣V∣−1 最小生成树的两种算法：“普利姆(Prim)和克鲁斯卡尔(Kruskal)”","s":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":153},{"i":176,"t":"这个算法是选点的算法，一开始选择一个顶点加入集合SSS，此时树中只有一个顶点，然后从剩余顶点集合TTT中选取相距树中顶点集合最近的点，并且将该边加入集合SSS中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n-1n−1次后得到最小生成树。","s":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":153},{"i":178,"t":"Prim是选点，而Kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n-1n−1次即可。","s":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":153},{"i":180,"t":"耳熟能详的算法了，大致了解算法思路，用个人理解简述： 两个集合SSS和VVV分别用来记录已选结点和剩余结点 选定初始结点v0v_0v0​加入SSS，计算出v0v_0v0​到各可达结点的距离 选出距离最短的结点vsv_svs​加入SSS 因为加入了vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来A到D距离是10，但是加入了B后，通过A->B->D的距离是5，距离更短，所以要更新) 跳转到3，执行n−1n-1n−1次即可计算出到每个节点的最短距离(可能存在不可达) 本质是贪心，时间复杂度两种数据结构都是O(∣V∣2)O(|V|^2)O(∣V∣2) 看个例子就明白了： 顶点（这一列不包含起点） 第 1 轮 第 2 轮 第 3 轮 第 4 轮 第 5 轮 第 6 轮 第 7 轮 0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ 2 4 1→2 已完成 已完成 已完成 已完成 已完成 已完成 3 ∞ ∞ 7 1→5→3 7 1→5→3 已完成 已完成 已完成 4 ∞ 13 1→2→4 13 1→2→4 13 1→2→4 13 1→2→4 已完成 已完成 5 5 1→5 5 1→5 已完成 已完成 已完成 已完成 已完成 6 5 1→6 5 1→6 5 1→6 已完成 已完成 已完成 已完成 7 ∞ ∞ ∞ ∞ ∞ 14 1→2→4→7 已完成 集合S {1, 2} {1,2,5} {1,2,5,6} {1,2,5,6,3} {1,2,5,6,3,4} {1,2,5,6,3,4,7} {1,2,5,6,3,4,7,0}","s":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":153},{"i":183,"t":"顶点VVV表示事件，<Vi,Vj><V_i,V_j><Vi​,Vj​>的这样一条边表示活动VjV_jVj​必须要ViV_iVi​在它之前执行。这两个节点互为前驱后继。","s":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":153},{"i":185,"t":"一个有向无环图的顶点序列满足以下条件： 每个顶点只出现一次 如果A在B前面，则图中不存在B到A的路径 实现步骤： AOV网中选择一个没有前驱的节点(入度为0) 删除该节点和所有以他为起点的有向边 重复1和2，知道网为空或者网中不存在无前驱的顶点位置（此时必有环） 性质： 一个顶点有多个直接后继的话，则可能导致拓扑序列不是唯一的，如果图内的唯一前驱和后继的话，序列唯一 可以对AOV网进行拓扑排序后重新编号，使得新的图用邻接矩阵存储，此时是三角阵，是可以压缩成上（下）三角的(原理？暂不懂)。由此得到一个充分性结论：邻接矩阵是三角阵则存在拓扑排序。 这里用个例子来看一下： 将这个有向无环图进行压缩存储。 有向无环图，一定可以转化为一个上三角或下三角矩阵。但是需要调整顶点的编号。 如果要用上三角矩阵表示有向无环图的邻接矩阵，可以对图进行拓扑排序，按照拓扑排序序列，重新调整各个顶点的编号。这样可以确保，所有的弧都是从小编号顶点指向大编号顶点，从而也就保证了邻接矩阵可以转化为“上三角矩阵”","s":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":153},{"i":187,"t":"恶心，算四个表，小心计算 1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k) ve(0)ve(0)ve(0)为0 ve(k)=Max[ve(j)+weight(vj,vk)]ve(k) = Max[ve(j) + weight(v_j,v_k)]ve(k)=Max[ve(j)+weight(vj​,vk​)]其中k是j的后继 从头开始顺着算，计算一个事件的最早发生时间就是，找到它的所有前驱，计算其前驱的最早发生时间加上其代价(边权)，存在多个前驱取最大的。 2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k) 终点等于ve(0)ve(0)ve(0) vl(k)=Min[vl(j)−weight(vk,vj)]vl(k) = Min[vl(j) - weight(v_k,v_j)]vl(k)=Min[vl(j)−weight(vk​,vj​)] 从最后开始逆过来算，计算一个事件的最迟发生时间，找到它的所有后继，计算该后继减去代价到该活动点的值，可能有多个后继，取差值最小的。 3）活动aia_iai​的最早开始事件e(i)e(i)e(i) 等于该活动起始点(某事件)的最早发生时间 找边，找起始点，找ve(i)ve(i)ve(i) 4）活动aia_iai​的最迟开始事件l(i)l(i)l(i) <vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i)-weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj​) 找到边，对应的终点，查该事件点的vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i)","s":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":153},{"i":191,"t":"插入排序就是每次都从后面未排序的序列中按照大小插入到前面已经排好的子序列中，这里会产生子序列（已经排好序的）和待排序列，当没有待排序则算法结束，每次从未排序的头部取出一个插入到子序列中合适的位置。包含有：直接插入、折半插入、希尔排序。","s":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":188},{"i":193,"t":"L[1.......i-1] L[i] L[i+1......n] 如上模拟插入排序状态，此时待排序指针指向i，前面i-1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i-1中找到适合L[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i。每次都从未排好序的中取出第一个进行插入，此处需要和后面的选择排序进行区分，当执行所以待插入的都执行完毕则算是排好啦。 s 初始第一个值默认自成一个已经排好序的子序列 采用哨兵复制L[i]，然后将子序列中大于L[i]的值进行后移，因为已经找到位置，要插入就得有空位嘛 给L[i]找到合适的插入位置 将腾出的空位放入L[i] 继续循环 弄清楚算法思想，代码是比较容易实现的，算法核心在于，从初始子序列为1的数组中，指针依次后移，为当前指向的值，从子序列中找到一个合适的位置，然后插入即可，此处可能会有疑问，插入到前面，那当前的位置呢？因为会要进行移动，所以此处的位置必然也是一个已经排好序的值。 1）代码 void InsertSort(int a[],int len){ int i,j; for(i = 2;i <= len;i++){ if(a[i]<a[i-1]){ a[0] = a[i]; for(j = i - 1;a[0] < a[j];--j){ a[j+1] = a[j]; } a[j+1] = a[0]; } }} 2）时空复杂度分析 空间上只使用了a[0]当哨兵作为辅助，故空间复杂度上为O(1)O(1)O(1) 最优时间复杂度，如果已经有序，一趟循环即可，时间复杂度为O(n)O(n)O(n) 最坏时间复杂度，初始全部乱序，两个for循环，时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性分析 s 这里第一次提及稳定性，所谓稳定性是指，数组中有a[i] == a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j]前面，假若这里反过来，就是不稳定的。如果值相同的元素在排序后相对位置没有发生改变则认为是稳定的。 据此分析，直接插入排序每次都是从未排序的数组中取出第一个进行插入，循环条件为小于号，故不会出现同值元素出现相对位置改变的情况，由此是稳定的。同时适用于顺序和链式两种结构。","s":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":188},{"i":195,"t":"折半插入是对直接插入的一个改进。在直接插入中可以发现，每次都会从子序列开头去查找一个合适插入的位置，这会带来一定的时间消耗，折半插入的改进就在于查找使用了折半查找，二分查找找到合适的位置，然后一次性进行移动。 如下图就是算法模拟步骤。默认第一个元素自成一个子序列，此时待排序指针指向5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8右移一个单位，如下所示，最后将哨兵存储的复制值放到合适的位置即可。 s 折半查找子序列找到合适的位置 右移元素 将哨兵元素插入 1）代码 void InsertSortPlus(int a[],int len){ int i,j,low,high,mid; for(i = 2;i <= len;i++){ a[0] = a[i]; low = 1;high = i - 1; while(low<=high){ mid = (low + high) / 2; if(a[mid] > a[0]) low = mid + 1; else high = mid - 1; } for(j = i - 1;j >= high + 1;j--){ a[j + 1] = a[j]; } a[high + 1] = a[0]; }} 2）时空复杂度 与直接插入排序是一样的。 空间复杂度上O(1)O(1)O(1) 时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性 这是稳定的排序算法，不会改变同大小元素的相对位置，该算法依赖初始状态，在初始相对有序且数据量不大的情况下，表现不错。","s":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":188},{"i":197,"t":"缩小增量排序，具体思想是按照一个增量将排序表分割成若干小组，小组内部进行直接插入排序。一趟完毕后增量减小，继续分组，然后进行内部的直接插入排序。知道增量为1，最后是一次完整的直接插入排序。这样的好处是，让值更大的更快跑到后面，值更小的更快到前面，在数据量大的时候，较为优秀。 info 确定初始增量，这里随便写n/2，然后对排序表按照增量分组 各组内进行一趟插入排序 增量缩小，n/2 重复步骤2，知道增量变成1 1）代码 void ShellSort(int a[],int len){ int gap,i,j; //分别定义增量和两个循环变量 for(gap = len/2;gap>=1;gap = gap/2){ //增量减小 for(i = gap+1;i<=n;i++){ //gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的pic辅助理解) if(a[i] < a[i-gap]){ //组内前一个元素大 a[0] = a[i]; //哨兵 for(j = i-gap;j>0 && a[0]<a[j];j -= gap) a[j+gap] = a[j]; a[j+gap] = a[0]; } } }} 这里随便拿两个图来看下希尔排序中i指针，在前移的过程都会进行一次组内排序。不是我们手工算的一次就直接把组内给排好的。 这里看出来49-27-76-65是一组的，此时i=3，j=1，所以要进行插入排序。 完了之后指针i向前走到4，切换到另一个组 此时对另一个组进行排序。i++后指向5，对前一个组进行排序，只不过前一个表是27-49，这次变成了27-49-76，依次类推，当i为7的时候，组内元素齐整了。 2）时空复杂度、稳定性 空间只用了一个哨兵，为O(1)O(1)O(1) 时间复杂度在数学上未能解决，分析没有结果，只知道n在某个范围的时候，时间复杂度为O(n1.3)O(n^{1.3})O(n1.3)，最坏情况是O(n2)O(n^2)O(n2) 不稳定，且只适用于顺序表","s":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":188},{"i":199,"t":"根据序列中两个元素的比较结果来交换两者的位置，所以叫交换排序。两种算法：冒泡和排序，冒泡随便，快排重点，算法题爱考","s":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":188},{"i":201,"t":"直接看图理解： 每次都把最小（大）的冒上去 1）代码 void swap(int &a,int &b){ int temp = a; a = b; b = temp;}void BubbleSort(int a[],int len){ bool = flag = false; for(int i = 0;i<n-1;i++){ for(int j = n-1;j>i;j--){ if(a[j] < a[i]) //这里的小于是确保稳定性的 swap(a[j],a[i]);flag = true; } if(!flag)return ; }} 2）时空复杂度、稳定性 空间复杂度为O(1)O(1)O(1) 最好情况下，本来就有序O(n)O(n)O(n)，否则则进行n-1躺排序，第i躺排序要进行n-i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n-1}(n-i) = \\frac{n(n-1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为O(n2)O(n^2)O(n2)，其中每次都要移动元素三次，总移动次数为比较次数的三倍 稳定","s":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":188},{"i":203,"t":"1）分而治之 快排的基本思想是分治，一个待排序表L[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得L分为两块：L[1....k-1]和L[k+1...n]，其中L[k]为pivot，使得左边表的值都小于pivot，右边都大于。然后分别再对这两个表执行上面的操作。直到每个部分只有一个元素。 2）交换 知道了分治排序，那么如何高效的将表一分为二呢？使用两个指针low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j谁有坑，另一个就得去找元素填坑。按照下面的步骤执行交换 若此时指针low的位置有坑： high向前移动，直到遇到第一个比pivot小的元素 将high位置的元素拿走（挖坑），去填low 同时low++ 若此时指针j的位置有坑： low向后移动，直到遇到第一个比pivot大的元素 将low位置的元素拿走，填high 同时high-- 3）代码 理解了分治和交换，代码如下： 先看交换部分的： int Partition(int a[],int low,int high){ int pivot = a[low]; while(low < high){ while(low<high && a[high]>=pivot) --high; //后面找元素填前面 a[low] = a[high]; while(low<high && a[low]<=pivot) ++low; //前面找元素填后面 a[high] = a[low]; } a[low] = pivot; return low;} 快排： void QuickSort(int a[],int low,int high){ if(low < high){ int pivotpos = Partition(a,low,high);//找到第一次的枢轴值点 QuickSort(a,low,pivotpos - 1); //左排序 QuickSort(a,pivotpos + 1,high); //右排序 }} 3）时空复杂度、稳定性 算法是递归的，需要一个递归栈开销，容量和递归调用的最大深度一致。最好情况下位O(log2n)O(log_{2}n)O(log2​n)，最坏需要n−1次递归调用，所以栈为O(n)n-1次递归调用，所以栈为O(n)n−1次递归调用，所以栈为O(n)，平均是O(log2n)O(log_{2}n)O(log2​n) 最坏请跨国下的时间复杂度为O(n2)O(n^2)O(n2)，理想情况是O(nlong2n)O(nlong_{2}n)O(nlong2​n) 不稳定 所有内部排序中平均性能最优","s":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":188},{"i":205,"t":"每一趟选择从待排序的元素中选取最小（大）的作为有序序列的第i个元素。分选择排序和堆排序，堆排序是重点。","s":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":188},{"i":207,"t":"跟插入排序是挺类似的，都是从待排序的序列中拿一个元素放到前面去。但是要进行区分的是，插入排序是，i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i指向的位置元素进行交换。 此时38和27进行交换（因为27最小） 按照这样执行n-1次即可 当前指向a[i]，则从a[i.....n-1]中寻找最小的元素a[k] 交换a[k]和a[i] 待排指针i前移（i++），重复上述操作 1）代码 void SelectSort(int a[],int len){ for(int i = 0;i<n-1;i++){ int min = i; for(int j = i+1;j<n;j++){ if(a[j]<a[min]) min = j; } if(i!=min) swap(a[i],a[min]); }} 2）时空复杂度分析 没有借助辅助空间，空间复杂度为O(1)O(1)O(1) 每次进行三个元素的移动，一共n-1躺，一共移动3(n-1)次元素 元素的比较次数和初始状态没有关系一共进行n(n−1)2\\frac{n(n-1)}{2}2n(n−1)​，故时间复杂度为O(n2)O(n^2)O(n2) 不稳定","s":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":188},{"i":209,"t":"1）堆 将堆看成一棵完全二叉树，其中二叉树满足性质：任意一个非根节点都小（大）于其根节点。简单来说就是每个根，存放的是该根为根节点的树中最大（小）的值。其中根最大的叫大根堆，最小的叫小根堆。如下是一个大根堆： 2）如何造堆： 这里说的是大根堆的，小根堆跟大根堆差不多。 先将数据表表示成完全二叉树的格式 最树的最后一棵子树开始，从后往前调整 3）处理上升和下坠： 若当前处理的根节点的小于左右孩子中的最大值，那么最大值会替换根节点的值，同时让根节点下坠 根节点下坠的过程，从上往下进行继续进行上述的操作1，如果有比自己还大的孩子，就下坠，直到找到合适的位置 这里贴几个图： 初始处理倒数第一棵子树 处理可能要下坠的情况，这里处理到了最后一棵树，53＜87，所以要下坠 53下坠到原87的位置，发现这棵子树不符合，所以继续下坠。 53放到了合适的位置，大根堆构建结束。 4）造堆的代码 先来看一下树中儿子和父亲的关系函数： 1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为\\frac{i}{2}向下取整 \\\\ & 2.若i为奇数则双亲为\\frac{(i-1)}{2} \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 其中要注意的是数组a是从0开始存储还是1开始存储，对应的表达式会有改变。 要点： 若表长为len，那么第一棵子树的根节点下表为len/2，从这里开始调整 若根节点需要下坠，把最大值放到根节点位置 根节点下坠到缺空处，此时需要调整指针标记值，去判断下坠位置时候符合大根堆的条件 void BuildMaxHeap(int a[],int len){ for(int i = len/2;i>0;i++) //第一棵子树的根节点下表为len/2，从这里开始调整 HeadAdjust(a,i,len);}void HeadAdjust(int a[],int k,int len){ a[0] = a[k]; //复制一份当前处理节点数据，后面交换后会被覆盖 for(int i = k*2;i<len;i*=2){ //k*2直接指向其左孩子，每次循环开始都会向下走一层 if(i<len && a[i]<a[i+1]) i++; //i标记的是左右孩子哪个更大 if(a[0]>a[i])break; //根最大，满足，不处理 else{ a[k] = a[i]; //根小孩子大，孩子上去 k = i; //将根的指针指向这个孩子的，重新循环判断寻找初始根应该放的位置 } } a[k] = a[0] } 5）堆排序 已经造好了大根堆 输出堆顶元素（堆定元素和堆底元素在完全二叉树的逻辑上进行互换） 调整大根堆 循环1和2 void HeapSort(int a[],int len){ BuildMaxHeap(a,len); for(int i = len;i>n;i--){ swap(a[i],a[1]); HeadAdjust(a,1,i-1); }} 6）时空复杂度、稳定性 空间上借助常数个空间单元O(1)O(1)O(1) 建堆时间O(n)O(n)O(n)调整时间为O(h)O(h)O(h)，最好、最坏、平均情况下的时间复杂度都是O(nlog2n)O(nlog_{2}n)O(nlog2​n) 不稳定","s":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":188},{"i":212,"t":"将两个（或多个，取决于归并路数）有序表，合并成一个新的有序表，看个图理解： 以上是二路归并，初始每个元素独立为一个有序表，则取两两合并，如有剩下不成组则单独为一组，n路归并同理。直到归并成一个完整的有序表。 1）归并 如何合并两个有序表长度分别问n和m 需要一个辅助数组b存放两个表 两个指针p1和p2分别指向两个有序表的起始位置 比较b[p1]和b[p2]，较小者放入a中，同时指针后移 当出现某一个表已经复制完了，剩下的表直接将剩余元素按序复制到a中 图例： 这是初始状态。 复制元素，指针后移，继续比较。 当一个表复制完了，剩下的直接复制进去。 3）归并代码 int *b = (int *)malloc(sizeof(int)*(n+1)); // 辅助数组void Merge(int a[],int low,int mid,int high){ //mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high] int i,j,k; for(k = low;k<=high;k++) //复制元素 b[k] = a[k]; for(i = low,j = mid+1,k = i;i<=mid && j<=high;k++){ //i做前段指针，j做后段指针 if(b[i]<=b[j]) a[k] = b[i++]; else a[k] = b[j++]; } //两种情况复制剩下的 while(i<=mid) a[k++] = b[i++]; while(j<=high) a[k++] = b[j++];} 4）n路归并排序 这里以2路归并，基于分治思想，将n个元素分解成n/2个子表，两两归并。几路就按几个元素一组来划分。 void MergeSort(int a[],int low,int high){ if(low<high){ int mid = (low+high)/2; MergeSort(a,low,mid); MergeSort(a,mid+1,high); Merge(a,low,mid,high); }} 5）时空复杂度、稳定性 需要n个辅助单元，空间复杂度O(n)O(n)O(n) 每趟归并的复杂度为O(n)O(n)O(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为O(nlog2n)O(nlog_{2}n)O(nlog2​n) 稳定","s":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":188},{"i":214,"t":"基数排序不基于比较和移动进行排序，按照关键字各个位置的大小进行比较。如果按0~999的数来比较，个人理解为，分别按个十百或者百个十进行比较。有两种关键字排序法： 最高位优先：从高位开始排序 最低位优先：从低位开始排序 1）举个🌰： 有520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999中，个十百各排序一次，需要三次。 基于上述的顺序，进行个位的分配，如下第一趟： 接下来将各个队列的值串起来（收集），从前往后： 接下来，基于这个顺序进行百位的分配和收集： 最后进行百位的分配和收集： 2）具体过程 感觉通过上面的例子都会理解了，这里还是按过程随便写一下。 给定长度n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d-1},k_j^{d-2},k_j^{d-3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0​)组成 其中，0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0 \\le k_j^{i} \\le r-1 (0 \\le j \\le n,0 \\le i \\le d-1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r称为基数 有点难说，简单认为就是，一个关键字有多少位就是几元组，关键字中的任意一位的取值范围最大值就是基数r。上述的520就是三元组，基数。 基数排序得到递减序列的过程： 设置r个空队列Qr,Qr−1.......Q0Q_r,Q_{r-1}.......Q_0Qr​,Qr−1​.......Q0​ 按各个关键字位权重递增次序，就是个十百的顺序，对关键字分配和回收 分配：如果当前处理的关键字位是n就挂到队列n的队尾中，比如520的个位是0，就挂0队列 回收：从前到后将队列元素出队，串起来 3）时空复杂度、稳定性 空间需要r个队列，Q(r)Q(r)Q(r) 需要进行d躺排序，一次分配要Q(n)Q(n)Q(n)，一次收集要Q(r)Q(r)Q(r)，所以时间复杂度为O(d(n+1))O(d(n+1))O(d(n+1)) 稳定 4）应用 基本不考大题，了解手算，一般适用于那种有关键字的比较，年月日、身份证这种。","s":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":188},{"i":216,"t":"算法 时间复杂度 空间复杂度 稳定性 最好 最坏 平均 直接插入 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 折半插入 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 希尔 \\ \\ O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 冒泡 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 快排 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(log2n)O(log_{2}n)O(log2​n) 不稳 简单选择 O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 堆 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(1)O(1)O(1) 不稳 2路归并 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n)O(n)O(n) 稳 基数 O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(r)O(r)O(r) 稳","s":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":188},{"i":218,"t":"1）希尔 2）快排 3）简单选择 4）堆","s":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":188},{"i":220,"t":"顺序表结构 直接插入、折半插入、希尔、冒泡、快排、简单选择、堆、归并、基数 链表结构 直接插入、冒泡、简单选择、基数（可能降低效率）；（快排、希尔、归并、堆都可以用，但是不推荐）","s":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":188},{"i":223,"t":"tip 总会有那么几门基础学科是要学的对吧。 Welcome to Rachel NoteBook!","s":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":221},{"i":225,"t":"intro","s":"intro","u":"/docs/intro","h":"","p":224},{"i":227,"t":"tip 现在是过去和未来的交点 欢迎来到Rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天Rachel已经老去，但是在一个明媚温暖的午后，他能在开在河边的咖啡店里面，安静地看着自己的历程，感慨过去和未来。","s":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":224},{"i":231,"t":"数据：数据是数据库中存储的基本对象，描述事物的符号记录称为数据，数据的含义称为数据的语义 数据库（DB）：数据库是长期储存在计算机内、有组织的、可共享的大量数据集合 数据按照一定数据模型组织、描述和存储 具有较小的冗余度 较高的数据独立性 易扩展性 永久存储、有组织、可共享 数据库管理系统（DBMS）：数据库管理系统是位于用户与操作系统之间的一层数据管理软件 数据库系统（DBS）：由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统 物理独立性：用户的应用程序与存储在磁盘上的数据库中的数据是相互独立的，数据的物理存储改变了，但是其应用程序不用改变 逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的，数据的逻辑结构变了，但是应用程序可以不变","s":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":228},{"i":233,"t":"关系：只包含单一的数据结构，用户视角来看就是一张数据库的表 域、笛卡尔积：数据的取值范围叫做域、笛卡尔积就是配对乘起来 元组和属性：元组就是表中的一行，属性就是表中的一列","s":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":228},{"i":235,"t":"实体完整性：如果属性A是关系R的主属性，A不能为NULL 参照完整性：关系R和关系S，若R中的主键A与S中的B对应，则称B为关系S中的外码，对于S中元组中B的值： 为空（NULL） 等于关系R中主键A的值 关系代数：并交差和笛卡尔 选择：σ\\sigmaσ (选择条件)(表名)，选择符合条件的一行元组 投影：π\\piπ (列名)(表名)，选择符合条件的一列 连接：将两个关系的笛卡尔积中选取属性间符合条件的一些元组，理解成SQL语句中的表连接 除：有点抽象，理解成关系里面的差运算，关系R和关系S，R÷S=T，首先找到R和S共同的属性C，然后在R中找到 不属于C中的属性T，T和S的组合要全部出现在R中","s":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":228},{"i":238,"t":"create table <表名>( 列名 数据类型（integer、varchar、等等）not null, ..............., ..............., primarry key(key1,key2....), //主键 foreign key(key1) references 表2(key1) // 外键) 修改表： alter table <表名> add 列名 数据类型 约束条件（主键、不为空等等） add 约束 drop 列名 [cascade|restrict]（ cascade就是删除引用该列的其他对象，例如视图）（restrict如果该列有其他对象引用，则拒绝删除该列） drop constraint 完整性约束 alter 列名 数据类型","s":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":228},{"i":240,"t":"模板 select a,b,c from table_1,table_2 where 条件语句 group by 分组列名 having 分组条件 order by 排序列名 desc|asc where：添加查询条件 between x1 and x2 x1~x2范围内 in 嵌套语句中使用，可以筛选例：select Sname,Ssex from Student where Sdept in( select Sdept from Course where core>=30 )not in 不在like 用于字符串匹配，基本不用 group by：查询出来的元组按某列进行分组 order by：按某列的属性值进行排序 表连接： 自身连接，两张一样的表，通过条件语句连接 select a.cno,b.cpno from Course a,Course b where a.Cpno = b.Cno 外连接，两张或多张不一样的表通过条件语句连接，一般采用left join on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为NULL select Student.Sno,Sname,Ssex from Student left join SC on Student.Sno = SC.Sno 聚集函数 count(*)avg(*)max(*)min(*) 集合查询 查询语句1union|intersect|except（并、交、差）查询语句2 插入数据 insert into <表名> 列1，列2，.... values(值1，值2.....) 更新数据 update <表名>set 列名 = 操作（加减乘除都可以）where 条件（此处可以嵌套in配合select查询）例：update SCset grade = grade+10where Sno in ( select Sno from Student where Sname = '牛顿' ) 删除数据 delete from 表名where 条件删除一行元组","s":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":228},{"i":242,"t":"视图是将几个表导出一些数据的表，是虚表，不是实际存在的。类似一个窗口，透过它可以看到数据库中自己感兴趣的那部分数据的变化，经过定义后，这个虚表也可以查询和删除。 create view <视图名>as<查询语句>[with check option]加入这个语句的话，进行UID的时候，需要满足子查询中的条件例：create view IS_studentas select Sno,Sname,Sage //通过这种方式就不用再view那里写列名式子 from Student where Sdept=‘IS’例：将学生的学号及平均成绩定义为一个视图create view S_Gas select Sno,avg(Grade) from SC group by Sno","s":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":228},{"i":245,"t":"函数依赖：数据表中，给定一个属性X，唯一确定一个Y，则X函数确定Y或者Y函数依赖于X，X->Y。也就是对于一个函数F，给定F(X)=Y 非平凡的函数依赖：平凡函数依赖就是(A,B)->A|B|A,B。非平凡就是 (A,B)->C 完全函数依赖：(A,B)->C，少了A或者B都推不出来C 部分依赖：(A,B)->C，同时A|B->C 传递函数依赖：A->B,B->C，且B推不出A，则C对于A传递函数依赖 候选码：K能够完全函数依赖整个关系集R，K的闭包完整退出R 主属性：候选码中的都是主属性，无论是否入选主码","s":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":228},{"i":247,"t":"Math DeepLearning 图像分割评价指标","s":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"","p":246},{"i":249,"t":"IoUIoUIoU的计算公式为：IoU=∣A∩B∣A∪BIoU = \\frac{|A \\cap B|}{A \\cup B}IoU=A∪B∣A∩B∣​其中分子代表的是真实标注和模型预测的交集面积，即重叠区域。分母代表真实标注和模型预测的并集面积。具体解释为：衡量标注数据集和模型预测的肿瘤区域之间有多大的重合程度，更关注预测和标注的重叠，注重局部精度，对边缘和细节分割更加敏感，反应分割结果的准确性和覆盖度，也就是衡量模型预测结果“精不精”能力的。","s":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":246},{"i":251,"t":"DiceDiceDice系数的计算公式为：IoU=2∣A∩B∣∣A+B∣IoU = \\frac{2|A \\cap B|}{|A + B|}IoU=∣A+B∣2∣A∩B∣​ 其中分子代表真实标注和模型预测的交集面积的两倍，也就是重叠区域的两倍。分母代表真实标注和模型预测两者的面积总和。总的来说这个指标是“相似度”的度量，反映的是预测和标注之间的相似程度，也就是衡量模型预测结果“像不像”能力的。","s":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":246},{"i":253,"t":"RecallRecallRecall系数计算公式为：TP(TP+FP)\\frac{TP}{(TP+FP)}(TP+FP)TP​ 其中TPTPTP代表的是模型正确预测的样本数，FNFNFN是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80%，可以表示模型在某个分类上的识别能力强弱，指标越高表示分类正确的能力越强。","s":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":246},{"i":255,"t":"AccAccAcc的计算公式为：TP+TNTP+FN+FP+TN\\frac {TP+TN}{TP+FN+FP+TN}TP+FN+FP+TNTP+TN​ 该指标代表的就是模型正确预测的像素点比例，包括肿瘤和非肿瘤的像素比例。综合考虑了识别为肿瘤和非肿瘤的两个能力。简单来说就是模型预测的“准不准”。","s":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":246},{"i":257,"t":"可以发现Dice和IoUDice和IoUDice和IoU是非常相似的两个指标，但是又有着区别，IoUIoUIoU更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。DiceDiceDice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是DiceDiceDice检验识别肿瘤的大致形状，IoUIoUIoU识别肿瘤的整体细节。 而Acc和RecallAcc和RecallAcc和Recall也是非常相似的两个指标，同时也有着区别，RecallRecallRecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是RecallRecallRecall关注的是正向的像素点。而AccAccAcc关注的是模型识别肿瘤和非肿瘤的能力。","s":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":246},{"i":262,"t":"镜像就像是一个目标,可以通过这个目标构建很多容器,容器提供服务.镜像是一种轻量级,可以执行的软件包,用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容 包括代码、运行时库、环境变量和配置文件。 操作系统分为内核跟用户空间,Linux启动内核后就会挂在root文件系统提供用户空间支持.镜像就相当于是一个文件系统.","s":"1.1 镜像","u":"/docs/Web/Docker/Docker入门","h":"#11-镜像","p":258},{"i":264,"t":"容器和镜像的关系就类似实例跟类一样,通过镜像构建容器.容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。 容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。","s":"1.2 容器","u":"/docs/Web/Docker/Docker入门","h":"#12-容器","p":258},{"i":266,"t":"镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。 Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。","s":"1.3 仓库","u":"/docs/Web/Docker/Docker入门","h":"#13-仓库","p":258},{"i":268,"t":"目前的学习只需要能够进行一些简单的Docker操作即可 docker ps -a //查询当前运行的dockerdocker run [镜像ID] //运行某个镜像docker images ls //列出镜像docker stop [镜像ID] //停止容器docker kill [镜像ID] //杀死容器docker exec -it [容器ID] /bin/bash //进入容器的shell环境ls //查看容器内的情况cd /xxxx/xxxx //进入容器的某个文件cat [文件] //查看代码文件","s":"2.常用指令","u":"/docs/Web/Docker/Docker入门","h":"#2常用指令","p":258},{"i":271,"t":"tip Mathematics is the end of all fundamental disciplines 数学是人类对事物的抽象结构与模式进行严格描述、推导的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。 对于我们来说，数学也许繁琐无味，但是确实我们认知世界的一把重要钥匙。 数学的尽头是哲学:数学是一种思维逻辑的集合。它是人类根据观察到的自然现象和自身的体验,用思维来做逻辑的推导和延伸总结出的自然运动规律的抽象结果。而哲学也就是基于人的思维和经验总结自然界和人类社会发展中的规律的学说,即研究该如何去思考和解释所观察和体验到的现象的方法论。","s":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":269},{"i":276,"t":"推荐采用这种方式进行部署，较为方便，采用GitHub提供的托管工具Githubpages进行静态页面部署。 GitHub Pages 是由 GitHub 提供的静态网站托管服务。它允许用户直接从他们的 GitHub 存储库托管他们的网站。GitHub Pages 支持多种静态网站生成器，并提供免费的 HTTPS 加密、自定义域和通过 Git 的版本控制。用户还可以使用 Jekyll，一个流行的静态网站生成器，在 GitHub Pages 上构建他们的网站。另外，GitHub Pages 还内置了持续集成和部署支持，使得每次您将更改推送到存储库时都可以轻松更新您的网站。 但是有一个弊端就是，单纯的Githubpages部署，每次添加新的笔记都得重新推送上远程仓库。","s":"一、GitHubPages","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#一githubpages","p":272},{"i":278,"t":"首先就是在远程建立一个仓库，仓库名为username.github.io，其中设置为你个人的用户名。","s":"1.远程创建仓库","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1远程创建仓库","p":272},{"i":280,"t":"打开本地写好的项目终端进行远程连接仓库。 git initgit remote add origin \"你的仓库地址\"git add .git commit -m\"提交信息\"git push -u origin main 上述就是将你的代码远程上传到远程仓库了","s":"2.本地连接","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2本地连接","p":272},{"i":282,"t":"本地首先要进行配置，将你的Docsaururs配置文件进行修改，将config配置中的代码段修改 url: 'https://username.github.io',baseUrl: '/', 改为自己的仓库地址所对应的那个名称就好，这也是部署后的访问地址。 执行 npm run buildgit checkout -b gh-pagesxcopy /E/Y build .rmdir /S /Q buildgit add .git commit -m \"Deploy Docusaurus to GitHub Pages\" git push origin gh-pages 上述代码就是将你的build后的代码上传到gh-pages分支上，接下来你只需要在仓库的setting-> pages->Branch设置为gh-pages分支来作为你的pages读取静态文件的地址即可。 部署成功后，即可通过上述配置文件中的https://username.github.io访问到你的网站。","s":"3.打包部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#3打包部署","p":272},{"i":285,"t":"自行购买云服务器和域名，然后对域名进行解析，同时在服务器中下载Nginx并且进行配置。 在Nginx配置文件Nginx.conf中对你的域名和端口进行配置。例如 user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events { worker_connections 1024;}http { server { listen 端口号 default_server; listen [::]:端口号 default_server; root /usr/workspace/RachelNooteBook/usr/workspace/RachelNooteBook/web; index index.html; server_name 域名 www.域名; location / { proxy_pass http://服务器IP; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main;} 通过上述配置好你的Nginx。","s":"1.云服务","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1云服务","p":272},{"i":287,"t":"在项目根目录下创建文件夹.github/workflows，并且在里面创建nodejs.yml文件，进行自动化部署的配置。 name: FTP Deploy on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: '16.x' - name: Install FTP client run: sudo apt-get update && sudo apt-get install -y lftp - name: Build run: npm install && npm run build - name: FTP Deploy uses: SamKirkland/FTP-Deploy-Action@4.0.0 with: server: 域名 username: ${{ secrets.FTP_USER }} //用户名 password: ${{ secrets.FTP_PWD }} //密码 server-dir: FTP路径 local-dir: build/ 其中的secrets.FTP_USER要在github设置中进行配置，添加action的变量，然后设置好你的FTP的用户名和密码即可。同时要在FTP服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到FTP服务器上。 接下来创建一个简单的.git-ftp-include文件 加入代码： !build/ 这个是默认让其读取build目录下的静态文件。 通过这样配置，推送到远程后，就会自动化的使用action进行部署到你的服务器中，然后通过你的域名就可以正常访问。","s":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2项目配置action自动化脚本","p":272},{"i":292,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"student\", //用户名 \"password\": \"\", //密码 \"remember\": false //下次自动登录} 返回参数： { \"userName\": \"student\", //用户名 \"imagePath\": \"\", //头像}","s":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":288},{"i":294,"t":"接口地址：/api/student/user/register 请求参数： { \"userName\": \"student5\", //用户名 \"password\": \"123456\", //密码 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":288},{"i":296,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":288},{"i":298,"t":"接口地址：/api/student/dashboard/index 请求参数：无 返回参数： { \"fixedPaper\": [ //固定试卷 { \"id\": 2399, //试卷Id \"name\": \"test33333\", //试卷名称 \"limitStartTime\": null, //考试开始时间 \"limitEndTime\": null //考试结束时间 } ], \"timeLimitPaper\": [] //时段试卷}","s":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":288},{"i":300,"t":"接口地址：/api/student/dashboard/task 请求参数：无 返回参数： [ { \"id\": 8, //任务id \"title\": \"2021-04-25作业\", //任务标题 \"paperItems\": [ { \"examPaperId\": 181, //任务试卷id \"examPaperName\": \"第一次出卷\", //任务试卷名称 \"examPaperAnswerId\": 579, //答卷id \"status\": 2 //答卷状态 } ] } ]","s":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":288},{"i":302,"t":"接口地址：/api/student/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": \"18\", //学科id \"name\": \"英语\" //学科名称 } ]}","s":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":288},{"i":304,"t":"接口地址：/api/student/exam/paper/pageList 请求参数： { \"paperType\": 1, //试卷类型 \"subjectId\": 158, //学科id \"pageIndex\": 1, //页数 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 2520, //试卷id \"name\": \"生理卫生\", //试卷名称 \"questionCount\": 1, //题目数 \"score\": 20, //试卷分数 \"createTime\": \"2021-05-31 13:34:49\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 158, //学科 \"subjectName\": \"英语\", //学科 \"paperType\": 1, //试卷类型 \"frameTextContentId\": 9016 //试卷内容 } ] }}","s":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":288},{"i":306,"t":"接口地址：/api/student/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"测试一\", //试卷名称 \"suggestTime\": 22, //建议时长 \"limitDateTime\": null, //考试时间限制 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 8, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //标题 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //顺序 } ] } ], \"score\": \"10\" }}","s":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":288},{"i":308,"t":"接口地址：/api/student/exampaper/answer/answerSubmit 请求参数： { \"questionId\": null, \"doTime\": 14, //耗时 \"answerItems\": [ { \"questionId\": 4, //题目id \"content\": null, //答题内容 \"contentArray\": [ //填空题内容 \"测试\", \"1\" ], \"completed\": true, //是否完成 \"itemOrder\": 1 //题目序号 } ], \"id\": 4 //试卷id} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"2\" //试卷得分}","s":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":288},{"i":310,"t":"接口地址：/api/student/exampaper/answer/read/4 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"paper\": { //试卷信息 \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 4, //试卷类型 \"name\": \"限时考试二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": [ //考试时间限制 \"2021-06-22 00:00:00\", \"2021-08-06 00:00:00\" ], \"titleItems\": [ { \"name\": \"一、完成题目\", //标题 \"questionItems\": [ //题目列表 { \"id\": 8, //题目id \"questionType\": 4, //题目类型 \"subjectId\": 1, //学科 \"title\": \"曲项向天歌红掌拨清波\", //题目标题 \"gradeLevel\": 1, //年级 \"items\": [ //题目选项 { \"prefix\": \"1\", //选项标识 \"content\": \"鹅鹅鹅\", //选项内容 \"score\": \"2\" //选项分数 }, { \"prefix\": \"2\", \"content\": \"白毛浮绿水\", \"score\": \"2\" } ], \"analyze\": \"咏鹅\", //解析 \"correctArray\": [ //标答 \"鹅鹅鹅\", \"白毛浮绿水\" ], \"correct\": \"\", //标答 \"score\": \"4\", //题目分数 \"difficult\": 4, //题目难度 \"itemOrder\": 1 //题目顺序 } ] } ], \"score\": \"18\" //试卷分数 }, \"answer\": { //答卷信息 \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分 \"answerItems\": [ //答题信息 { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"0\", //得分 \"questionScore\": \"4\" //题目分数 } ] } }}","s":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":288},{"i":312,"t":"接口地址：/api/student/exampaper/answer/edit 请求参数： { \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分数 \"answerItems\": [ { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题目顺序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"4\", //得分 \"questionScore\": \"4\" //题目分数 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"16\" //试卷得分}","s":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":288},{"i":314,"t":"接口地址：/api/student/exampaper/answer/pageList 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 6204, \"list\": [ { \"id\": 6534, //试卷id \"createTime\": \"2021-06-01 17:56:38\", //创建时间 \"userScore\": \"0\", //考试分数 \"subjectName\": \"数学\", //考试学科 \"subjectId\": 129, //学科id \"questionCount\": 1, //题目数量 \"questionCorrect\": 0, //题目正确数 \"paperScore\": \"3\", //试卷总分 \"doTime\": \"4 秒\", //耗时 \"paperType\": 7, //试卷类型 \"systemScore\": \"0\", //系统批改得分 \"status\": 2, //试卷状态 \"paperName\": \"智能训练试卷 - 1845\", //试卷名称 \"userName\": null //用户名 } ] }}","s":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":288},{"i":316,"t":"接口地址：/api/student/question/answer/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 17002, \"list\": [ { \"id\": 24928, //题目id \"questionType\": 1, //题型 \"createTime\": \"2021-06-02 16:07:11\", //创建时间 \"subjectName\": \"语文\", //学科 \"shortTitle\": \"666\" //题干 } ] }}","s":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":288},{"i":318,"t":"接口地址：/api/student/question/answer/select/25067 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"questionVM\": { \"id\": 507, //题目id \"questionType\": 1, //题目类型 \"subjectId\": 46, //学科id \"title\": \"111\", //题干 \"gradeLevel\": 12, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项 \"content\": \"A\", //选项内容 \"score\": null //选项分数 } ], \"analyze\": \"D\", //解析 \"correctArray\": null, //标答 \"correct\": \"D\", //标答 \"score\": \"2\", //分数 \"difficult\": 3, //难度 \"itemOrder\": null //排序 }, \"questionAnswerVM\": { //用户答案 \"id\": 25067, \"questionId\": 507, //题目id \"doRight\": false, //是否正确 \"content\": \"A\", //用户答案 \"itemOrder\": 2, //排序 \"contentArray\": null, //用户答案 \"score\": \"0\", //得分 \"questionScore\": \"2\" //题目分数 } }}","s":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":288},{"i":320,"t":"接口地址：/api/student/user/log 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 1812, \"userId\": 1, //用户id \"userName\": \"student\", //用户名 \"realName\": \"Test\", //用户真实姓名 \"content\": \"student 登录了学之思开源考试系统\", //动态内容 \"createTime\": \"2021-06-08 17:12:50\" //创建时间 } ]}","s":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":288},{"i":322,"t":"接口地址：/api/student/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 }}","s":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":288},{"i":324,"t":"接口地址：/api/student/user/update 请求参数： { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":288},{"i":326,"t":"接口地址：/api/student/user/message/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 5, \"list\": [ { \"id\": 8, \"title\": \"rwerw\", //消息标题 \"messageId\": 10, \"content\": \"sfsdf\", //消息内容 \"readed\": true, //是否已读 \"createTime\": \"2021-06-11 16:32:40\", //创建时间 \"sendUserName\": \"admin\" //发送人 } ] }}","s":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":288},{"i":328,"t":"接口地址：/api/student/user/message/read/14 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":288},{"i":330,"t":"接口地址：/api/student/user/message/unreadCount 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 0 //未读消息数量}","s":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":288},{"i":333,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"admin\", //用户名 \"password\": \"\", //密码 \"remember\": false //记住我} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": null, \"userUuid\": null, \"userName\": \"admin\", //用户名 \"password\": null, \"realName\": null, \"age\": null, \"sex\": null, \"birthDay\": null, \"userLevel\": null, \"phone\": null, \"role\": null, \"status\": null, \"imagePath\": null, \"createTime\": null, \"modifyTime\": null, \"lastActiveTime\": null, \"deleted\": null, \"wxOpenId\": null }}","s":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":288},{"i":335,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":288},{"i":337,"t":"接口地址：/api/admin/dashboard/index 请求参数：无 返回参数： { \"examPaperCount\": 2413, //试卷总数 \"questionCount\": 1025, //题目总数 \"doExamPaperCount\": 6148, //总答卷数 \"doQuestionCount\": 23945, //总题数 \"mothDayUserActionValue\": [ //活跃度 85 ], \"mothDayDoExamQuestionValue\": [ //月做题数 22 ], \"mothDayText\": [ //本月天数 \"1\" ]}","s":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":288},{"i":339,"t":"接口地址：/api/admin/user/page/list 请求参数： { \"userName\": \"\", //用户名 \"role\": 1, //角色 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 81, //总数 \"list\": [ { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } ] }}","s":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":288},{"i":341,"t":"接口地址：/api/admin/user/select/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 }}","s":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":288},{"i":343,"t":"接口地址：/api/admin/user/edit 请求参数： { \"id\": null, \"userName\": \"testzz\", //用户名 \"password\": \"123456\", //密码 \"realName\": \"tesx\", //真实姓名 \"role\": 1, //角色 \"status\": 1, //状态 \"age\": \"\", //年龄 \"sex\": \"\", //性别 \"birthDay\": null, //生日 \"phone\": null, //手机号 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 109, \"userUuid\": \"321dec89-0656-4736-ae4c-e2b07f4fcc67\", //用户id \"userName\": \"testzz\", //用户名 \"password\": \"\" //密码 \"realName\": \"tesx\", //真实姓名 \"age\": null, //年龄 \"sex\": null, //性别 \"birthDay\": null, //生日 \"userLevel\": 1, //年级 \"phone\": null, //手机号 \"role\": 1, //角色 \"status\": 1, //状态 \"imagePath\": null, //头像 \"createTime\": 1624538837259, //创建日期 \"modifyTime\": null, //修改时间 \"lastActiveTime\": 1624538837259, //最后活动时间 \"deleted\": false, //是否删除 \"wxOpenId\": null //微信openId }}","s":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":288},{"i":345,"t":"接口地址：/api/admin/user/delete/3 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":288},{"i":347,"t":"接口地址：/api/admin/user/changeStatus/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 2}","s":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":288},{"i":349,"t":"接口地址：/api/admin/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 13, //学科id \"name\": \"语文\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\", //年级名称 \"itemOrder\": null, //排序 \"deleted\": false //是否删除 } ]}","s":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":288},{"i":351,"t":"接口地址：/api/admin/education/subject/page 请求参数： { \"level\": null, //年级 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } ] }}","s":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":288},{"i":353,"t":"接口地址：/api/admin/education/subject/select/2 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 }}","s":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":288},{"i":355,"t":"接口地址：/api/admin/education/subject/edit 请求参数： { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 2, //年级 \"levelName\": \"二年级\" //年级名称} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":288},{"i":357,"t":"接口地址：/api/admin/education/subject/delete/3 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":288},{"i":359,"t":"接口地址：/api/admin/exam/paper/page 请求参数： { \"id\": null, \"level\": null, //年级 \"subjectId\": null, //学科 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页数量} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 9, \"list\": [ { \"id\": 13, //试卷id \"name\": \"中级任务二\", //试卷名称 \"questionCount\": 5, //题目总数 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:31\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 13 //试卷内容 } ] }}","s":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":288},{"i":361,"t":"接口地址：/api/admin/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"语文试卷\", //试卷名称 \"suggestTime\": 20, //考试时间 \"limitDateTime\": null, //限时考试 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 5, //题目类型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //题目选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答数组 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"10\" //试卷总分 }}","s":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":288},{"i":363,"t":"接口地址：/api/admin/exam/paper/edit 请求参数： { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ //题目列表 { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //试卷总分} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //题序 }}","s":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":288},{"i":365,"t":"接口地址：/api/admin/exam/paper/delete/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":288},{"i":367,"t":"接口地址：/api/admin/exam/paper/taskExamPage 请求参数： { \"subjectId\": null, //学科 \"level\": 1, //年级 \"paperType\": 6, //试卷类型 \"pageIndex\": 1, //页面 \"pageSize\": 5 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 13, \"name\": \"任务试卷五\", //试卷名称 \"questionCount\": 2, //题目总数 \"score\": 60, //试卷分数 \"createTime\": \"2021-08-02 14:36:26\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 26 //试卷内容 } ] }}","s":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":288},{"i":369,"t":"接口地址：/api/admin/question/page 请求参数： { \"id\": null, \"questionType\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 7, \"list\": [ { \"id\": 13, \"questionType\": 5, //题型 \"textContentId\": null, \"createTime\": \"2021-01-21 11:45:57\", //创建时间 \"subjectId\": 1, //学科 \"createUser\": 2, //创建人 \"score\": \"10\", //得分 \"status\": 1, //状态 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"analyzeTextContentId\": null, //解析 \"difficult\": 3, //难度 \"shortTitle\": \"默写咏鹅\" //题干 } ] }}","s":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":288},{"i":371,"t":"接口地址：/api/admin/question/select/508 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 508, //题目id \"questionType\": 5, //题型 \"subjectId\": 4, //学科 \"title\": \"<p>什么是快乐星球？</p>\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"照抄即可\", //解析 \"correctArray\": null, //标答 \"correct\": \"什么是快乐星球\", //正确答案 \"score\": \"5\", //题目分数 \"difficult\": 5, //难度 \"itemOrder\": null }}","s":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":288},{"i":373,"t":"接口地址：/api/admin/question/edit 请求参数： { \"id\": 13, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //正确答案 \"score\": 10, //题目分数 \"difficult\": 3, //难度 \"itemOrder\": null} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":288},{"i":375,"t":"接口地址：/api/admin/question/delete/7 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":288},{"i":377,"t":"接口地址：/api/admin/task/page 请求参数： { \"gradeLevel\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, //任务id \"title\": \"中级任务\", //任务标题 \"gradeLevel\": 1, //年级 \"createUserName\": \"admin\", //创建人用户名 \"createTime\": \"2021-01-21 11:50:24\", //创建时间 \"deleted\": false //是否删除 } ] }}","s":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":288},{"i":379,"t":"接口地址：/api/admin/task/select/22 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 12, //年级 \"title\": \"考试\", //任务标题 \"paperItems\": [ { \"id\": 592, //试卷id \"name\": \"考试\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 275, //试卷分数 \"createTime\": \"2021-08-12 15:02:50\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 46, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 2897, //试卷内容 \"allClasses\": null } ] }}","s":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":288},{"i":381,"t":"接口地址：/api/admin/task/edit 请求参数： { \"id\": 13, \"gradeLevel\": 1, \"title\": \"中级任务\", \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 1, //年级 \"title\": \"中级任务\", //任务标题 \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] }}","s":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":288},{"i":383,"t":"接口地址：/api/admin/task/delete/1 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":288},{"i":385,"t":"接口地址：/api/admin/message/page 请求参数： { \"sendUserName\": null, \"pageIndex\": 4, \"pageSize\": 10} 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 36, \"list\": [ { \"id\": 13, //消息id \"title\": \"你好，同学！\", //消息标题 \"content\": \"考试请不要作弊\", //消息内容 \"sendUserName\": \"admin\", //发送人用户名 \"receives\": \"student\", //接收人用户名 \"receiveUserCount\": 1, //接收人数量 \"readCount\": 1, //已读数量 \"createTime\": \"2020-09-22 11:37:49\" //创建时间 } ] }}","s":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":288},{"i":387,"t":"接口地址：/api/admin/message/send 请求参数： { \"title\": \"全校师生请注意\", //消息标题 \"content\": \"大家好\", //消息内容 \"receiveUserIds\": [ //接收人 1 ]} 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":288},{"i":389,"t":"接口地址：/api/admin/examPaperAnswer/page 请求参数： { \"subjectId\": null, //学科 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 4, \"list\": [ { \"id\": 13, \"createTime\": \"2021-07-07 14:03:02\", //提交时间 \"userScore\": \"16\", //用户得分 \"subjectName\": \"语文\", //学科名称 \"subjectId\": 1, //学科Id \"questionCount\": 5, //题目数量 \"questionCorrect\": 4, //正确题目数 \"paperScore\": \"18\", //试卷总分 \"doTime\": \"14 秒\", //耗时 \"paperType\": 4, //试卷类型 \"systemScore\": \"2\", //自动批改得分 \"status\": 2, //答卷状态 \"paperName\": \"限时考试二\", //试卷名称 \"userName\": \"student\" //用户名 } ] }}","s":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":288},{"i":391,"t":"接口地址：/api/admin/user/event/page/list 请求参数： { \"userId\": null, \"userName\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 68, \"list\": [ { \"id\": 13, //日志id \"userId\": 2, //用户id \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"content\": \"admin 登录了学之思开源考试系统\", //日志内容 \"createTime\": \"2021-08-24 20:05:02\" //创建时间 } ] }}","s":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":288},{"i":393,"t":"接口地址：/api/admin/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //用户年级 \"imagePath\": null //头像 }}","s":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":288},{"i":395,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, //用户id \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户标识 \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //生日 \"phone\": \"11\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-17 11:28:52\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":288},{"i":397,"t":"接口地址：/api/admin/user/selectByUserName 请求参数： student //用户名 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"name\": \"student\", //用户名 \"value\": 1 //用户id } ]}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":288},{"i":399,"t":"接口地址：/api/admin/upload/configAndUpload 请求参数：无 返回参数： { \"original\": \"头像.jpg\", \"name\": \"头像.jpg\", \"url\": \"http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_\", \"size\": 19665, \"type\": \".jpg\", \"state\": \"SUCCESS\"}","s":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":288},{"i":401,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2021-09-07 18:56:07\", //出生日期 \"phone\": \"2112112\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-31 10:08:03\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":288},{"i":404,"t":"tip Collect the technical stack required for backend development. 一个简单的后端菜汪，总得写点什么来记录下自己学了什么对吧。","s":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":402},{"i":407,"t":"这算是第一个正式接手的比较大的项目,有点难度,代码不难写,主要是逻辑难以捋顺. PCB：印刷电路板 SMT：一种工艺，对PCB进行贴片，将一些元器件安装到PCB板上","s":"3-拼板分板配置","u":"/docs/Work/拼板分板配置","h":"","p":405},{"i":409,"t":"一块板子经过镭射打码后会生成条码，上传MES，此时一块拼板(多块小板拼接，小板也有条码)已经形成绑定关系。拼板关系流入SMT工序(此时关系合格)，流入下一个工序则不合格，只支持按实际关系绑定的一个一个过站。","s":"1. 业务背景","u":"/docs/Work/拼板分板配置","h":"#1-业务背景","p":405},{"i":411,"t":"可以配置的按照机型，工序的拼板和分板方式 过站后变更 流过SMT后对板就行序列编码(标记1，2，3，.........) 支持按照工序的批量拼板绑定以及后续的解绑操作 支持按照工序实时分板","s":"1.1 任务","u":"/docs/Work/拼板分板配置","h":"#11-任务","p":405},{"i":413,"t":"涉及机密,数据库设计初始设计考虑不周,在生产中尽量可以不用外键关联,根据需求适当添加一些方便自己操作的字段,或者关联字段.","s":"2.数据库设计","u":"/docs/Work/拼板分板配置","h":"#2数据库设计","p":405},{"i":416,"t":"JPA是JAVA跟数据库交互的一种工具,不同于MyBatis需要写xml文件和SQL来交互,JPA可以根据一些命名规范来直接完成交互,简单的增删查改可以不用写SQL. 1.构建实体类,加上注解 @MetaData(\"\") @Entity @Table(name = \"\") 2.构建Dao,加上注解并extends Jpa 在Dao中可以使用JPA规范来写数据库交互的函数,也可以使用JPQL的方式来自定义SQL @Repository public interface TestDao extends JpaRepository<Test,String> { //func1 List<String> searchResultById(String Id) //func2 @Query(value = \"select Result from table where Id =: Id\",nativeQuery = true) List<String> searchResultById_1(@Param(\"Id\")String Id)}JPA 3.在Impl中使用Dao也可以快捷的使用save,delete等方法,只用过save,传入实体类即可,直接调用Dao.save(Class)即可在数据库中插入新数据.","s":"3.1 JPA","u":"/docs/Work/拼板分板配置","h":"#31-jpa","p":405},{"i":418,"t":"内部还是封装有直接执行SQL的方法,使用JPA是方便,但是遇到繁杂的业务,需要几次的JPA才能解决,增加了与数据库交互次数,性能损耗大. 可以直接书写SQL,通过封装好的方法执行即可. String preProcess; StringBuffer sql; sql = new StringBuffer();List<Map<String,Object>> sqlResult = new ArrayList<>();//内部封装就是这个返回类型sqlResult = baseFunctionService.getSqlResult(sql.toString());//还有其他很多方法,一般查询用这个--------解析sqlResult的逻辑---------------","s":"3.2 SQL执行","u":"/docs/Work/拼板分板配置","h":"#32-sql执行","p":405},{"i":421,"t":"生产环境中,总是会遇到多种多样的异常情况,所以服务实现的时候,基本使用try-catch来包裹核心代码,适当时候抛出异常. 服务编写逻辑: 注入@Service 注入Dao 注入一些其他的Service类 ServiceImpl实现Service的服务 Controller调用Service服务 try{ demo------ if(条件){ throw new RuntimeException(message); } demo------ }catch (Exception e){ throw new RuntimeException(e.getMessage(),e); }","s":"4.1 服务编写","u":"/docs/Work/拼板分板配置","h":"#41-服务编写","p":405},{"i":423,"t":"接口编写主要就是调用Service提供服务,获取或者返回数据.注意功能逻辑卸载Impl类中,不要在Controller中书写功能. 接口编写逻辑: 注入@RestController,@RequestMapping(value = \"该Controller入口\") 注入@Api(value = \" \",tags = \" \")开启Swagger 注入需要的服务类 根据获取或者返回的数据需求,选择是否使用Json还是普通表单 表单可以使用@Parm和@RequestParm注解来获取参数,前者可为空后者不行 需要使用JSON: 当传入数据使用JSON或者返回JSON的时候，需要自己自定义类,以保存传入或者返回的对象,使用RequestBody Class class 的形式来获取JSON格式参数 @RestController @RequestMapping(value = \"/rachel/test\") @Api(value = \"测试\",tags = \"test\") public class RachelTestController { @Autowired private TestService testService; @ApiOperation(value = \"test\") @RequestMapping(value = \"/serachId\",method={RequestMethod.POST}) public OperationResult serachDetais( @RequestParam(value = \"name\")String name, @Param(value = \"sex\")String sex) { return TestService.serachId(name,sex); } @ApiOperation(value = \"test\") @RequestMapping(value = \"/serachId\",method={RequestMethod.POST}) public OperationResult serachDetais( @RequestBody Person person) { return TestService.serachId(person.getName,person.getSex); }}","s":"4.2 接口编写","u":"/docs/Work/拼板分板配置","h":"#42-接口编写","p":405},{"i":426,"t":"XLD板子过站打码后需要进行清洗和审核。 清洗：根据小板条码、工单抓去对应的拼板数据，统一一块板进行清洗，清洗结果为OK和NG 审核：原理与清洗类似，由不同职能分次进行审核 该项目难度的两个功能其实逻辑基本一直，根据工单和条码从XLD表中抓取数据处理，并存入表中。","s":"5-清洗板","u":"/docs/Work/清洗板","h":"","p":424},{"i":428,"t":"SELECT L.SHOP_ORDER, L.ITEM, L.LINE, L.CLEAN_TIME, L.CLEAN_RESULT, L.CHECK_STATUS, L.CHECK_RESULT, L.CLEAN_PEOPLE, COUNT(M.SFC) AS SFC_COUNT FROM MOM_CLEANBAR_LOG L INNER JOIN MESEXT_XLD_BARCODE M ON L.BARCODE = M.BARCODE GROUP BY L.SHOP_ORDER,L.ITEM,L.LINE,L.CLEAN_TIME,L.CLEAN_RESULT,L.CHECK_STATUS,L.CHECK_RESULT,L.CLEAN_PEOPLE 该SQL可以将工单下关联的BARCODE和BARCODE下关联的SFC进行统计，得出清洗总数，使用聚合函数COUNT注意要结合GROUP BY来使用，其中分组的字段是除了聚合字段之外的所有字段。","s":"1.SQL记录","u":"/docs/Work/清洗板","h":"#1sql记录","p":424},{"i":431,"t":"要求根据工单和共产带出线体(去重后多项可选择)，以输入条码和工单的维度进行数据拉取： 主板条码：拉取下属全部小板条码 小板条码：反查主板条码，然后执行上述步骤 将获取线体和获取条码数据拆分为两个接口设计，传参按照表单传参 2.1 前端设计​ 要点1：线体数据返回并且可选 要点2：支持扫描多个小码 一次提交 <van-field ref=\"line\" :label=\"$t(languagePath+'line')\" :placeholder=\"$t(languagePath+'line')\" v-model=\"line\" :readonly=\"initShow\" is-link @focus=\"showLine = true\" required/> <van-action-sheet v-model=\"showLine\" :actions=\"lineResult\" @select=\"onSelectLine\" :description=\"$t('线体')\" /> 设计此模块来进行线体部分的选取和设置，绑定好v-model，其中的showLIne为是否展示选项框，:actions为对应的选项数据，select绑定选择事件 showLine: false,lineResult:[],line:'',//data如上//调用后端获取数据async initLineResult(){ if(!this.shopOrder){ this.info_error = this.$t('请输入工单号'); this.$refs.shopOrder.focus(); return false; } let params = { site:this.site, shopOrder:this.shopOrder }; await getLineResult(params) .then(res => { if(res.code === '0'){ let line = res.data; this.lineResult = this.convertListToKeyValue(line); this.info_error = \"\"; this.$refs.line.focus(); } else { Dialog.alert({message:res.message}); this.info_error = res.message; return false; } }); },//选项框操作 onSelectLine(item){ this.showLine = false; this.line = item.value; this.$refs.code.focus(); }, 2.2 后端设计​ 要点：根据前端批量传入的JSON进行处理 设计接收JSON格式的传参即可，设计CleanBarLogVO接收参数 public class CleanBarLogVO { List<CleanBarLogDTO> dataList; String cleanResult; String site; String cleanPeople;}","s":"2.1 清洗模块","u":"/docs/Work/清洗板","h":"#21-清洗模块","p":424},{"i":433,"t":"审核模块同清洗模块基本意思一致，前端后端逻辑差不多类似","s":"2.2 审核模块","u":"/docs/Work/清洗板","h":"#22-审核模块","p":424},{"i":435,"t":"根据数据库设计好对应的实体类 与前端交互，接收参数大多数是表单，前端配置也默认表单，需要JSON需要手动更改，后端设计实体接收JSON 往往设计成VO类来接收前端过来的参数，一般是复杂的组合，List和一些String类型，List可以封装好实体类或者字符串，如上述的CleanBarLogVO示例 如果遇到报表类型的展示，有分页要求的，设计DTO类 public class CleanBarLogPageDTO { @NotBlank(message = \"\") private String site; private String shopOrder; private String barcode; private String item; private String line; private String cleanTime; private String cleanCount; private String cleanResult; private String checkStatus; private String cleanPeople; private String checkResult; //当前页 private String page = \"1\"; //每页条数 private String limit = \"30\";} 将所需要的字段打成String，分页调用baseFunctionService的getSqlPageLimitResult函数即可，传入sql和页数和限制。 SQL设计，简短SQL设计使用Query在Dao中书写即可，复杂SQL场景使用StringBuffer来拼接SQL，多条件的时候，尽可能的先把表连接起来，然后判断是否进行AND xxx = xxx的拼接","s":"3.后端开发手记","u":"/docs/Work/清洗板","h":"#3后端开发手记","p":424},{"i":437,"t":"这是第一次直接实战上前端Vue的项目，具体记录一下流程和不懂的点。","s":"4.前端开发手记","u":"/docs/Work/清洗板","h":"#4前端开发手记","p":424},{"i":439,"t":"在api目录下，构建新的js文件，引入后端接口 import request from '@/utils/request'import qs from 'qs'export function getDataFromCode(data) { return request({ url: '', method: 'post', data: qs.stringify(data) }) } 其中需要注意的是，data:qs.stringify(data)是将参数以表单的形式进行提交，如果以JSON格式，直接使用data即可","s":"4.1 引入后端接口","u":"/docs/Work/清洗板","h":"#41-引入后端接口","p":424},{"i":441,"t":"在router路径下的index.js中进行配置 进行这样的配置后，Path也就是在base中对应配置的路径 在Base中的菜单进行配置后，同时需要在角色管理中加上对应的菜单权限，即可在页面中看到页面。","s":"4.2 注册vue的路径","u":"/docs/Work/清洗板","h":"#42-注册vue的路径","p":424},{"i":443,"t":"按照路径配置后，到对应路径下构建vue页面即可 vue的结构为界面和函数逻辑，部分写界面设计的逻辑，大多都是采用组建，这里使用的是vxetable，官方文档很齐全。 目前会用的： <van-field ref=\"code\" v-model=\"code\" :label=\"$t(languagePath+'code')\" :placeholder=\"$t(languagePath+'code')\" clearable @keydown.native.enter=\"enterCode\"> </van-field> 通过ref和v-model来进行绑定，一般命名一样。 @keydown.native.enter为回车函数，执行回车后的逻辑 JS部分：JS部分就是写处理逻辑的，使用data来定义数据，methods定义方法，回车函数一般就是判空。 示例异步请求后端处理： convertListToKeyValue(list){ return list.map(item => { return { name: item, value: item }; }); }, async initLineResult(){ if(!this.shopOrder){ this.info_error = this.$t('请输入工单号'); this.$refs.shopOrder.focus(); return false; } let params = { site:this.site, shopOrder:this.shopOrder }; await getLineResult(params) .then(res => { if(res.code === '0'){ let line = res.data; this.lineResult = this.convertListToKeyValue(line); this.info_error = \"\"; this.$refs.line.focus(); } else { Dialog.alert({message:res.message}); this.info_error = res.message; return false; } }); }, convertListToKeyValue为将String列表转成一个Map(K-V)格式的数据，initLineResult为异步函数， getLineResult就是调用后端接口。 表格数据删除：这是本次vue开发中遇到最大的问题，希望能够根据表格勾选来完成选中删除的功能(仅前端删除)，数据是绑定的，所以可以在谷歌浏览器中安装Vue的插件来进行查看和调试 删除逻辑： onDelete(){ //获取表格数据 let $table = this.$refs.xTable; //获取选中行数据 const list = $table.getCheckboxRecords(); if(list.length < 1){ Notify({type:'danger',message:''+this.$t('请至少选择一条数据进行删除')}); return false; } for (let i = 0; i < list.length; i++) { //因为splice会缩减数组长度，只需要跟着一起缩减索引即可 let index = this.tableData.findIndex(item => item._X_ROW_KEY === list[i]._X_ROW_KEY); console.log(index); this.tableData.splice(index, 1); } }, 新版本的vxetable中，使用了_X_ROW_KEY为唯一ID字段来进行选择删除了，使用getCheckboxRecords函数来获取选中的数据，splice函数来切割选中的数据","s":"4.3 Vue页面","u":"/docs/Work/清洗板","h":"#43-vue页面","p":424},{"i":445,"t":"这是第一个前后端(Vue)结合的需求，学会后端和Vue一起的操作和Vue的一些编写和配置。","s":"5.总结","u":"/docs/Work/清洗板","h":"#5总结","p":424},{"i":447,"t":"新用到的指令Git stash：能够将当前工作区修改的代码进行一个暂存，往往在开发过程中会出现以往功能的一些Bug修复，这时候需要从当前分支切换到另一个分支，会出现\"放弃当前想修改\"的提醒，这时候为了能够保存修改，又能切换分支修复Bug，对当前修改的文件进行Git stash即可。","s":"5.1 Git学习新纪录","u":"/docs/Work/清洗板","h":"#51-git学习新纪录","p":424},{"i":449,"t":"代码合并会出现冲突，git是以文件和行号来判断是否修改的，可能A在修改100行，B也在修改100行，完成后A推送了，B写完了拉取远程代码合并，会出现冲突，一般来说优选选择保留远程的Master分支中正常使用的代码，手动解决冲突，保留好自己和别人的代码(功能不一致的情况下)，功能一致情况下需要进行协商","s":"5.2 冲突解决","u":"/docs/Work/清洗板","h":"#52-冲突解决","p":424},{"i":452,"t":"清洗，审核页面新增提醒的按钮，提醒必填，在组件中使用required属性即可展示必填项。","s":"6.1 界面按钮确认","u":"/docs/Work/清洗板","h":"#61-界面按钮确认","p":424},{"i":454,"t":"新增一个根据年月日时分秒生成的流水号函数，前端页面页面绑定调用接口的函数，函数中调用数据初始化函数即可带出。","s":"6.2 自动生成条码并带出","u":"/docs/Work/清洗板","h":"#62-自动生成条码并带出","p":424},{"i":456,"t":"消息推送配置需要提前配置好唯一码，业务流程按线体和班别进行推送(正常模式)。 本次任务推送不考虑班别，配置线体和人员即可，Java配置代码如下： String text = \"线体\"+sqlResult.get(i).get(\"LINE\").toString()+\",工单\"+sqlResult.get(i).get(\"SHOP_ORDER\").toString()+\"有清洗记录,\"+\"清洗数量\"+sqlResult.get(i).get(\"SFC_COUNT\").toString()+\",请审核!!!\"; messageRemindConfigService.pushMsg(site, remindCode, text, true, null, sqlResult.get(i).get(\"LINE\").toString(), null); 走pushMsg函数是进行企微推送，需要先开通测试机的企微账号，开通本地IP。推送流程：本地推送——>企微服务器——>个人。","s":"6.3 删除IPQC，改用消息推送","u":"/docs/Work/清洗板","h":"#63-删除ipqc改用消息推送","p":424},{"i":460,"t":"根据清洗出来的数据进行产能获取和计算。产能获取就是调用SAP接口。 计算相应的效率，通过SQL来进行连笔操作，同一工单下的多个操作，选取最少的那条操作，类似做过的微电看班需求。 要求定时任务每晚获取当天产能数据，更新插入后，计算效率，进行前端报表展示 具体的SQL 设计： with A AS( SELECT ID as ID,LINE as LINE, SHOP_ORDER as SHOP_ORDER, INDUCTIVE_DATE as INDUCTIVE_DATE, START_TIME as START_TIME, END_TIME as END_TIME, ALL_COUNT as ALL_COUNT, PROCESS as PROCESS, OPERATION as OPERATION, TO_CHAR(START_TIME, 'HH24:MI') || '~' || TO_CHAR(END_TIME, 'HH24:MI') AS TIME_RANGE, SUM(ALL_COUNT) OVER (PARTITION BY LINE,SHOP_ORDER,START_TIME,END_TIME,INDUCTIVE_DATE) AS SUM_COUNT, ROW_NUMBER() OVER (PARTITION BY LINE,SHOP_ORDER,PROCESS,START_TIME,END_TIME ORDER BY ALL_COUNT ASC) AS RN, REMARK as REMARK FROM MOM_SFC_INDUCTION WHERE SITE = 'S801'), B AS( SELECT A.ID as ID,A.LINE as LINE, A.SHOP_ORDER as SHOP_ORDER, A.INDUCTIVE_DATE as INDUCTIVE_DATE, A.START_TIME as START_TIME, A.END_TIME as END_TIME, A.TIME_RANGE as TIME_RANGE, A.ALL_COUNT as ALL_COUNT, A.PROCESS as PROCESS, A.SUM_COUNT as SUM_COUNT, S.QTY_TO_BUILD, split(S.planned_item_bo,2) as ITEM, A.REMARK as REMARK FROM SHOP_ORDER S JOIN A ON A.SHOP_ORDER = S.SHOP_ORDER and A.RN = 1)select B.ID as ID, B.LINE as LINE, B.SHOP_ORDER as SHOP_ORDER, B.ITEM as ITEM, M.INTRODUCTION as INTRODUCTION, B.QTY_TO_BUILD, B.INDUCTIVE_DATE as INDUCTIVE_DATE, B.TIME_RANGE as TIME_RANGE, B.PROCESS as PROCESS, B.SUM_COUNT as SUM_COUNT, M.STAND_PEOPLE as STAND_PEOPLE, M.STAND_PRODUCT as STAND_PRODUCT, B.ALL_COUNT as ALL_COUNT, (B.ALL_COUNT - M.STAND_PRODUCT) AS DIFF_COUNT, TO_CHAR((B.ALL_COUNT) / (M.STAND_PRODUCT)*100, 'FM9999990.00') || '%' AS EFFICIENCY, B.REMARK as REMARKFROM B JOIN MOM_STANDWORK_HOURS M ON B.ITEM = M.ITEM AND B.PROCESS = M.PROCESS ORDER BY INDUCTIVE_DATE,START_TIME","s":"1.产能报表需求","u":"/docs/Work/研控报表组装","h":"#1产能报表需求","p":457},{"i":463,"t":"清洗数据获取到当天的工单和工序(一般有10和20)，正常来说清洗出来都会有，但是拼装的时候没有，所以做出了后续的修改： //新增，处理process Map<String,String> processMap = new HashMap<>(); for (int i = 0; i < allConfig.size(); i++) { String key = allConfig.get(i).getSite()+\",\"+allConfig.get(i).getLine()+\",\"+allConfig.get(i).getOperation(); processMap.put(key, allConfig.get(i).getProcess()); } for (int i = 0; i < saveDataList.size(); i++) { String key = saveDataList.get(i).getSite()+\",\"+saveDataList.get(i).getLine()+\",\"+saveDataList.get(i).getOperation(); String process = processMap.get(key); //当取到的工序存在的时候 if(process!=null){ saveDataList.get(i).setProcess(process); } //不存在的时候 else{ saveDataList.get(i).setProcess(null); } } 获取到工单和工序后，调用SAP接口即可。","s":"2.1 处理工序为空","u":"/docs/Work/研控报表组装","h":"#21-处理工序为空","p":457},{"i":465,"t":"使用html的前端设计，前后端交互使用JSON格式，由于有分页要求，设计DTO类 public class ProductStatiticDTO { private final String regex = \"[0-9]+\"; //工厂 @NotBlank(message = \"MesExtController.site.notEmpty\") private String site; //线体 private String line; //工单 private String shopOrder; //物料编码 private String item; //产品描述 private String productDesc; //工单批量 private String shopOrderQty; //起始日期 private String startDate; //结尾日期 private String endDate; //时间段 private String timeRange; //工序 private String process; //累计产出 private String sumCount; //标准人数 private String standPeople; //标准产出 private String standProduct; //实际产出 private String allCount; //差异数量 private String diffCount; //效率 private String efficiency; //原因备注 private String remark; //选择Ids private String selectIds; //选择Ids private List<String> exportIds; //编辑数据Json (新增/修改) private String dataJson; //导出类型(select/selectPage/selectAll) private String exportType; //当前页 private String page = \"1\"; //每页条数 private String limit = \"30\"; //日期 private String createDate;} 前端使用layui，初始化grid： 这是初始化展示数据，调用接口，获取data，后端数据封装使用OperationResult正常返回即可，参数传入使用 ...layui.form.val('#searchForm')","s":"2.2 实体设计","u":"/docs/Work/研控报表组装","h":"#22-实体设计","p":457},{"i":467,"t":"前端选取数据导出传入的是ID组，后端处理拼接SQL，使用LIKE子句判断： if(StringUtils.isNotBlank(exportIds)){ sql.append(\" AND B.ID IN ('\"+exportIds+\"')\"); } 前端页面以sfc_config_list.html为模板，基本能够包含所有需求。","s":"2.3 数据导出","u":"/docs/Work/研控报表组装","h":"#23-数据导出","p":457},{"i":470,"t":"需求： 1.产品实际产能取工艺路线第一个工序的产能数据（多个工单数量相加）。 2.班次固定白夜班，08:30~20:30白班，其他时间夜班 3.效率未达到95%需显示红色，功能直通率/外观直通率未到98%需显示红色","s":"2-看板重构","u":"/docs/Work/重构看板","h":"","p":468},{"i":473,"t":"用来根据条件判断加入一个标记列 end和as结尾 样例： case WHEN to_char(msf.end_time, 'HH24:MI:SS') < '20:30:00' then '白班' else '晚班' end as DAYTIME","s":"1.1 case字句","u":"/docs/Work/重构看板","h":"#11-case字句","p":468},{"i":475,"t":"把一个查询语句当成一个子表用来供后面的查询 with as后要接上select语句，不然会报错 //单个命名 with as T( select * from a )select * from T //多个 with as T(), as A(), as B() select * from A,B,T;","s":"1.2 with as字句","u":"/docs/Work/重构看板","h":"#12-with-as字句","p":468},{"i":477,"t":"结合聚集函数使用 假设要聚合A字段，并且select中包含的是A，B，C，D字段，除了A字段，B和C都要加入到Group by后 先where后Group by 后Order by Group by后可以加Having条件限制分组 SELECT T.START_TIME as START_TIME, T.END_TIME as END_TIME, T.DAYTIME as DAYTIME, SUM(T.ALL_COUNT) as ALL_COUNT FROM T GROUP BY T.START_TIME, T.END_TIME, T.DAYTIME ORDER BY T.START_TIME","s":"1.3 Group by","u":"/docs/Work/重构看板","h":"#13-group-by","p":468},{"i":479,"t":"按照条件对数据进行分组，内部会排序，并且按照1,2,3这样的顺序排序 ROW_NUMBER() OVER (PARTITION BY B.START_TIME, B.END_TIME ORDER BY B.CREATEDDATE DESC) AS rn ROW_NUMBER() OVER (PARTITION BY 分组的列(或者数据) ORDER BY 排序的列 DESC) AS 命名 //同时可以结合SUM函数 SUM(列) OVER (partition BY 分组的列 ORDER BY 排序的列) as 命名","s":"1.4 ROW_NUMBER（）","u":"/docs/Work/重构看板","h":"#14-row_number","p":468},{"i":481,"t":"外连接有左外和右外，外连接就是算上自己的和别人共有的 left join和right join后面的on接条件，可以加and 内连接join on，类似求交集","s":"1.5 连接","u":"/docs/Work/重构看板","h":"#15-连接","p":468},{"i":483,"t":"SUM(P.ALL_COUNT) OVER (ORDER BY P.START_TIME) AS SUM_COUNT 这里还可以结合使用PARTITION BY分组求和。","s":"1.6 按行分组求和","u":"/docs/Work/重构看板","h":"#16-按行分组求和","p":468},{"i":485,"t":"本次遇到的主要问题就是保留小数点和百分号拼接的问题，使用如下函数： TO_CHAR((M.P_PASS_COUNT) / (M.P_ALL_COUNT)*100, 'FM9999990.00') || '%' AS P_RATE 即可以百分比形式保存并保留小数点后两位","s":"1.7 字符串拼接","u":"/docs/Work/重构看板","h":"#17-字符串拼接","p":468},{"i":487,"t":"with T as ( select S.site as SITE, S.shop_order as SHOP_ORDER, split(S.planned_item_bo,2) ITEM, MSF.start_time as START_TIME, MSF.end_time as END_TIME, IT.description as DESCRIPTION, MSF.all_count as ALL_COUNT, MSF.pass_count as PASS_COUNT, MSF.OPERATION as OPERATION, MSF.CREATEDDATE as CREATEDDATE, MSF.LINE as LINE, MSF.CAUSE as CAUSE, MSF.PROCESS as PROCESS, ROW_NUMBER() OVER (PARTITION BY MSF.START_TIME, MSF.END_TIME ORDER BY MSF.START_TIME DESC) AS RN from (SELECT SHOP_ORDER from MOM_SFC_INDUCTION WHERE TRUNC(SYSDATE) = TRUNC(START_TIME) GROUP BY SHOP_ORDER) A join SHOP_ORDER S on S.SHOP_ORDER = A.SHOP_ORDER join item_t IT on IT.item_bo = S.planned_item_bo and IT.locale = 'zh' join MOM_SFC_INDUCTION MSF on MSF.SHOP_ORDER = S.SHOP_ORDER JOIN router_step R ON S.planned_router_bo = R.router_bo AND R.SEQUENCE = 1 JOIN router_operation RO ON R.handle = RO.router_step_bo AND MSF.OPERATION = split(RO.operation_bo,2) where S.site = '1001' and MSF.line = 'HA5D003' and TRUNC(SYSDATE) = TRUNC(MSF.START_TIME) order by MSF.CREATEDDATE DESC),P as ( SELECT T.START_TIME as START_TIME, T.END_TIME as END_TIME, SUM(T.ALL_COUNT) as ALL_COUNT, SUM(T.PASS_COUNT) as PASS_COUNT, WM_CONCAT(T.CAUSE) as CAUSE FROM T GROUP BY T.START_TIME, T.END_TIME ORDER BY T.START_TIME),M as ( SELECT T.START_TIME AS START_TIME, T.END_TIME AS END_TIME, SUM(CASE WHEN T.OPERATION LIKE '%QCD%' OR T.OPERATION LIKE '%AOI%' THEN T.ALL_COUNT ELSE 0 END) AS P_ALL_COUNT, SUM(CASE WHEN T.OPERATION LIKE '%QCD%' OR T.OPERATION LIKE '%AOI%' THEN T.PASS_COUNT ELSE 0 END) AS P_PASS_COUNT, SUM(CASE WHEN T.OPERATION LIKE'%ICT%' OR T.OPERATION LIKE '%FCT%' OR T.OPERATION LIKE '%BUR%' THEN T.PASS_COUNT ELSE 0 END) AS F_PASS_COUNT, SUM(CASE WHEN T.OPERATION LIKE'%ICT%' OR T.OPERATION LIKE '%FCT%' OR T.OPERATION LIKE '%BUR%' THEN T.ALL_COUNT ELSE 0 END) AS F_ALL_COUNT FROM MOM_SFC_INDUCTION T WHERE TRUNC(T.START_TIME) = TRUNC(SYSDATE) GROUP BY T.START_TIME, T.END_TIME ORDER BY T.START_TIME)SELECT T.SHOP_ORDER, T.ITEM, T.LINE, T.PROCESS, TO_CHAR(P.START_TIME, 'HH24:MI') || '~' || TO_CHAR(P.END_TIME, 'HH24:MI') AS TIME_RANGE, CASE WHEN TO_CHAR(P.END_TIME, 'HH24:MI:SS') < '20:30:00' AND '08:15:00' < TO_CHAR(P.END_TIME, 'HH24:MI:SS') THEN '白班' ELSE '晚班' END AS SCHEDULE, T.DESCRIPTION, T.OPERATION, P.ALL_COUNT, SUM(P.ALL_COUNT) OVER (ORDER BY P.START_TIME) AS SUM_COUNT, TO_CHAR((M.F_PASS_COUNT) / (M.F_ALL_COUNT)*100, 'FM9999990.00') || '%' AS F_RATE, TO_CHAR((M.P_PASS_COUNT) / (M.P_ALL_COUNT)*100, 'FM9999990.00') || '%' AS P_RATE, P.CAUSEFROM PJOIN T ON P.START_TIME = T.START_TIME AND P.END_TIME = T.END_TIMEJOIN M ON P.START_TIME = M.START_TIME AND P.END_TIME = M.END_TIMEWHERE T.RN = 1 AND ( (TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS') BETWEEN '08:15:00' AND '20:30:00' AND TO_CHAR(P.END_TIME, 'HH24:MI:SS') < '20:30:00' AND '08:15:00' < TO_CHAR(P.END_TIME, 'HH24:MI:SS')) OR (TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS') NOT BETWEEN '08:15:00' AND '20:30:00' AND (TO_CHAR(P.END_TIME, 'HH24:MI:SS') >= '20:30:00' OR '08:15:00' >= TO_CHAR(P.END_TIME, 'HH24:MI:SS'))) ); 主要业务逻辑： 先按日期查询今天的一个工单号情况 拿到工单号连接工序表查找首工序(此步反转可以节省很大的查询时间) 对数据底表进行拼接分组，按照时间分组出来并且计算首工序的一个产能 再次对数据底表进行拼接分组，按照时间分组设置条件遴选外观通过率和功能通过率的指标数据，进行累加","s":"2.优化后的SQL","u":"/docs/Work/重构看板","h":"#2优化后的sql","p":468},{"i":490,"t":"一开始对项目的理解有误，写好SQL后的主要任务是： 将SQL封到ServiceImpl类中，能够使用Service来查询到数据库数据 写Controller接口，要求如下： 使用一个常量常驻缓存，用来保存从SAP接口中请求来的标准产能和标准人数 SAP接口传参要求[工单号，工序]，Controller接口传参要求[站点，线别] 要求这个常量缓存不重复保存数据，只在存在差异的时候进行更新 根据SAP接口查找到的标准产能来计算效率，并且返回到接口的List中","s":"3.1数据类型设计","u":"/docs/Work/重构看板","h":"#31数据类型设计","p":468},{"i":492,"t":"接口完成后需要发布上线后进行测试，此次记录具体步骤： 将本地开发分支合并dev，发布dev 到Jenkins中发布测试机 Jenkins中可以看到对应的分支配置文件 启动后可以到eureka中查看网关，对应在yml配置文件中 走网关到application中 eureka会把几个服务器管理起来，访问服务的时候走eureka的网关去访问，同时也可以通过网关内部访问其他应用的服务，微服务 走url的时候，网关+服务名+接口 如果出现token不被认证的错误，需要去对应网关下的BASE中开启白名单，开白名单使用部分匹配即可，类似LIKE子句 另外一种token认证的方法也可以在浏览器中获取到相应的Authorization,测试接口的时候使用Authorization方式即可","s":"4.上线测试手记","u":"/docs/Work/重构看板","h":"#4上线测试手记","p":468},{"i":496,"t":"使用readPDF工具读取PDF，按页按行解析即可，获取数据逐个匹配塞进去","s":"1.PDF读取解析","u":"/docs/Work/PDF解析","h":"#1pdf读取解析","p":493},{"i":498,"t":"/* ** chenle 新加S801研控部门的PDF解析 */ PdfReader reader = null; try { reader = new PdfReader(fileName); CheckReport checkReport = new CheckReport(); String faceType = \"\"; /* ** chenle 新加S801研控部门的PDF解析 */ String isPass = \"\"; String testType=\"\"; if(StringUtils.equals(site,\"S801\")){ //S801工厂的PDF解析策略 if(pageNum==0){ pageNum = reader.getNumberOfPages(); } for(int i = 1;i <= pageNum;i++){ pageContent += PdfTextExtractor.getTextFromPage(reader, i); } checkReport.setModelName(modelName); String[] contentSplit = pageContent.split(\"\\n\"); //S801的机种名称与其他的不一样， // 单独一个循环判断机种是否重复上传 for(int i = 0;i < contentSplit.length;i++) { String[] split; String tempStr = contentSplit[i]; if (tempStr == null) { break; } split = tempStr.split(\" \"); if(i == 3){ StringBuffer sql_s801 = new StringBuffer(); sql_s801.append(\"select * from MESEXT_FIRST_CHECK_REPORT where model_name = '\"+split[3]+\"'\"); List<Map<String, Object>> sqlResult_s801 = baseFunctionService.getSqlResult(sql_s801.toString()); if(CollectionUtil.isNotEmpty(sqlResult_s801)){ return OperationResult.buildFailureResult(\"已解析过的pdf不能再次解析\"); } break; } } //S801的机种名称与其他的不一样， // 单独一个循环判断机种是否重复上传 for(int i = 0;i < contentSplit.length;i++){ String [] split; String tempStr = contentSplit[i];// System.out.printf(\"第\"+i+\"行数据为：\"+tempStr); if(tempStr == null){ break; } split = tempStr.split(\" \"); switch (i){ case 1: if(!split[1].equals(\"PASS\")){ isPass = \"NG\"; throw new RuntimeException(\"failure的文件不能上传\"); }else{ isPass = split[1]; checkReport.setResult(split[1]); checkReport.setBOMVersion(split[3]); checkReport.setPassCount(split[5]); checkReport.setPassRate(split[7]); break; } case 2: checkReport.setCheckPerson(split[1]); checkReport.setCheckTime(split[3]+\" \"+split[4]);// checkReport.setTestTime(split[4]); checkReport.setNoPassCount(split[6]); break; case 3:// checkReport.setTestType(split[3]); testType = \"首件\"; checkReport.setTestType(testType); checkReport.setModelName(split[3]); checkReport.setNoCheckCount(split[5]); checkReport.setCheckCount(split[7]); break; case 4: checkReport.setLineBody(split[1]); checkReport.setOrderCode(split[3]); checkReport.setProductCode(split[5]); break; case 5: faceType = split[1]; if(StringUtils.equals(faceType,\"T\")){ checkReport.setABSurface(\"A\"); break; } if(StringUtils.equals(faceType,\"B\")){ checkReport.setABSurface(\"B\"); break; } else{ checkReport.setABSurface(faceType); } break; default: break; } } checkReport.setSite(site); checkReport.setFileId(fileId); } //其他工厂的PDF解析策略 else{ if(pageNum == 0) { pageNum = reader.getNumberOfPages(); } for(int i=1;i<=pageNum;i++){ pageContent += PdfTextExtractor.getTextFromPage(reader, i);//读取第i页的文档内容 //System.out.println(pageContent); } String shopOrder = modelName.split(\"-\")[1]; String productCode = modelName.split(\"-\")[0]; checkReport.setProductCode(productCode); String[] contentSplit = pageContent.split(\"\\n\");// 添加面别 //是否PASS或NG for(int i = 0;i<contentSplit.length;i++){ String[] split; String tempStr = contentSplit[i]; System.out.println(i+\"行数据为：\"+contentSplit[i]); if(tempStr == null){ break; } if(i==2){ split = tempStr.split(\" \"); checkReport.setResult(split[1]); if(!\"PASS\".equals(split[1])&&StringUtils.equals(site,\"5001\")){ throw new RuntimeException(\"failure的文件不能上传\"); } if(!\"PASS\".equals(split[1])&&!StringUtils.equals(site,\"5001\")){ isPass = \"NG\"; } testType=split[3]; checkReport.setTestType(split[3]); } if(i==3){ split = tempStr.split(\" \"); checkReport.setCompany(split[1]); checkReport.setWorkClass(split[2]); checkReport.setCheckCount(split[3]); } if(i==5){ split = tempStr.split(\" \"); int length = split.length; checkReport.setModelName(modelName); checkReport.setABSurface(split[length-3]); faceType = split[length-3]; checkReport.setPassCount(split[length-1]); } if(i==6){ split = tempStr.split(\" \"); checkReport.setScanTime(split[1]); checkReport.setNoPassCount(split[split.length-1]); } if(i==7){ split = tempStr.split(\" \"); checkReport.setProcessTime(split[1]); checkReport.setOrderCode(shopOrder); checkReport.setNoCheckCount(split[split.length-1]); } if(i==9){ split = tempStr.split(\" \"); //文档解析发生了变化 第9行变得不怎么符合规则 分割后数量发生了改变 导致数组下标溢出 // 修复时为了向下兼容 故移除中文字符 //List<String> list = Arrays.asList(split); ArrayList<String> list = new ArrayList<>(Arrays.asList(split)); list.remove(\"测值时间:\"); list.remove(\"生产线别:\"); list.remove(\"通过率:\"); checkReport.setCheckTime(list.get(0)); checkReport.setLineBody(list.get(1)); checkReport.setPassRate(list.get(2)); } if(i==10){ split = tempStr.split(\" \"); if (split.length==2){ //取11行数据 split =contentSplit[11].split(\" \"); } checkReport.setTestTime(split[1]); checkReport.setProduceTime(split[3]+\" \"+split[4]); if(split.length > 5) { checkReport.setCheckPerson(split[6]); } } } checkReport.setSite(site); checkReport.setFileId(fileId); if(StringUtils.equals(faceType,\"TOP\")){ faceType = \"A\"; } if(StringUtils.equals(faceType,\"BOT\")){ faceType = \"B\"; } if(StringUtils.equals(faceType,\"ALL\")){ faceType = \"A\"; } if (StringUtils.equals(faceType,\"A\")){ faceType = \"A\"; } if (StringUtils.equals(faceType,\"B\")){ faceType = \"B\"; } } Map<String, Object> productPlan = getProductPlan(site, checkReport.getLineBody(), checkReport.getOrderCode(), faceType); String planLogUuid = null; if (Objects.nonNull(productPlan)){ planLogUuid = (String) productPlan.get(\"UUID\"); } //NG情况下进行停机 if(\"NG\".equals(isPass)) { //this.stopMounter(site, checkReport.getLineBody(), checkReport.getOrderCode(), faceType); } if(StringUtils.isNotBlank(planLogUuid)&&!StringUtils.equals(testType,\"IPQC\")){ checkReport.setPlanLogId(planLogUuid); //双套料生产的工单 允许上传多个首件报告 单套料则清空关联 if (Integer.parseInt((String)productPlan.get(\"TL\")) == 1){ clearOldRelation(planLogUuid); }else{ // 2024-05-27 双套料工单上传多个首件报告，不删除只解除关联关系 String updateSql = \"update mesext_first_check_report set plan_log_id = '' where id = :ID \"; Map<String, Object> params = new HashMap<>(); List<CheckReport> all = checkReportDao.findAllBySiteAndPlanLogIdOrderByCreatedDate(site, planLogUuid); if (all.size()>1){ String id = all.get(0).getId(); if (Objects.nonNull(id)){ params.put(\"ID\", id); int update = baseFunctionService.getUpdate(updateSql, params);// checkReportDao.deleteById(id); } } } } if(StringUtils.isBlank(planLogUuid)&&StringUtils.equals(site,\"5001\")&&!StringUtils.equals(testType,\"IPQC\")){ throw new RuntimeException(\"未找到PDF中下达/激活状态的工单\"); } //获取当前线体下达的工单获取其产品编码 与 现有的产品编码对比是否一致 List<Map<String, Object>> results = baseFunctionService.getSqlResultThrowE( \"select a.shop_order,split(b.planned_item_bo,2) item from mesext_production_plan a \" + \"left join shop_order b on a.site = b.site and a.shop_order = b.shop_order\" + \" where a.site = '\" + site + \"' and a.line_no = '\" + checkReport.getLineBody() + \"' and a.status = '10'\"); if (CollectionUtil.isEmpty(results)){// throw new RuntimeException(\"当前线体\"+checkReport.getLineBody()+\"不存在下达工单\"); } System.out.printf(String.valueOf(results)); Map<String, Object> map = results.get(0); Object itemBo = map.get(\"ITEM\"); if (!StringUtils.equals(String.valueOf(itemBo ),checkReport.getProductCode())){ throw new RuntimeException(\"当前线体\"+checkReport.getLineBody()+\"下达工单的产品编码为：\"+itemBo+\",与当前上传文件产品编码\"+checkReport.getProductCode()+\"不符\"); } checkReportDao.save(checkReport); System.out.printf(\"解析完成\"); } catch (Exception e) { throw new RuntimeException(\"解析失败，请检查pdf格式是否正确\" + e.getMessage(), e); }finally { if(reader != null) { reader.close(); } }","s":"2.解析策略","u":"/docs/Work/PDF解析","h":"#2解析策略","p":493},{"i":500,"t":"本次主要进行的是PDF流解析的重写，新增一个工厂的解析方法，难度不大，重点还是熟悉业务流程和数据库，系统的操作。","s":"3.总结","u":"/docs/Work/PDF解析","h":"#3总结","p":493},{"i":502,"t":"从yaml文件中找到oracle的信息，连接的时候记得修改为端口后面的字段 切记只用env和dev，不可使用pro oracl不同于mysql，是以表空间为单位，本次操作的是在meswip中才找到了数据表，mesext_first_check_report存放的是首次报告检测的内容","s":"3.1数据库连接","u":"/docs/Work/PDF解析","h":"#31数据库连接","p":493},{"i":504,"t":"首先在本地克隆远程master分支 new一个本地修改代码的分支：chenle_xxxx 本地修改代码 上测试机 改代码的分支chenle_xxxx进行commit checkout到dev分支，merge分支chenle_xxxx到dev中 pull一次远程，然后push 上主机也是同理，将本地分支merge到master中，切记不要将dev合并到master中 ———————————————————————————————————————— 如果将dev合并到master将会导致别人的错误bug可能发布到正式机上，引起宕机 ————————————————————————————————————————","s":"3.2Git工具使用","u":"/docs/Work/PDF解析","h":"#32git工具使用","p":493},{"i":506,"t":"出现PDF Header not found的错误 PDF文件出错，受损等等 排查read PDF类和PDFBOX类的影响 最终问题出在服务器的问题，上传PDF的服务器和测试的服务器不是同一个，但是数据库一样，会导致无法从服务器下载PDF下来并且进行解析 代码提交后依然无效，出现数组越界问题 发布正式机没发布对 TODOLIST：学习docker指令","s":"3.3 8月23日~25日BUG排查日志","u":"/docs/Work/PDF解析","h":"#33-8月23日25日bug排查日志","p":493},{"i":510,"t":"依据个人理解就是，当服务器突然发生问题的时候，正在处理的数据和已经存储好的数据不会被损坏，当服务器启动的时候，通过持久化工具进行数据恢复，避免了数据的丢失和系统的开销。Redis中由两种持久化：RDB和AOF： RDB：类似快照技术，将当前的数据快照存留成rdb文件 AOF：将数据操作指令打入队列中","s":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":507},{"i":512,"t":"指定时间间隔内，执行数据集的时间点快照 实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。Redis的数据都是在内存中，RDB保存备份的是后，执行的是全量快照，把内存的数据记录到磁盘中去。","s":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":515,"t":"Redis7以前的配置情况： Redis7的配置","s":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":507},{"i":518,"t":"修改redis.conf配置中的save《seconds》《changes》项目 修改dump文件保存路径 修改dump文件名称 触发备份 恢复 修改redis.conf配置 修改文件路径 修改文件名称：修改为xxxxx.rdb即可，我修改为dbfiename dump6379.rdb 恢复：将备份文件移动到redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb文件的，但是这个文件是空的，没有什么意义。","s":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":507},{"i":520,"t":"分为两种：save和bgsave，其中默认使用bgsave。 save：在程序执行构成会阻塞当前的redis服务器，直到持久化工作完成，也就是过程不可被其他命令终端，线上禁止使用 bgsave：Redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork一个子进程，由该进程进行复制持久化过程。","s":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":507},{"i":523,"t":"以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 默认不开启，一旦开启就是使用aof，命令为：appendonly yes。其保存的是appendonly.aof文件。工作流程如下： 1 Client作为命令的来源，会有多个源头以及源源不断的请求命令。 2 在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。 3 AOF缓冲会根据AOF缓冲区同步文件的三种写回策略将命令写入磁盘上的AOF文件。 4 随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称AOF重写)，从而起到AOF文件压缩的目的。 5 当Redis Server 服务器重启的时候会从AOF文件载入数据。","s":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":507},{"i":525,"t":"Always：同步写回，每个写命令执行完立刻同步写到磁盘 everysec：每秒写回 No：操作系统决定何时xiehui","s":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":507},{"i":528,"t":"开启AOF： 配置appendfsync为自己要的时间，一般就是everysec 配置保存路径与RDB差不多： aof文件有三种： 在redis7对应配置好:","s":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":507},{"i":530,"t":"启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集 重写原理: 1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。 2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。 3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中 4：当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中 5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似","s":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":507},{"i":532,"t":"在同时开启RDB和AOF时，重启时只会加在AOF不会加在RDB。 RDB能够在指定时间间隔内对数据进行快照。 AOF对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以Reids协议追加保存每次写的操作到文件末尾。 推荐使用RDB和AOF混合方式 1 开启混合方式设置 设置aof-use-rdb-preamble的值为 yes yes表示开启，设置为no表示禁用 2 RDB+AOF的混合方式---------> 结论：RDB镜像做全量持久化，AOF做增量持久化 先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。----》AOF包括了RDB头部+AOF混写","s":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":507},{"i":536,"t":"在Redis官网中下载Redis7版本压缩包后，使用XFTP软件将本地的Redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar -zxvf redis-7.0.0.tar.gz) 进入redis-7.0.0目录下，执行make && make install命令 默认安装路径在/root/usr/local/bin下，ll列举redis-7.0.0中的文件，有两个为redis-cli和redis-server这两个分别是客户端和服务器启动命令。 需要对redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredis中，同时进行配置","s":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":533},{"i":538,"t":"默认daemonize no 改为daemonize yes 默认protected-mode yes改为protected-mode no 默认bind 127.0.0.1改为 直接注释掉(默认bind 127.0.0.1只能本机访问)或改成本机IP地址，否则影响远程IP连接 添加redis密码改为 requirepass 你自己设置的密码 记得重启才会有效","s":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":533},{"i":540,"t":"cd 进入/myredis目录下 redis-server /myredis/redis.conf redis-cli 即可进入 也可以redis-cli -a password进入","s":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":533},{"i":542,"t":"单实例关闭：redis-cli -a password shutdown 多实例关闭：指定端口关闭：redis-cli -p 6379 shutdown","s":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":533},{"i":545,"t":"string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M","s":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":533},{"i":548,"t":"EX：Key在多少秒之后过期 PX：Key在多少毫秒后过期 NX：当Key不存在的时候，才创建Key，等效于setnx XX：当Key存在的时候，覆盖Key","s":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":533},{"i":550,"t":"只有是数字才能进行加减 INCR key：递增 INCRBY key increment：增加指定的整数 DECR key：递减数值 DECRBY key decrement：减少指定的整数","s":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":533},{"i":552,"t":"List（列表），Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)","s":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":533},{"i":554,"t":"一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加；如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。 它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。","s":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":533},{"i":556,"t":"Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）","s":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":533},{"i":558,"t":"KV模式不变，但是V是一个键值对，Map<String,Map<Object,Object>>","s":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":533},{"i":560,"t":"Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)","s":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":533},{"i":563,"t":"Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232−12^{32} - 1232−1","s":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":533},{"i":565,"t":"在Set的基础上，每个Value的值前加一个Score分数值，之前Set是K1,V1,Zset会变成K1,V1,Score1","s":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":533},{"i":568,"t":"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括添加地理位置的坐标。获取地理位置的坐标。计算两个位置之间的距离。根据用户给定的经纬度坐标来获取指定范围内的地理位置集合","s":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":533},{"i":570,"t":"移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？ 地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆 使用如下SQL即可：select taxi from position where x0-r < x < x0 + r and y0-r < y < y0+r、 但是会有如下问题： 查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的 这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。 精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差、","s":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":533},{"i":572,"t":"GEOADD：多个经度、维度、位置名称添加到Key中 GEOPOS：从键里面返回所有给定位置元素的位置 GEODIST：返回两个给定位置之间的距离 GEORADIUS：以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素 GEORAIUSBYMEMBER，跟上条类似 GEOHASH：返回一个或者多个位置元素的GeoHash","s":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":533},{"i":574,"t":"HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。","s":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":533},{"i":576,"t":"Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。 简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。 而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。","s":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":533},{"i":578,"t":"一句话总结就是Redis版本的MQ消息中间件+阻塞队列。 实现消息队列，支持消息的持久化，支持自动生成全局唯一 ID，支持ACK确认消息模式，支持消费组模式，让消息队列更加稳定和可靠。 看起来就是一个消息链表，将所有的消息都串起来，每个消息都有一个唯一的ID和对应的内容 1 Message Content 消息内容 2 Consumer group 消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者 3 Last_delivered_id 游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。 4 Consumer 消费者，消费组中的消费者 5 Pending_ids 消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢","s":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":533},{"i":580,"t":"队列相关指令 消费组相关指令 具体实例参见脑图","s":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":533}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/4",[0,1.373]],["t/6",[1,0.269,2,6.456,3,6.456,4,6.456,5,6.456]],["t/8",[1,0.263,2,6.323,3,6.323,4,6.323,5,6.323,6,7.579]],["t/11",[1,0.369,7,4.985,8,5.975,9,4.094,10,5.975]],["t/13",[0,1.096,1,0.345,2,5.626,3,5.626,4,5.626,5,5.626,11,6.743,12,2.158]],["t/16",[0,1.454,1,0.258,7,6.195,13,7.426,14,7.426,15,2.437]],["t/21",[1,0.281,15,2.652,16,5.162]],["t/23",[0,1.207,1,0.346,17,6.195,18,6.684]],["t/25",[0,1.435,1,0.307,17,6.652,18,5.559,19,6.176,20,6.176,21,6.176,22,4.606,23,6.176,24,6.176,25,6.176,26,6.176]],["t/28",[1,0.346,17,6.195,27,7.426,28,7.426]],["t/30",[1,0.269,29,7.739,30,6.076,31,7.739,32,7.739]],["t/36",[1,0.322,33,3.65,34,7.906]],["t/38",[0,1.401,1,0.204,9,5.908,12,2.471,35,4.905,36,5.879,37,5.879,38,5.291,39,5.879,40,5.879,41,5.879,42,5.292,43,5.879,44,5.879]],["t/40",[0,1.268,9,6.313,12,1.912,35,4.985,38,5.954,42,7.024,45,5.975,46,5.975,47,5.975,48,5.975,49,5.975,50,5.975]],["t/42",[1,0.293]],["t/44",[1,0.287,51,8.262]],["t/47",[0,1.355,1,0.359,33,4.212]],["t/49",[33,3.903]],["t/53",[1,0.351,35,6.456]],["t/55",[52,7.906,53,7.906,54,7.906,55,7.906]],["t/57",[0,1.324,1,0.312,12,2.045,56,6.391,57,6.391,58,6.391,59,6.391,60,5.018,61,4.222,62,3.25,63,2.801,64,6.391]],["t/60",[1,0.314,65,7.579,66,7.579,67,7.579,68,5.95]],["t/62",[0,1.116,1,0.296,33,3.172,38,5.844,63,3.011,69,6.87,70,6.87,71,6.87,72,6.87]],["t/64",[1,0.341,73,5.954,74,5.323,75,7.137,76,3.707,77,6.424]],["t/66",[1,0.333,73,6.195,74,5.538,77,6.684,78,7.426]],["t/68",[1,0.314,73,6.323,74,5.653,79,7.579,80,7.579]],["t/71",[1,0.314,81,7.579,82,6.822,83,7.579,84,7.579]],["t/73",[0,1.436,1,0.307,85,7.278,86,7.278,87,7.278,88,7.278]],["t/75",[0,1.439,1,0.35,33,4.47,82,3.867,89,4.296,90,4.296,91,4.296,92,4.296,93,4.296,94,4.296,95,4.296,96,4.296,97,3.373,98,4.296,99,4.296,100,4.296]],["t/80",[0,1.179,1,0.352,101,4.246,102,3.77,103,4.246,104,2.713,105,4.84,106,4.073,107,4.246,108,6.055,109,4.246,110,3.822,111,6.644,112,4.246,113,6.165,114,4.246,115,3.334,116,2.63]],["t/83",[0,1.207,1,0.311,12,2.863,117,7.426,118,7.426]],["t/85",[1,0.287,119,8.262]],["t/87",[0,1.509,12,2.53,120,7.906]],["t/90",[1,0.293]],["t/92",[0,0.78,1,0.348,9,3.29,12,1.537,63,2.104,76,2.494,105,3.77,121,4.802,122,4.802,123,4.802,124,4.802,125,4.802,126,4.802,127,4.802,128,4.802,129,4.802,130,4.802,131,4.802,132,4.802,133,4.802,134,4.802,135,4.802,136,4.802,137,4.802]],["t/94",[1,0.281,138,8.08,139,8.08]],["t/96",[1,0.318,140,7.739,141,6.966,142,6.456]],["t/98",[0,0.961,1,0.363,12,1.285,33,1.854,102,3.073,116,2.486,143,4.014,144,4.014,145,3.613,146,3.151,147,4.014,148,4.014,149,4.014,150,4.802,151,4.936,152,4.014,153,4.014,154,3.613,155,4.014,156,4.014]],["t/100",[1,0.318,157,7.739,158,7.739,159,7.739]],["t/102",[0,1.057,1,0.286,142,6.876,150,4.028,160,6.504,161,6.504,162,6.504,163,6.504,164,6.504,165,5.854,166,6.504,167,6.504]],["t/104",[0,1.375,1,0.326,12,0.728,150,4.842,165,2.046,168,2.273,169,2.273,170,2.273,171,2.273,172,2.273,173,1.897,174,2.273,175,8.773,176,6.773,177,2.273,178,2.273,179,2.273,180,4.857,181,2.273,182,2.273,183,6.784,184,7.531,185,2.273,186,2.273,187,2.273,188,2.273,189,2.273,190,2.273,191,5.661,192,2.273,193,2.273,194,2.046,195,2.273,196,2.273,197,2.273,198,2.273,199,2.046,200,2.273,201,2.273]],["t/106",[0,0.852,1,0.354,33,2.944,102,3.312,116,3.246,142,2.85,145,3.075,150,3.949,151,2.85,173,4.372,176,4.114,194,4.717,199,3.075,202,3.416,203,1.999,204,3.416,205,4.717,206,3.075,207,3.416,208,3.416,209,3.416,210,4.717,211,3.075,212,3.416,213,3.416,214,3.416,215,3.075,216,3.416,217,3.416,218,3.416,219,3.416]],["t/108",[1,0.355,33,3.329,102,2.18,150,3.786,151,3.502,154,3.778,176,5.661,203,2.457,205,3.778,206,3.778,210,3.778,211,5.503,220,4.198,221,4.198,222,4.198,223,4.198,224,4.198,225,4.198,226,4.198,227,6.114,228,6.114]],["t/113",[1,0.364]],["t/115",[1,0.369]],["t/119",[1,0.37,229,6.282,230,6.282]],["t/121",[0,1.076,1,0.343,12,2.119,63,2.902,76,3.439,231,6.622,232,6.622,233,6.622,234,6.622]],["t/126",[0,1.076,1,0.343,235,4.537,236,6.622,237,6.622,238,6.622,239,6.622,240,6.622,241,6.622]],["t/128",[242,8.262,243,8.262]],["t/130",[1,0.331]],["t/132",[0,1.373]],["t/134",[0,1.014,1,0.331,33,3.383,38,5.282,102,3.557,106,1.764,116,3.864,203,2.526,244,2.097,245,2.097,246,2.228,247,2.097,248,2.67,249,2.67,250,2.67,251,1.992,252,2.67,253,2.67,254,2.097,255,2.67,256,2.67,257,2.67,258,2.67,259,2.404,260,2.67,261,5.432,262,5.432,263,4.531,264,2.67,265,4.316,266,6.238,267,2.67,268,4.316,269,4.316,270,2.67,271,2.67,272,3.388,273,2.67,274,2.67,275,2.67,276,2.67,277,4.316]],["t/136",[0,1.29,1,0.347,9,4.742,278,4.998,279,4.998,280,4.998,281,4.998,282,4.998,283,4.998,284,4.998,285,4.998,286,4.499,287,4.499,288,4.499,289,4.499,290,4.499,291,4.998,292,2.542,293,4.998]],["t/139",[1,0.331]],["t/141",[1,0.353]],["t/143",[1,0.367]],["t/145",[0,0.985,1,0.314,12,1.328,63,1.819,102,4.092,244,5.624,245,6.871,246,6.992,247,6.186,294,4.15,295,4.15,296,3.736,297,4.15,298,4.15,299,4.15,300,4.15,301,6.063,302,4.15,303,4.15,304,4.15,305,4.15]],["t/148",[1,0.339,38,5.302,306,5.772]],["t/150",[0,1.313,1,0.281,307,7.272]],["t/152",[12,2.425,307,6.822,308,7.579,309,7.579,310,7.579,311,7.579]],["t/156",[0,1.076,1,0.362,312,6.622,313,6.622,314,6.622]],["t/158",[1,0.331]],["t/160",[1,0.364,286,5.854,315,5.854,316,6.504,317,6.504]],["t/162",[0,1.16,1,0.35,97,5.603,315,6.424,318,7.137]],["t/165",[0,1.297,1,0.351,33,4.487,102,2.887,244,2.898,245,2.898,319,3.691,320,3.691,321,3.691,322,3.691,323,3.691,324,3.691,325,3.691,326,3.691,327,3.691,328,3.322,329,3.322,330,3.691,331,3.691,332,3.322,333,3.691,334,3.079,335,3.691]],["t/167",[1,0.296,102,4.094,173,4.114,244,5.383,245,6.688,247,3.871,328,4.438,329,4.438,332,4.438,336,4.931,337,8.519,338,4.931,339,4.931,340,6.856,341,4.931,342,4.931,343,6.856,344,4.931]],["t/170",[0,0.625,1,0.351,12,1.834,203,2.251,254,3.019,259,3.462,345,3.846,346,3.462,347,3.846,348,5.159,349,4.275,350,3.846,351,3.846,352,3.846,353,3.846,354,3.846,355,3.846,356,3.846,357,3.462,358,3.462,359,3.787,360,5.732,361,3.846,362,3.846,363,3.462,364,3.462,365,3.462,366,3.462,367,3.846,368,3.846,369,3.462,370,3.846]],["t/172",[1,0.322,254,3.871,346,4.438,348,4.438,357,4.438,358,6.171,359,3.258,363,4.438,364,4.438,365,4.438,366,6.171,369,4.438,371,4.931,372,4.931,373,6.856,374,6.856,375,3.054,376,4.931,377,4.931,378,4.931,379,3.871,380,4.931,381,4.931]],["t/174",[0,1.16,1,0.328,379,5.603,382,7.137,383,7.137,384,7.137,385,7.137]],["t/176",[386,8.262,387,6.892]],["t/178",[387,6.892,388,8.262]],["t/180",[0,0.641,1,0.365,12,1.611,16,1.528,33,1.104,63,1.729,76,2.615,235,1.639,292,3.741,387,1.995,389,2.392,390,2.392,391,2.392,392,2.392,393,2.392,394,2.392,395,2.392,396,2.703,397,4.873,398,2.392,399,3.945,400,2.853,401,5.841,402,3.945,403,5.034,404,1.784,405,2.392,406,2.392,407,2.392,408,2.392,409,2.392,410,2.392,411,2.392]],["t/183",[412,8.452]],["t/185",[1,0.364,413,6.504,414,6.504,415,5.854,416,6.504]],["t/187",[1,0.342,417,5.61,418,5.61,419,5.61,420,5.61,421,5.61,422,5.61,423,5.61,424,5.61,425,5.61,426,5.61,427,5.61,428,5.61,429,5.61,430,5.61,431,5.61,432,5.61]],["t/191",[1,0.293]],["t/193",[0,1.215,1,0.341,12,1.193,63,1.634,102,1.937,104,2.382,106,2.463,150,2.309,203,2.182,235,3.837,349,2.781,433,3.729,434,6.726,435,3.729,436,3.729,437,3.729,438,3.729,439,3.729,440,3.729,441,3.729,442,3.356,443,3.356,444,3.729,445,4.397,446,4.177,447,3.111,448,3.729,449,4.672,450,5.6,451,3.729,452,3.356,453,3.729,454,3.729]],["t/195",[0,1.284,1,0.359,12,1.586,63,1.393,102,1.651,104,2.031,106,2.101,108,5.083,110,2.862,111,5.083,115,4.784,203,1.861,215,4.462,235,2.178,334,2.652,349,2.371,442,2.862,443,2.862,445,4.784,446,2.371,447,2.652,449,4.136,455,3.179,456,3.179,457,3.179,458,3.179,459,3.179,460,2.862,461,2.267]],["t/197",[0,0.87,1,0.35,7,2.932,12,1.125,102,1.825,104,2.245,106,2.322,203,2.057,349,2.621,445,4.204,446,3.994,447,2.932,449,2.932,461,2.506,462,5.355,463,3.514,464,3.514,465,3.514,466,3.514,467,3.514,468,3.514,469,3.514,470,3.514,471,3.514,472,5.355,473,3.514,474,3.514,475,5.355,476,5.355,477,3.163,478,3.514,479,3.514,480,3.514,481,3.514,482,3.514,483,3.514,484,3.514]],["t/199",[1,0.293]],["t/201",[0,0.618,1,0.352,12,1.218,16,4.351,68,2.988,102,1.977,104,2.432,106,2.515,150,2.357,203,2.227,251,4.242,254,2.988,359,2.515,375,2.357,446,2.839,461,2.714,485,3.806,486,3.806,487,3.806,488,3.806,489,3.806,490,3.806,491,3.426,492,3.175,493,3.806,494,3.806,495,3.806,496,3.806,497,3.806,498,3.806,499,3.806,500,3.806,501,3.806,502,3.806]],["t/203",[0,0.784,1,0.347,12,0.983,63,2.115,102,3.096,104,3.084,108,5.635,115,6.118,116,1.903,150,1.903,203,1.798,460,4.345,503,3.073,504,3.073,505,3.073,506,3.073,507,3.073,508,3.073,509,3.073,510,3.073,511,4.345,512,4.827,513,6.755,514,3.073,515,4.827,516,3.073,517,3.073,518,3.073,519,3.073,520,3.073,521,3.073,522,3.073,523,3.073,524,3.073,525,3.073,526,3.073,527,3.073]],["t/205",[]],["t/207",[0,1.211,1,0.321,12,1.425,68,5.008,102,2.313,104,2.845,106,2.942,150,3.951,203,2.606,251,4.758,461,3.175,491,4.008,492,3.714,528,4.452,529,4.452,530,4.452,531,4.452,532,4.452,533,4.452,534,4.452,535,6.379,536,4.452,537,4.452,538,4.452,539,4.452,540,4.452,541,4.452,542,4.452]],["t/209",[0,0.857,1,0.36,9,2.856,12,0.819,63,1.121,76,1.329,104,3.371,106,3.485,176,2.009,203,2.44,251,3.935,287,2.303,288,2.303,289,2.303,290,2.303,292,1.301,396,1.753,415,2.303,445,3.273,446,1.908,461,1.825,543,2.559,544,2.559,545,2.559,546,2.559,547,2.559,548,2.559,549,2.559,550,2.559,551,2.559,552,2.559,553,2.559,554,2.559,555,2.559,556,2.559,557,2.559,558,2.559,559,4.748,560,2.559,561,2.559,562,2.559,563,2.559,564,2.559,565,2.559,566,2.559,567,2.559,568,2.559,569,2.559,570,2.559]],["t/212",[0,0.483,1,0.348,16,3.005,63,1.303,68,2.334,102,3.445,104,3.005,111,2.481,115,3.692,203,2.753,292,1.512,349,2.218,511,4.233,559,6.504,571,2.973,572,2.973,573,2.973,574,2.973,575,2.973,576,2.973,577,2.973,578,2.973,579,2.973,580,2.973,581,2.973,582,2.973,583,2.973,584,2.973,585,2.973,586,2.973,587,2.973,588,4.703,589,4.703,590,2.973,591,2.973,592,2.973,593,2.973,594,2.973,595,2.973,596,2.973,597,2.973,598,2.973,599,2.973,600,2.973,601,2.973]],["t/214",[0,1.01,1,0.344,9,6.069,12,1.375,33,1.984,63,1.883,76,2.231,150,2.661,602,4.296,603,4.296,604,4.296,605,4.296,606,4.296,607,4.296,608,4.296,609,4.296,610,3.584,611,4.296,612,3.867,613,4.296,614,4.296,615,4.296,616,4.296,617,4.296,618,4.296,619,4.296]],["t/216",[1,0.36,12,1.136,334,7.837,452,5.874,461,5.891,620,9.062,621,3.548,622,6.527,623,3.548]],["t/218",[0,1.285,12,2.53,63,3.465,76,4.106]],["t/220",[1,0.353]],["t/223",[1,0.269,306,5.772,624,7.739,625,7.739,626,7.739]],["t/225",[627,8.452]],["t/227",[1,0.281,306,6.026,628,8.08]],["t/231",[1,0.362,629,8.529,630,6.87]],["t/233",[1,0.345]],["t/235",[1,0.319,15,2.214,631,6.743,632,6.743,633,6.743,634,6.743,635,6.743,636,5.294,637,6.743,638,6.743]],["t/238",[1,0.36,15,1.517,639,3.855,640,5.464,641,4.621,642,4.621,643,4.621,644,4.621,645,4.621,646,4.621,647,4.621,648,6.55,649,5.464,650,6.55,651,4.621,652,4.621,653,4.621]],["t/240",[1,0.35,16,1.915,272,3.716,654,4.926,655,2.998,656,2.998,657,3.376,658,2.998,659,3.376,660,2.998,661,2.698,662,2.998,663,2.998,664,2.998,665,2.998,666,3.748,667,4.734,668,4.734,669,2.998,670,2.998,671,2.998,672,2.998,673,2.998,674,3.376,675,2.998,676,2.998,677,2.698,678,2.998,679,2.998,680,2.998,681,2.998,682,2.998,683,2.998,684,2.998,685,2.501,686,2.353,687,2.998,688,2.998,689,2.998,690,2.998,691,4.261,692,2.998,693,2.236]],["t/242",[1,0.204,639,4.905,654,4.934,657,4.193,666,3.756,677,5.292,691,5.292,694,9.157,695,5.879,696,5.879,697,5.879,698,5.879,699,5.879,700,5.879,701,5.879,702,5.879]],["t/245",[1,0.222,703,6.391,704,6.391,705,9.451,706,6.391,707,7.336,708,6.391,709,6.391,710,6.391,711,6.391,712,6.391]],["t/247",[1,0.281,713,8.08,714,8.08]],["t/249",[1,0.258,715,7.426,716,7.426,717,6.684,718,7.426,719,7.426,720,7.426]],["t/251",[1,0.33,717,6.551,721,7.278,722,7.278,723,7.278,724,7.278]],["t/253",[725,8.262,726,8.262]],["t/255",[1,0.281,727,8.08,728,8.08]],["t/257",[729,8.262,730,8.262]],["t/262",[1,0.327,731,8.08]],["t/264",[1,0.356,732,6.424,733,2.313,734,5.954]],["t/266",[1,0.33,734,7.373,735,9.517]],["t/268",[1,0.255,733,2.878,734,7.967,736,5.443,737,5.443,738,4.541,739,5.443,740,5.443,741,5.443,742,5.443,743,5.443,744,5.443,745,5.443,746,4.899,747,5.443,748,5.443]],["t/271",[1,0.33,306,5.428,749,7.278,750,6.072,751,7.278,752,7.278]],["t/276",[1,0.337,753,5.786,754,8.747,755,7.144,756,5.786,757,4.316,758,5.786,759,5.786]],["t/278",[760,8.452]],["t/280",[1,0.28,649,6.725,757,6.639,761,6.282,762,6.282,763,6.725,764,5.654,765,6.282,766,5.241,767,6.282,768,5.241]],["t/282",[1,0.284,16,2.88,22,3.362,235,3.088,649,3.76,738,3.76,754,4.057,755,5.893,757,4.8,763,3.76,764,4.057,766,3.76,769,4.507,770,3.539,771,4.507,772,4.057,773,6.435,774,4.507,775,6.435,776,4.507,777,4.507,778,4.057,779,4.507,780,4.507,781,4.057,782,4.507,783,4.507,784,4.507,785,4.507,786,4.507,787,4.507]],["t/285",[1,0.329,38,2.385,263,2.904,732,3.133,768,4.435,788,5.317,789,3.481,790,3.481,791,3.481,792,3.481,793,3.481,794,3.481,795,3.481,796,3.481,797,2.596,798,5.317,799,5.317,800,3.481,801,3.481,802,3.481,803,3.481,804,3.481,805,3.481,806,3.481,807,5.317,808,5.317,809,3.481,810,3.481,811,5.317,812,3.133,813,3.481,814,3.481,815,3.481,816,3.133,817,3.481,818,3.481,819,3.481,820,3.133,821,1.936,822,3.481,823,3.481,824,3.481,825,3.481,826,3.481,827,3.481]],["t/287",[1,0.316,74,2.182,246,2.441,685,2.441,738,5.484,757,2.182,766,2.441,768,2.441,772,4.18,778,6.453,781,5.916,797,3.463,812,2.634,828,2.926,829,3.502,830,7.169,831,2.926,832,2.926,833,2.926,834,2.926,835,2.926,836,5.916,837,2.926,838,2.926,839,4.644,840,2.926,841,2.926,842,2.926,843,5.197,844,2.634,845,4.644,846,4.644,847,2.926,848,2.926,849,2.926,850,1.553,851,2.926,852,2.005,853,2.926,854,4.644,855,2.926,856,2.926,857,2.634]],["t/292",[1,0.361,375,3.641,666,4.934,850,4.1,852,4.028,858,5.292,859,5.292,860,3.641]],["t/294",[0,1.255,1,0.351,15,1.93,850,3.121,852,4.028,861,5.879,862,5.879,863,5.292,864,3.641,865,1.835,866,1.812,867,1.835]],["t/296",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,868,6.301]],["t/298",[1,0.361,15,2.408,733,2.377,829,2.659,869,5.443,870,5.443,871,5.443,872,5.443,873,5.443,874,5.443,875,5.443]],["t/300",[1,0.358,12,1.578,733,2.761,821,2.743,876,4.931,877,3.379,878,2.743,879,2.363,880,4.931,881,4.931,882,4.114,883,4.931,884,4.931,885,4.931,886,4.931,887,4.931]],["t/302",[0,0.971,1,0.359,733,2.529,829,2.919,865,1.865,866,1.842,867,1.865,888,5.975,889,4.261]],["t/304",[0,1.327,1,0.358,12,1.104,62,1.754,733,2.078,829,1.684,865,1.076,866,1.063,867,1.076,879,1.652,890,3.448,891,3.175,892,2.867,893,5.278,894,1.918,895,1.918,896,1.966,897,1.831,898,3.448,899,2.278,900,1.918,901,2.707,902,1.592,903,3.104,904,3.104,905,3.448,906,2.459,907,2.707,908,2.572,909,3.448]],["t/306",[0,1.288,1,0.364,15,1.496,62,2.318,63,1.252,292,1.453,733,2.102,829,2.226,865,0.892,866,0.881,867,0.892,877,3.122,878,1.589,891,1.719,892,2.475,900,2.535,910,2.858,911,1.719,912,2.243,913,2.243,914,2.243,915,2.243,916,2.243,917,1.826,918,1.77,919,1.629,920,1.958,921,1.958,922,1.888,923,1.888,924,1.77]],["t/308",[0,1.187,1,0.358,12,1.375,15,2.041,76,3.229,359,2.838,404,3.204,733,2.368,865,1.341,866,1.324,867,1.341,924,2.661,925,4.296,926,4.881,927,3.204,928,3.584,929,2.584,930,3.373,931,4.296]],["t/310",[0,1.141,1,0.365,12,1.529,15,0.995,33,0.809,76,3.07,404,1.307,733,2.275,829,1.481,865,0.547,866,0.54,867,0.547,877,3.273,878,0.975,879,1.453,889,1.25,891,1.054,892,1.647,900,3.287,901,1.376,911,1.054,912,1.376,913,1.376,914,1.376,915,1.376,916,1.376,917,1.12,918,1.085,919,0.999,920,1.201,921,1.201,922,1.158,923,1.158,924,1.878,926,1.376,927,1.307,928,1.462,929,2.411,930,1.376,932,1.752,933,1.752,934,1.937,935,2.53,936,1.201,937,2.53,938,1.752,939,1.462,940,1.462]],["t/312",[0,1.113,1,0.358,12,1.231,15,1.881,76,3.559,404,2.868,733,2.632,865,1.2,866,1.186,867,1.2,877,3.927,900,3.188,924,2.382,926,3.019,927,2.868,928,3.208,929,2.313,930,3.019,939,3.208,940,3.208,941,3.846,942,3.462]],["t/314",[0,0.996,1,0.358,12,1.026,15,1.053,33,2.829,61,2.119,62,1.631,63,1.406,76,1.666,397,2.676,733,1.986,821,1.784,850,1.703,865,1.001,866,0.989,867,1.001,879,1.537,891,1.929,892,1.742,894,1.784,895,1.784,896,1.829,897,1.703,899,2.119,902,1.481,907,2.518,927,2.392,934,2.049,943,3.207,944,3.207,945,3.207,946,3.207,947,2.887,948,3.207,949,2.887,950,2.887,951,2.887,952,2.887,953,3.207]],["t/316",[0,1.187,1,0.358,62,2.185,733,2.015,865,1.341,866,1.324,867,1.341,879,2.058,894,2.39,895,2.39,896,2.45,897,2.281,902,1.984,907,3.373,917,2.745,934,2.745,954,4.296,955,4.296,956,4.296,957,3.867,958,4.296,959,3.867,960,4.296]],["t/318",[0,0.891,1,0.36,12,1.756,15,2.065,33,1.251,62,1.378,63,1.188,375,1.678,612,3.931,733,2.236,865,0.846,866,0.835,867,0.846,878,1.507,892,1.472,894,1.507,895,1.507,900,3.051,917,1.731,918,1.678,919,1.545,920,1.857,921,1.857,922,1.79,923,1.79,924,2.705,926,2.127,929,2.627,930,2.127,937,2.261,939,2.261,940,2.261,961,2.71,962,2.71,963,4.367,964,2.439,965,2.71,966,2.127,967,2.71,968,2.71]],["t/320",[0,1.094,1,0.354,666,4.3,733,2.181,850,2.55,865,1.499,866,1.48,867,1.499,879,2.301,902,2.217,929,2.889,934,3.068,936,3.29,969,4.802,970,4.802,971,4.322,972,2.889,973,3.77,974,4.802]],["t/322",[0,1.313,1,0.347,61,2.216,666,2.143,733,1.087,821,1.865,850,1.781,860,2.077,864,2.077,865,1.047,866,1.034,867,1.047,877,2.298,879,1.607,889,2.392,902,1.549,934,2.143,935,2.798,972,2.017,973,2.633,975,3.354,976,2.143,977,3.019,978,3.019,979,3.019,980,3.019,981,3.019,982,2.143,983,2.143,984,2.077,985,2.143,986,3.854,987,4.495,988,2.143,989,3.019,990,2.143,991,2.392,992,3.019,993,2.143,994,3.019,995,2.392]],["t/324",[0,1.313,1,0.345,15,1.101,61,2.216,666,2.143,733,1.087,821,1.865,850,1.781,860,2.077,864,2.077,865,1.047,866,1.034,867,1.047,877,2.298,879,1.607,889,2.392,902,1.549,934,2.143,935,2.798,972,2.017,973,2.633,976,2.143,977,3.019,978,3.019,979,3.019,980,3.019,981,3.019,982,2.143,983,2.143,984,2.077,985,2.143,986,3.854,987,4.495,988,2.143,989,3.019,990,2.143,991,2.392,992,3.019,993,2.143,994,3.019,995,2.392,996,3.354]],["t/326",[0,0.977,1,0.356,60,3.222,62,3.058,292,2.087,359,2.711,733,1.33,865,1.281,866,1.265,867,1.281,877,2.812,878,2.283,879,1.966,894,2.283,895,2.283,896,2.34,897,2.179,902,1.895,929,2.469,934,2.622,997,4.104,998,4.104,999,4.104,1000,4.104,1001,3.694,1002,4.104,1003,3.694,1004,2.711]],["t/328",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,1005,7.001]],["t/330",[0,1.116,1,0.346,33,3.172,865,2.144,866,2.118,867,2.144,1006,6.87]],["t/333",[0,0.594,1,0.333,15,3.29,375,2.263,693,2.726,733,1.184,821,2.033,850,2.929,852,3.78,858,3.289,859,3.289,860,2.263,864,2.263,865,1.141,866,1.127,867,1.141,902,1.687,972,2.198,976,2.335,982,2.335,983,2.335,984,2.263,985,2.335,988,2.335,990,2.335,993,2.335,1004,3.645,1007,3.289]],["t/335",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,868,6.301]],["t/337",[0,0.812,1,0.362,899,3.302,913,3.924,1008,4.998,1009,4.998,1010,4.998,1011,4.998,1012,4.998,1013,4.998,1014,4.998,1015,4.998,1016,4.998,1017,4.998,1018,4.998,1019,4.998]],["t/339",[0,1.211,1,0.356,15,2.291,62,1.409,733,1.441,821,1.541,850,2.361,860,1.716,864,1.716,865,0.865,866,0.854,867,0.865,879,2.668,894,1.541,895,1.541,896,1.58,897,1.471,902,1.28,934,3.558,972,1.667,976,1.771,982,1.771,983,2.841,984,1.716,985,1.771,988,1.771,990,1.771,993,1.771,1020,2.771,1021,2.771,1022,2.494,1023,2.494,1024,2.494,1025,2.494,1026,2.494,1027,2.494,1028,2.176,1029,3.972,1030,4.002,1031,2.494]],["t/341",[0,1.14,1,0.35,15,2.489,733,1.651,821,1.832,850,1.749,860,2.04,864,2.04,865,1.028,866,1.015,867,1.028,879,2.986,902,1.521,934,3.981,972,1.981,976,2.104,982,2.104,983,2.104,984,2.04,985,2.104,988,2.104,990,2.104,993,2.104,1022,2.964,1023,2.964,1024,2.964,1025,2.964,1026,2.964,1027,2.964,1028,2.586,1029,4.444,1030,4.586,1031,2.964,1032,3.294]],["t/343",[0,1.231,1,0.356,15,2.756,375,1.585,693,1.908,733,1.71,821,2.319,850,2.213,852,2.856,860,1.585,863,2.303,864,2.582,865,0.799,866,0.789,867,0.799,902,1.181,972,2.508,976,1.635,982,2.664,983,2.664,984,2.582,985,2.664,988,2.664,990,1.635,993,1.635,1007,2.303,1033,2.559,1034,4.169,1035,4.169,1036,2.559,1037,2.559,1038,2.559,1039,2.559,1040,2.559,1041,2.559,1042,4.169,1043,2.559]],["t/345",[0,1.096,1,0.351,15,2.214,865,2.105,866,2.079,867,2.105,1044,6.743]],["t/347",[0,1.138,1,0.339,12,2.24,865,2.185,866,2.158,867,2.185,1045,7.001]],["t/349",[0,1.125,1,0.36,15,1.641,375,3.096,400,2.441,693,3.728,733,2.243,829,2.441,865,1.56,866,1.541,867,1.56,911,3.007,924,3.096,1046,4.998,1047,3.924]],["t/351",[0,1.237,1,0.36,12,1.479,15,1.517,62,2.35,400,2.257,733,1.497,829,2.257,865,1.442,866,1.424,867,1.442,894,2.57,895,2.57,896,2.635,897,2.453,911,3.94,1047,3.628,1048,4.621]],["t/353",[0,1.229,1,0.359,400,2.783,733,1.846,829,2.783,865,1.778,866,1.756,867,1.778,911,3.427,1047,4.472,1049,5.697]],["t/355",[0,0.926,1,0.356,12,1.823,15,1.87,400,2.783,733,1.846,829,2.783,865,1.778,866,1.756,867,1.778,911,3.427,1047,4.472,1050,5.697]],["t/357",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,1051,7.001]],["t/359",[0,1.048,1,0.357,12,1.114,15,2.117,30,2.733,61,2.3,62,1.77,292,1.77,396,2.385,400,2.597,733,2.09,829,1.7,865,1.086,866,1.073,867,1.086,879,1.668,891,2.094,892,2.888,894,1.936,895,1.936,896,1.985,897,1.848,899,2.3,900,1.936,902,1.607,906,2.483,908,2.596,911,2.094,1029,2.483,1052,3.481,1053,2.904,1054,3.481]],["t/361",[0,1.284,1,0.365,15,1.487,62,2.303,63,1.243,292,1.442,400,2.212,733,2.093,829,2.212,865,0.885,866,0.874,867,0.885,878,1.577,891,1.706,892,2.46,900,2.519,901,2.226,911,1.706,912,2.226,914,2.226,915,2.226,916,2.226,917,1.812,918,1.756,919,1.617,920,1.943,921,1.943,922,1.873,923,1.873,924,1.756,1055,2.836]],["t/363",[0,1.16,1,0.367,12,0.863,15,1.795,33,1.246,63,1.182,396,1.848,400,2.126,707,2.428,733,2.034,829,2.126,865,0.478,866,0.472,867,0.478,878,1.501,889,1.924,891,1.623,892,2.364,900,3.042,901,2.118,911,1.623,912,2.118,914,2.118,915,2.118,916,2.118,917,1.724,918,1.671,919,1.538,920,1.848,921,1.848,922,1.782,923,1.782,924,1.671,929,1.623,937,2.251,1056,1.533,1057,2.698,1058,2.698]],["t/365",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,1059,7.001]],["t/367",[0,1.264,1,0.359,12,1.701,15,1.143,292,1.77,396,3.643,400,1.7,733,1.128,829,1.7,865,1.086,866,1.073,867,1.086,879,1.668,891,3.198,892,2.888,894,1.936,895,1.936,896,1.985,897,1.848,899,2.3,900,1.936,902,1.607,906,2.483,908,2.596,911,2.094,936,2.385,957,3.133,1060,3.481,1061,3.481,1062,3.481,1063,3.481]],["t/369",[0,1.129,1,0.357,12,1.035,15,2.613,61,2.138,62,2.556,63,1.418,292,1.645,397,2.699,400,1.58,733,1.629,821,1.8,865,1.01,866,0.997,867,1.01,879,1.55,892,2.73,894,1.8,895,1.8,896,1.845,897,1.718,900,1.8,902,1.494,906,2.307,911,1.946,917,3.211,922,2.138,923,2.138,959,2.912,1029,2.307,1064,3.236,1065,3.236,1066,3.236,1067,3.236]],["t/371",[0,0.985,1,0.358,15,1.99,76,2.156,292,3.643,733,1.965,865,1.295,866,1.279,867,1.295,878,2.308,892,2.254,900,2.308,917,2.652,918,2.57,919,2.366,920,2.844,921,2.844,922,2.742,923,2.742,924,2.57,1068,4.15,1069,4.15,1070,4.15]],["t/373",[0,1.142,1,0.361,15,2.306,62,2.041,63,1.759,292,2.041,400,1.961,733,1.917,865,1.253,866,1.237,867,1.253,878,2.233,892,2.18,900,2.233,917,2.565,918,2.486,919,2.289,920,2.75,921,2.75,922,2.652,923,2.652,924,2.486,1071,4.014]],["t/375",[0,1.138,1,0.339,15,2.298,865,2.185,866,2.158,867,2.185,1072,7.001]],["t/377",[0,1.164,1,0.355,12,1.328,15,1.362,61,2.742,62,2.111,375,2.57,400,2.027,693,3.095,733,1.965,865,1.295,866,1.279,867,1.295,878,2.308,879,1.989,894,2.308,895,2.308,896,2.366,897,2.204,902,1.916,918,3.755,1004,2.742,1029,2.96,1073,4.15,1074,4.15,1075,4.15]],["t/379",[0,0.6,1,0.357,12,1.181,15,1.212,292,1.877,396,2.529,400,1.803,733,2.411,829,1.803,865,1.152,866,1.138,867,1.152,878,2.053,879,1.769,882,3.079,891,2.22,892,2.005,899,2.439,900,2.053,902,1.704,906,2.632,908,2.753,918,2.286,936,2.529,964,3.322,966,4.364,1076,3.691,1077,3.691,1078,3.691,1079,3.691,1080,3.691,1081,3.691]],["t/381",[0,1.105,1,0.359,12,1.365,61,2.818,292,2.169,396,2.923,400,3.021,733,2.484,829,2.084,865,0.822,866,0.811,867,0.822,878,2.373,879,2.044,882,3.559,891,2.566,892,2.317,899,2.818,900,2.373,902,1.97,906,3.042,908,3.182,918,2.642,966,3.349,1029,3.042,1053,3.559,1082,2.632,1083,4.266]],["t/383",[0,1.096,1,0.351,15,2.214,865,2.105,866,2.079,867,2.105,1084,6.743]],["t/385",[0,1.113,1,0.358,15,1.262,62,1.956,76,1.998,400,1.879,666,2.457,733,1.858,865,1.2,866,1.186,867,1.2,878,2.139,894,2.139,895,2.139,896,2.193,897,2.042,902,1.776,913,3.019,929,2.313,987,2.743,1003,5.159,1004,2.541,1085,3.846,1086,3.846,1087,3.846,1088,3.846,1089,3.846,1090,3.846,1091,3.846]],["t/387",[0,1.204,1,0.364,15,1.814,865,1.724,866,1.703,867,1.724,878,3.073,929,3.324,1092,5.525,1093,5.525]],["t/389",[0,1.001,1,0.358,12,1.608,15,1.062,62,1.645,76,3.2,292,1.645,400,1.58,404,2.413,666,2.067,733,1.629,821,1.8,850,1.718,865,1.01,866,0.997,867,1.01,879,1.55,889,2.307,891,1.946,892,2.73,894,1.8,895,1.8,896,1.845,897,1.718,899,2.138,902,1.494,907,2.54,927,2.413,942,2.912,947,2.912,949,2.912,950,2.912,951,2.912,952,2.912,991,3.584,1094,3.236,1095,3.236]],["t/391",[0,0.961,1,0.353,12,1.285,15,1.942,62,2.041,400,1.961,733,2.277,850,3.141,865,1.253,866,1.237,867,1.253,879,1.923,894,2.233,895,2.233,896,2.289,897,2.131,902,1.854,929,2.415,936,2.75,971,5.325,972,2.415,1004,3.909,1096,4.014,1097,4.014,1098,4.014,1099,4.014]],["t/393",[0,1.036,1,0.354,15,2.093,63,1.497,400,1.669,733,1.107,821,1.9,850,1.814,860,2.116,864,2.116,865,1.066,866,1.053,867,1.066,902,1.577,972,2.055,976,2.183,982,2.183,983,2.183,984,2.116,985,2.183,986,3.909,987,3.737,988,2.183,990,2.183,991,3.737,993,2.183,1004,2.257,1028,2.682,1100,3.416,1101,2.85,1102,2.85,1103,2.85,1104,2.85,1105,2.85,1106,2.548,1107,2.85,1108,2.85]],["t/395",[0,1.013,1,0.35,15,2.045,60,2.586,63,1.443,400,1.609,733,1.651,821,1.832,850,1.749,860,2.04,864,2.04,865,1.028,866,1.015,867,1.028,879,1.578,902,1.521,936,2.257,972,1.981,976,2.104,982,2.104,983,2.104,984,2.04,985,2.104,986,3.8,987,3.634,988,2.104,990,2.104,991,3.634,993,2.104,1004,2.176,1101,2.748,1102,2.748,1103,2.748,1104,2.748,1105,2.748,1106,2.456,1107,2.748,1108,2.748,1109,2.964,1110,3.294,1111,3.294]],["t/397",[0,1.242,1,0.357,666,4.882,733,1.875,829,2.826,865,1.806,866,1.784,867,1.806,1112,5.786,1113,4.827]],["t/399",[1,0.309,763,5.241,770,4.932,829,3.068,1114,6.282,1115,8.901,1116,6.282,1117,6.282,1118,6.282,1119,6.282,1120,6.282,1121,6.282]],["t/401",[0,1.018,1,0.349,15,2.057,63,1.456,400,1.623,733,1.077,821,1.848,850,1.764,860,2.058,864,2.058,865,1.037,866,1.025,867,1.037,879,2.458,902,1.535,904,2.991,936,2.277,972,1.999,976,2.123,982,2.123,983,2.123,984,2.058,985,2.123,986,2.479,987,3.659,988,2.123,990,2.123,991,3.659,993,2.123,1004,2.196,1028,2.609,1101,2.773,1102,2.773,1103,2.773,1104,2.773,1105,2.773,1106,2.479,1107,2.773,1108,2.773,1109,2.991,1122,3.323,1123,3.323]],["t/404",[1,0.253,306,5.428,1124,7.278,1125,7.278,1126,7.278,1127,6.072,1128,7.278,1129,7.278]],["t/407",[1,0.281,1130,8.08,1131,8.08]],["t/409",[1132,8.452]],["t/411",[1,0.351,1133,7.739]],["t/413",[1,0.293]],["t/416",[0,0.76,1,0.317,359,3.092,640,3.904,654,2.99,733,2.142,1134,4.68,1135,4.68,1136,4.68,1137,4.68,1138,4.68,1139,4.68,1140,4.68,1141,4.68,1142,3.49,1143,4.68,1144,4.68,1145,4.68,1146,4.68,1147,4.68,1148,5.514,1149,4.68,1150,4.68,1151,4.68,1152,4.212,1153,4.68,1154,4.68,1155,4.68,1156,4.68]],["t/418",[1,0.307,636,6.932,1157,6.176,1158,3.946,1159,6.176,1160,5.559,1161,6.26,1162,6.176,1163,7.973,1164,6.176,1165,6.176]],["t/421",[1,0.295,97,4.472,1161,5.937,1166,6.807,1167,6.807,1168,7.563,1169,5.697,1170,5.697,1171,5.697,1172,7.563,1173,6.807,1174,5.697,1175,5.127,1176,5.697]],["t/423",[1,0.348,116,3.05,829,1.54,973,4.757,984,1.952,995,4.321,1142,4.519,1177,3.152,1178,3.152,1179,2.837,1180,4.924,1181,4.924,1182,3.152,1183,5.055,1184,3.152,1185,3.152,1186,3.152,1187,6.06,1188,3.152,1189,3.152,1190,3.152,1191,2.63,1192,4.924,1193,4.924,1194,4.924,1195,4.924,1196,4.924,1197,3.152,1198,3.152,1199,3.152,1200,3.152,1201,3.152,1202,3.152,1203,4.924,1204,3.152]],["t/426",[1,0.275,1205,9.285,1206,7.906]],["t/428",[1,0.195,22,4.184,654,3.584,657,4,674,4,1207,5.61,1208,5.61,1209,5.61,1210,5.61,1211,5.61,1212,5.61,1213,5.61,1214,5.61,1215,5.61,1216,5.61,1217,5.61,1218,5.61,1219,5.61,1220,5.61,1221,5.61,1222,5.61,1223,5.61,1224,5.61]],["t/431",[0,0.407,1,0.351,12,0.802,33,1.157,116,2.539,141,2.256,359,1.656,375,3.221,379,4.083,857,2.256,995,1.787,1127,2.091,1142,1.869,1158,3.323,1183,2.091,1225,3.689,1226,2.091,1227,2.506,1228,2.506,1229,2.506,1230,2.506,1231,2.506,1232,2.506,1233,2.506,1234,2.506,1235,2.506,1236,2.506,1237,2.506,1238,2.506,1239,2.506,1240,2.506,1241,2.506,1242,2.256,1243,2.256,1244,4.681,1245,2.256,1246,2.256,1247,2.091,1248,2.256,1249,2.256,1250,2.256,1251,2.256,1252,2.256,1253,2.256,1254,1.787,1255,2.256,1256,2.256,1257,2.256,1258,2.256,1259,2.256,1260,2.256,1261,2.506,1262,2.506,1263,2.506,1264,2.506,1265,2.506,1266,2.506,1267,2.506,1268,2.506,1269,2.506,1270,2.506,1271,2.256,1272,1.787,1273,2.256]],["t/433",[1,0.293]],["t/435",[0,0.577,1,0.315,755,2.786,919,2.023,995,2.531,1106,2.647,1142,2.647,1158,6.158,1191,8.041,1254,2.531,1271,3.194,1272,2.531,1273,3.194,1274,3.548,1275,3.548,1276,3.548,1277,3.548,1278,3.194,1279,2.96,1280,3.548,1281,3.548,1282,3.548,1283,3.548,1284,3.548,1285,3.194,1286,3.548,1287,3.548,1288,5.395]],["t/437",[1289,7.607]],["t/439",[1,0.318,116,3.641,247,4.616,770,4.616,820,6.95,1290,5.879,1291,5.879,1292,5.879,1293,5.879,1294,5.879,1295,5.879,1296,5.879,1297,5.879,1298,5.879,1299,5.879,1300,5.879]],["t/441",[1301,8.08,1302,8.08,1303,8.08]],["t/443",[0,0.615,1,0.356,33,1.746,116,3.893,263,1.897,375,3.008,379,1.785,640,1.897,829,1.11,897,1.207,919,2.157,1113,1.897,1225,3.404,1226,3.155,1242,2.046,1243,2.046,1244,4.371,1245,2.046,1246,2.046,1247,1.897,1248,2.046,1249,2.046,1250,2.046,1251,2.046,1252,2.046,1253,2.046,1254,1.621,1255,2.046,1256,2.046,1257,2.046,1258,2.046,1259,2.046,1260,2.046,1289,2.046,1304,2.273,1305,2.273,1306,2.273,1307,2.273,1308,2.273,1309,2.273,1310,2.273,1311,2.273,1312,2.273,1313,2.273,1314,2.273,1315,2.273,1316,2.273,1317,2.273,1318,2.273,1319,2.273,1320,2.273,1321,2.273,1322,2.273,1323,2.273,1324,2.273,1325,2.273,1326,2.273,1327,2.273,1328,2.273,1329,2.273,1330,2.273,1331,2.273,1332,2.273,1333,2.273,1334,2.273,1335,2.273]],["t/445",[1336,8.452]],["t/447",[757,6.026,1337,8.08,1338,8.08]],["t/449",[1339,8.452]],["t/452",[1127,7.051]],["t/454",[1,0.293]],["t/456",[1,0.286,15,2.705,359,4.297,1158,4.156,1340,6.504,1341,8.242,1342,6.504,1343,6.504,1344,6.504,1345,6.504,1346,6.504]],["t/460",[1,0.292,16,2.243,22,1.551,235,1.425,636,2.756,654,2.243,659,2.504,674,2.504,733,1.138,919,2.002,1254,3.249,1272,1.483,1347,1.735,1348,2.08,1349,4.987,1350,5.351,1351,3.8,1352,3.8,1353,4.987,1354,4.201,1355,3.16,1356,2.08,1357,3.16,1358,2.08,1359,4.1,1360,2.08,1361,2.756,1362,2.756,1363,2.08,1364,3.8,1365,1.735,1366,2.08,1367,2.08,1368,1.735,1369,4.1,1370,1.872,1371,1.872,1372,2.08,1373,2.08,1374,2.929,1375,2.08,1376,2.08,1377,2.08,1378,2.08,1379,2.08,1380,2.08,1381,2.08,1382,2.08,1383,1.872,1384,2.08,1385,1.872,1386,2.08,1387,2.08,1388,1.872,1389,2.08,1390,1.872,1391,3.511,1392,2.08,1393,2.08,1394,2.08,1395,2.08,1396,2.08,1397,3.511,1398,2.08,1399,2.08,1400,2.08,1401,3.511,1402,2.08,1403,3.511,1404,2.08,1405,2.08,1406,2.08,1407,1.735,1408,1.872,1409,2.08,1410,2.08,1411,2.08,1412,2.08,1413,2.08,1414,2.08]],["t/463",[1,0.355,33,2.871,102,3.229,105,4.881,1158,4.668,1161,3.373,1347,3.584,1354,4.881,1415,4.296,1416,4.296,1417,4.296,1418,3.867,1419,4.296,1420,4.296,1421,4.296,1422,4.296,1423,4.296,1424,4.296,1425,4.296,1426,4.296,1427,4.296,1428,4.296]],["t/465",[0,0.369,1,0.339,30,1.785,33,1.05,733,1.226,755,1.785,919,1.296,995,1.621,1106,1.696,1142,1.696,1148,1.897,1158,6.171,1183,1.897,1191,8.103,1254,1.621,1272,1.621,1278,2.046,1279,1.897,1285,2.046,1354,1.785,1369,2.046,1408,2.046,1429,2.273,1430,2.273,1431,2.046,1432,2.273,1433,2.273,1434,2.273,1435,2.273,1436,2.273,1437,2.273,1438,2.273,1439,2.273,1440,2.273,1441,2.273,1442,2.273,1443,2.273,1444,2.273,1445,2.046,1446,2.273,1447,2.273,1448,2.273,1449,2.273,1450,2.273,1451,2.273,1452,2.273]],["t/467",[1,0.258,1388,6.684,1445,6.684,1453,7.426,1454,7.426,1455,7.426,1456,7.426]],["t/470",[0,1.285,1,0.275,1457,7.906,1458,7.906]],["t/473",[1,0.345,750,5.626,1459,6.743,1460,5.626,1461,6.743,1462,6.07,1463,6.07,1464,6.07]],["t/475",[1,0.347,16,4.083,146,7.045,654,5.734,1465,6.391,1466,6.391]],["t/477",[1,0.198,146,4.472,654,3.64,657,5.393,659,5.393,1351,4.752,1352,4.752,1353,4.752,1464,5.127,1467,5.697,1468,5.697,1469,5.697,1470,7.641,1471,6.807,1472,7.563,1473,5.127]],["t/479",[1,0.33,659,5.873,1361,6.466,1362,6.466,1365,6.059,1368,4.475,1474,5.364,1475,5.364,1476,5.364,1477,5.364,1478,6.537,1479,7.263]],["t/481",[1,0.269,272,6.076,674,5.519,1480,7.739,1481,7.739]],["t/483",[659,5.405,1361,5.95,1362,5.95,1364,6.323,1482,6.822,1483,6.822]],["t/485",[1,0.35,1407,5.954,1484,6.424,1485,6.424,1486,6.424]],["t/487",[0,0.347,1,0.328,22,0.879,33,1.656,146,2.816,235,0.807,610,0.983,654,2.291,657,2.084,659,2.961,661,1.92,674,2.961,750,3.464,919,0.672,1254,0.84,1272,0.84,1349,2.992,1351,2.438,1352,2.438,1353,1.78,1354,0.925,1355,1.061,1357,1.92,1359,1.061,1361,1.675,1362,0.925,1364,0.983,1365,0.983,1368,0.983,1370,2.631,1374,0.983,1383,1.061,1385,2.631,1407,1.78,1460,0.983,1462,4.895,1463,3.737,1470,3.737,1471,3.228,1473,1.061,1478,1.061,1482,1.061,1483,2.631,1484,1.061,1485,1.061,1486,1.061,1487,2.133,1488,2.923,1489,2.133,1490,1.178,1491,1.178,1492,1.178,1493,1.178,1494,2.133,1495,2.133,1496,2.133,1497,1.178,1498,2.133,1499,1.178,1500,2.133,1501,1.178,1502,2.923,1503,1.178,1504,1.178,1505,1.178,1506,1.178,1507,1.178,1508,1.178,1509,1.178,1510,1.178,1511,1.178,1512,1.178,1513,1.178,1514,1.178,1515,1.178,1516,1.178,1517,1.178,1518,1.178,1519,1.178,1520,1.178,1521,1.178,1522,1.178,1523,1.178,1524,1.178,1525,1.178,1526,1.178,1527,3.586,1528,6.33,1529,2.133,1530,2.133,1531,2.133,1532,1.178,1533,2.133,1534,1.178,1535,2.133,1536,2.133,1537,2.133,1538,1.178,1539,1.178,1540,1.178,1541,1.178,1542,1.178,1543,1.178,1544,1.178,1545,1.178,1546,1.178,1547,5.065,1548,4.152,1549,1.178,1550,1.178,1551,1.178,1552,1.178,1553,1.178,1554,1.178,1555,1.178,1556,1.178,1557,2.133,1558,1.178,1559,1.178,1560,1.178,1561,1.178,1562,2.133]],["t/490",[1,0.258,636,5.83,1179,6.684,1347,6.195,1563,7.426,1564,7.426,1565,7.426]],["t/492",[1,0.243,770,5.496,1566,7.001,1567,8.63,1568,7.001,1569,7.001,1570,7.001,1571,7.001,1572,7.001]],["t/496",[1573,8.452]],["t/498",[0,0.467,1,0.357,12,0.195,15,0.943,16,1.052,30,0.477,33,0.533,60,0.477,62,0.309,63,0.917,76,0.316,97,0.906,102,0.599,116,0.377,251,1.865,272,0.477,292,0.587,296,1.039,477,0.547,492,0.507,654,0.389,674,0.434,685,0.963,686,0.477,733,0.678,897,0.613,903,0.547,919,0.347,1148,0.507,1152,0.547,1158,3.541,1160,1.039,1161,3.409,1166,0.547,1167,0.547,1173,2.585,1175,0.547,1247,0.963,1272,0.434,1279,0.507,1349,0.507,1371,1.039,1374,0.507,1390,0.547,1418,0.547,1431,0.547,1460,2.086,1574,1.154,1575,1.154,1576,0.608,1577,1.154,1578,0.608,1579,1.646,1580,4.091,1581,2.093,1582,1.154,1583,0.608,1584,0.608,1585,0.608,1586,1.154,1587,1.154,1588,0.608,1589,1.154,1590,1.154,1591,1.154,1592,1.154,1593,1.154,1594,1.154,1595,4.795,1596,2.093,1597,1.646,1598,4.576,1599,3.821,1600,0.608,1601,0.608,1602,0.608,1603,1.154,1604,0.608,1605,0.608,1606,1.154,1607,2.872,1608,0.608,1609,0.608,1610,0.608,1611,0.608,1612,0.608,1613,1.154,1614,0.608,1615,0.608,1616,1.646,1617,1.154,1618,1.154,1619,1.154,1620,0.608,1621,0.608,1622,0.608,1623,0.608,1624,0.608,1625,1.154,1626,0.608,1627,0.608,1628,1.154,1629,0.608,1630,0.608,1631,0.608,1632,0.608,1633,0.608,1634,0.608,1635,0.608,1636,0.608,1637,0.608,1638,0.608,1639,0.608,1640,0.608,1641,0.608,1642,1.154,1643,1.154,1644,0.507,1645,0.608,1646,0.608,1647,0.608,1648,0.608,1649,1.154,1650,0.608,1651,0.608,1652,0.608,1653,0.608,1654,0.608,1655,0.608,1656,0.608,1657,0.608,1658,0.608,1659,0.608,1660,0.608,1661,0.608,1662,0.608,1663,0.608,1664,0.608,1665,0.608,1666,0.608,1667,0.608,1668,0.608,1669,0.608,1670,0.608,1671,0.608,1672,0.608,1673,0.608,1674,0.608,1675,0.608,1676,0.608,1677,0.608,1678,0.608,1679,0.608,1680,1.646,1681,0.608,1682,0.608,1683,0.608,1684,0.608,1685,0.608,1686,0.608,1687,0.608,1688,0.608,1689,0.608,1690,0.608,1691,0.608,1692,0.608,1693,0.608,1694,0.608,1695,0.608,1696,1.646,1697,0.608,1698,0.608,1699,1.646,1700,1.154,1701,1.646,1702,0.608,1703,0.608,1704,0.608,1705,0.608,1706,0.608,1707,0.608,1708,0.608,1709,0.608,1710,0.608,1711,0.608,1712,0.608,1713,0.608,1714,0.608,1715,0.608,1716,0.608,1717,0.608,1718,0.608,1719,0.608,1720,0.608,1721,0.608,1722,0.608,1723,0.608,1724,0.608,1725,0.608,1726,1.154,1727,0.608,1728,0.608,1729,0.608,1730,0.608,1731,0.608,1732,0.608,1733,0.608,1734,0.608,1735,0.608,1736,0.608,1737,0.608,1738,0.608,1739,0.608,1740,0.608,1741,0.608,1742,0.608,1743,0.608,1744,0.608,1745,0.608]],["t/500",[1644,7.051]],["t/502",[1746,8.08,1747,8.08,1748,8.08]],["t/504",[1,0.337,1749,6.87,1750,6.87,1751,6.87,1752,6.87,1753,6.87,1754,6.87,1755,6.87]],["t/506",[1,0.3,1001,6.301,1644,7.199,1756,7.001,1757,7.001,1758,7.001,1759,7.001,1760,7.001]],["t/510",[1761,8.08,1762,8.08,1763,6.026]],["t/512",[1,0.281,1764,8.08,1765,8.08]],["t/515",[1766,8.574]],["t/518",[1,0.325,1767,7.001,1768,8.63,1769,7.001,1770,7.001,1771,7.001,1772,7.001]],["t/520",[1773,8.08,1774,8.08,1775,8.08]],["t/523",[0,1.004,12,1.976,63,2.707,76,3.208,292,3.141,797,5.947,844,5.559,1763,4.606,1776,6.176,1777,6.176,1778,6.176,1779,4.796,1780,6.176,1781,6.176,1782,6.176]],["t/525",[1783,8.08,1784,8.08,1785,8.08]],["t/528",[1763,6.838,1766,6.966,1786,7.739,1787,6.966]],["t/530",[1,0.258,1763,5.538,1788,7.426,1789,7.426,1790,7.426,1791,7.426,1792,7.426]],["t/532",[0,0.987,1,0.274,12,1.944,836,5.467,1763,4.53,1787,7.099,1793,6.074,1794,6.074,1795,6.074,1796,6.074,1797,5.467,1798,6.074,1799,6.074,1800,6.074,1801,6.074,1802,6.074]],["t/536",[1,0.226,797,4.851,843,5.854,1779,4.958,1803,6.504,1804,6.504,1805,6.504,1806,6.504,1807,6.504,1808,6.504,1809,6.504,1810,6.504,1811,6.504]],["t/538",[1,0.283,1779,3.845,1797,5.752,1812,8.15,1813,6.391,1814,8.15,1815,6.391,1816,8.15,1817,6.391,1818,6.391,1819,6.391]],["t/540",[1,0.239,746,6.183,797,5.124,852,4.707,1779,5.58,1820,6.87,1821,6.87,1822,7.677]],["t/542",[852,4.89,1779,5.253,1822,7.86,1823,8.732,1824,7.137,1825,7.137]],["t/545",[1826,8.262,1827,8.262]],["t/548",[1828,7.906,1829,7.906,1830,7.906,1831,7.906]],["t/550",[1,0.239,105,7.616,1832,6.87,1833,6.87,1834,6.87,1835,6.87,1836,6.87,1837,6.87]],["t/552",[0,1.232,1,0.263,1838,7.579,1839,6.323,1840,6.822,1841,6.323]],["t/554",[1,0.287,1842,8.262]],["t/556",[0,1.021,1,0.337,1113,5.241,1158,4.013,1226,5.241,1779,4.849,1839,5.241,1841,5.241,1843,8.901]],["t/558",[1844,8.452]],["t/560",[0,1.039,1,0.328,686,6.399,1158,4.083,1779,3.845,1839,5.332,1840,5.752,1841,5.332,1845,6.391,1846,6.391,1847,5.752]],["t/563",[1,0.303,686,5.603,1779,4.293,1847,6.424,1848,7.137,1849,7.137,1850,7.137,1851,7.137]],["t/565",[1852,8.452]],["t/568",[1,0.281,1779,4.86,1853,8.08]],["t/570",[1,0.352,38,3.521,74,3.832,610,7.233,1053,5.885,1854,5.138,1855,5.138,1856,5.138,1857,5.138,1858,5.138,1859,5.138,1860,7.054,1861,5.138,1862,5.138]],["t/572",[1863,7.579,1864,7.579,1865,7.579,1866,7.579,1867,7.579,1868,7.579]],["t/574",[1,0.359,966,4.691,1779,3.594,1869,9.56,1870,5.975,1871,5.975]],["t/576",[1,0.351,816,7.583,1779,5.795,1872,5.61,1873,5.61,1874,5.61,1875,7.485]],["t/578",[0,0.801,1,0.322,12,1.578,63,2.161,76,2.561,292,2.508,639,4.114,657,3.517,733,1.598,866,1.52,897,2.618,929,2.966,1876,4.931,1877,4.931,1878,6.856,1879,4.931,1880,7.882,1881,4.931,1882,4.931,1883,4.931,1884,4.931,1885,4.931,1886,4.931,1887,4.931]],["t/580",[1,0.345]]],"invertedIndex":[["",{"_index":1,"t":{"6":{"position":[[0,21]]},"8":{"position":[[122,45]]},"11":{"position":[[0,61],[62,5],[68,8],[77,5],[83,17],[101,11],[113,37],[151,4],[161,7],[169,3],[173,3],[177,3],[181,5],[187,21],[273,10]]},"13":{"position":[[0,12],[13,10],[24,13],[103,43],[154,28]]},"16":{"position":[[35,9]]},"21":{"position":[[8,9]]},"23":{"position":[[34,12],[47,32],[80,9],[90,5]]},"25":{"position":[[64,25],[90,24],[466,14]]},"28":{"position":[[67,15],[83,37],[121,34],[156,21]]},"30":{"position":[[184,26]]},"36":{"position":[[0,12],[79,12]]},"38":{"position":[[73,2]]},"42":{"position":[[0,40]]},"44":{"position":[[76,9]]},"47":{"position":[[0,2],[3,2],[6,2],[9,5],[17,2],[20,1],[24,1],[32,1]]},"53":{"position":[[0,72],[73,11],[85,27],[113,29]]},"57":{"position":[[8,30],[59,1],[151,27]]},"60":{"position":[[0,22],[111,5]]},"62":{"position":[[111,3],[206,3]]},"64":{"position":[[0,7],[29,8],[38,5],[104,4]]},"66":{"position":[[0,22],[23,7],[52,14]]},"68":{"position":[[0,7],[29,36]]},"71":{"position":[[18,2],[26,1]]},"73":{"position":[[73,3],[77,12]]},"75":{"position":[[0,4],[194,2],[197,2],[200,2],[203,1],[231,3],[242,3],[246,9],[256,18],[275,32],[308,21],[392,4],[397,8],[486,7]]},"80":{"position":[[84,6],[135,1],[153,1],[162,1],[195,1],[202,1],[220,2],[246,1],[259,1],[270,1],[282,1],[288,1],[293,1],[295,1],[304,1]]},"83":{"position":[[6,14],[127,39]]},"85":{"position":[[84,5]]},"90":{"position":[[0,33]]},"92":{"position":[[23,1],[116,1],[122,2],[171,53],[225,6],[265,1],[347,1],[512,1],[537,2],[598,4],[603,5]]},"94":{"position":[[0,39]]},"96":{"position":[[11,4],[20,2]]},"98":{"position":[[0,43],[44,4],[118,5],[124,5],[130,5],[136,5],[142,4],[183,1],[189,1],[202,2],[211,2],[216,2],[238,2],[251,2],[254,9],[274,1],[284,1],[292,1],[297,6],[306,1],[311,1],[313,1],[320,1],[346,13]]},"100":{"position":[[176,14],[201,3]]},"102":{"position":[[411,1],[452,11]]},"104":{"position":[[635,1],[675,12],[903,2],[923,1],[939,2],[959,1],[977,2],[999,1],[1285,6],[1749,2],[1779,2],[1805,1],[1832,1],[1837,2],[1878,1],[1885,1],[1927,1],[2113,1],[2494,1],[2504,1]]},"106":{"position":[[71,4],[82,1],[88,1],[101,1],[140,2],[153,6],[170,1],[189,1],[199,1],[203,1],[213,1],[224,6],[231,1],[233,2],[294,1],[300,1],[319,2],[349,2],[372,1],[382,1],[393,1],[435,2]]},"108":{"position":[[0,73],[333,4],[386,1],[392,1],[408,1],[421,1],[436,2],[441,2],[452,2],[486,2],[509,1],[514,19],[550,1],[564,15],[580,1],[589,1],[602,2]]},"113":{"position":[[0,44],[45,38],[84,2],[87,4],[92,6],[99,20],[120,33]]},"115":{"position":[[0,17],[18,4],[23,40],[64,4],[69,24],[94,12],[107,17],[125,39],[165,14],[180,4],[185,11]]},"119":{"position":[[0,74],[75,5],[81,1],[83,4],[88,1],[90,2],[93,16],[110,16],[127,20],[148,4],[153,2],[156,2],[159,5],[196,21]]},"121":{"position":[[135,11],[147,7],[166,9],[176,10],[383,10]]},"126":{"position":[[2,42],[127,1],[145,1],[155,1],[180,1]]},"130":{"position":[[0,52],[53,49]]},"134":{"position":[[104,1],[133,1],[138,1],[140,1],[177,2],[269,2],[274,1],[300,1],[402,2],[407,1],[433,1],[438,1],[537,2],[542,1],[567,1],[711,1],[782,1],[788,18]]},"136":{"position":[[31,1],[52,3],[183,1],[204,2],[207,1],[228,2],[231,1],[254,2],[257,1],[284,2]]},"139":{"position":[[0,10],[11,87]]},"141":{"position":[[0,8],[9,57],[67,6],[74,54]]},"143":{"position":[[0,1],[2,2],[5,3],[9,2],[12,2],[15,2],[18,2],[21,2],[24,2]]},"145":{"position":[[0,32],[47,19],[142,1],[148,1],[175,1],[189,21],[253,1]]},"148":{"position":[[0,33],[111,27],[143,139]]},"150":{"position":[[0,16]]},"156":{"position":[[0,13],[14,6],[21,14],[36,4],[56,14],[71,12],[84,3],[108,1],[205,14]]},"158":{"position":[[0,20],[21,30]]},"160":{"position":[[0,12],[13,2],[16,3],[20,4],[25,3],[29,1],[31,6],[38,7],[46,20],[96,1]]},"162":{"position":[[0,4],[5,5],[11,3],[15,1],[29,14]]},"165":{"position":[[207,1],[211,2],[225,1],[232,2],[339,7],[383,1],[387,1],[394,2],[399,1],[403,1],[410,2],[415,1],[419,1],[426,2],[431,1],[435,1],[442,2],[828,16]]},"167":{"position":[[0,6],[114,4],[210,5],[316,11]]},"170":{"position":[[7,45],[53,10],[64,25],[163,122],[286,32],[319,6],[326,4],[331,8],[396,1],[428,1],[457,1],[607,1],[635,1],[695,1],[717,1],[719,1],[721,2]]},"172":{"position":[[164,1],[195,1],[210,1],[302,1],[316,1],[344,1]]},"174":{"position":[[54,5],[60,28],[102,1]]},"180":{"position":[[0,26],[282,9],[292,12],[305,1],[309,1],[311,1],[315,1],[317,1],[321,1],[323,1],[327,1],[329,1],[333,1],[335,1],[339,1],[341,1],[345,1],[349,1],[351,1],[353,1],[355,1],[357,1],[359,1],[361,1],[371,3],[375,3],[379,3],[383,3],[387,3],[391,3],[397,1],[399,1],[417,3],[421,3],[425,3],[431,1],[469,3],[473,3],[491,3],[495,3],[499,3],[503,3],[507,3],[531,3],[535,3],[539,3],[543,3],[549,1],[551,1],[553,1],[555,1],[557,1],[570,3]]},"185":{"position":[[0,19],[20,9],[51,5],[80,17],[132,3],[136,48],[275,11],[287,15],[303,37],[341,104]]},"187":{"position":[[0,12],[102,1],[114,1],[173,66],[331,1],[394,65],[492,20]]},"191":{"position":[[0,117]]},"193":{"position":[[215,21],[315,4],[504,1],[510,2],[545,1],[559,1],[572,1],[592,1],[600,1],[609,1],[617,1],[619,2],[797,2],[881,85]]},"195":{"position":[[0,104],[282,14],[297,4],[302,7],[381,1],[387,2],[405,1],[417,1],[426,1],[457,1],[464,1],[472,1],[487,1],[499,1],[505,1],[520,1],[531,1],[539,1],[549,2],[557,1],[564,2],[571,1],[576,1],[584,1],[593,1],[598,1],[606,2],[617,12],[678,58]]},"197":{"position":[[172,11],[258,15],[282,1],[301,1],[311,6],[324,1],[443,1],[456,10],[472,1],[480,4],[491,1],[503,2],[519,1],[535,1],[552,1],[560,1],[562,1],[564,2],[892,12]]},"199":{"position":[[0,57]]},"201":{"position":[[0,7],[8,13],[62,1],[69,1],[76,1],[123,1],[130,1],[149,1],[175,1],[188,2],[199,1],[207,14],[243,1],[251,1],[269,1],[271,2],[404,1],[490,2]]},"203":{"position":[[449,14],[464,8],[524,1],[544,1],[568,2],[595,10],[613,1],[639,2],[664,10],[683,1],[693,1],[702,1],[724,3],[777,1],[799,1],[867,5],[894,1],[905,5],[911,2],[1151,3],[1155,13]]},"207":{"position":[[309,1],[333,1],[348,1],[384,1],[389,1],[421,2],[571,3]]},"209":{"position":[[4,100],[113,21],[135,16],[152,18],[182,44],[279,7],[287,11],[392,18],[497,1],[526,2],[529,1],[558,2],[561,1],[584,2],[587,1],[614,2],[742,3],[782,20],[803,39],[889,1],[1000,1],[1008,24],[1043,1],[1099,2],[1156,12],[1180,1],[1188,12],[1203,1],[1208,32],[1241,1],[1243,1],[1250,1],[1257,1],[1265,8],[1274,31],[1306,5],[1381,1],[1394,2],[1435,2],[1560,3]]},"212":{"position":[[0,37],[228,3],[232,7],[240,15],[256,19],[290,1],[326,2],[438,1],[457,6],[469,1],[483,1],[491,1],[501,1],[512,2],[565,1],[585,1],[595,1],[597,11],[630,1],[662,1],[796,1],[882,2],[1008,2]]},"214":{"position":[[81,13],[95,13],[214,22],[237,23],[261,21],[283,13],[304,28],[648,14],[727,32],[804,18],[938,2],[946,37]]},"216":{"position":[[0,2],[3,5],[9,5],[15,3],[19,2],[22,2],[25,2],[28,4],[93,1],[95,4],[179,1],[181,2],[184,1],[186,1],[218,2],[221,2],[284,1],[286,2],[399,2],[402,4],[471,2],[474,1],[585,2],[702,1],[704,2],[804,1]]},"220":{"position":[[0,5],[6,31],[38,4],[43,46]]},"223":{"position":[[4,18]]},"227":{"position":[[4,11]]},"231":{"position":[[0,44],[83,18],[102,8],[111,8],[120,4],[125,12],[246,57],[304,49]]},"233":{"position":[[0,29],[30,29],[60,25]]},"235":{"position":[[103,12],[128,22],[160,18]]},"238":{"position":[[13,5],[19,2],[56,16],[73,16],[119,4],[162,2],[165,3],[169,4],[186,4],[195,2],[198,4],[203,14],[222,2],[230,2],[325,5],[337,2],[340,4]]},"240":{"position":[[0,2],[43,4],[57,4],[69,4],[83,4],[256,12],[314,4],[319,20],[396,1],[549,1],[558,4],[590,4],[635,4],[652,4],[687,4],[707,2],[710,1],[772,1],[795,1],[833,1],[835,4],[840,1],[842,4],[867,8]]},"242":{"position":[[0,80]]},"245":{"position":[[233,23]]},"247":{"position":[[18,8]]},"249":{"position":[[32,1]]},"251":{"position":[[40,1],[64,1],[86,111]]},"255":{"position":[[76,72]]},"262":{"position":[[0,89],[90,20]]},"264":{"position":[[0,66],[67,16],[89,28],[121,3],[125,87],[220,13]]},"266":{"position":[[82,8],[107,22],[139,47]]},"268":{"position":[[244,4],[249,8]]},"271":{"position":[[58,171],[230,34],[265,134]]},"276":{"position":[[67,2],[77,23],[132,18],[157,10],[172,13],[246,41]]},"280":{"position":[[0,20],[111,19]]},"282":{"position":[[92,4],[97,32],[130,2],[341,1]]},"285":{"position":[[175,1],[207,1],[216,1],[225,3],[252,8],[378,2],[398,1],[400,1],[497,1],[499,1],[641,1],[685,1]]},"287":{"position":[[99,1],[106,1],[312,2],[375,2],[467,2],[480,3],[501,2],[504,5],[520,3],[540,2],[543,4],[728,5]]},"292":{"position":[[21,5],[27,1],[52,5],[70,3],[74,4],[97,9],[107,5],[113,1],[138,5],[157,3],[161,5]]},"294":{"position":[[32,5],[38,1],[64,5],[92,4],[112,5],[118,5],[124,1],[148,5]]},"296":{"position":[[22,6],[29,5],[35,1],[59,5]]},"298":{"position":[[34,6],[41,5],[47,1],[63,1],[65,6],[72,1],[114,6],[145,8],[175,8],[184,1],[186,2],[207,2],[210,7]]},"300":{"position":[[33,6],[40,5],[46,1],[48,1],[91,6],[112,1],[114,1],[162,8],[171,8],[225,6],[232,1],[234,1],[236,1],[238,1]]},"302":{"position":[[41,6],[48,5],[54,1],[78,5],[96,1],[98,1],[127,4],[132,6],[139,1],[141,2]]},"304":{"position":[[38,5],[44,1],[62,6],[110,4],[130,7],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[239,7],[247,6],[274,5],[293,6],[337,6],[361,5],[385,4],[405,5],[411,4],[432,6],[466,6],[473,1],[475,1],[477,2]]},"306":{"position":[[38,6],[45,5],[51,1],[75,5],[93,1],[123,4],[144,4],[165,6],[180,6],[187,6],[213,6],[243,8],[266,1],[268,1],[278,8],[287,6],[311,1],[313,1],[350,4],[371,4],[385,7],[393,4],[415,4],[429,3],[433,4],[449,10],[460,4],[487,4],[503,5],[509,6],[516,6],[523,8],[532,4],[552,4],[573,4],[593,4],[598,1],[600,1],[602,1],[604,2],[621,2]]},"308":{"position":[[48,5],[54,1],[90,4],[110,1],[112,1],[155,6],[178,1],[180,7],[188,5],[198,2],[220,6],[242,6],[249,1],[251,2],[270,5],[276,1],[300,5],[322,7]]},"310":{"position":[[42,6],[49,5],[55,1],[79,5],[97,1],[108,1],[110,6],[145,4],[166,4],[187,6],[202,8],[211,6],[237,6],[261,1],[263,8],[317,2],[334,1],[336,1],[346,9],[356,4],[378,1],[380,6],[387,1],[424,6],[447,4],[461,13],[475,6],[499,4],[513,1],[515,6],[522,1],[539,6],[557,6],[564,6],[584,6],[591,2],[594,1],[622,8],[644,1],[646,2],[660,5],[666,4],[687,1],[689,4],[694,6],[701,7],[709,2],[723,3],[727,4],[746,6],[769,6],[791,6],[798,1],[800,1],[802,1],[804,2],[821,6],[828,2],[841,1],[843,6],[880,4],[899,4],[919,1],[921,6],[928,1],[987,6],[1011,6],[1034,4],[1055,1],[1057,6],[1064,5],[1074,2],[1091,4],[1117,6],[1124,1],[1126,1],[1128,1],[1130,2]]},"312":{"position":[[40,5],[46,1],[78,4],[97,5],[118,1],[120,1],[179,6],[203,6],[226,6],[249,1],[251,6],[258,5],[268,2],[285,4],[311,6],[318,1],[320,2],[323,5],[329,1],[353,5],[376,7]]},"314":{"position":[[44,5],[50,1],[68,4],[88,7],[96,5],[102,1],[126,5],[144,1],[169,1],[171,1],[229,6],[254,6],[276,5],[282,6],[334,6],[363,7],[390,6],[410,3],[414,4],[435,6],[462,8],[484,6],[504,7],[521,6],[545,5],[551,1],[553,1],[555,2]]},"316":{"position":[[39,5],[45,1],[63,4],[83,7],[91,5],[97,1],[121,5],[139,1],[165,1],[167,1],[208,4],[250,6],[272,5],[278,4],[303,4],[308,1],[310,1],[312,2]]},"318":{"position":[[47,5],[53,1],[71,4],[91,7],[99,5],[105,1],[129,5],[147,1],[163,1],[202,6],[249,4],[272,4],[286,1],[288,4],[293,1],[310,4],[331,6],[352,6],[359,1],[361,2],[380,4],[407,4],[428,4],[447,4],[468,4],[491,4],[496,2],[519,1],[521,6],[585,6],[608,6],[631,4],[658,6],[679,4],[705,6],[712,1],[714,2]]},"320":{"position":[[27,6],[34,5],[40,1],[64,5],[82,1],[84,1],[141,5],[167,8],[196,14],[211,6],[254,6],[261,1],[263,2]]},"322":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[172,5],[198,6],[216,4],[232,4],[247,4],[287,4],[314,5],[338,3],[429,4],[450,4],[472,6],[492,2],[495,6],[502,2]]},"324":{"position":[[30,5],[36,1],[122,5],[148,6],[166,4],[182,4],[197,4],[237,4],[264,5],[288,3],[379,4],[400,4],[422,6],[442,2],[445,7],[453,5],[459,1],[483,5]]},"326":{"position":[[36,5],[42,1],[60,4],[80,7],[88,5],[94,1],[118,5],[136,1],[158,1],[160,1],[189,6],[233,6],[256,6],[300,6],[331,5],[337,1],[339,1],[341,2]]},"328":{"position":[[39,6],[46,5],[52,1],[76,5]]},"330":{"position":[[43,6],[50,5],[56,1],[80,5],[100,9]]},"333":{"position":[[21,5],[27,1],[50,5],[68,3],[72,4],[95,6],[102,5],[108,1],[132,5],[150,1],[203,5],[470,2]]},"335":{"position":[[22,6],[29,5],[35,1],[59,5]]},"337":{"position":[[32,6],[39,5],[45,1],[71,6],[101,6],[134,6],[167,5],[199,1],[201,5],[210,2],[243,1],[245,6],[255,2],[273,1],[275,6],[286,2]]},"339":{"position":[[31,5],[37,1],[51,3],[55,5],[72,4],[93,4],[113,7],[121,5],[127,1],[151,5],[169,1],[184,4],[197,1],[199,1],[292,4],[297,5],[321,6],[341,4],[357,4],[375,4],[392,3],[396,6],[418,5],[465,8],[511,6],[555,6],[575,4],[596,4],[619,4],[624,1],[626,1],[628,2]]},"341":{"position":[[30,6],[37,5],[43,1],[67,5],[85,1],[178,4],[183,5],[207,6],[227,4],[243,4],[261,4],[278,3],[282,6],[304,5],[351,8],[397,6],[441,6],[461,4],[482,4],[505,4],[510,2]]},"343":{"position":[[26,5],[32,1],[68,5],[96,4],[121,6],[139,4],[157,4],[169,3],[173,4],[185,3],[189,4],[212,4],[232,5],[253,5],[259,5],[265,1],[289,5],[307,1],[401,5],[419,2],[422,4],[447,6],[467,4],[485,4],[508,4],[529,4],[549,5],[566,4],[584,4],[608,4],[642,6],[669,6],[709,8],[736,6],[771,2]]},"345":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"347":{"position":[[36,6],[43,5],[49,1],[73,5]]},"349":{"position":[[39,6],[46,5],[52,1],[76,5],[94,1],[96,1],[123,5],[129,6],[148,4],[166,6],[173,6],[199,4],[221,6],[228,1],[230,2]]},"351":{"position":[[39,5],[45,1],[62,4],[99,5],[105,1],[129,5],[147,1],[169,1],[171,1],[191,5],[197,6],[216,4],[234,5],[240,6],[247,1],[249,1],[251,2]]},"353":{"position":[[43,6],[50,5],[56,1],[80,5],[98,1],[118,5],[124,6],[143,4],[161,5],[167,6],[174,2]]},"355":{"position":[[39,5],[45,1],[65,5],[71,6],[90,4],[108,5],[114,7],[122,5],[128,1],[152,5]]},"357":{"position":[[43,6],[50,5],[56,1],[80,5]]},"359":{"position":[[32,5],[38,1],[67,4],[91,4],[112,4],[132,7],[140,5],[146,1],[170,5],[188,1],[210,1],[212,1],[239,8],[248,6],[275,6],[296,6],[340,6],[364,5],[386,4],[407,6],[439,6],[446,1],[448,1],[450,2]]},"361":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[122,4],[143,4],[164,6],[179,7],[187,6],[213,6],[243,6],[264,1],[266,1],[276,8],[285,6],[309,1],[311,1],[349,6],[372,4],[386,7],[394,4],[416,4],[430,3],[434,6],[452,10],[463,4],[490,6],[508,5],[514,6],[521,6],[528,8],[537,4],[557,6],[580,4],[600,4],[605,1],[607,1],[609,1],[611,2],[628,6],[635,2]]},"363":{"position":[[32,5],[38,1],[69,4],[90,4],[111,6],[126,8],[135,6],[161,6],[191,4],[210,1],[212,1],[222,8],[231,4],[253,1],[255,6],[262,1],[300,4],[321,4],[335,15],[351,4],[373,4],[387,1],[389,4],[394,1],[411,6],[429,8],[438,6],[460,6],[484,6],[491,1],[493,2],[507,7],[515,6],[522,6],[529,8],[538,4],[559,1],[561,6],[577,2],[598,6],[619,6],[642,4],[662,4],[667,1],[669,1],[671,1],[673,2],[690,7],[698,5],[704,1],[728,5],[746,1],[777,4],[798,4],[819,6],[834,8],[843,6],[869,6],[899,4],[918,1],[920,1],[930,8],[939,4],[961,1],[963,1],[1001,4],[1022,4],[1036,15],[1052,4],[1074,4],[1088,1],[1090,4],[1095,1],[1112,6],[1130,8],[1139,6],[1161,6],[1185,6],[1192,1],[1194,2],[1208,7],[1216,6],[1223,6],[1230,8],[1239,4],[1260,1],[1262,6],[1278,2],[1299,6],[1320,6],[1343,4],[1363,4],[1368,1],[1370,1],[1372,1],[1374,2],[1391,4],[1396,2]]},"365":{"position":[[36,6],[43,5],[49,1],[73,5]]},"367":{"position":[[40,5],[46,1],[67,4],[84,4],[105,6],[128,4],[147,1],[149,5],[155,1],[179,5],[197,1],[219,1],[221,1],[241,8],[250,6],[277,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,2]]},"369":{"position":[[30,5],[36,1],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[241,4],[306,6],[329,4],[351,5],[372,4],[390,4],[406,5],[412,6],[419,6],[426,8],[435,4],[470,4],[491,4],[510,6],[517,4],[522,1],[524,1],[526,2]]},"371":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[130,4],[151,4],[184,4],[206,4],[220,3],[224,4],[240,7],[248,4],[275,4],[291,10],[302,6],[323,6],[346,4],[369,2]]},"373":{"position":[[30,5],[36,1],[74,4],[95,4],[109,7],[117,4],[139,4],[153,3],[157,4],[173,10],[184,4],[211,4],[227,5],[233,6],[240,6],[247,8],[256,6],[276,6],[299,4],[323,5],[329,1],[353,5]]},"375":{"position":[[34,6],[41,5],[47,1],[71,5]]},"377":{"position":[[26,5],[32,1],[86,5],[92,1],[116,5],[134,1],[156,1],[158,1],[186,7],[194,6],[218,4],[250,8],[296,6],[320,6],[327,1],[329,1],[331,2]]},"379":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[123,4],[137,5],[143,6],[164,1],[166,1],[194,5],[200,6],[227,6],[248,6],[292,6],[316,5],[339,4],[360,6],[395,6],[421,1],[423,1],[425,2]]},"381":{"position":[[26,5],[32,1],[70,7],[92,1],[94,1],[121,8],[130,6],[157,6],[178,6],[222,6],[246,5],[268,4],[289,6],[321,6],[328,1],[330,2],[333,5],[339,1],[363,5],[381,1],[417,4],[431,7],[439,6],[460,1],[462,1],[489,8],[498,6],[525,6],[546,6],[590,6],[614,5],[636,4],[657,6],[689,6],[696,1],[698,1],[700,2]]},"383":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"385":{"position":[[29,5],[35,1],[91,6],[98,5],[104,1],[128,5],[146,1],[169,1],[171,1],[199,9],[209,6],[227,10],[238,6],[270,8],[302,8],[334,7],[358,6],[401,6],[408,1],[410,1],[412,2]]},"387":{"position":[[29,5],[35,1],[46,10],[57,6],[75,6],[82,6],[107,1],[109,5],[117,2],[120,5],[126,1],[139,6],[157,5],[163,6]]},"389":{"position":[[37,5],[43,1],[64,4],[101,5],[107,1],[131,5],[149,1],[171,1],[173,1],[222,6],[248,6],[270,5],[276,6],[326,6],[355,7],[383,6],[404,3],[408,4],[429,6],[456,8],[478,6],[498,8],[507,6],[536,5],[542,1],[544,1],[546,2]]},"391":{"position":[[37,5],[43,1],[111,5],[117,1],[141,5],[159,1],[182,1],[184,1],[244,5],[262,6],[269,6],[294,14],[309,6],[352,6],[359,1],[361,1],[363,2]]},"393":{"position":[[29,6],[36,5],[42,1],[66,5],[84,1],[178,5],[196,6],[203,6],[221,4],[237,4],[252,4],[292,6],[314,5],[338,3],[342,8],[388,6],[409,3],[413,6],[433,4],[457,6],[482,4],[487,2]]},"395":{"position":[[28,5],[34,1],[105,6],[133,5],[151,6],[158,6],[176,4],[192,4],[207,4],[247,4],[267,5],[291,3],[295,8],[341,6],[385,6],[405,4],[429,4],[452,5],[458,5],[464,1],[488,5]]},"397":{"position":[[38,5],[52,5],[58,5],[64,1],[88,5],[106,1],[108,1],[129,5],[153,1],[155,2]]},"399":{"position":[[39,6],[46,5],[52,1]]},"401":{"position":[[28,5],[34,1],[128,5],[146,6],[153,6],[171,4],[187,4],[202,4],[242,6],[269,5],[293,3],[297,8],[343,6],[387,6],[407,4],[431,4],[454,5],[460,5],[466,1],[490,5]]},"404":{"position":[[66,29]]},"407":{"position":[[0,39]]},"411":{"position":[[0,20],[21,5],[61,22],[84,10]]},"413":{"position":[[0,61]]},"416":{"position":[[131,1],[133,3],[279,1],[351,1],[388,2],[407,1]]},"418":{"position":[[134,1],[190,1],[234,1]]},"421":{"position":[[62,7],[210,1],[291,1]]},"423":{"position":[[66,7],[114,1],[146,1],[148,1],[157,1],[159,1],[173,8],[389,1],[418,1],[430,1],[474,1],[540,1],[572,1],[672,1],[707,1],[727,1],[768,1],[790,1],[822,1],[930,1],[991,2]]},"426":{"position":[[64,22]]},"428":{"position":[[210,1]]},"431":{"position":[[0,42],[43,15],[59,20],[80,30],[115,5],[149,4],[309,1],[434,2],[634,1],[699,1],[712,1],[714,1],[757,2],[798,2],[801,1],[815,3],[834,1],[862,1],[914,1],[916,3],[945,1],[952,1],[1007,1],[1036,1],[1038,3],[1042,9],[1086,1],[1105,1],[1144,2],[1151,5],[1241,1]]},"433":{"position":[[0,27]]},"435":{"position":[[0,14],[208,1],[228,1],[230,3],[512,5],[538,1],[545,6],[573,1],[754,1]]},"439":{"position":[[118,1],[142,3],[187,2],[190,1]]},"443":{"position":[[83,6],[374,11],[436,2],[439,1],[448,1],[474,2],[477,3],[481,2],[545,1],[610,1],[623,1],[625,1],[668,2],[709,2],[712,1],[726,3],[745,1],[773,1],[825,1],[827,3],[856,1],[863,1],[918,1],[947,1],[949,3],[953,2],[1137,5],[1155,8],[1175,1],[1196,9],[1217,1],[1263,1],[1344,1],[1357,1],[1364,1],[1384,1],[1428,1],[1460,2],[1479,3],[1557,1],[1559,2]]},"454":{"position":[[0,54]]},"456":{"position":[[0,38],[85,1]]},"460":{"position":[[89,36],[133,3],[385,2],[388,3],[392,2],[697,1],[1078,1],[1102,1],[1506,1],[1547,2],[1550,3],[1631,1],[1654,1]]},"463":{"position":[[105,1],[135,1],[142,1],[167,1],[180,1],[329,1],[342,1],[349,1],[377,1],[390,1],[511,1],[534,13],[608,1],[610,8],[663,1],[665,1]]},"465":{"position":[[73,1],[102,1],[114,4],[137,1],[194,4],[220,4],[251,6],[279,6],[314,6],[350,6],[383,6],[414,5],[446,4],[475,6],[507,6],[542,6],[578,6],[610,6],[643,4],[675,6],[790,7],[886,5],[912,1],[919,6],[947,1],[955,4]]},"467":{"position":[[123,1]]},"470":{"position":[[0,3]]},"473":{"position":[[0,15],[25,3],[75,1],[93,4],[103,4]]},"475":{"position":[[0,21],[48,6],[73,1],[90,1],[99,4],[139,1]]},"477":{"position":[[0,8]]},"479":{"position":[[159,10],[179,4],[193,2],[236,4],[250,5],[259,2]]},"481":{"position":[[0,26]]},"485":{"position":[[0,33],[59,1],[98,2],[101,3],[115,19]]},"487":{"position":[[10,1],[528,1],[605,1],[649,1],[683,1],[735,1],[792,1],[821,1],[862,1],[900,1],[940,1],[962,1],[993,1],[1053,1],[1275,1],[1892,1],[2046,2],[2049,3],[2053,2],[2146,1],[2174,1],[2215,4],[2225,4],[2373,1],[2412,2],[2415,3],[2455,1],[2494,2],[2497,3],[2548,1],[2578,1],[2613,1],[2643,1],[2666,1],[2674,1],[2785,1],[2813,1],[2967,2],[2995,2],[3034,2],[3037,7],[3045,16],[3062,32],[3095,32],[3128,47]]},"490":{"position":[[165,29]]},"492":{"position":[[0,26]]},"498":{"position":[[0,2],[3,2],[30,2],[50,1],[62,1],[71,1],[122,1],[159,1],[161,3],[165,2],[168,2],[195,2],[212,1],[214,3],[316,1],[345,1],[357,1],[363,2],[392,2],[440,1],[501,1],[548,2],[551,16],[578,1],[584,1],[611,1],[644,1],[675,2],[684,1],[693,1],[701,1],[719,3],[728,2],[757,1],[803,1],[853,1],[914,1],[1079,1],[1088,1],[1090,1],[1112,2],[1115,16],[1142,1],[1148,1],[1183,2],[1208,1],[1282,2],[1299,1],[1307,1],[1325,3],[1386,1],[1454,1],[1614,1],[1847,1],[1849,5],[2150,1],[2238,1],[2316,1],[2360,1],[2385,1],[2387,1],[2447,1],[2481,2],[2487,1],[2497,1],[2526,1],[2569,2],[2664,1],[2683,1],[2729,1],[2819,1],[2848,4],[2875,1],[2938,1],[3015,2],[3032,1],[3050,1],[3068,3],[3214,1],[3287,1],[3295,1],[3351,1],[3369,1],[3387,3],[3498,1],[3516,1],[3534,3],[3549,1],[3654,1],[3716,1],[3734,1],[3752,3],[3842,1],[3860,1],[3878,3],[4009,1],[4027,1],[4045,3],[4049,11],[4074,10],[4085,8],[4094,2],[4097,9],[4107,7],[4135,1],[4182,1],[4403,1],[4422,1],[4440,3],[4507,3],[4511,1],[4615,1],[4620,1],[4660,1],[4662,1],[4664,1],[4773,1],[4780,1],[4831,1],[4838,1],[4889,1],[4896,1],[4946,1],[4953,1],[5003,1],[5010,1],[5012,1],[5046,1],[5154,1],[5209,1],[5245,1],[5283,1],[5376,1],[5496,10],[5507,10],[5518,8],[5579,2],[5624,2],[5638,24],[5680,1],[5732,1],[5734,2],[5746,1],[5752,2],[5782,1],[5823,1],[5933,1],[6014,1],[6099,1],[6101,1],[6103,1],[6105,1],[6265,1],[6267,20],[6288,1],[6290,13],[6338,1],[6463,1],[6465,1],[6501,1],[6527,1],[6543,1],[6545,1],[6560,1],[6562,2],[6565,1],[6572,1],[6574,2],[6591,1],[6593,2],[6596,1],[6624,1],[6626,2],[6642,1],[6764,1],[6834,1],[6866,1],[7097,1],[7160,1],[7182,1],[7231,1],[7262,1],[7274,2],[7283,1],[7301,1],[7303,1]]},"504":{"position":[[45,6],[52,4],[184,40],[267,40]]},"506":{"position":[[128,18],[147,9]]},"512":{"position":[[0,19]]},"518":{"position":[[65,4],[70,2],[88,6]]},"530":{"position":[[29,5]]},"532":{"position":[[138,8],[218,1]]},"536":{"position":[[140,2]]},"538":{"position":[[164,8],[173,8]]},"540":{"position":[[60,4]]},"550":{"position":[[0,11]]},"552":{"position":[[92,3]]},"554":{"position":[[126,44]]},"556":{"position":[[11,3],[22,3],[36,1],[74,3],[83,4]]},"560":{"position":[[6,1],[12,1],[21,45],[74,2]]},"563":{"position":[[11,1],[167,10]]},"568":{"position":[[10,86]]},"570":{"position":[[86,24],[111,1],[128,1],[283,1],[287,1],[292,1],[305,1],[309,1],[317,9],[327,29],[391,48]]},"574":{"position":[[36,43],[80,1],[88,5],[106,6],[119,10],[135,7],[143,31],[175,5],[193,28],[234,18]]},"576":{"position":[[13,1],[25,11],[83,6],[96,4],[153,12],[166,8],[185,17],[203,1],[218,62]]},"578":{"position":[[29,26],[154,4],[196,19],[236,13],[304,5],[321,12]]},"580":{"position":[[0,6],[7,7],[15,8]]}}}],["0",{"_index":33,"t":{"36":{"position":[[13,65]]},"47":{"position":[[15,1],[22,1],[29,2]]},"49":{"position":[[0,3]]},"62":{"position":[[0,42]]},"75":{"position":[[205,2],[208,1],[210,1],[212,1],[214,2],[219,1],[222,1],[227,1],[229,1],[240,1]]},"98":{"position":[[367,3]]},"106":{"position":[[90,2],[103,2],[432,2]]},"108":{"position":[[394,2],[410,2],[439,1]]},"134":{"position":[[285,2],[332,2],[418,2],[468,2],[553,2],[597,2]]},"165":{"position":[[227,4],[381,1],[392,1],[397,1],[401,1],[405,1],[407,2],[413,1],[417,1],[421,1],[433,1],[437,1],[439,2]]},"180":{"position":[[347,1]]},"214":{"position":[[519,2]]},"310":{"position":[[1086,4]]},"314":{"position":[[249,4],[360,2],[457,4]]},"318":{"position":[[674,4]]},"330":{"position":[[98,1]]},"363":{"position":[[614,4],[1315,4]]},"431":{"position":[[819,5]]},"443":{"position":[[730,5],[1359,2]]},"463":{"position":[[137,2],[344,2]]},"465":{"position":[[104,3]]},"487":{"position":[[1425,1],[1538,1],[1679,1],[1819,1]]},"498":{"position":[[2484,2],[2749,6]]}}}],["0,1,2...di​=0,1,2",{"_index":127,"t":{"92":{"position":[[267,24]]}}}],["0.000",{"_index":50,"t":{"40":{"position":[[224,14]]}}}],["0.1xxxxx",{"_index":85,"t":{"73":{"position":[[0,11]]}}}],["0.1xxx，负数1.1xxx",{"_index":99,"t":{"75":{"position":[[330,44]]}}}],["00",{"_index":59,"t":{"57":{"position":[[179,2]]}}}],["00:00:00",{"_index":935,"t":{"310":{"position":[[284,10],[307,9]]},"322":{"position":[[276,10]]},"324":{"position":[[226,10]]}}}],["01",{"_index":61,"t":{"57":{"position":[[185,5]]},"314":{"position":[[215,2]]},"322":{"position":[[273,2]]},"324":{"position":[[223,2]]},"359":{"position":[[323,2]]},"369":{"position":[[289,2]]},"377":{"position":[[279,2]]},"381":{"position":[[205,2],[573,2]]}}}],["0110000000011000]\\begin{bmatrix",{"_index":325,"t":{"165":{"position":[[347,33]]}}}],["02",{"_index":957,"t":{"316":{"position":[[236,2]]},"367":{"position":[[327,2]]}}}],["04",{"_index":880,"t":{"300":{"position":[[81,2]]}}}],["05",{"_index":903,"t":{"304":{"position":[[320,2]]},"498":{"position":[[5632,2]]}}}],["06",{"_index":934,"t":{"310":{"position":[[278,2],[304,2]]},"314":{"position":[[212,2]]},"316":{"position":[[233,2]]},"320":{"position":[[238,2]]},"322":{"position":[[399,2]]},"324":{"position":[[349,2]]},"326":{"position":[[283,2]]},"339":{"position":[[448,2],[494,2],[538,2]]},"341":{"position":[[334,2],[380,2],[424,2]]}}}],["0656",{"_index":1038,"t":{"343":{"position":[[342,4]]}}}],["07",{"_index":991,"t":{"322":{"position":[[365,2]]},"324":{"position":[[315,2]]},"389":{"position":[[205,2],[208,2]]},"393":{"position":[[278,2],[374,2]]},"395":{"position":[[233,2],[327,2]]},"401":{"position":[[228,2],[329,2]]}}}],["08",{"_index":936,"t":{"310":{"position":[[301,2]]},"320":{"position":[[241,2]]},"367":{"position":[[324,2]]},"379":{"position":[[275,2]]},"391":{"position":[[336,2]]},"395":{"position":[[368,2]]},"401":{"position":[[370,2]]}}}],["08:15:00",{"_index":1548,"t":{"487":{"position":[[2163,10],[2721,10],[2802,10],[2902,10],[2984,10]]}}}],["09",{"_index":987,"t":{"322":{"position":[[270,2],[362,2],[402,2]]},"324":{"position":[[220,2],[312,2],[352,2]]},"385":{"position":[[385,2]]},"393":{"position":[[275,2],[371,2]]},"395":{"position":[[230,2],[324,2]]},"401":{"position":[[225,2],[326,2]]}}}],["0;high",{"_index":109,"t":{"80":{"position":[[155,6]]}}}],["0;i",{"_index":296,"t":{"145":{"position":[[144,3]]},"498":{"position":[[580,3],[1144,3]]}}}],["0;i<contentsplit.length;i",{"_index":1653,"t":{"498":{"position":[[2877,29]]}}}],["0;i<g.vexnum;i",{"_index":353,"t":{"170":{"position":[[459,18]]}}}],["0;i<g.vexnuml;i",{"_index":350,"t":{"170":{"position":[[398,18]]}}}],["0;i<len;i",{"_index":252,"t":{"134":{"position":[[106,13]]}}}],["0;i<n",{"_index":491,"t":{"201":{"position":[[151,5]]},"207":{"position":[[311,5]]}}}],["0;v<g.vexnum;++v",{"_index":374,"t":{"172":{"position":[[166,17],[212,17]]}}}],["0^2,1^2",{"_index":129,"t":{"92":{"position":[[349,8]]}}}],["0~999",{"_index":602,"t":{"214":{"position":[[0,80]]}}}],["0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0",{"_index":608,"t":{"214":{"position":[[470,28]]}}}],["0和全1",{"_index":98,"t":{"75":{"position":[[184,9]]}}}],["0有两种表示：10000和00000",{"_index":44,"t":{"38":{"position":[[179,24]]}}}],["0舍1入、末位恒置1",{"_index":100,"t":{"75":{"position":[[375,16]]}}}],["0，余数左移并且加上除数；余数为正，商1",{"_index":78,"t":{"66":{"position":[[67,37]]}}}],["0，并且加上除数的补码，余数为正商0",{"_index":75,"t":{"64":{"position":[[44,32]]}}}],["1",{"_index":0,"t":{"4":{"position":[[0,30]]},"13":{"position":[[96,6]]},"16":{"position":[[29,5],[91,5]]},"23":{"position":[[31,2]]},"25":{"position":[[61,2],[321,12],[334,48]]},"38":{"position":[[68,2],[89,1],[144,2]]},"40":{"position":[[144,1],[156,1]]},"47":{"position":[[26,2],[34,1]]},"57":{"position":[[0,7],[131,12]]},"62":{"position":[[138,3]]},"73":{"position":[[90,1],[92,12]]},"75":{"position":[[217,1],[224,2],[235,2],[238,1],[406,58],[465,20]]},"80":{"position":[[170,2],[267,2],[290,2]]},"83":{"position":[[0,5]]},"87":{"position":[[0,4],[42,62]]},"92":{"position":[[232,7]]},"98":{"position":[[191,2],[308,2]]},"102":{"position":[[408,2]]},"104":{"position":[[193,10],[632,2],[920,2],[936,2],[956,2],[974,2],[996,2],[1012,2],[1802,2],[1820,2],[1875,2],[1900,2]]},"106":{"position":[[201,1],[302,2]]},"121":{"position":[[0,5]]},"126":{"position":[[151,3]]},"132":{"position":[[0,25]]},"134":{"position":[[0,6],[135,2],[440,2],[784,3]]},"136":{"position":[[33,1],[50,1],[73,4]]},"145":{"position":[[33,13],[178,2]]},"150":{"position":[[24,35]]},"156":{"position":[[41,14]]},"162":{"position":[[52,2]]},"165":{"position":[[209,1],[385,1],[389,2],[423,2],[429,1]]},"170":{"position":[[0,6]]},"174":{"position":[[29,24]]},"180":{"position":[[307,1],[578,3]]},"193":{"position":[[12,2],[320,129],[450,4],[535,4]]},"195":{"position":[[310,4],[432,2],[507,2],[528,2],[573,2],[595,2]]},"197":{"position":[[0,137],[207,4]]},"201":{"position":[[22,4]]},"203":{"position":[[0,6],[863,3]]},"207":{"position":[[187,4],[260,4],[489,5]]},"209":{"position":[[0,3],[227,51],[1431,3]]},"212":{"position":[[104,4]]},"214":{"position":[[109,7],[517,1]]},"218":{"position":[[0,4]]},"294":{"position":[[110,1],[134,2]]},"296":{"position":[[45,2]]},"302":{"position":[[64,2]]},"304":{"position":[[59,2],[107,2],[154,2],[197,2],[271,2],[429,2]]},"306":{"position":[[61,2],[120,2],[141,2],[162,2],[368,2],[412,2],[591,1]]},"308":{"position":[[194,3],[240,1],[286,2]]},"310":{"position":[[65,2],[142,2],[163,2],[444,2],[496,2],[534,4],[789,1],[1031,2],[1070,3]]},"312":{"position":[[223,2],[264,3],[339,2]]},"314":{"position":[[65,2],[112,2],[331,2]]},"316":{"position":[[60,2],[107,2],[205,2]]},"318":{"position":[[68,2],[115,2],[199,2]]},"320":{"position":[[50,2],[108,2]]},"322":{"position":[[54,2],[229,2],[244,2],[426,2],[447,2],[466,5]]},"324":{"position":[[179,2],[194,2],[376,2],[397,2],[416,5],[469,2]]},"326":{"position":[[57,2],[104,2]]},"328":{"position":[[62,2]]},"330":{"position":[[66,2]]},"333":{"position":[[118,2]]},"335":{"position":[[45,2]]},"337":{"position":[[282,3]]},"339":{"position":[[69,2],[90,2],[137,2],[354,2],[572,2],[593,2]]},"341":{"position":[[53,2],[240,2],[458,2],[479,2]]},"343":{"position":[[136,2],[154,2],[251,1],[275,2],[526,2],[563,2],[581,2]]},"345":{"position":[[53,2]]},"347":{"position":[[59,2]]},"349":{"position":[[62,2],[145,2]]},"351":{"position":[[80,2],[115,2],[213,2]]},"353":{"position":[[66,2],[140,2]]},"355":{"position":[[138,2]]},"357":{"position":[[66,2]]},"359":{"position":[[109,2],[156,2],[383,2]]},"361":{"position":[[59,2],[119,2],[140,2],[161,2],[369,2],[413,2],[598,1]]},"363":{"position":[[66,2],[87,2],[318,2],[370,2],[660,1],[714,2],[774,2],[795,2],[1019,2],[1071,2],[1361,1]]},"365":{"position":[[59,2]]},"367":{"position":[[81,2],[125,2],[165,2],[208,2],[384,2]]},"369":{"position":[[119,2],[154,2],[326,2],[387,2]]},"371":{"position":[[59,2],[203,2]]},"373":{"position":[[92,2],[136,2],[339,2]]},"375":{"position":[[57,2]]},"377":{"position":[[67,2],[102,2],[215,2]]},"379":{"position":[[54,2]]},"381":{"position":[[58,2],[265,2],[349,2],[414,2],[633,2]]},"383":{"position":[[53,2]]},"385":{"position":[[114,2],[331,2],[355,2]]},"387":{"position":[[115,1],[136,2]]},"389":{"position":[[82,2],[117,2],[296,2]]},"391":{"position":[[92,2],[127,2]]},"393":{"position":[[52,2],[249,2],[430,2]]},"395":{"position":[[204,2],[402,2],[474,2]]},"397":{"position":[[74,2],[144,1]]},"401":{"position":[[199,2],[404,2],[476,2]]},"416":{"position":[[84,12]]},"431":{"position":[[121,14]]},"435":{"position":[[540,4]]},"443":{"position":[[1265,3],[1553,3]]},"465":{"position":[[914,4]]},"470":{"position":[[4,34]]},"487":{"position":[[823,1],[2668,1]]},"498":{"position":[[1346,2],[2703,6],[3711,4],[3837,4],[4004,4],[5582,3]]},"523":{"position":[[192,1]]},"532":{"position":[[136,1]]},"552":{"position":[[90,1]]},"556":{"position":[[95,1]]},"560":{"position":[[149,1]]},"578":{"position":[[136,1]]}}}],["1)/2",{"_index":286,"t":{"136":{"position":[[223,4]]},"160":{"position":[[75,4]]}}}],["1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r",{"_index":613,"t":{"214":{"position":[[548,33]]}}}],["1)^",{"_index":82,"t":{"71":{"position":[[21,4]]},"75":{"position":[[133,4]]}}}],["1)return",{"_index":262,"t":{"134":{"position":[[276,8],[409,8],[544,8]]}}}],["1)select",{"_index":1387,"t":{"460":{"position":[[1104,8]]}}}],["1)}{2",{"_index":549,"t":{"209":{"position":[[551,6]]}}}],["1)}{2}2n(n−1)​，故时间复杂度为o(n2)o(n^2)o(n2",{"_index":542,"t":{"207":{"position":[[532,38]]}}}],["1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为o(n2)o(n^2)o(n2",{"_index":502,"t":{"201":{"position":[[416,73]]}}}],["1)红叔叔（2",{"_index":11,"t":{"13":{"position":[[38,57]]}}}],["1+8+23组合。ieee754标准表示成浮点数真值为：(−1)s∗1.m∗2e−127",{"_index":94,"t":{"75":{"position":[[87,45]]}}}],["1,2,3",{"_index":1474,"t":{"479":{"position":[[0,34]]}}}],["1,2,5",{"_index":406,"t":{"180":{"position":[[585,7]]}}}],["1,2,5,6",{"_index":407,"t":{"180":{"position":[[593,9]]}}}],["1,2,5,6,3",{"_index":408,"t":{"180":{"position":[[603,11]]}}}],["1,2,5,6,3,4",{"_index":409,"t":{"180":{"position":[[615,13]]}}}],["1,2,5,6,3,4,7",{"_index":410,"t":{"180":{"position":[[629,15]]}}}],["1,2,5,6,3,4,7,0",{"_index":411,"t":{"180":{"position":[[645,17]]}}}],["1,high",{"_index":524,"t":{"203":{"position":[[896,8]]}}}],["1,j",{"_index":147,"t":{"98":{"position":[[185,3]]}}}],["1,k",{"_index":206,"t":{"106":{"position":[[84,3]]},"108":{"position":[[388,3]]}}}],["1.000",{"_index":34,"t":{"36":{"position":[[92,55]]}}}],["1.1xxxxx",{"_index":86,"t":{"73":{"position":[[12,11]]}}}],["1.m*2^{e",{"_index":95,"t":{"75":{"position":[[138,9]]}}}],["1.已知树高求结点总数：sum",{"_index":237,"t":{"126":{"position":[[129,15]]}}}],["1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{align",{"_index":236,"t":{"126":{"position":[[45,81]]}}}],["1.若i为偶数则双亲为\\frac{i}{2",{"_index":547,"t":{"209":{"position":[[499,26]]}}}],["1.若i为偶数则双亲为i/2",{"_index":284,"t":{"136":{"position":[[185,18]]}}}],["1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":283,"t":{"136":{"position":[[95,87]]}}}],["1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":546,"t":{"209":{"position":[[411,85]]}}}],["1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m",{"_index":308,"t":{"152":{"position":[[0,32]]}}}],["1.，所以尾数的精度是24，能表示24",{"_index":90,"t":{"75":{"position":[[22,35]]}}}],["10",{"_index":62,"t":{"57":{"position":[[191,5]]},"304":{"position":[[127,2]]},"306":{"position":[[546,5],[616,4]]},"314":{"position":[[85,2]]},"316":{"position":[[80,2]]},"318":{"position":[[88,2]]},"326":{"position":[[77,2],[209,3]]},"339":{"position":[[110,2]]},"351":{"position":[[95,3]]},"359":{"position":[[129,2]]},"361":{"position":[[551,5],[623,4]]},"369":{"position":[[134,3],[366,5]]},"373":{"position":[[272,3]]},"377":{"position":[[82,3]]},"385":{"position":[[87,3]]},"389":{"position":[[97,3]]},"391":{"position":[[107,3]]},"498":{"position":[[6644,7]]}}}],["100",{"_index":1022,"t":{"339":{"position":[[207,4]]},"341":{"position":[[93,4]]}}}],["1001",{"_index":1520,"t":{"487":{"position":[[942,6]]}}}],["1024;}http",{"_index":796,"t":{"285":{"position":[[196,10]]}}}],["1025",{"_index":1011,"t":{"337":{"position":[[95,5]]}}}],["109",{"_index":1036,"t":{"343":{"position":[[315,4]]}}}],["10:08:03",{"_index":1123,"t":{"401":{"position":[[376,10]]}}}],["10和20",{"_index":1415,"t":{"463":{"position":[[0,59]]}}}],["11",{"_index":60,"t":{"57":{"position":[[182,2]]},"326":{"position":[[286,2]]},"395":{"position":[[261,5]]},"498":{"position":[[4466,8]]}}}],["111",{"_index":965,"t":{"318":{"position":[[242,6]]}}}],["11:28:52",{"_index":1111,"t":{"395":{"position":[[374,10]]}}}],["11:37:49",{"_index":1091,"t":{"385":{"position":[[391,9]]}}}],["11:45:57",{"_index":1066,"t":{"369":{"position":[[295,10]]}}}],["11:49:11",{"_index":1083,"t":{"381":{"position":[[211,10],[579,10]]}}}],["11:49:31",{"_index":1054,"t":{"359":{"position":[[329,10]]}}}],["11:50:24",{"_index":1075,"t":{"377":{"position":[[285,10]]}}}],["12",{"_index":966,"t":{"318":{"position":[[268,3]]},"379":{"position":[[119,3],[278,2]]},"381":{"position":[[318,2],[686,2]]},"574":{"position":[[113,2]]}}}],["1232−1",{"_index":1851,"t":{"563":{"position":[[192,6]]}}}],["123456",{"_index":863,"t":{"294":{"position":[[82,9]]},"343":{"position":[[86,9]]}}}],["127.0.0.1",{"_index":1817,"t":{"538":{"position":[[78,11]]}}}],["127.0.0.1只能本机访问)或改成本机ip地址，否则影响远程ip",{"_index":1818,"t":{"538":{"position":[[103,36]]}}}],["127}(−1)s∗1.m∗2e−127",{"_index":96,"t":{"75":{"position":[[148,20]]}}}],["129",{"_index":948,"t":{"314":{"position":[[302,4]]}}}],["13",{"_index":400,"t":{"180":{"position":[[433,2],[442,2],[451,2],[460,2]]},"349":{"position":[[104,3]]},"351":{"position":[[179,3]]},"353":{"position":[[106,3]]},"355":{"position":[[53,3]]},"359":{"position":[[220,3],[436,2]]},"361":{"position":[[99,3],[319,3]]},"363":{"position":[[46,3],[270,3],[754,3],[971,3]]},"367":{"position":[[229,3]]},"369":{"position":[[218,3]]},"373":{"position":[[44,3]]},"377":{"position":[[166,3]]},"379":{"position":[[94,3]]},"381":{"position":[[40,3],[102,3],[389,3],[470,3]]},"385":{"position":[[179,3]]},"389":{"position":[[181,3]]},"391":{"position":[[192,3]]},"393":{"position":[[92,3]]},"395":{"position":[[42,3]]},"401":{"position":[[42,3]]}}}],["13:34:49",{"_index":905,"t":{"304":{"position":[[326,10]]}}}],["14",{"_index":404,"t":{"180":{"position":[[559,2]]},"308":{"position":[[86,3]]},"310":{"position":[[876,3]]},"312":{"position":[[74,3]]},"389":{"position":[[400,3]]}}}],["14:03:02",{"_index":1095,"t":{"389":{"position":[[211,10]]}}}],["14:36:26",{"_index":1062,"t":{"367":{"position":[[330,10]]}}}],["158",{"_index":893,"t":{"304":{"position":[[82,4],[380,4]]}}}],["158800882",{"_index":989,"t":{"322":{"position":[[301,12]]},"324":{"position":[[251,12]]}}}],["15:02:50",{"_index":1079,"t":{"379":{"position":[[281,10]]}}}],["15的子节点，然后进入9的子节点，对比了6",{"_index":31,"t":{"30":{"position":[[124,39]]}}}],["16",{"_index":942,"t":{"312":{"position":[[371,4]]},"389":{"position":[[242,5]]}}}],["16.x",{"_index":839,"t":{"287":{"position":[[200,4],[253,6]]}}}],["1624538837259",{"_index":1042,"t":{"343":{"position":[[627,14],[694,14]]}}}],["16:07:11",{"_index":958,"t":{"316":{"position":[[239,10]]}}}],["16:32:40",{"_index":1002,"t":{"326":{"position":[[289,10]]}}}],["17",{"_index":1110,"t":{"395":{"position":[[371,2]]}}}],["17002",{"_index":955,"t":{"316":{"position":[[150,6]]}}}],["17:04:31",{"_index":994,"t":{"322":{"position":[[405,10]]},"324":{"position":[[355,10]]}}}],["17:12:50",{"_index":974,"t":{"320":{"position":[[244,9]]}}}],["17:56:38",{"_index":946,"t":{"314":{"position":[[218,10]]}}}],["18",{"_index":889,"t":{"302":{"position":[[106,5]]},"310":{"position":[[816,4]]},"322":{"position":[[212,3]]},"324":{"position":[[162,3]]},"363":{"position":[[685,4],[1386,4]]},"389":{"position":[[377,5]]}}}],["180",{"_index":1053,"t":{"359":{"position":[[291,4]]},"381":{"position":[[173,4],[541,4]]},"570":{"position":[[113,4],[118,9]]}}}],["181",{"_index":884,"t":{"300":{"position":[[131,4]]}}}],["1812",{"_index":970,"t":{"320":{"position":[[92,5]]}}}],["1845",{"_index":953,"t":{"314":{"position":[[514,6]]}}}],["18:55:02",{"_index":992,"t":{"322":{"position":[[368,10]]},"324":{"position":[[318,10]]}}}],["18:56:07",{"_index":1107,"t":{"393":{"position":[[281,10]]},"395":{"position":[[236,10]]},"401":{"position":[[231,10]]}}}],["18:56:21",{"_index":1108,"t":{"393":{"position":[[377,10]]},"395":{"position":[[330,10]]},"401":{"position":[[332,10]]}}}],["19665",{"_index":1118,"t":{"399":{"position":[[170,6]]}}}],["1;a[0",{"_index":448,"t":{"193":{"position":[[565,6]]}}}],["1;high",{"_index":458,"t":{"195":{"position":[[419,6]]}}}],["1;i",{"_index":492,"t":{"201":{"position":[[157,7]]},"207":{"position":[[317,7]]},"498":{"position":[[359,3]]}}}],["1;j",{"_index":215,"t":{"106":{"position":[[296,3]]},"195":{"position":[[545,3],[559,3]]}}}],["1;j>i;j",{"_index":493,"t":{"201":{"position":[[179,7]]}}}],["1]+1",{"_index":193,"t":{"104":{"position":[[1774,4]]}}}],["1][0,p−1",{"_index":125,"t":{"92":{"position":[[161,9]]}}}],["1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p",{"_index":139,"t":{"94":{"position":[[82,45]]}}}],["1]ch[0...k−1]=ch[j−k...j−1",{"_index":167,"t":{"102":{"position":[[424,27]]}}}],["1]ch[0∼k−1]=ch[j−k∼j−1",{"_index":177,"t":{"104":{"position":[[651,23]]}}}],["1]中寻找最小的元素a[k",{"_index":531,"t":{"207":{"position":[[213,14]]}}}],["1]和l[k+1...n]，其中l[k]为pivot，使得左边表的值都小于pivot",{"_index":504,"t":{"203":{"position":[[76,80]]}}}],["1]，所以删除后节点的关键字个数不能小于（m/2",{"_index":19,"t":{"25":{"position":[[31,29]]}}}],["1^2,2^2",{"_index":130,"t":{"92":{"position":[[358,8]]}}}],["1n−1",{"_index":387,"t":{"176":{"position":[[122,14]]},"178":{"position":[[87,8]]},"180":{"position":[[210,29]]}}}],["1union|intersect|except（并、交、差）查询语句2",{"_index":681,"t":{"240":{"position":[[595,39]]}}}],["1}(n",{"_index":500,"t":{"201":{"position":[[396,4]]}}}],["1},k_j^{d",{"_index":605,"t":{"214":{"position":[[399,9]]}}}],["1}.......q_0qr​,qr−1​.......q0",{"_index":616,"t":{"214":{"position":[[695,31]]}}}],["1~n",{"_index":242,"t":{"128":{"position":[[0,71]]}}}],["1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3",{"_index":243,"t":{"128":{"position":[[72,84]]}}}],["1→2",{"_index":398,"t":{"180":{"position":[[367,3]]}}}],["1→2→4",{"_index":401,"t":{"180":{"position":[[436,5],[445,5],[454,5],[463,5]]}}}],["1→2→4→7",{"_index":405,"t":{"180":{"position":[[562,7]]}}}],["1→5",{"_index":402,"t":{"180":{"position":[[481,3],[487,3]]}}}],["1→5→3",{"_index":399,"t":{"180":{"position":[[403,5],[411,5]]}}}],["1→6",{"_index":403,"t":{"180":{"position":[[515,3],[521,3],[527,3]]}}}],["1−(2n−1)≤x≤2n−1",{"_index":43,"t":{"38":{"position":[[162,16]]}}}],["1−2n≤x≤2n−1",{"_index":49,"t":{"40":{"position":[[212,11]]}}}],["1−2−n)≤x≤1−2−n",{"_index":36,"t":{"38":{"position":[[43,24]]}}}],["1∣e∣=∣v∣−1",{"_index":384,"t":{"174":{"position":[[109,10]]}}}],["1≤x≤1−2−n",{"_index":46,"t":{"40":{"position":[[126,17]]}}}],["1、非空二叉树的叶结点等于度为2的结点数加1，即n0",{"_index":278,"t":{"136":{"position":[[0,27]]}}}],["1个字符串有关。我们看前部分字符串，发现共同前后缀是ab，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是c这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是abc？长度为2，那么next[j+1]就是在next[j]的基础上加1",{"_index":189,"t":{"104":{"position":[[1345,231]]}}}],["1中找到适合l[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i",{"_index":438,"t":{"193":{"position":[[104,108]]}}}],["1变为0",{"_index":24,"t":{"25":{"position":[[383,36]]}}}],["1和2",{"_index":415,"t":{"185":{"position":[[98,33]]},"209":{"position":[[1312,5]]}}}],["1开始的，如果是0",{"_index":274,"t":{"134":{"position":[[618,36]]}}}],["1次递归调用，所以栈为o(n)n−1次递归调用，所以栈为o(n)，平均是o(log2n)o(log_{2}n)o(log2​n",{"_index":526,"t":{"203":{"position":[[1016,64]]}}}],["1躺排序，第i躺排序要进行n",{"_index":498,"t":{"201":{"position":[[336,14]]}}}],["1躺，一共移动3(n",{"_index":540,"t":{"207":{"position":[[478,10]]}}}],["1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i",{"_index":437,"t":{"193":{"position":[[60,43]]}}}],["1（从右到左找到第一个1，前面的数取反即可）。如果是从x",{"_index":45,"t":{"40":{"position":[[0,88]]}}}],["1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k",{"_index":417,"t":{"187":{"position":[[13,34]]}}}],["1，m",{"_index":18,"t":{"23":{"position":[[27,3]]},"25":{"position":[[27,3]]}}}],["1，且其左（右）兄弟的关键字数目大于（m/2",{"_index":20,"t":{"25":{"position":[[143,77]]}}}],["1，二叉树的非终端结点数为：n",{"_index":309,"t":{"152":{"position":[[40,112]]}}}],["1，余数左移减去除数；异号商0",{"_index":79,"t":{"68":{"position":[[66,39]]}}}],["1，列2",{"_index":683,"t":{"240":{"position":[[657,10]]}}}],["1，则加上被乘数，为0则加0",{"_index":66,"t":{"60":{"position":[[50,20]]}}}],["1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0",{"_index":171,"t":{"104":{"position":[[401,62]]}}}],["1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0",{"_index":200,"t":{"104":{"position":[[2506,38]]}}}],["1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的aof",{"_index":1788,"t":{"530":{"position":[[35,70]]}}}],["1；阶码：8；尾数：23",{"_index":89,"t":{"75":{"position":[[5,16]]}}}],["2",{"_index":12,"t":{"13":{"position":[[147,6]]},"38":{"position":[[71,1],[91,3]]},"40":{"position":[[158,3]]},"57":{"position":[[144,6]]},"83":{"position":[[90,5],[96,30]]},"87":{"position":[[37,4]]},"92":{"position":[[292,14]]},"98":{"position":[[294,2]]},"104":{"position":[[533,11]]},"121":{"position":[[63,5]]},"145":{"position":[[181,7]]},"152":{"position":[[166,38]]},"170":{"position":[[90,11],[156,6]]},"180":{"position":[[313,1],[363,1],[582,2]]},"193":{"position":[[622,9]]},"195":{"position":[[474,2],[609,7]]},"197":{"position":[[769,11]]},"201":{"position":[[274,11]]},"203":{"position":[[157,4]]},"207":{"position":[[424,9]]},"209":{"position":[[105,7]]},"214":{"position":[[297,6]]},"216":{"position":[[588,4]]},"218":{"position":[[5,4]]},"300":{"position":[[223,1]]},"304":{"position":[[358,2]]},"308":{"position":[[318,3]]},"310":{"position":[[580,3],[606,4],[640,3],[894,4]]},"312":{"position":[[92,4]]},"314":{"position":[[481,2]]},"318":{"position":[[442,4],[628,2],[701,3]]},"347":{"position":[[91,2]]},"351":{"position":[[158,2]]},"355":{"position":[[87,2]]},"359":{"position":[[361,2]]},"363":{"position":[[297,2],[998,2]]},"367":{"position":[[274,2],[362,2]]},"369":{"position":[[348,2]]},"377":{"position":[[145,2]]},"379":{"position":[[313,2]]},"381":{"position":[[243,2],[611,2]]},"389":{"position":[[451,4],[475,2]]},"391":{"position":[[213,2]]},"431":{"position":[[136,12]]},"498":{"position":[[1621,2]]},"523":{"position":[[227,1]]},"532":{"position":[[195,1]]},"578":{"position":[[159,1]]}}}],["2(key1",{"_index":647,"t":{"238":{"position":[[153,8]]}}}],["2*log_{2}{(n+1)}h≤2∗log2​(n+1",{"_index":10,"t":{"11":{"position":[[242,30]]}}}],["2.1",{"_index":141,"t":{"96":{"position":[[16,3]]},"431":{"position":[[111,3]]}}}],["2.2",{"_index":1266,"t":{"431":{"position":[[1147,3]]}}}],["2.已知编号i求双亲：(i/2",{"_index":239,"t":{"126":{"position":[[157,22]]}}}],["2.构建dao,加上注解并extend",{"_index":1138,"t":{"416":{"position":[[137,20]]}}}],["2.班次固定白夜班，08:30~20:30",{"_index":1457,"t":{"470":{"position":[[39,30]]}}}],["2.若i为奇数则双亲为(i",{"_index":285,"t":{"136":{"position":[[209,13]]}}}],["2.若i为奇数则双亲为\\frac{(i",{"_index":548,"t":{"209":{"position":[[531,19]]}}}],["20",{"_index":901,"t":{"304":{"position":[[289,3]]},"310":{"position":[[233,3]]},"361":{"position":[[209,3]]},"363":{"position":[[157,3],[865,3]]}}}],["2019",{"_index":986,"t":{"322":{"position":[[264,5],[356,5]]},"324":{"position":[[214,5],[306,5]]},"393":{"position":[[269,5],[365,5]]},"395":{"position":[[224,5],[318,5]]},"401":{"position":[[320,5]]}}}],["2020",{"_index":1090,"t":{"385":{"position":[[379,5]]}}}],["2021",{"_index":879,"t":{"300":{"position":[[75,5]]},"304":{"position":[[314,5]]},"310":{"position":[[272,5],[295,5]]},"314":{"position":[[206,5]]},"316":{"position":[[227,5]]},"320":{"position":[[232,5]]},"322":{"position":[[393,5]]},"324":{"position":[[343,5]]},"326":{"position":[[277,5]]},"339":{"position":[[442,5],[488,5],[532,5]]},"341":{"position":[[328,5],[374,5],[418,5]]},"359":{"position":[[317,5]]},"367":{"position":[[318,5]]},"369":{"position":[[283,5]]},"377":{"position":[[273,5]]},"379":{"position":[[269,5]]},"381":{"position":[[199,5],[567,5]]},"389":{"position":[[199,5]]},"391":{"position":[[330,5]]},"395":{"position":[[362,5]]},"401":{"position":[[219,5],[364,5]]}}}],["2024",{"_index":1710,"t":{"498":{"position":[[5627,4]]}}}],["20:01:26",{"_index":1030,"t":{"339":{"position":[[454,10],[500,10]]},"341":{"position":[[340,10],[386,10]]}}}],["20:01:35",{"_index":1031,"t":{"339":{"position":[[544,10]]},"341":{"position":[[430,10]]}}}],["20:05:02",{"_index":1099,"t":{"391":{"position":[[342,9]]}}}],["20:30:00",{"_index":1463,"t":{"473":{"position":[[77,10]]},"487":{"position":[[2148,10],[2736,10],[2787,10],[2917,10],[2970,10]]}}}],["21",{"_index":1029,"t":{"339":{"position":[[451,2],[497,2],[541,2]]},"341":{"position":[[337,2],[383,2],[427,2]]},"359":{"position":[[326,2]]},"369":{"position":[[292,2]]},"377":{"position":[[282,2]]},"381":{"position":[[208,2],[576,2]]}}}],["2112112",{"_index":1122,"t":{"401":{"position":[[258,10]]}}}],["22",{"_index":913,"t":{"306":{"position":[[209,3]]},"310":{"position":[[281,2]]},"337":{"position":[[252,2]]},"385":{"position":[[388,2]]}}}],["232−12^{32",{"_index":1850,"t":{"563":{"position":[[178,11]]}}}],["23945",{"_index":1015,"t":{"337":{"position":[[160,6]]}}}],["2399",{"_index":871,"t":{"298":{"position":[[80,5]]}}}],["24",{"_index":1098,"t":{"391":{"position":[[339,2]]}}}],["2413",{"_index":1010,"t":{"337":{"position":[[65,5]]}}}],["24928",{"_index":956,"t":{"316":{"position":[[175,6]]}}}],["25",{"_index":881,"t":{"300":{"position":[[84,6]]}}}],["25067",{"_index":968,"t":{"318":{"position":[[534,6]]}}}],["2520",{"_index":898,"t":{"304":{"position":[[218,5]]}}}],["26",{"_index":1063,"t":{"367":{"position":[[437,2]]}}}],["27",{"_index":477,"t":{"197":{"position":[[634,2]]},"498":{"position":[[5635,2]]}}}],["275",{"_index":1078,"t":{"379":{"position":[[243,4]]}}}],["2897",{"_index":1080,"t":{"379":{"position":[[389,5]]}}}],["2;i",{"_index":442,"t":{"193":{"position":[[506,3]]},"195":{"position":[[383,3]]}}}],["2^2.........k^2",{"_index":131,"t":{"92":{"position":[[367,16]]}}}],["2^32",{"_index":1839,"t":{"552":{"position":[[83,4]]},"556":{"position":[[88,4]]},"560":{"position":[[142,4]]}}}],["2^64",{"_index":1871,"t":{"574":{"position":[[130,4]]}}}],["2^h",{"_index":238,"t":{"126":{"position":[[147,3]]}}}],["2^n",{"_index":42,"t":{"38":{"position":[[157,3]]},"40":{"position":[[193,3],[207,3]]}}}],["2^{n",{"_index":41,"t":{"38":{"position":[[137,6]]}}}],["2e",{"_index":317,"t":{"160":{"position":[[98,2]]}}}],["2n2^n2n，相当于x",{"_index":51,"t":{"44":{"position":[[0,75]]}}}],["2n−1)≤x≤2n−1",{"_index":40,"t":{"38":{"position":[[115,21]]}}}],["2n≤x≤2n−1",{"_index":48,"t":{"40":{"position":[[175,17]]}}}],["2x",{"_index":269,"t":{"134":{"position":[[435,2],[569,3]]}}}],["2},k_j^{d",{"_index":606,"t":{"214":{"position":[[409,9]]}}}],["2、二叉树第k层上最多有2k",{"_index":280,"t":{"136":{"position":[[35,14]]}}}],["2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right",{"_index":1842,"t":{"554":{"position":[[0,125]]}}}],["2的，要求小数点后一位不全为0，也就是要为1",{"_index":87,"t":{"73":{"position":[[24,27]]}}}],["2路归并，基于分治思想，将n个元素分解成n/2",{"_index":593,"t":{"212":{"position":[[682,49]]}}}],["2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k",{"_index":422,"t":{"187":{"position":[[240,34]]}}}],["2，o",{"_index":170,"t":{"104":{"position":[[388,12]]}}}],["2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m",{"_index":23,"t":{"25":{"position":[[284,36]]}}}],["2，知道增量变成1",{"_index":463,"t":{"197":{"position":[[193,13]]}}}],["2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的aof文件中，这样做是保证原有的aof",{"_index":1789,"t":{"530":{"position":[[106,81]]}}}],["3",{"_index":63,"t":{"57":{"position":[[197,7]]},"62":{"position":[[147,15]]},"92":{"position":[[469,5]]},"121":{"position":[[155,10]]},"145":{"position":[[360,9]]},"180":{"position":[[319,1],[395,1]]},"193":{"position":[[759,7]]},"195":{"position":[[672,5]]},"203":{"position":[[444,4],[914,11]]},"209":{"position":[[171,10]]},"212":{"position":[[276,6]]},"214":{"position":[[823,11]]},"218":{"position":[[10,6]]},"306":{"position":[[570,2]]},"314":{"position":[[385,4]]},"318":{"position":[[465,2]]},"361":{"position":[[577,2]]},"363":{"position":[[639,2],[1340,2]]},"369":{"position":[[488,2]]},"373":{"position":[[296,2]]},"393":{"position":[[234,2]]},"395":{"position":[[189,2]]},"401":{"position":[[184,2]]},"498":{"position":[[731,3],[1798,4],[3640,4],[3669,3]]},"523":{"position":[[344,1]]},"578":{"position":[[216,1]]}}}],["3.2i",{"_index":287,"t":{"136":{"position":[[233,4]]},"209":{"position":[[563,4]]}}}],["3.在impl中使用dao也可以快捷的使用save,delete等方法,只用过save,传入实体类即可,直接调用dao.save(class",{"_index":1156,"t":{"416":{"position":[[474,84]]}}}],["3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":240,"t":{"126":{"position":[[182,28]]}}}],["3.效率未达到95%需显示红色，功能直通率/外观直通率未到98",{"_index":1458,"t":{"470":{"position":[[70,37]]}}}],["30",{"_index":1106,"t":{"393":{"position":[[217,3]]},"395":{"position":[[172,3]]},"401":{"position":[[167,3]]},"435":{"position":[[575,6]]},"465":{"position":[[949,5]]}}}],["31",{"_index":904,"t":{"304":{"position":[[323,2]]},"401":{"position":[[373,2]]}}}],["321dec89",{"_index":1037,"t":{"343":{"position":[[332,9]]}}}],["36",{"_index":1086,"t":{"385":{"position":[[157,3]]}}}],["38和27进行交换（因为27",{"_index":529,"t":{"207":{"position":[[159,19]]}}}],["3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0",{"_index":607,"t":{"214":{"position":[[419,50]]}}}],["3、高度为k的二叉树最多有2k",{"_index":281,"t":{"136":{"position":[[56,15]]}}}],["3后，整体带上acc",{"_index":67,"t":{"60":{"position":[[71,25]]}}}],["3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n",{"_index":72,"t":{"62":{"position":[[163,42]]}}}],["3）活动aia_iai​的最早开始事件e(i)e(i)e(i",{"_index":427,"t":{"187":{"position":[[460,31]]}}}],["3，9，15",{"_index":28,"t":{"28":{"position":[[178,45]]}}}],["3，执行n−1n",{"_index":394,"t":{"180":{"position":[[198,11]]}}}],["3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新aof",{"_index":1790,"t":{"530":{"position":[[188,60]]}}}],["4",{"_index":76,"t":{"64":{"position":[[77,14]]},"92":{"position":[[570,8]]},"121":{"position":[[187,8]]},"180":{"position":[[325,1],[365,1],[429,1]]},"209":{"position":[[384,7]]},"214":{"position":[[941,4]]},"218":{"position":[[17,3]]},"308":{"position":[[128,2],[260,1]]},"310":{"position":[[184,2],[421,2],[741,4],[766,2],[960,2],[1113,3]]},"312":{"position":[[152,2],[280,4],[307,3]]},"314":{"position":[[407,2]]},"371":{"position":[[148,2]]},"385":{"position":[[72,2]]},"389":{"position":[[160,2],[352,2],[426,2]]},"498":{"position":[[2014,2]]},"523":{"position":[[387,1]]},"578":{"position":[[310,1]]}}}],["4.2i+1",{"_index":289,"t":{"136":{"position":[[259,6]]},"209":{"position":[[589,6]]}}}],["40",{"_index":1841,"t":{"552":{"position":[[109,13]]},"556":{"position":[[97,9]]},"560":{"position":[[164,15]]}}}],["4013",{"_index":979,"t":{"322":{"position":[[124,4]]},"324":{"position":[[74,4]]}}}],["4294967295",{"_index":1840,"t":{"552":{"position":[[96,12]]},"560":{"position":[[151,12]]}}}],["433c",{"_index":1025,"t":{"339":{"position":[[246,4]]},"341":{"position":[[132,4]]}}}],["46",{"_index":964,"t":{"318":{"position":[[222,3]]},"379":{"position":[[335,3]]}}}],["4736",{"_index":1039,"t":{"343":{"position":[[347,4]]}}}],["49",{"_index":476,"t":{"197":{"position":[[626,7],[741,2]]}}}],["49，这次变成了27",{"_index":482,"t":{"197":{"position":[[730,10]]}}}],["4ccc",{"_index":1103,"t":{"393":{"position":[[123,4]]},"395":{"position":[[80,4]]},"401":{"position":[[73,4]]}}}],["4、对于结点i(i>1",{"_index":282,"t":{"136":{"position":[[78,16]]}}}],["4操作n次，最后一步恒置1，“末位恒置1",{"_index":80,"t":{"68":{"position":[[106,23]]}}}],["4的，要求小数点后两位不全为0",{"_index":88,"t":{"73":{"position":[[52,20]]}}}],["4）n",{"_index":592,"t":{"212":{"position":[[673,8]]}}}],["4）活动aia_iai​的最迟开始事件l(i)l(i)l(i",{"_index":429,"t":{"187":{"position":[[538,31]]}}}],["4：当追加结束后，redis就会用新aof文件来代替旧aof文件，之后再有新的写指令，就都会追加到新的aof",{"_index":1791,"t":{"530":{"position":[[249,57]]}}}],["5",{"_index":292,"t":{"136":{"position":[[375,5]]},"180":{"position":[[331,1],[477,1],[479,1],[485,1],[513,1],[519,1],[525,1]]},"209":{"position":[[1259,5]]},"212":{"position":[[885,11]]},"306":{"position":[[347,2]]},"326":{"position":[[147,2]]},"359":{"position":[[272,2]]},"361":{"position":[[346,2]]},"367":{"position":[[145,1]]},"369":{"position":[[238,2]]},"371":{"position":[[127,2],[318,4],[343,2]]},"373":{"position":[[71,2]]},"379":{"position":[[224,2]]},"381":{"position":[[154,2],[522,2]]},"389":{"position":[[323,2]]},"498":{"position":[[2138,2],[4617,2]]},"523":{"position":[[447,1]]},"578":{"position":[[334,1]]}}}],["5.0",{"_index":1872,"t":{"576":{"position":[[21,3]]}}}],["507",{"_index":963,"t":{"318":{"position":[[171,4],[555,4]]}}}],["508",{"_index":1069,"t":{"371":{"position":[[99,4]]}}}],["52045f5f",{"_index":1101,"t":{"393":{"position":[[108,9]]},"395":{"position":[[65,9]]},"401":{"position":[[58,9]]}}}],["520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999",{"_index":603,"t":{"214":{"position":[[117,96]]}}}],["53",{"_index":545,"t":{"209":{"position":[[364,19]]}}}],["53下坠到原87",{"_index":544,"t":{"209":{"position":[[334,29]]}}}],["53＜87",{"_index":543,"t":{"209":{"position":[[299,34]]}}}],["579",{"_index":887,"t":{"300":{"position":[[201,4]]}}}],["592",{"_index":1077,"t":{"379":{"position":[[174,4]]}}}],["5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8",{"_index":455,"t":{"195":{"position":[[105,174]]}}}],["5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof",{"_index":1792,"t":{"530":{"position":[[307,68]]}}}],["6",{"_index":396,"t":{"180":{"position":[[337,1],[511,1]]},"209":{"position":[[1438,11]]},"359":{"position":[[404,2]]},"363":{"position":[[108,2],[816,2]]},"367":{"position":[[102,2],[405,2]]},"379":{"position":[[357,2]]},"381":{"position":[[286,2],[654,2]]}}}],["60",{"_index":1061,"t":{"367":{"position":[[293,3]]}}}],["6148",{"_index":1013,"t":{"337":{"position":[[128,5]]}}}],["6204",{"_index":944,"t":{"314":{"position":[[155,5]]}}}],["6379",{"_index":1825,"t":{"542":{"position":[[63,4]]}}}],["6534",{"_index":945,"t":{"314":{"position":[[179,5]]}}}],["65是一组的，此时i=3，j=1",{"_index":479,"t":{"197":{"position":[[640,27]]}}}],["666",{"_index":960,"t":{"316":{"position":[[297,5]]}}}],["68",{"_index":1097,"t":{"391":{"position":[[170,3]]}}}],["7",{"_index":397,"t":{"180":{"position":[[343,1],[401,1],[409,1],[547,1]]},"314":{"position":[[432,2]]},"369":{"position":[[197,2]]}}}],["7.0.0.tar.gz",{"_index":1805,"t":{"536":{"position":[[102,13]]}}}],["7.0.0中的文件，有两个为redi",{"_index":1809,"t":{"536":{"position":[[196,19]]}}}],["7.0.0目录下，执行make",{"_index":1806,"t":{"536":{"position":[[124,15]]}}}],["70",{"_index":25,"t":{"25":{"position":[[420,17]]}}}],["727626236f47",{"_index":981,"t":{"322":{"position":[[134,14]]},"324":{"position":[[84,14]]}}}],["73处不满足，同时左兄弟不够借，则82",{"_index":26,"t":{"25":{"position":[[438,27]]}}}],["76",{"_index":478,"t":{"197":{"position":[[637,2]]}}}],["76，依次类推，当i为7",{"_index":483,"t":{"197":{"position":[[744,24]]}}}],["8",{"_index":877,"t":{"300":{"position":[[56,2]]},"306":{"position":[[101,2],[321,2]]},"310":{"position":[[123,2],[395,2],[856,2],[936,2]]},"312":{"position":[[54,2],[128,2]]},"322":{"position":[[94,2]]},"324":{"position":[[44,2]]},"326":{"position":[[168,2]]}}}],["81",{"_index":1021,"t":{"339":{"position":[[180,3]]}}}],["85",{"_index":1017,"t":{"337":{"position":[[207,2]]}}}],["8dc4",{"_index":1026,"t":{"339":{"position":[[251,4]]},"341":{"position":[[137,4]]}}}],["8，发现8已经大于7",{"_index":32,"t":{"30":{"position":[[164,19]]}}}],["9",{"_index":30,"t":{"30":{"position":[[95,28]]},"359":{"position":[[199,2]]},"465":{"position":[[108,5]]},"498":{"position":[[4061,12]]}}}],["90",{"_index":1855,"t":{"570":{"position":[[130,3]]}}}],["9016",{"_index":909,"t":{"304":{"position":[[461,4]]}}}],["90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r",{"_index":1856,"t":{"570":{"position":[[134,101]]}}}],["92",{"_index":21,"t":{"25":{"position":[[221,31]]}}}],["93dd",{"_index":1104,"t":{"393":{"position":[[128,4]]},"395":{"position":[[85,4]]},"401":{"position":[[78,4]]}}}],["a,b",{"_index":705,"t":{"245":{"position":[[68,22],[106,5],[115,12],[144,10]]}}}],["a,b,c",{"_index":655,"t":{"240":{"position":[[10,5]]}}}],["a,b,t",{"_index":1466,"t":{"475":{"position":[[146,6]]}}}],["a,c",{"_index":1058,"t":{"363":{"position":[[591,6],[1292,6]]}}}],["a,cours",{"_index":671,"t":{"240":{"position":[[372,8]]}}}],["a,int",{"_index":486,"t":{"201":{"position":[[41,6]]}}}],["a.all_count",{"_index":1379,"t":{"460":{"position":[[892,11]]}}}],["a.cno,b.cpno",{"_index":670,"t":{"240":{"position":[[347,12]]}}}],["a.cpno",{"_index":672,"t":{"240":{"position":[[389,6]]}}}],["a.end_tim",{"_index":1377,"t":{"460":{"position":[[840,10]]}}}],["a.id",{"_index":1372,"t":{"460":{"position":[[721,4]]}}}],["a.inductive_d",{"_index":1375,"t":{"460":{"position":[[776,16]]}}}],["a.line_no",{"_index":1728,"t":{"498":{"position":[[6581,9]]}}}],["a.process",{"_index":1380,"t":{"460":{"position":[[918,9]]}}}],["a.remark",{"_index":1384,"t":{"460":{"position":[[1018,8]]}}}],["a.rn",{"_index":1386,"t":{"460":{"position":[[1097,4]]}}}],["a.shop_ord",{"_index":1374,"t":{"460":{"position":[[748,12],[1065,12]]},"487":{"position":[[607,12]]},"498":{"position":[[6514,12]]}}}],["a.shop_order,split(b.planned_item_bo,2",{"_index":1724,"t":{"498":{"position":[[6388,39]]}}}],["a.sit",{"_index":1726,"t":{"498":{"position":[[6494,6],[6553,6]]}}}],["a.start_tim",{"_index":1376,"t":{"460":{"position":[[812,12]]}}}],["a.statu",{"_index":1729,"t":{"498":{"position":[[6633,8]]}}}],["a.sum_count",{"_index":1381,"t":{"460":{"position":[[940,11]]}}}],["a.time_rang",{"_index":1378,"t":{"460":{"position":[[864,12]]}}}],["a13f",{"_index":1102,"t":{"393":{"position":[[118,4]]},"395":{"position":[[75,4]]},"401":{"position":[[68,4]]}}}],["a[0",{"_index":445,"t":{"193":{"position":[[540,4],[611,5]]},"195":{"position":[[400,4],[489,5],[600,5]]},"197":{"position":[[467,4],[554,5]]},"209":{"position":[[995,4],[1252,4]]}}}],["a[0]<a[j];j",{"_index":474,"t":{"197":{"position":[[506,11]]}}}],["a[0]当哨兵作为辅助，故空间复杂度上为o(1)o(1)o(1",{"_index":451,"t":{"193":{"position":[[632,39]]}}}],["a[],int",{"_index":104,"t":{"80":{"position":[[113,7]]},"193":{"position":[[475,7]]},"195":{"position":[[339,7]]},"197":{"position":[[231,7]]},"201":{"position":[[104,7]]},"203":{"position":[[491,7],[747,7]]},"207":{"position":[[285,7]]},"209":{"position":[[865,7],[975,7],[1336,7]]},"212":{"position":[[348,7],[751,7]]}}}],["a[high",{"_index":460,"t":{"195":{"position":[[586,6]]},"203":{"position":[[615,8],[675,7]]}}}],["a[high]>=pivot",{"_index":516,"t":{"203":{"position":[[571,15]]}}}],["a[i",{"_index":446,"t":{"193":{"position":[[547,5],[769,27]]},"195":{"position":[[407,5]]},"197":{"position":[[445,3],[474,5]]},"201":{"position":[[201,5]]},"209":{"position":[[1182,5]]}}}],["a[i]<a[i+1",{"_index":563,"t":{"209":{"position":[[1102,12]]}}}],["a[i][j",{"_index":322,"t":{"165":{"position":[[214,10]]}}}],["a[i]，则从a[i.....n",{"_index":530,"t":{"207":{"position":[[192,20]]}}}],["a[j",{"_index":449,"t":{"193":{"position":[[574,5],[594,5]]},"195":{"position":[[567,3],[578,5]]},"197":{"position":[[537,5]]}}}],["a[j+1",{"_index":450,"t":{"193":{"position":[[585,6],[602,6]]}}}],["a[j+gap",{"_index":475,"t":{"197":{"position":[[526,8],[543,8]]}}}],["a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j",{"_index":454,"t":{"193":{"position":[[800,80]]}}}],["a[k",{"_index":559,"t":{"209":{"position":[[1002,5],[1175,4],[1245,4]]},"212":{"position":[[471,5],[560,4],[580,4],[623,6],[655,6]]}}}],["a[k]和a[i",{"_index":532,"t":{"207":{"position":[[228,11]]}}}],["a[low",{"_index":513,"t":{"203":{"position":[[526,7],[606,6],[685,7],[695,6]]}}}],["a[low]<=pivot",{"_index":517,"t":{"203":{"position":[[642,14]]}}}],["a_sb_",{"_index":57,"t":{"57":{"position":[[61,6]]}}}],["aba",{"_index":162,"t":{"102":{"position":[[268,24]]}}}],["accaccacc的计算公式为：tp+tntp+fn+fp+tn\\frac",{"_index":727,"t":{"255":{"position":[[0,37]]}}}],["access_log",{"_index":826,"t":{"285":{"position":[[733,10]]}}}],["acc和recallacc和recallacc和recall也是非常相似的两个指标，同时也有着区别，recallrecallrecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是recallrecallrecall关注的是正向的像素点。而accaccacc",{"_index":730,"t":{"257":{"position":[[177,164]]}}}],["acc设置00.0000，mq中为乘数，乘数后添加一个辅助位（辅助位就是mq",{"_index":70,"t":{"62":{"position":[[66,44]]}}}],["acc里面设置为00.0000（00",{"_index":65,"t":{"60":{"position":[[23,26]]}}}],["ack",{"_index":1885,"t":{"578":{"position":[[505,3]]}}}],["acknowledg",{"_index":1886,"t":{"578":{"position":[[509,12]]}}}],["ack的消息id，如果客户端没有ack，这个变量里面的消息id会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在redi",{"_index":1882,"t":{"578":{"position":[[348,107]]}}}],["action",{"_index":857,"t":{"287":{"position":[[766,56]]},"431":{"position":[[333,6]]}}}],["action@4.0.0",{"_index":849,"t":{"287":{"position":[[440,12]]}}}],["actions/checkout@v2",{"_index":837,"t":{"287":{"position":[[160,19]]}}}],["actions/setup",{"_index":840,"t":{"287":{"position":[[211,13]]}}}],["actions=\"lineresult",{"_index":1236,"t":{"431":{"position":[[365,21]]}}}],["add",{"_index":649,"t":{"238":{"position":[[191,3],[218,3]]},"280":{"position":[[40,3],[63,3]]},"282":{"position":[[209,3]]}}}],["addr=h(key)addr",{"_index":121,"t":{"92":{"position":[[0,22]]}}}],["admin",{"_index":1004,"t":{"326":{"position":[[323,7]]},"333":{"position":[[41,8],[194,8]]},"377":{"position":[[241,8]]},"385":{"position":[[261,8]]},"391":{"position":[[235,8],[287,6]]},"393":{"position":[[169,8]]},"395":{"position":[[124,8]]},"401":{"position":[[119,8]]}}}],["ae4c",{"_index":1040,"t":{"343":{"position":[[352,4]]}}}],["ag",{"_index":982,"t":{"322":{"position":[[205,6]]},"324":{"position":[[155,6]]},"333":{"position":[[245,6]]},"339":{"position":[[328,6]]},"341":{"position":[[214,6]]},"343":{"position":[[162,6],[454,6]]},"393":{"position":[[210,6]]},"395":{"position":[[165,6]]},"401":{"position":[[160,6]]}}}],["algraph",{"_index":343,"t":{"167":{"position":[[328,8],[337,20]]}}}],["all.get(0).getid",{"_index":1716,"t":{"498":{"position":[[5935,19]]}}}],["all.size()>1",{"_index":1715,"t":{"498":{"position":[[5907,15]]}}}],["all_count",{"_index":1353,"t":{"460":{"position":[[286,9],[299,10],[624,9],[907,10],[1426,10]]},"477":{"position":[[217,9]]},"487":{"position":[[200,10],[1134,10]]}}}],["allclass",{"_index":1081,"t":{"379":{"position":[[402,13]]}}}],["allconfig.get(i).getprocess",{"_index":1422,"t":{"463":{"position":[[297,31]]}}}],["allconfig.get(i).getsite()+\",\"+allconfig.get(i).getline()+\",\"+allconfig.get(i).getoper",{"_index":1420,"t":{"463":{"position":[[182,94]]}}}],["allconfig.s",{"_index":1419,"t":{"463":{"position":[[144,17]]}}}],["allcount",{"_index":1442,"t":{"465":{"position":[[600,9]]}}}],["alter",{"_index":648,"t":{"238":{"position":[[174,5],[331,5]]}}}],["alway",{"_index":1783,"t":{"525":{"position":[[0,28]]}}}],["ana^nan的元素an[i][j]a^n[i][j]an[i][j]表示的是由顶点i到j长度为n",{"_index":335,"t":{"165":{"position":[[761,66]]}}}],["analyz",{"_index":920,"t":{"306":{"position":[[438,10]]},"310":{"position":[[649,10]]},"318":{"position":[[364,10]]},"361":{"position":[[441,10]]},"363":{"position":[[496,10],[1197,10]]},"371":{"position":[[229,10]]},"373":{"position":[[162,10]]}}}],["analyzetextcontentid",{"_index":1067,"t":{"369":{"position":[[440,23]]}}}],["answer",{"_index":938,"t":{"310":{"position":[[831,9]]}}}],["answeritem",{"_index":928,"t":{"308":{"position":[[95,14]]},"310":{"position":[[904,14]]},"312":{"position":[[103,14]]}}}],["aof",{"_index":1763,"t":{"510":{"position":[[134,16]]},"523":{"position":[[463,20]]},"528":{"position":[[0,6],[56,9]]},"530":{"position":[[0,28]]},"532":{"position":[[147,5]]}}}],["aof内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称aof重写)，从而起到aof",{"_index":1782,"t":{"523":{"position":[[389,57]]}}}],["aof包括了rdb头部+aof",{"_index":1802,"t":{"532":{"position":[[404,18]]}}}],["aof对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以reid",{"_index":1794,"t":{"532":{"position":[[55,64]]}}}],["aof文件，会将其这些命令先放入aof缓存中进行保存。这里的aof缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘io",{"_index":1780,"t":{"523":{"position":[[249,94]]}}}],["aof缓冲会根据aof缓冲区同步文件的三种写回策略将命令写入磁盘上的aof",{"_index":1781,"t":{"523":{"position":[[346,40]]}}}],["aof，命令为：appendonli",{"_index":1777,"t":{"523":{"position":[[125,32]]}}}],["aoi",{"_index":1530,"t":{"487":{"position":[[1395,7],[1507,7]]}}}],["aov",{"_index":416,"t":{"185":{"position":[[185,89]]}}}],["aov网中选择一个没有前驱的节点(入度为0",{"_index":414,"t":{"185":{"position":[[57,22]]}}}],["api(valu",{"_index":1180,"t":{"423":{"position":[[133,12],[407,10]]}}}],["api/admin/dashboard/index",{"_index":1008,"t":{"337":{"position":[[0,31]]}}}],["api/admin/education/subject/delete/3",{"_index":1051,"t":{"357":{"position":[[0,42]]}}}],["api/admin/education/subject/edit",{"_index":1050,"t":{"355":{"position":[[0,38]]}}}],["api/admin/education/subject/list",{"_index":1046,"t":{"349":{"position":[[0,38]]}}}],["api/admin/education/subject/pag",{"_index":1048,"t":{"351":{"position":[[0,38]]}}}],["api/admin/education/subject/select/2",{"_index":1049,"t":{"353":{"position":[[0,42]]}}}],["api/admin/exam/paper/delete/9",{"_index":1059,"t":{"365":{"position":[[0,35]]}}}],["api/admin/exam/paper/edit",{"_index":1056,"t":{"363":{"position":[[0,31]]}}}],["api/admin/exam/paper/pag",{"_index":1052,"t":{"359":{"position":[[0,31]]}}}],["api/admin/exam/paper/select/9",{"_index":1055,"t":{"361":{"position":[[0,35]]}}}],["api/admin/exam/paper/taskexampag",{"_index":1060,"t":{"367":{"position":[[0,39]]}}}],["api/admin/exampaperanswer/pag",{"_index":1094,"t":{"389":{"position":[[0,36]]}}}],["api/admin/message/pag",{"_index":1085,"t":{"385":{"position":[[0,28]]}}}],["api/admin/message/send",{"_index":1092,"t":{"387":{"position":[[0,28]]}}}],["api/admin/question/delete/7",{"_index":1072,"t":{"375":{"position":[[0,33]]}}}],["api/admin/question/edit",{"_index":1071,"t":{"373":{"position":[[0,29]]}}}],["api/admin/question/pag",{"_index":1064,"t":{"369":{"position":[[0,29]]}}}],["api/admin/question/select/508",{"_index":1068,"t":{"371":{"position":[[0,35]]}}}],["api/admin/task/delete/1",{"_index":1084,"t":{"383":{"position":[[0,29]]}}}],["api/admin/task/edit",{"_index":1082,"t":{"381":{"position":[[0,25]]}}}],["api/admin/task/pag",{"_index":1073,"t":{"377":{"position":[[0,25]]}}}],["api/admin/task/select/22",{"_index":1076,"t":{"379":{"position":[[0,30]]}}}],["api/admin/upload/configandupload",{"_index":1114,"t":{"399":{"position":[[0,38]]}}}],["api/admin/user/changestatus/1",{"_index":1045,"t":{"347":{"position":[[0,35]]}}}],["api/admin/user/curr",{"_index":1100,"t":{"393":{"position":[[0,28]]}}}],["api/admin/user/delete/3",{"_index":1044,"t":{"345":{"position":[[0,29]]}}}],["api/admin/user/edit",{"_index":1033,"t":{"343":{"position":[[0,25]]}}}],["api/admin/user/event/page/list",{"_index":1096,"t":{"391":{"position":[[0,36]]}}}],["api/admin/user/page/list",{"_index":1020,"t":{"339":{"position":[[0,30]]}}}],["api/admin/user/select/1",{"_index":1032,"t":{"341":{"position":[[0,29]]}}}],["api/admin/user/selectbyusernam",{"_index":1112,"t":{"397":{"position":[[0,37]]}}}],["api/admin/user/upd",{"_index":1109,"t":{"395":{"position":[[0,27]]},"401":{"position":[[0,27]]}}}],["api/student/dashboard/index",{"_index":869,"t":{"298":{"position":[[0,33]]}}}],["api/student/dashboard/task",{"_index":876,"t":{"300":{"position":[[0,32]]}}}],["api/student/education/subject/list",{"_index":888,"t":{"302":{"position":[[0,40]]}}}],["api/student/exam/paper/pagelist",{"_index":890,"t":{"304":{"position":[[0,37]]}}}],["api/student/exam/paper/select/9",{"_index":910,"t":{"306":{"position":[[0,37]]}}}],["api/student/exampaper/answer/answersubmit",{"_index":925,"t":{"308":{"position":[[0,47]]}}}],["api/student/exampaper/answer/edit",{"_index":941,"t":{"312":{"position":[[0,39]]}}}],["api/student/exampaper/answer/pagelist",{"_index":943,"t":{"314":{"position":[[0,43]]}}}],["api/student/exampaper/answer/read/4",{"_index":932,"t":{"310":{"position":[[0,41]]}}}],["api/student/question/answer/pag",{"_index":954,"t":{"316":{"position":[[0,38]]}}}],["api/student/question/answer/select/25067",{"_index":961,"t":{"318":{"position":[[0,46]]}}}],["api/student/user/curr",{"_index":975,"t":{"322":{"position":[[0,30]]}}}],["api/student/user/log",{"_index":969,"t":{"320":{"position":[[0,26]]}}}],["api/student/user/message/pag",{"_index":997,"t":{"326":{"position":[[0,35]]}}}],["api/student/user/message/read/14",{"_index":1005,"t":{"328":{"position":[[0,38]]}}}],["api/student/user/message/unreadcount",{"_index":1006,"t":{"330":{"position":[[0,42]]}}}],["api/student/user/regist",{"_index":861,"t":{"294":{"position":[[0,31]]}}}],["api/student/user/upd",{"_index":996,"t":{"324":{"position":[[0,29]]}}}],["api/user/login",{"_index":858,"t":{"292":{"position":[[0,20]]},"333":{"position":[[0,20]]}}}],["api/user/logout",{"_index":868,"t":{"296":{"position":[[0,21]]},"335":{"position":[[0,21]]}}}],["apioperation(valu",{"_index":1193,"t":{"423":{"position":[[520,19],[770,19]]}}}],["api目录下，构建新的j",{"_index":1290,"t":{"439":{"position":[[0,23]]}}}],["appendfsync为自己要的时间，一般就是everysec",{"_index":1786,"t":{"528":{"position":[[7,33]]}}}],["applic",{"_index":1569,"t":{"492":{"position":[[113,16]]}}}],["application/octet",{"_index":815,"t":{"285":{"position":[[545,17]]}}}],["apt",{"_index":846,"t":{"287":{"position":[[297,3],[320,3]]}}}],["arcnod",{"_index":337,"t":{"167":{"position":[[105,8],[152,7],[167,20],[227,7]]}}}],["arraylist<>();//内部封装就是这个返回类型sqlresult",{"_index":1164,"t":{"418":{"position":[[196,37]]}}}],["arraylist<>(arrays.aslist(split",{"_index":1679,"t":{"498":{"position":[[4188,34]]}}}],["arraylist<str",{"_index":1678,"t":{"498":{"position":[[4159,17]]}}}],["arrays.aslist(split",{"_index":1677,"t":{"498":{"position":[[4137,21]]}}}],["as<查询语句>[with",{"_index":695,"t":{"242":{"position":[[93,18]]}}}],["asc",{"_index":1367,"t":{"460":{"position":[[634,4]]}}}],["asl为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4",{"_index":117,"t":{"83":{"position":[[21,68]]}}}],["asl为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12",{"_index":118,"t":{"83":{"position":[[167,60]]}}}],["async",{"_index":1317,"t":{"443":{"position":[[484,5]]}}}],["as后要接上select",{"_index":1465,"t":{"475":{"position":[[27,20]]}}}],["auto;error_log",{"_index":792,"t":{"285":{"position":[[109,14]]}}}],["autowir",{"_index":1190,"t":{"423":{"position":[[476,10]]}}}],["await",{"_index":1250,"t":{"431":{"position":[[760,5]]},"443":{"position":[[671,5]]}}}],["a|b|a,b",{"_index":706,"t":{"245":{"position":[[91,14]]}}}],["a在b前面，则图中不存在b到a",{"_index":413,"t":{"185":{"position":[[30,20]]}}}],["a字段，并且select中包含的是a，b，c，d字段，除了a字段，b和c都要加入到group",{"_index":1467,"t":{"477":{"position":[[9,51]]}}}],["a是从0开始存储还是1",{"_index":551,"t":{"209":{"position":[[705,36]]}}}],["a是关系r的主属性，a不能为nul",{"_index":631,"t":{"235":{"position":[[0,28]]}}}],["b",{"_index":16,"t":{"21":{"position":[[0,7]]},"180":{"position":[[175,2]]},"201":{"position":[[48,4],[71,2],[74,1]]},"212":{"position":[[127,14],[287,2]]},"240":{"position":[[381,1]]},"282":{"position":[[160,1]]},"460":{"position":[[708,1],[1592,1]]},"475":{"position":[[128,3]]},"498":{"position":[[4833,4],[5005,4],[6489,1]]}}}],["b,b",{"_index":710,"t":{"245":{"position":[[176,4]]}}}],["b.all_count",{"_index":1403,"t":{"460":{"position":[[1411,11],[1437,12]]}}}],["b.cno",{"_index":673,"t":{"240":{"position":[[398,5]]}}}],["b.createdd",{"_index":1477,"t":{"479":{"position":[[101,13]]}}}],["b.end_tim",{"_index":1476,"t":{"479":{"position":[[81,10]]}}}],["b.id",{"_index":1388,"t":{"460":{"position":[[1113,4]]},"467":{"position":[[94,4]]}}}],["b.inductive_d",{"_index":1395,"t":{"460":{"position":[[1233,16]]}}}],["b.item",{"_index":1391,"t":{"460":{"position":[[1169,6],[1624,6]]}}}],["b.line",{"_index":1389,"t":{"460":{"position":[[1125,6]]}}}],["b.process",{"_index":1397,"t":{"460":{"position":[[1297,9],[1644,9]]}}}],["b.qty_to_build",{"_index":1394,"t":{"460":{"position":[[1217,15]]}}}],["b.remark",{"_index":1409,"t":{"460":{"position":[[1569,8]]}}}],["b.shop_ord",{"_index":1390,"t":{"460":{"position":[[1141,12]]},"498":{"position":[[6529,13]]}}}],["b.site",{"_index":1727,"t":{"498":{"position":[[6503,6]]}}}],["b.start_tim",{"_index":1475,"t":{"479":{"position":[[67,13]]}}}],["b.sum_count",{"_index":1398,"t":{"460":{"position":[[1319,11]]}}}],["b.time_rang",{"_index":1396,"t":{"460":{"position":[[1269,12]]}}}],["b874",{"_index":980,"t":{"322":{"position":[[129,4]]},"324":{"position":[[79,4]]}}}],["b[i",{"_index":588,"t":{"212":{"position":[[567,7],[632,7]]}}}],["b[j",{"_index":589,"t":{"212":{"position":[[587,7],[664,8]]}}}],["b[k",{"_index":581,"t":{"212":{"position":[[464,4]]}}}],["b[p1]和b[p2]，较小者放入a",{"_index":573,"t":{"212":{"position":[[166,28]]}}}],["backend",{"_index":1128,"t":{"404":{"position":[[45,7]]}}}],["barcod",{"_index":1280,"t":{"435":{"position":[[296,8]]}}}],["bar{s_s}+\\bar{a_{s}}\\bar{b_{s}}s_sv=as​bs​ss​ˉ​+as​ˉ​bs​ˉ​ss",{"_index":58,"t":{"57":{"position":[[68,62]]}}}],["base",{"_index":1303,"t":{"441":{"position":[[55,46]]}}}],["basefunctionservice.getsqlresult(sql.tostr",{"_index":1165,"t":{"418":{"position":[[236,67]]}}}],["basefunctionservice.getsqlresult(sql_s801.tostr",{"_index":1609,"t":{"498":{"position":[[916,54]]}}}],["basefunctionservice.getsqlresultthrow",{"_index":1723,"t":{"498":{"position":[[6340,39]]}}}],["basefunctionservice.getupdate(updatesql",{"_index":1719,"t":{"498":{"position":[[6016,40]]}}}],["between",{"_index":661,"t":{"240":{"position":[[110,7]]},"487":{"position":[[2713,7],[2894,7]]}}}],["bf",{"_index":345,"t":{"170":{"position":[[102,53]]}}}],["bfs(g,i",{"_index":355,"t":{"170":{"position":[[494,9]]}}}],["bfs(graph",{"_index":356,"t":{"170":{"position":[[511,9]]}}}],["bfstraverse(graph",{"_index":347,"t":{"170":{"position":[[368,17]]}}}],["bgsave：redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork",{"_index":1775,"t":{"520":{"position":[[90,70]]}}}],["bin/bash",{"_index":744,"t":{"268":{"position":[[178,9]]}}}],["binary_search(int",{"_index":103,"t":{"80":{"position":[[95,17]]}}}],["bind",{"_index":1816,"t":{"538":{"position":[[71,6],[90,12]]}}}],["birthday",{"_index":985,"t":{"322":{"position":[[252,11]]},"324":{"position":[[202,11]]},"333":{"position":[[271,11]]},"339":{"position":[[380,11]]},"341":{"position":[[266,11]]},"343":{"position":[[194,11],[490,11]]},"393":{"position":[[257,11]]},"395":{"position":[[212,11]]},"401":{"position":[[207,11]]}}}],["body_bytes_s",{"_index":822,"t":{"285":{"position":[[652,16]]}}}],["bool",{"_index":254,"t":{"134":{"position":[[142,4]]},"170":{"position":[[340,4]]},"172":{"position":[[107,4]]},"201":{"position":[[118,4]]}}}],["branch",{"_index":831,"t":{"287":{"position":[[89,9]]}}}],["branch设置为gh",{"_index":785,"t":{"282":{"position":[[349,12]]}}}],["break",{"_index":1598,"t":{"498":{"position":[[686,6],[1081,6],[1292,6],[1607,6],[1786,6],[2002,6],[2126,6],[2231,6],[2309,6],[2362,6],[2378,6],[3025,6]]}}}],["bubblesort(int",{"_index":489,"t":{"201":{"position":[[89,14]]}}}],["build",{"_index":778,"t":{"282":{"position":[[181,5]]},"287":{"position":[[352,5],[386,5],[577,6],[734,7],[742,23]]}}}],["buildgit",{"_index":773,"t":{"282":{"position":[[141,8],[200,8]]}}}],["buildmaxheap(a,len",{"_index":566,"t":{"209":{"position":[[1350,20]]}}}],["buildmaxheap(int",{"_index":553,"t":{"209":{"position":[[848,16]]}}}],["build后的代码上传到gh",{"_index":783,"t":{"282":{"position":[[289,23]]}}}],["bur",{"_index":1537,"t":{"487":{"position":[[1648,7],[1789,7]]}}}],["by后可以加hav",{"_index":1469,"t":{"477":{"position":[[97,18]]}}}],["b|}iou=∣a+b∣2∣a∩b",{"_index":724,"t":{"251":{"position":[[66,19]]}}}],["b|}{a",{"_index":718,"t":{"249":{"position":[[48,5]]}}}],["b|}{|a",{"_index":723,"t":{"251":{"position":[[57,6]]}}}],["b}iou=a∪b∣a∩b",{"_index":720,"t":{"249":{"position":[[59,164]]}}}],["b树的一个地方，b",{"_index":29,"t":{"30":{"position":[[0,94]]}}}],["c",{"_index":707,"t":{"245":{"position":[[112,2],[164,2]]},"363":{"position":[[573,3],[1274,3]]}}}],["c07e653d390a",{"_index":1027,"t":{"339":{"position":[[256,14]]},"341":{"position":[[142,14]]}}}],["c32f",{"_index":1024,"t":{"339":{"position":[[241,4]]},"341":{"position":[[127,4]]}}}],["cap",{"_index":717,"t":{"249":{"position":[[43,4]]},"251":{"position":[[52,4]]}}}],["cascade|restrict",{"_index":651,"t":{"238":{"position":[[233,19]]}}}],["cascade就是删除引用该列的其他对象，例如视图）（restrict",{"_index":652,"t":{"238":{"position":[[253,55]]}}}],["case",{"_index":1460,"t":{"473":{"position":[[29,4]]},"487":{"position":[[2102,4]]},"498":{"position":[[1341,4],[1616,4],[1793,4],[2009,4],[2133,4]]}}}],["cat",{"_index":748,"t":{"268":{"position":[[229,14]]}}}],["catch",{"_index":1167,"t":{"421":{"position":[[39,22],[223,6]]},"498":{"position":[[7162,5]]}}}],["caus",{"_index":1500,"t":{"487":{"position":[[332,6],[1200,5]]}}}],["cd",{"_index":746,"t":{"268":{"position":[[205,12]]},"540":{"position":[[0,2]]}}}],["cf",{"_index":55,"t":{"55":{"position":[[57,25]]}}}],["cf和最高位数位的进位c1",{"_index":64,"t":{"57":{"position":[[205,51]]}}}],["ch[0...k−1]=ch[j−k...j−1]ch[0...k",{"_index":164,"t":{"102":{"position":[[374,33]]}}}],["ch[0∼k−1]=ch[j−k∼j−1]ch[0",{"_index":174,"t":{"104":{"position":[[599,25]]}}}],["ch[j",{"_index":165,"t":{"102":{"position":[[413,4]]},"104":{"position":[[637,4]]}}}],["char",{"_index":328,"t":{"165":{"position":[[624,4]]},"167":{"position":[[216,4]]}}}],["charact",{"_index":1887,"t":{"578":{"position":[[522,46]]}}}],["check",{"_index":696,"t":{"242":{"position":[[112,5]]}}}],["checkout",{"_index":774,"t":{"282":{"position":[[150,8]]}}}],["checkout到dev分支，merge分支chenle_xxxx到dev",{"_index":1752,"t":{"504":{"position":[[83,38]]}}}],["checkreport",{"_index":1579,"t":{"498":{"position":[[98,11],[110,11],[128,14]]}}}],["checkreport.getlinebodi",{"_index":1699,"t":{"498":{"position":[[5069,26],[5310,26],[6598,25]]}}}],["checkreport.getordercod",{"_index":1700,"t":{"498":{"position":[[5096,27],[5337,27]]}}}],["checkreport.getproductcod",{"_index":1738,"t":{"498":{"position":[[6931,33]]}}}],["checkreport.setabsurface(\"a",{"_index":1637,"t":{"498":{"position":[[2200,30]]}}}],["checkreport.setabsurface(\"b",{"_index":1639,"t":{"498":{"position":[[2278,30]]}}}],["checkreport.setabsurface(facetyp",{"_index":1640,"t":{"498":{"position":[[2324,35]]}}}],["checkreport.setabsurface(split[length",{"_index":1666,"t":{"498":{"position":[[3602,37]]}}}],["checkreport.setbomversion(split[3",{"_index":1620,"t":{"498":{"position":[[1499,36]]}}}],["checkreport.setcheckcount(split[3",{"_index":1662,"t":{"498":{"position":[[3461,36]]}}}],["checkreport.setcheckcount(split[7",{"_index":1632,"t":{"498":{"position":[[1965,36]]}}}],["checkreport.setcheckperson(split[1",{"_index":1623,"t":{"498":{"position":[[1624,37]]}}}],["checkreport.setcheckperson(split[6",{"_index":1690,"t":{"498":{"position":[[4622,37]]}}}],["checkreport.setchecktime(list.get(0",{"_index":1681,"t":{"498":{"position":[[4288,38]]}}}],["checkreport.setchecktime(split[3",{"_index":1624,"t":{"498":{"position":[[1662,35]]}}}],["checkreport.setcompany(split[1",{"_index":1660,"t":{"498":{"position":[[3391,33]]}}}],["checkreport.setfileid(fileid",{"_index":1643,"t":{"498":{"position":[[2416,30],[4693,30]]}}}],["checkreport.setlinebody(list.get(1",{"_index":1682,"t":{"498":{"position":[[4327,37]]}}}],["checkreport.setlinebody(split[1",{"_index":1633,"t":{"498":{"position":[[2017,34]]}}}],["checkreport.setmodelname(modelnam",{"_index":1591,"t":{"498":{"position":[[442,36],[3565,36]]}}}],["checkreport.setmodelname(split[3",{"_index":1630,"t":{"498":{"position":[[1890,35]]}}}],["checkreport.setnocheckcount(split[5",{"_index":1631,"t":{"498":{"position":[[1926,38]]}}}],["checkreport.setnocheckcount(split[split.length",{"_index":1675,"t":{"498":{"position":[[3957,46]]}}}],["checkreport.setnopasscount(split[6",{"_index":1627,"t":{"498":{"position":[[1748,37]]}}}],["checkreport.setnopasscount(split[split.length",{"_index":1671,"t":{"498":{"position":[[3791,45]]}}}],["checkreport.setordercode(shopord",{"_index":1674,"t":{"498":{"position":[[3920,36]]}}}],["checkreport.setordercode(split[3",{"_index":1634,"t":{"498":{"position":[[2052,35]]}}}],["checkreport.setpasscount(split[5",{"_index":1621,"t":{"498":{"position":[[1536,35]]}}}],["checkreport.setpasscount(split[length",{"_index":1668,"t":{"498":{"position":[[3673,37]]}}}],["checkreport.setpassrate(list.get(2",{"_index":1683,"t":{"498":{"position":[[4365,37]]}}}],["checkreport.setpassrate(split[7",{"_index":1622,"t":{"498":{"position":[[1572,34]]}}}],["checkreport.setplanlogid(planloguuid",{"_index":1707,"t":{"498":{"position":[[5457,38]]}}}],["checkreport.setprocesstime(split[1",{"_index":1673,"t":{"498":{"position":[[3882,37]]}}}],["checkreport.setproducetime(split[3",{"_index":1688,"t":{"498":{"position":[[4548,37]]}}}],["checkreport.setproductcode(productcod",{"_index":1651,"t":{"498":{"position":[[2756,40]]}}}],["checkreport.setproductcode(split[5",{"_index":1635,"t":{"498":{"position":[[2088,37]]}}}],["checkreport.setresult(split[1",{"_index":1619,"t":{"498":{"position":[[1466,32],[3072,32]]}}}],["checkreport.setscantime(split[1",{"_index":1670,"t":{"498":{"position":[[3756,34]]}}}],["checkreport.setsite(sit",{"_index":1642,"t":{"498":{"position":[[2389,26],[4666,26]]}}}],["checkreport.settesttime(split[1",{"_index":1687,"t":{"498":{"position":[[4513,34]]}}}],["checkreport.settesttime(split[4",{"_index":1626,"t":{"498":{"position":[[1713,34]]}}}],["checkreport.settesttype(split[3",{"_index":1628,"t":{"498":{"position":[[1803,34],[3316,34]]}}}],["checkreport.settesttype(testtyp",{"_index":1629,"t":{"498":{"position":[[1855,34]]}}}],["checkreport.setworkclass(split[2",{"_index":1661,"t":{"498":{"position":[[3425,35]]}}}],["checkreportdao.deletebyid(id",{"_index":1720,"t":{"498":{"position":[[6068,30]]}}}],["checkreportdao.findallbysiteandplanlogidorderbycreateddate(sit",{"_index":1714,"t":{"498":{"position":[[5825,64]]}}}],["checkreportdao.save(checkreport",{"_index":1740,"t":{"498":{"position":[[7099,33]]}}}],["checkresult",{"_index":1284,"t":{"435":{"position":[[499,12]]}}}],["checkstatu",{"_index":1283,"t":{"435":{"position":[[443,12]]}}}],["chenl",{"_index":1574,"t":{"498":{"position":[[6,6],[171,6]]}}}],["chenle_xxxx进行commit",{"_index":1751,"t":{"504":{"position":[[57,25]]}}}],["child",{"_index":303,"t":{"145":{"position":[[325,5]]}}}],["class",{"_index":995,"t":{"322":{"position":[[455,10]]},"324":{"position":[[405,10]]},"423":{"position":[[324,5],[330,5],[447,5]]},"431":{"position":[[1221,5]]},"435":{"position":[[183,5]]},"465":{"position":[[48,5]]}}}],["cleanbarlogpagedto",{"_index":1277,"t":{"435":{"position":[[189,18]]}}}],["cleanbarlogvo",{"_index":1268,"t":{"431":{"position":[[1227,13]]}}}],["cleancount",{"_index":1282,"t":{"435":{"position":[[388,11]]}}}],["cleanpeopl",{"_index":1273,"t":{"431":{"position":[[1314,13]]},"435":{"position":[[471,12]]}}}],["cleanresult",{"_index":1271,"t":{"431":{"position":[[1281,12]]},"435":{"position":[[415,12]]}}}],["cleantim",{"_index":1281,"t":{"435":{"position":[[362,10]]}}}],["clearabl",{"_index":1309,"t":{"443":{"position":[[199,9]]}}}],["clearoldrelation(planloguuid",{"_index":1709,"t":{"498":{"position":[[5586,30]]}}}],["cli",{"_index":1822,"t":{"540":{"position":[[56,3],[74,3]]},"542":{"position":[[12,3],[56,3]]}}}],["client",{"_index":844,"t":{"287":{"position":[[280,6]]},"523":{"position":[[194,32]]}}}],["cli和redi",{"_index":1810,"t":{"536":{"position":[[216,9]]}}}],["cnblogs.com",{"_index":159,"t":{"100":{"position":[[205,13]]}}}],["code",{"_index":865,"t":{"294":{"position":[[126,7]]},"296":{"position":[[37,7]]},"302":{"position":[[56,7]]},"304":{"position":[[146,7]]},"306":{"position":[[53,7]]},"308":{"position":[[278,7]]},"310":{"position":[[57,7]]},"312":{"position":[[331,7]]},"314":{"position":[[104,7]]},"316":{"position":[[99,7]]},"318":{"position":[[107,7]]},"320":{"position":[[42,7]]},"322":{"position":[[46,7]]},"324":{"position":[[461,7]]},"326":{"position":[[96,7]]},"328":{"position":[[54,7]]},"330":{"position":[[58,7]]},"333":{"position":[[110,7]]},"335":{"position":[[37,7]]},"339":{"position":[[129,7]]},"341":{"position":[[45,7]]},"343":{"position":[[267,7]]},"345":{"position":[[45,7]]},"347":{"position":[[51,7]]},"349":{"position":[[54,7]]},"351":{"position":[[107,7]]},"353":{"position":[[58,7]]},"355":{"position":[[130,7]]},"357":{"position":[[58,7]]},"359":{"position":[[148,7]]},"361":{"position":[[51,7]]},"363":{"position":[[706,7]]},"365":{"position":[[51,7]]},"367":{"position":[[157,7]]},"369":{"position":[[146,7]]},"371":{"position":[[51,7]]},"373":{"position":[[331,7]]},"375":{"position":[[49,7]]},"377":{"position":[[94,7]]},"379":{"position":[[46,7]]},"381":{"position":[[341,7]]},"383":{"position":[[45,7]]},"385":{"position":[[106,7]]},"387":{"position":[[128,7]]},"389":{"position":[[109,7]]},"391":{"position":[[119,7]]},"393":{"position":[[44,7]]},"395":{"position":[[466,7]]},"397":{"position":[[66,7]]},"401":{"position":[[468,7]]}}}],["collect",{"_index":1124,"t":{"404":{"position":[[4,7]]}}}],["collectionutil.isempty(result",{"_index":1730,"t":{"498":{"position":[[6655,36]]}}}],["commit",{"_index":764,"t":{"280":{"position":[[72,6]]},"282":{"position":[[218,6]]}}}],["complet",{"_index":931,"t":{"308":{"position":[[201,12]]}}}],["console.log(index",{"_index":1333,"t":{"443":{"position":[[1504,19]]}}}],["const",{"_index":1324,"t":{"443":{"position":[[1206,5]]}}}],["constraint",{"_index":653,"t":{"238":{"position":[[314,10]]}}}],["consum",{"_index":1878,"t":{"578":{"position":[[161,8],[312,8]]}}}],["content",{"_index":929,"t":{"308":{"position":[[138,10]]},"310":{"position":[[546,10],[611,10],[994,10]]},"312":{"position":[[186,10]]},"318":{"position":[[315,10],[592,10]]},"320":{"position":[[176,10]]},"326":{"position":[[213,10]]},"363":{"position":[[418,10],[1119,10]]},"385":{"position":[[216,10]]},"387":{"position":[[64,10]]},"391":{"position":[[276,10]]},"578":{"position":[[146,7]]}}}],["contentarray",{"_index":930,"t":{"308":{"position":[[162,15]]},"310":{"position":[[1039,15]]},"312":{"position":[[233,15]]},"318":{"position":[[636,15]]}}}],["contentsplit",{"_index":1592,"t":{"498":{"position":[[488,12],[2806,12]]}}}],["contentsplit.length;i",{"_index":1594,"t":{"498":{"position":[[586,24],[1150,25]]}}}],["contentsplit[11].split",{"_index":1686,"t":{"498":{"position":[[4481,25]]}}}],["contentsplit[i",{"_index":1597,"t":{"498":{"position":[[646,16],[1210,18],[2940,16]]}}}],["control",{"_index":1179,"t":{"423":{"position":[[116,16]]},"490":{"position":[[67,19]]}}}],["controller调用servic",{"_index":1171,"t":{"421":{"position":[[127,21]]}}}],["convertlisttokeyvalue(list",{"_index":1315,"t":{"443":{"position":[[386,28]]}}}],["convertlisttokeyvalue为将string列表转成一个map(k",{"_index":1318,"t":{"443":{"position":[[956,40]]}}}],["core>=30",{"_index":669,"t":{"240":{"position":[[232,8]]}}}],["correct",{"_index":922,"t":{"306":{"position":[[492,10]]},"310":{"position":[[712,10]]},"318":{"position":[[412,10]]},"361":{"position":[[497,10]]},"363":{"position":[[580,10],[1281,10]]},"369":{"position":[[395,10]]},"371":{"position":[[280,10]]},"373":{"position":[[216,10]]}}}],["correctarray",{"_index":921,"t":{"306":{"position":[[465,15]]},"310":{"position":[[671,15]]},"318":{"position":[[385,15]]},"361":{"position":[[468,15]]},"363":{"position":[[543,15],[1244,15]]},"371":{"position":[[253,15]]},"373":{"position":[[189,15]]}}}],["count(*)avg(*)max(*)min",{"_index":680,"t":{"240":{"position":[[563,26]]}}}],["count(m.sfc",{"_index":1215,"t":{"428":{"position":[[115,12]]}}}],["cours",{"_index":668,"t":{"240":{"position":[[219,6],[365,6]]}}}],["creat",{"_index":639,"t":{"238":{"position":[[0,6]]},"242":{"position":[[81,6]]},"578":{"position":[[189,6]]}}}],["created",{"_index":1449,"t":{"465":{"position":[[975,12]]}}}],["createdd",{"_index":1497,"t":{"487":{"position":[[288,12]]}}}],["createtim",{"_index":902,"t":{"304":{"position":[[300,13]]},"314":{"position":[[192,13]]},"316":{"position":[[213,13]]},"320":{"position":[[218,13]]},"322":{"position":[[342,13]]},"324":{"position":[[292,13]]},"326":{"position":[[263,13]]},"333":{"position":[[372,13]]},"339":{"position":[[474,13]]},"341":{"position":[[360,13]]},"343":{"position":[[613,13]]},"359":{"position":[[303,13]]},"367":{"position":[[304,13]]},"369":{"position":[[269,13]]},"377":{"position":[[259,13]]},"379":{"position":[[255,13]]},"381":{"position":[[185,13],[553,13]]},"385":{"position":[[365,13]]},"389":{"position":[[185,13]]},"391":{"position":[[316,13]]},"393":{"position":[[351,13]]},"395":{"position":[[304,13]]},"401":{"position":[[306,13]]}}}],["createus",{"_index":906,"t":{"304":{"position":[[344,13]]},"359":{"position":[[347,13]]},"367":{"position":[[348,13]]},"369":{"position":[[334,13]]},"379":{"position":[[299,13]]},"381":{"position":[[229,13],[597,13]]}}}],["createusernam",{"_index":1074,"t":{"377":{"position":[[223,17]]}}}],["cup",{"_index":719,"t":{"249":{"position":[[54,4]]}}}],["c中的属性t，t和s的组合要全部出现在r",{"_index":638,"t":{"235":{"position":[[277,24]]}}}],["c和b时候会发现不匹配，此时的next会跳转到2，从ab再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟ab中的b进行匹配成功的，此时产生了一次无效匹配，然后next到1",{"_index":220,"t":{"108":{"position":[[74,103]]}}}],["c和d时，不匹配，肉眼观察，可以直接将j",{"_index":161,"t":{"102":{"position":[[229,38]]}}}],["c，且b推不出a，则c对于a",{"_index":711,"t":{"245":{"position":[[181,21]]}}}],["c，同时a|b",{"_index":709,"t":{"245":{"position":[[155,8]]}}}],["c，少了a或者b都推不出来c",{"_index":708,"t":{"245":{"position":[[128,15]]}}}],["d",{"_index":612,"t":{"214":{"position":[[546,1]]},"318":{"position":[[375,4],[423,4]]}}}],["d.e.knuth、j.h.morris和v.r.prat一起发明了kmp算法，致力于解决这个主串指针回溯的问题来降低时间开销。kmp算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。kmp",{"_index":157,"t":{"100":{"position":[[0,175]]}}}],["d2d29da2",{"_index":977,"t":{"322":{"position":[[109,9]]},"324":{"position":[[59,9]]}}}],["daemon",{"_index":1812,"t":{"538":{"position":[[0,11],[15,11]]}}}],["danger",{"_index":307,"t":{"150":{"position":[[17,6]]},"152":{"position":[[33,6]]}}}],["dao",{"_index":1169,"t":{"421":{"position":[[81,5]]}}}],["dao中可以使用jpa规范来写数据库交互的函数,也可以使用jpql的方式来自定义sql",{"_index":1140,"t":{"416":{"position":[[162,44]]}}}],["data",{"_index":247,"t":{"134":{"position":[[32,5]]},"145":{"position":[[92,5],[235,5],[319,5],[395,5]]},"167":{"position":[[221,5]]},"439":{"position":[[162,5]]}}}],["data:qs.stringify(data)是将参数以表单的形式进行提交，如果以json格式，直接使用data",{"_index":1300,"t":{"439":{"position":[[192,67]]}}}],["database的缩写。redis的数据都是在内存中，rdb",{"_index":1765,"t":{"512":{"position":[[139,61]]}}}],["datajson",{"_index":1446,"t":{"465":{"position":[[813,9]]}}}],["datalist",{"_index":1270,"t":{"431":{"position":[[1264,9]]}}}],["data，后端数据封装使用operationresult",{"_index":1451,"t":{"465":{"position":[[1007,58]]}}}],["data，边表头指针first",{"_index":336,"t":{"167":{"position":[[7,82]]}}}],["daytim",{"_index":1464,"t":{"473":{"position":[[115,7]]},"477":{"position":[[188,8]]}}}],["db",{"_index":629,"t":{"231":{"position":[[45,37],[181,64]]}}}],["dbm",{"_index":630,"t":{"231":{"position":[[138,42]]}}}],["dcb3",{"_index":978,"t":{"322":{"position":[[119,4]]},"324":{"position":[[69,4]]}}}],["decr",{"_index":1835,"t":{"550":{"position":[[53,4]]}}}],["decrbi",{"_index":1836,"t":{"550":{"position":[[67,6]]}}}],["decrement",{"_index":1837,"t":{"550":{"position":[[78,17]]}}}],["deeplearn",{"_index":714,"t":{"247":{"position":[[5,12]]}}}],["default",{"_index":1641,"t":{"498":{"position":[[2369,8]]}}}],["default_serv",{"_index":799,"t":{"285":{"position":[[229,15],[261,15]]}}}],["default_typ",{"_index":814,"t":{"285":{"position":[[532,12]]}}}],["delet",{"_index":693,"t":{"240":{"position":[[847,6]]},"333":{"position":[[436,10]]},"343":{"position":[[718,10]]},"349":{"position":[[204,10]]},"377":{"position":[[303,10]]}}}],["demo",{"_index":1172,"t":{"421":{"position":[[154,4],[212,4]]}}}],["deploy",{"_index":781,"t":{"282":{"position":[[228,7]]},"287":{"position":[[72,6],[114,7],[404,6],[433,6]]}}}],["dequeue(q,v",{"_index":362,"t":{"170":{"position":[[587,13]]}}}],["desc",{"_index":1478,"t":{"479":{"position":[[115,5],[184,5]]},"487":{"position":[[448,5]]}}}],["desc),p",{"_index":1523,"t":{"487":{"position":[[1042,7]]}}}],["descript",{"_index":1491,"t":{"487":{"position":[[170,12]]}}}],["description=\"$t",{"_index":1238,"t":{"431":{"position":[[410,23]]}}}],["desc|asc",{"_index":660,"t":{"240":{"position":[[88,8]]}}}],["destralverse(graph",{"_index":372,"t":{"172":{"position":[[135,18]]}}}],["develop",{"_index":1129,"t":{"404":{"position":[[53,12]]}}}],["dev合并到master将会导致别人的错误bug",{"_index":1755,"t":{"504":{"position":[[225,41]]}}}],["dev，发布dev",{"_index":1566,"t":{"492":{"position":[[27,18]]}}}],["dfs(g,v",{"_index":380,"t":{"172":{"position":[[381,10]]}}}],["dfs(g,v);}void",{"_index":376,"t":{"172":{"position":[[246,14]]}}}],["dfs(graph",{"_index":377,"t":{"172":{"position":[[261,9]]}}}],["dfs就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟bf",{"_index":371,"t":{"172":{"position":[[0,106]]}}}],["dfs算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为o(1)o(1)o(1)，平均的为o(∣v∣)o(|v|)o(∣v",{"_index":381,"t":{"172":{"position":[[593,82]]}}}],["di=0,1,2...d_i",{"_index":126,"t":{"92":{"position":[[240,24]]}}}],["di=02,12,−12,22,−22.........k2,−k2d_i",{"_index":128,"t":{"92":{"position":[[307,39]]}}}],["dialog.alert({message:res.messag",{"_index":1259,"t":{"431":{"position":[[954,36]]},"443":{"position":[[865,36]]}}}],["dicedicedice系数的计算公式为：iou=2∣a∩b∣∣a+b∣i",{"_index":721,"t":{"251":{"position":[[0,39]]}}}],["dice和ioudice和ioudice和iou是非常相似的两个指标，但是又有着区别，iouiouiou更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。dicedicedice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是dicedicedice检验识别肿瘤的大致形状，iouioui",{"_index":729,"t":{"257":{"position":[[0,176]]}}}],["did_idi",{"_index":137,"t":{"92":{"position":[[579,18]]}}}],["diff_count",{"_index":1404,"t":{"460":{"position":[[1472,11]]}}}],["diffcount",{"_index":1443,"t":{"465":{"position":[[632,10]]}}}],["difficult",{"_index":923,"t":{"306":{"position":[[557,12]]},"310":{"position":[[753,12]]},"318":{"position":[[452,12]]},"361":{"position":[[564,12]]},"363":{"position":[[626,12],[1327,12]]},"369":{"position":[[475,12]]},"371":{"position":[[330,12]]},"373":{"position":[[283,12]]}}}],["dir",{"_index":854,"t":{"287":{"position":[[555,4],[572,4]]}}}],["disciplin",{"_index":752,"t":{"271":{"position":[[46,11]]}}}],["docker",{"_index":734,"t":{"264":{"position":[[213,6]]},"266":{"position":[[0,72],[91,6]]},"268":{"position":[[0,27],[28,6],[74,14],[99,12],[124,12],[149,12]]}}}],["dockerdock",{"_index":737,"t":{"268":{"position":[[41,21]]}}}],["docsaururs配置文件进行修改，将config",{"_index":769,"t":{"282":{"position":[[0,48]]}}}],["docusauru",{"_index":782,"t":{"282":{"position":[[236,10]]}}}],["doexampapercount",{"_index":1012,"t":{"337":{"position":[[108,19]]}}}],["doquestioncount",{"_index":1014,"t":{"337":{"position":[[141,18]]}}}],["doright",{"_index":939,"t":{"310":{"position":[[970,10]]},"312":{"position":[[162,10]]},"318":{"position":[[567,10]]}}}],["dotim",{"_index":927,"t":{"308":{"position":[[76,9]]},"310":{"position":[[866,9]]},"312":{"position":[[64,9]]},"314":{"position":[[397,9]]},"389":{"position":[[390,9]]}}}],["drop",{"_index":650,"t":{"238":{"position":[[225,4],[309,4]]}}}],["dto",{"_index":1276,"t":{"435":{"position":[[150,25]]}}}],["dump",{"_index":1768,"t":{"518":{"position":[[41,12],[54,10]]}}}],["dump6379.rdb",{"_index":1771,"t":{"518":{"position":[[131,12]]}}}],["d的距离是5",{"_index":393,"t":{"180":{"position":[[178,19]]}}}],["d躺排序，一次分配要q(n)q(n)q(n)，一次收集要q(r)q(r)q(r)，所以时间复杂度为o(d(n+1))o(d(n+1))o(d(n+1",{"_index":619,"t":{"214":{"position":[[857,80]]}}}],["e",{"_index":97,"t":{"75":{"position":[[169,14]]},"162":{"position":[[55,7]]},"421":{"position":[[241,3]]},"498":{"position":[[7179,2],[7249,3]]}}}],["e.getmessag",{"_index":1743,"t":{"498":{"position":[[7233,15]]}}}],["e/i",{"_index":777,"t":{"282":{"position":[[176,4]]}}}],["e2b07f4fcc67",{"_index":1041,"t":{"343":{"position":[[357,14]]}}}],["effici",{"_index":1408,"t":{"460":{"position":[[1557,11]]},"465":{"position":[[663,11]]}}}],["elmenttyp",{"_index":302,"t":{"145":{"position":[[308,10]]}}}],["end",{"_index":750,"t":{"271":{"position":[[23,3]]},"473":{"position":[[108,3]]},"487":{"position":[[1427,4],[1540,4],[1681,4],[1821,4],[2230,3]]}}}],["end_tim",{"_index":1352,"t":{"460":{"position":[[264,8],[276,9],[854,9]]},"477":{"position":[[165,9]]},"487":{"position":[[142,9],[1104,9],[1326,9]]}}}],["enddat",{"_index":1437,"t":{"465":{"position":[[405,8]]}}}],["end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":241,"t":{"126":{"position":[[211,81]]}}}],["end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":550,"t":{"209":{"position":[[617,87]]}}}],["end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":291,"t":{"136":{"position":[[287,87]]}}}],["end{aligned}​当(vi​,vj​)是g的边，则a[i][j]=1否则a[i][j]=0",{"_index":323,"t":{"165":{"position":[[235,54]]}}}],["end{aligned}​当出现s[i]=t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1",{"_index":185,"t":{"104":{"position":[[1015,89]]}}}],["end{aligned}​当有t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j",{"_index":195,"t":{"104":{"position":[[1943,157]]}}}],["end{bmatrix}⎣⎡​0001​1000​1000​0010",{"_index":326,"t":{"165":{"position":[[445,39]]}}}],["end和a",{"_index":1459,"t":{"473":{"position":[[16,8]]}}}],["enqueue(q,v",{"_index":360,"t":{"170":{"position":[[553,13],[703,13]]}}}],["entiti",{"_index":1136,"t":{"416":{"position":[[111,7]]}}}],["entri",{"_index":1884,"t":{"578":{"position":[[468,7]]}}}],["env和dev，不可使用pro",{"_index":1747,"t":{"502":{"position":[[38,19]]}}}],["esl",{"_index":266,"t":{"134":{"position":[[335,4],[471,4],[600,4],[713,5]]}}}],["etc/nginx/mime.typ",{"_index":813,"t":{"285":{"position":[[509,22]]}}}],["eureka中查看网关，对应在yml",{"_index":1568,"t":{"492":{"position":[[83,29]]}}}],["eureka会把几个服务器管理起来，访问服务的时候走eureka",{"_index":1570,"t":{"492":{"position":[[130,63]]}}}],["everysec",{"_index":1784,"t":{"525":{"position":[[29,13]]}}}],["exampaperanswerid",{"_index":886,"t":{"300":{"position":[[180,20]]}}}],["exampapercount",{"_index":1009,"t":{"337":{"position":[[47,17]]}}}],["exampaperid",{"_index":883,"t":{"300":{"position":[[116,14]]}}}],["exampapernam",{"_index":885,"t":{"300":{"position":[[145,16]]}}}],["except",{"_index":1175,"t":{"421":{"position":[[230,10]]},"498":{"position":[[7168,10]]}}}],["exec",{"_index":743,"t":{"268":{"position":[[162,4]]}}}],["exportid",{"_index":1445,"t":{"465":{"position":[[768,10]]},"467":{"position":[[102,20]]}}}],["exporttyp",{"_index":1448,"t":{"465":{"position":[[874,11]]}}}],["extend",{"_index":1145,"t":{"416":{"position":[[244,7]]}}}],["ex：key",{"_index":1828,"t":{"548":{"position":[[0,14]]}}}],["e∣=∣v∣−1|",{"_index":383,"t":{"174":{"position":[[89,12]]}}}],["e（23~30",{"_index":92,"t":{"75":{"position":[[66,10]]}}}],["f7ee8270ad4c",{"_index":1105,"t":{"393":{"position":[[133,14]]},"395":{"position":[[90,14]]},"401":{"position":[[83,14]]}}}],["f_all_count",{"_index":1539,"t":{"487":{"position":[[1829,11]]}}}],["f_pass_count",{"_index":1538,"t":{"487":{"position":[[1689,13]]}}}],["f_rate",{"_index":1554,"t":{"487":{"position":[[2422,7]]}}}],["facetyp",{"_index":1580,"t":{"498":{"position":[[150,8],[2141,8],[3645,8],[4764,8],[4822,8],[4880,8],[4937,8],[4994,8],[5124,10],[5365,10]]}}}],["fals",{"_index":375,"t":{"172":{"position":[[197,6]]},"201":{"position":[[132,6]]},"292":{"position":[[91,5]]},"318":{"position":[[578,6]]},"333":{"position":[[89,5]]},"343":{"position":[[729,6]]},"349":{"position":[[215,5]]},"377":{"position":[[314,5]]},"431":{"position":[[692,6],[1029,6],[1088,6]]},"443":{"position":[[603,6],[940,6],[1337,6]]}}}],["false,lineresult:[],line:'',//data如上//调用后端获取数据async",{"_index":1241,"t":{"431":{"position":[[527,51]]}}}],["fasl",{"_index":259,"t":{"134":{"position":[[212,6]]},"170":{"position":[[430,6]]}}}],["fct",{"_index":1536,"t":{"487":{"position":[[1620,7],[1761,7]]}}}],["fd31ab62",{"_index":1023,"t":{"339":{"position":[[231,9]]},"341":{"position":[[117,9]]}}}],["field",{"_index":1226,"t":{"431":{"position":[[159,5]]},"443":{"position":[[95,5],[250,6]]},"556":{"position":[[26,9]]}}}],["final",{"_index":1431,"t":{"465":{"position":[[83,5]]},"498":{"position":[[7253,8]]}}}],["findleft(t[],int",{"_index":271,"t":{"134":{"position":[[502,16]]}}}],["findparent(t[],int",{"_index":260,"t":{"134":{"position":[[232,18]]}}}],["findright(t[],int",{"_index":267,"t":{"134":{"position":[[366,17]]}}}],["first",{"_index":341,"t":{"167":{"position":[[235,7]]}}}],["firstchild;}*treelist",{"_index":304,"t":{"145":{"position":[[331,28]]}}}],["firstneighbor(g,v);w>=0;w",{"_index":364,"t":{"170":{"position":[[609,25]]},"172":{"position":[[318,25]]}}}],["fixedpap",{"_index":870,"t":{"298":{"position":[[49,13]]}}}],["flag",{"_index":490,"t":{"201":{"position":[[125,4]]}}}],["fm9999990.00",{"_index":1407,"t":{"460":{"position":[[1531,15]]},"485":{"position":[[82,15]]},"487":{"position":[[2396,15],[2478,15]]}}}],["focus=\"showlin",{"_index":1233,"t":{"431":{"position":[[292,16]]}}}],["for(gap",{"_index":466,"t":{"197":{"position":[[274,7]]}}}],["for(i",{"_index":349,"t":{"170":{"position":[[390,5],[451,5]]},"193":{"position":[[498,5]]},"195":{"position":[[375,5]]},"197":{"position":[[318,5]]},"212":{"position":[[477,5]]}}}],["for(int",{"_index":251,"t":{"134":{"position":[[94,7]]},"201":{"position":[[139,7],[165,7]]},"207":{"position":[[299,7],[338,7]]},"209":{"position":[[879,7],[1033,7],[1371,7]]},"498":{"position":[[347,7],[568,7],[1132,7],[2528,7],[2865,7]]}}}],["for(j",{"_index":447,"t":{"193":{"position":[[553,5]]},"195":{"position":[[533,5]]},"197":{"position":[[485,5]]}}}],["for(k",{"_index":579,"t":{"212":{"position":[[432,5]]}}}],["for(v",{"_index":373,"t":{"172":{"position":[[158,5],[204,5]]}}}],["for(w",{"_index":363,"t":{"170":{"position":[[601,5]]},"172":{"position":[[310,5]]}}}],["foreign",{"_index":644,"t":{"238":{"position":[[124,7]]}}}],["for循环，时间复杂度为o(n2)o(n^2)o(n2",{"_index":453,"t":{"193":{"position":[[713,45]]}}}],["found",{"_index":1757,"t":{"506":{"position":[[17,8]]}}}],["foundat",{"_index":140,"t":{"96":{"position":[[0,10]]}}}],["frac{2|a",{"_index":722,"t":{"251":{"position":[[42,9]]}}}],["frac{n(n",{"_index":501,"t":{"201":{"position":[[406,9]]}}}],["frac{|a",{"_index":716,"t":{"249":{"position":[[34,8]]}}}],["frametextcontentid",{"_index":908,"t":{"304":{"position":[[439,21]]},"359":{"position":[[414,21]]},"367":{"position":[[415,21]]},"379":{"position":[[367,21]]},"381":{"position":[[296,21],[664,21]]}}}],["ftp",{"_index":830,"t":{"287":{"position":[[68,3],[276,3],[400,3],[560,5],[714,3]]}}}],["func1",{"_index":1147,"t":{"416":{"position":[[281,7]]}}}],["func2",{"_index":1150,"t":{"416":{"position":[[330,7]]}}}],["function",{"_index":1295,"t":{"439":{"position":[[87,8]]}}}],["fundament",{"_index":751,"t":{"271":{"position":[[34,11]]}}}],["g",{"_index":348,"t":{"170":{"position":[[386,3],[521,3]]},"172":{"position":[[154,3]]}}}],["g,int",{"_index":378,"t":{"172":{"position":[[271,5]]}}}],["g=(v,e)和g′=(v′,e′)g",{"_index":312,"t":{"156":{"position":[[88,19]]}}}],["gap",{"_index":472,"t":{"197":{"position":[[449,6],[521,4]]}}}],["gap+1;i<=n;i",{"_index":469,"t":{"197":{"position":[[326,16]]}}}],["gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的p",{"_index":470,"t":{"197":{"position":[[343,91]]}}}],["gap,i,j",{"_index":465,"t":{"197":{"position":[[249,8]]}}}],["gap/2",{"_index":468,"t":{"197":{"position":[[303,7]]}}}],["gap;j>0",{"_index":473,"t":{"197":{"position":[[495,7]]}}}],["geo",{"_index":1853,"t":{"568":{"position":[[6,3]]}}}],["geoadd：多个经度、维度、位置名称添加到key",{"_index":1863,"t":{"572":{"position":[[0,26]]}}}],["geodist",{"_index":1865,"t":{"572":{"position":[[52,21]]}}}],["geohash：返回一个或者多个位置元素的geohash",{"_index":1868,"t":{"572":{"position":[[141,28]]}}}],["geopo",{"_index":1864,"t":{"572":{"position":[[27,24]]}}}],["georadiu",{"_index":1866,"t":{"572":{"position":[[74,43]]}}}],["georaiusbymemb",{"_index":1867,"t":{"572":{"position":[[118,22]]}}}],["get_next(str",{"_index":204,"t":{"106":{"position":[[44,15]]}}}],["get_nextval(str",{"_index":222,"t":{"108":{"position":[[343,18]]}}}],["getdatafromcode(data",{"_index":1296,"t":{"439":{"position":[[96,21]]}}}],["getlineresult",{"_index":1320,"t":{"443":{"position":[[1026,22]]}}}],["getlineresult(param",{"_index":1251,"t":{"431":{"position":[[766,21]]},"443":{"position":[[677,21]]}}}],["getproductplan(sit",{"_index":1698,"t":{"498":{"position":[[5048,20]]}}}],["gh",{"_index":775,"t":{"282":{"position":[[162,2],[280,2]]}}}],["git",{"_index":757,"t":{"276":{"position":[[168,3]]},"280":{"position":[[21,3],[51,11],[67,4]]},"282":{"position":[[213,4],[264,3]]},"287":{"position":[[699,14]]},"447":{"position":[[0,9]]}}}],["github",{"_index":754,"t":{"276":{"position":[[54,6],[70,6],[101,6],[108,17],[208,6],[221,18]]},"282":{"position":[[250,6]]}}}],["github/workflows，并且在里面创建nodejs.yml",{"_index":828,"t":{"287":{"position":[[0,61]]}}}],["githubpag",{"_index":759,"t":{"276":{"position":[[288,47]]}}}],["github提供的托管工具githubpag",{"_index":753,"t":{"276":{"position":[[0,53]]}}}],["git是以文件和行号来判断是否修改的，可能a在修改100行，b也在修改100行，完成后a推送了，b写完了拉取远程代码合并，会出现冲突，一般来说优选选择保留远程的mast",{"_index":1339,"t":{"449":{"position":[[0,150]]}}}],["grade",{"_index":689,"t":{"240":{"position":[[766,5]]}}}],["grade+10wher",{"_index":690,"t":{"240":{"position":[[774,13]]}}}],["gradelevel",{"_index":918,"t":{"306":{"position":[[398,13]]},"310":{"position":[[482,13]]},"318":{"position":[[254,13]]},"361":{"position":[[399,13]]},"363":{"position":[[356,13],[1057,13]]},"371":{"position":[[189,13]]},"373":{"position":[[122,13]]},"377":{"position":[[34,13],[201,13]]},"379":{"position":[[105,13]]},"381":{"position":[[44,13],[400,13]]}}}],["group",{"_index":657,"t":{"240":{"position":[[48,5],[269,5]]},"242":{"position":[[324,5]]},"428":{"position":[[222,5]]},"477":{"position":[[91,5],[234,5]]},"487":{"position":[[548,5],[1213,5],[1909,5]]},"578":{"position":[[170,5]]}}}],["h(key)+i*hash_2(key",{"_index":135,"t":{"92":{"position":[[514,22]]}}}],["h(key)addr=h(key)建立起关键字和散列地址的映射关系，408",{"_index":122,"t":{"92":{"position":[[25,47]]}}}],["ha5d003",{"_index":1521,"t":{"487":{"position":[[964,9]]}}}],["hash",{"_index":1843,"t":{"556":{"position":[[6,4],[47,9],[78,4]]}}}],["hashmap",{"_index":1418,"t":{"463":{"position":[[111,12]]},"498":{"position":[[5788,12]]}}}],["hashtable。redi",{"_index":1846,"t":{"560":{"position":[[77,15]]}}}],["have",{"_index":658,"t":{"240":{"position":[[62,6]]}}}],["headadjust(a,1,i",{"_index":569,"t":{"209":{"position":[[1414,16]]}}}],["headadjust(a,i,len);}void",{"_index":556,"t":{"209":{"position":[[934,25]]}}}],["headadjust(int",{"_index":557,"t":{"209":{"position":[[960,14]]}}}],["header",{"_index":1756,"t":{"506":{"position":[[6,6]]}}}],["heapsort(int",{"_index":565,"t":{"209":{"position":[[1323,12]]}}}],["hh24:mi",{"_index":1357,"t":{"460":{"position":[[374,10],[413,10]]},"487":{"position":[[2035,10],[2076,10]]}}}],["hh24:mi:ss",{"_index":1462,"t":{"473":{"position":[[61,13]]},"487":{"position":[[2132,13],[2196,13],[2699,13],[2771,13],[2835,14],[2876,13],[2953,13],[3018,15]]}}}],["hi=(h(key)+i∗hash2(key))%mh_i",{"_index":134,"t":{"92":{"position":[[475,36]]}}}],["high",{"_index":115,"t":{"80":{"position":[[254,4]]},"195":{"position":[[466,5],[515,4],[552,4]]},"203":{"position":[[435,6],[507,6],[546,6],[589,5],[763,6],[779,6]]},"212":{"position":[[372,6],[767,6]]}}}],["high)/2",{"_index":112,"t":{"80":{"position":[[204,8]]}}}],["high位置的元素拿走（挖坑），去填low",{"_index":507,"t":{"203":{"position":[[347,22]]}}}],["high向前移动，直到遇到第一个比pivot",{"_index":506,"t":{"203":{"position":[[320,26]]}}}],["host",{"_index":808,"t":{"285":{"position":[[444,4],[449,6]]}}}],["html的前端设计，前后端交互使用json格式，由于有分页要求，设计dto",{"_index":1429,"t":{"465":{"position":[[0,40]]}}}],["http",{"_index":756,"t":{"276":{"position":[[151,5]]}}}],["http://xzs.file.mindskip.net/fi4vlef1ri4vmgsonwn2ch0o8ed_",{"_index":1116,"t":{"399":{"position":[[101,60]]}}}],["http://服务器ip",{"_index":806,"t":{"285":{"position":[[413,13]]}}}],["http_refer",{"_index":823,"t":{"285":{"position":[[669,15]]}}}],["http_user_ag",{"_index":824,"t":{"285":{"position":[[687,19]]}}}],["http_x_forwarded_for",{"_index":825,"t":{"285":{"position":[[707,25]]}}}],["https://username.github.io",{"_index":787,"t":{"282":{"position":[[392,52]]}}}],["https://username.github.io',baseurl",{"_index":771,"t":{"282":{"position":[[54,37]]}}}],["hyperloglog",{"_index":1869,"t":{"574":{"position":[[0,11],[12,23],[94,11],[181,11],[222,11]]}}}],["i);//读取第i",{"_index":1647,"t":{"498":{"position":[[2613,15]]}}}],["i++后指向5，对前一个组进行排序，只不过前一个表是27",{"_index":481,"t":{"197":{"position":[[689,40]]}}}],["i+1;j<n;j",{"_index":536,"t":{"207":{"position":[[350,13]]}}}],["i,j",{"_index":441,"t":{"193":{"position":[[493,4]]}}}],["i,j,k",{"_index":578,"t":{"212":{"position":[[425,6]]}}}],["i,j,low,high,mid",{"_index":457,"t":{"195":{"position":[[357,17]]}}}],["i;i<=mid",{"_index":584,"t":{"212":{"position":[[503,8]]}}}],["i=1;i<=pagenum;i",{"_index":1646,"t":{"498":{"position":[[2536,20]]}}}],["id",{"_index":733,"t":{"264":{"position":[[118,2]]},"268":{"position":[[67,6],[117,6],[142,6],[171,6]]},"298":{"position":[[74,5],[86,6]]},"300":{"position":[[50,5],[59,6],[136,8],[206,6]]},"302":{"position":[[100,5],[112,6]]},"304":{"position":[[87,6],[212,5],[224,6]]},"306":{"position":[[95,5],[104,6],[315,5],[324,6]]},"308":{"position":[[131,6],[254,5],[262,7]]},"310":{"position":[[117,5],[126,6],[389,5],[398,6],[850,5],[859,6],[930,5],[939,6],[963,6]]},"312":{"position":[[48,5],[57,6],[122,5],[131,6],[155,6]]},"314":{"position":[[173,5],[185,6],[307,6]]},"316":{"position":[[169,5],[182,6]]},"318":{"position":[[165,5],[176,6],[226,6],[528,5],[560,6]]},"320":{"position":[[86,5],[111,6]]},"322":{"position":[[88,5]]},"324":{"position":[[38,5]]},"326":{"position":[[162,5]]},"333":{"position":[[152,5]]},"339":{"position":[[201,5],[212,6]]},"341":{"position":[[87,5],[98,6]]},"343":{"position":[[34,5],[309,5],[372,6]]},"349":{"position":[[98,5],[108,6]]},"351":{"position":[[173,5]]},"353":{"position":[[100,5]]},"355":{"position":[[47,5]]},"359":{"position":[[40,5],[214,5],[224,6]]},"361":{"position":[[93,5],[103,6],[313,5],[323,6]]},"363":{"position":[[40,5],[50,6],[264,5],[274,6],[748,5],[758,6],[965,5],[975,6]]},"367":{"position":[[223,5]]},"369":{"position":[[38,5],[212,5]]},"371":{"position":[[93,5],[104,6]]},"373":{"position":[[38,5],[48,6]]},"377":{"position":[[160,5],[170,6]]},"379":{"position":[[88,5],[98,6],[168,5],[179,6]]},"381":{"position":[[34,5],[96,5],[106,6],[383,5],[393,6],[464,5],[474,6]]},"385":{"position":[[173,5],[183,6]]},"389":{"position":[[175,5],[299,6]]},"391":{"position":[[186,5],[196,6],[216,6]]},"393":{"position":[[86,5]]},"395":{"position":[[36,5],[46,6]]},"397":{"position":[[146,6]]},"401":{"position":[[36,5]]},"416":{"position":[[326,3],[385,2]]},"460":{"position":[[155,2],[1121,3]]},"465":{"position":[[705,7],[739,7]]},"498":{"position":[[5743,2],[5748,3],[5930,2],[5998,4]]},"578":{"position":[[93,42]]}}}],["id\",nativequeri",{"_index":1153,"t":{"416":{"position":[[391,15]]}}}],["id)}jpa",{"_index":1155,"t":{"416":{"position":[[466,7]]}}}],["id,a.lin",{"_index":1373,"t":{"460":{"position":[[729,9]]}}}],["id,lin",{"_index":1348,"t":{"460":{"position":[[161,7]]}}}],["id组，后端处理拼接sql，使用lik",{"_index":1453,"t":{"467":{"position":[[0,37]]}}}],["id，支持ack",{"_index":1877,"t":{"578":{"position":[[56,36]]}}}],["if(!\"pass\".equals(split[1])&&!stringutils.equals(site,\"5001",{"_index":1657,"t":{"498":{"position":[[3216,63]]}}}],["if(!\"pass\".equals(split[1])&&stringutils.equals(site,\"5001",{"_index":1656,"t":{"498":{"position":[[3105,62]]}}}],["if(!flag)return",{"_index":496,"t":{"201":{"position":[[253,15]]}}}],["if(!split[1].equals(\"pass",{"_index":1615,"t":{"498":{"position":[[1349,29]]}}}],["if(!this.shopord",{"_index":1243,"t":{"431":{"position":[[597,20]]},"443":{"position":[[508,20]]}}}],["if(!visited[i",{"_index":354,"t":{"170":{"position":[[478,15]]}}}],["if(!visited[w",{"_index":366,"t":{"170":{"position":[[657,16]]},"172":{"position":[[230,15],[365,15]]}}}],["if(\"ng\".equals(ispass",{"_index":1704,"t":{"498":{"position":[[5259,23]]}}}],["if(a[0]>a[i])break",{"_index":564,"t":{"209":{"position":[[1136,19]]}}}],["if(a[i",{"_index":471,"t":{"197":{"position":[[435,7]]}}}],["if(a[i]<a[i",{"_index":444,"t":{"193":{"position":[[523,11]]}}}],["if(a[j",{"_index":494,"t":{"201":{"position":[[191,7]]}}}],["if(a[j]<a[min",{"_index":537,"t":{"207":{"position":[[364,15]]}}}],["if(a[mid",{"_index":459,"t":{"195":{"position":[[477,9]]}}}],["if(b[i]<=b[j",{"_index":587,"t":{"212":{"position":[[545,14]]}}}],["if(collectionutil.isnotempty(sqlresult_s801",{"_index":1610,"t":{"498":{"position":[[971,46]]}}}],["if(i",{"_index":1600,"t":{"498":{"position":[[723,4]]}}}],["if(i!=min",{"_index":538,"t":{"207":{"position":[[391,10]]}}}],["if(i<len",{"_index":562,"t":{"209":{"position":[[1090,8]]}}}],["if(i==10",{"_index":1684,"t":{"498":{"position":[[4405,10]]}}}],["if(i==2",{"_index":1655,"t":{"498":{"position":[[3034,9]]}}}],["if(i==3",{"_index":1659,"t":{"498":{"position":[[3353,9]]}}}],["if(i==5",{"_index":1663,"t":{"498":{"position":[[3500,9]]}}}],["if(i==6",{"_index":1669,"t":{"498":{"position":[[3718,9]]}}}],["if(i==7",{"_index":1672,"t":{"498":{"position":[[3844,9]]}}}],["if(i==9",{"_index":1676,"t":{"498":{"position":[[4011,9]]}}}],["if(isempty(index))return",{"_index":265,"t":{"134":{"position":[[307,24],[686,24]]}}}],["if(isempty(left))return",{"_index":273,"t":{"134":{"position":[[573,23]]}}}],["if(isempty(right))return",{"_index":270,"t":{"134":{"position":[[443,24]]}}}],["if(isempty(x",{"_index":261,"t":{"134":{"position":[[255,13],[388,13],[523,13]]}}}],["if(j",{"_index":154,"t":{"98":{"position":[[315,4]]},"108":{"position":[[431,4]]}}}],["if(j==0||s.ch[i",{"_index":218,"t":{"106":{"position":[[332,16]]}}}],["if(j>t.len",{"_index":219,"t":{"106":{"position":[[395,11]]}}}],["if(k==0",{"_index":209,"t":{"106":{"position":[[122,7]]}}}],["if(list.length",{"_index":1326,"t":{"443":{"position":[[1248,14]]}}}],["if(low",{"_index":519,"t":{"203":{"position":[[770,6]]}}}],["if(low<high",{"_index":595,"t":{"212":{"position":[[774,13]]}}}],["if(mid",{"_index":113,"t":{"80":{"position":[[213,6],[239,6]]}}}],["if(pagenum",{"_index":1645,"t":{"498":{"position":[[2470,10]]}}}],["if(pagenum==0",{"_index":1585,"t":{"498":{"position":[[292,15]]}}}],["if(process!=nul",{"_index":1426,"t":{"463":{"position":[[548,18]]}}}],["if(read",{"_index":1744,"t":{"498":{"position":[[7264,9]]}}}],["if(res.cod",{"_index":1253,"t":{"431":{"position":[[803,11]]},"443":{"position":[[714,11]]}}}],["if(s.ch[i",{"_index":152,"t":{"98":{"position":[[227,10]]}}}],["if(split.length",{"_index":1689,"t":{"498":{"position":[[4599,15]]}}}],["if(stringutils.equals(facetype,\"al",{"_index":1693,"t":{"498":{"position":[[4840,39]]}}}],["if(stringutils.equals(facetype,\"b",{"_index":1638,"t":{"498":{"position":[[2240,37]]}}}],["if(stringutils.equals(facetype,\"bot",{"_index":1692,"t":{"498":{"position":[[4782,39]]}}}],["if(stringutils.equals(facetype,\"t",{"_index":1636,"t":{"498":{"position":[[2162,37]]}}}],["if(stringutils.equals(facetype,\"top",{"_index":1691,"t":{"498":{"position":[[4724,39]]}}}],["if(stringutils.equals(site,\"s801",{"_index":1583,"t":{"498":{"position":[[238,36]]}}}],["if(stringutils.isblank(planloguuid)&&stringutils.equals(site,\"5001\")&&!stringutils.equals(testtype,\"ipqc",{"_index":1721,"t":{"498":{"position":[[6107,108]]}}}],["if(stringutils.isnotblank(exportid",{"_index":1454,"t":{"467":{"position":[[38,38]]}}}],["if(stringutils.isnotblank(planloguuid)&&!stringutils.equals(testtype,\"ipqc",{"_index":1706,"t":{"498":{"position":[[5378,78]]}}}],["if(t.ch[j",{"_index":226,"t":{"108":{"position":[[475,10]]}}}],["if(tempstr",{"_index":1613,"t":{"498":{"position":[[1271,10],[3004,10]]}}}],["if(x>=len",{"_index":256,"t":{"134":{"position":[[167,9]]}}}],["imag",{"_index":739,"t":{"268":{"position":[[89,6]]}}}],["imagepath",{"_index":860,"t":{"292":{"position":[[144,12]]},"322":{"position":[[479,12]]},"324":{"position":[[429,12]]},"333":{"position":[[353,12]]},"339":{"position":[[601,12]]},"341":{"position":[[487,12]]},"343":{"position":[[589,12]]},"393":{"position":[[464,12]]},"395":{"position":[[434,12]]},"401":{"position":[[436,12]]}}}],["import",{"_index":1291,"t":{"439":{"position":[[24,6]]}}}],["includ",{"_index":812,"t":{"285":{"position":[[501,7]]},"287":{"position":[[718,9]]}}}],["incr",{"_index":1832,"t":{"550":{"position":[[12,4]]}}}],["incrbi",{"_index":1833,"t":{"550":{"position":[[24,6]]}}}],["increment",{"_index":1834,"t":{"550":{"position":[[35,17]]}}}],["index",{"_index":263,"t":{"134":{"position":[[294,5],[347,6],[678,7]]},"285":{"position":[[348,5]]},"443":{"position":[[1422,5]]}}}],["index(str",{"_index":144,"t":{"98":{"position":[[151,12]]}}}],["index.html",{"_index":801,"t":{"285":{"position":[[354,11]]}}}],["index_kmp(str",{"_index":214,"t":{"106":{"position":[[247,16]]}}}],["inductive_d",{"_index":1350,"t":{"460":{"position":[[204,14],[222,15],[796,15],[1253,15]]}}}],["inductive_date,start_tim",{"_index":1414,"t":{"460":{"position":[[1675,25]]}}}],["info",{"_index":7,"t":{"11":{"position":[[156,4]]},"16":{"position":[[0,4]]},"197":{"position":[[138,4]]}}}],["init(treenod",{"_index":249,"t":{"134":{"position":[[66,13]]}}}],["initgit",{"_index":761,"t":{"280":{"position":[[25,7]]}}}],["initlineresult",{"_index":1242,"t":{"431":{"position":[[579,17]]},"443":{"position":[[490,17]]}}}],["initqueue(q",{"_index":352,"t":{"170":{"position":[[437,13]]}}}],["inner",{"_index":1219,"t":{"428":{"position":[[165,5]]}}}],["insert",{"_index":682,"t":{"240":{"position":[[640,6]]}}}],["insertsort(int",{"_index":440,"t":{"193":{"position":[[460,14]]}}}],["insertsortplus(int",{"_index":456,"t":{"195":{"position":[[320,18]]}}}],["instal",{"_index":843,"t":{"287":{"position":[[268,7],[328,7],[367,7]]},"536":{"position":[[148,9]]}}}],["int",{"_index":102,"t":{"80":{"position":[[91,3],[127,3],[145,3]]},"98":{"position":[[147,3],[177,3]]},"106":{"position":[[76,3],[243,3],[288,3]]},"108":{"position":[[380,3]]},"134":{"position":[[28,3],[38,3],[219,12],[354,11],[490,11]]},"145":{"position":[[88,3],[98,3],[231,3],[391,3]]},"165":{"position":[[637,3],[680,3]]},"167":{"position":[[119,3],[133,3],[297,3]]},"193":{"position":[[489,3]]},"195":{"position":[[353,3]]},"197":{"position":[[245,3]]},"201":{"position":[[53,3]]},"203":{"position":[[473,3],[514,3],[786,3]]},"207":{"position":[[325,3]]},"212":{"position":[[283,3],[292,4],[421,3],[788,3]]},"463":{"position":[[128,4],[335,4]]},"498":{"position":[[3538,3],[6003,3]]}}}],["integer.parseint((string)productplan.get(\"tl",{"_index":1708,"t":{"498":{"position":[[5530,48]]}}}],["integer、varchar、等等）not",{"_index":641,"t":{"238":{"position":[[22,27]]}}}],["interfac",{"_index":1143,"t":{"416":{"position":[[226,9]]}}}],["intro",{"_index":627,"t":{"225":{"position":[[0,5]]}}}],["introduct",{"_index":1393,"t":{"460":{"position":[[1203,13]]}}}],["intset",{"_index":1845,"t":{"560":{"position":[[67,6]]}}}],["in配合select查询）例：upd",{"_index":687,"t":{"240":{"position":[[729,30]]}}}],["iouiouiou的计算公式为：iou=∣a∩b∣a∪bi",{"_index":715,"t":{"249":{"position":[[0,31]]}}}],["ip",{"_index":810,"t":{"285":{"position":[[480,2]]}}}],["is_studenta",{"_index":698,"t":{"242":{"position":[[168,12]]}}}],["isempty(t[],int",{"_index":255,"t":{"134":{"position":[[147,15]]}}}],["isempty;}treenod",{"_index":248,"t":{"134":{"position":[[42,18]]}}}],["ispass",{"_index":1581,"t":{"498":{"position":[[205,6],[1379,6],[1447,6],[3280,6]]}}}],["it.descript",{"_index":1490,"t":{"487":{"position":[[152,14]]}}}],["it.item_bo",{"_index":1505,"t":{"487":{"position":[[638,10]]}}}],["it.local",{"_index":1507,"t":{"487":{"position":[[673,9]]}}}],["item",{"_index":919,"t":{"306":{"position":[[420,8]]},"310":{"position":[[504,8]]},"318":{"position":[[277,8]]},"361":{"position":[[421,8]]},"363":{"position":[[378,8],[1079,8]]},"371":{"position":[[211,8]]},"373":{"position":[[144,8]]},"435":{"position":[[320,5]]},"443":{"position":[[456,5],[469,4]]},"460":{"position":[[1012,5],[1179,5]]},"465":{"position":[[273,5]]},"487":{"position":[[90,5]]},"498":{"position":[[6428,4]]}}}],["item._x_row_key",{"_index":1331,"t":{"443":{"position":[[1463,15]]}}}],["item.valu",{"_index":1264,"t":{"431":{"position":[[1107,11]]}}}],["item_t",{"_index":1504,"t":{"487":{"position":[[625,6]]}}}],["itembo",{"_index":1735,"t":{"498":{"position":[[6859,6]]}}}],["itemord",{"_index":924,"t":{"306":{"position":[[578,12]]},"308":{"position":[[227,12]]},"310":{"position":[[776,12],[1018,12]]},"312":{"position":[[210,12]]},"318":{"position":[[473,12],[615,12]]},"349":{"position":[[180,12]]},"361":{"position":[[585,12]]},"363":{"position":[[647,12],[1348,12]]},"371":{"position":[[351,12]]},"373":{"position":[[304,12]]}}}],["itemuuid",{"_index":1057,"t":{"363":{"position":[[467,11],[1168,11]]}}}],["i做前段指针，j",{"_index":586,"t":{"212":{"position":[[529,15]]}}}],["i前移（i",{"_index":533,"t":{"207":{"position":[[240,19]]}}}],["i向前走到4",{"_index":480,"t":{"197":{"position":[[668,20]]}}}],["i和j",{"_index":143,"t":{"98":{"position":[[49,68]]}}}],["i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i",{"_index":528,"t":{"207":{"position":[[0,158]]}}}],["i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n",{"_index":499,"t":{"201":{"position":[[351,44]]}}}],["i，前面i",{"_index":436,"t":{"193":{"position":[[34,25]]}}}],["j",{"_index":150,"t":{"98":{"position":[[214,1],[269,4],[290,1],[304,1]]},"102":{"position":[[464,93]]},"104":{"position":[[352,35],[545,53],[649,1],[911,1],[934,1],[972,1],[1818,1],[1898,1],[1940,2]]},"106":{"position":[[80,1],[367,4],[380,1]]},"108":{"position":[[384,1],[465,4]]},"193":{"position":[[581,3]]},"201":{"position":[[173,1]]},"203":{"position":[[378,12]]},"207":{"position":[[346,1],[386,2]]},"214":{"position":[[526,1]]}}}],["j<=high;k",{"_index":585,"t":{"212":{"position":[[515,13]]}}}],["j<t.len",{"_index":217,"t":{"106":{"position":[[322,9]]}}}],["java",{"_index":1340,"t":{"456":{"position":[[39,33]]}}}],["jekyl",{"_index":758,"t":{"276":{"position":[[186,21]]}}}],["jenkin",{"_index":1567,"t":{"492":{"position":[[46,14],[61,21]]}}}],["job",{"_index":832,"t":{"287":{"position":[[108,5]]}}}],["join",{"_index":674,"t":{"240":{"position":[[436,4],[526,4]]},"428":{"position":[[171,4]]},"460":{"position":[[1055,4],[1594,4]]},"481":{"position":[[63,7]]},"487":{"position":[[571,4],[620,4],[690,4],[750,4],[825,4]]},"498":{"position":[[6473,4]]}}}],["join后面的on接条件，可以加and",{"_index":1481,"t":{"481":{"position":[[43,19]]}}}],["join和right",{"_index":1480,"t":{"481":{"position":[[32,10]]}}}],["jpa",{"_index":1139,"t":{"416":{"position":[[158,3]]}}}],["jparepository<test,str",{"_index":1146,"t":{"416":{"position":[[252,26]]}}}],["jpa是java跟数据库交互的一种工具,不同于mybatis需要写xml文件和sql来交互,jpa可以根据一些命名规范来直接完成交互,简单的增删查改可以不用写sql",{"_index":1134,"t":{"416":{"position":[[0,83]]}}}],["jpg",{"_index":1115,"t":{"399":{"position":[[66,9],[84,9],[185,7]]}}}],["json",{"_index":1183,"t":{"423":{"position":[[182,30],[255,9],[336,14]]},"431":{"position":[[1157,20]]},"465":{"position":[[779,10]]}}}],["json或者返回json的时候，需要自己自定义类,以保存传入或者返回的对象,使用requestbodi",{"_index":1185,"t":{"423":{"position":[[265,58]]}}}],["json格式的传参即可，设计cleanbarlogvo",{"_index":1267,"t":{"431":{"position":[[1178,35]]}}}],["json需要手动更改，后端设计实体接收json",{"_index":1274,"t":{"435":{"position":[[15,52]]}}}],["js部分：js部分就是写处理逻辑的，使用data来定义数据，method",{"_index":1314,"t":{"443":{"position":[[320,53]]}}}],["j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j",{"_index":188,"t":{"104":{"position":[[1292,52]]}}}],["j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的ab相等呀，而主串中指针扫过的位置，必有ab匹配，那么我们可以直接跳过前部的ab",{"_index":178,"t":{"104":{"position":[[688,106]]}}}],["j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k",{"_index":163,"t":{"102":{"position":[[293,80]]}}}],["j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next",{"_index":168,"t":{"104":{"position":[[0,192]]}}}],["k",{"_index":176,"t":{"104":{"position":[[630,1],[642,1],[954,1],[965,1],[987,1],[1010,1],[1800,1],[1811,1],[1834,2],[1873,1],[1891,1],[1924,2],[1933,1]]},"106":{"position":[[172,4],[211,1]]},"108":{"position":[[470,4],[511,2],[587,1]]},"209":{"position":[[1201,1]]}}}],["k*2",{"_index":561,"t":{"209":{"position":[[1062,27]]}}}],["k*2;i<len;i*=2",{"_index":560,"t":{"209":{"position":[[1045,16]]}}}],["k,int",{"_index":558,"t":{"209":{"position":[[983,5]]}}}],["k...j",{"_index":166,"t":{"102":{"position":[[418,5]]}}}],["k=next[k]k=next[k]k=next[k",{"_index":196,"t":{"104":{"position":[[2145,52]]}}}],["k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k",{"_index":132,"t":{"92":{"position":[[384,47]]}}}],["k_j^{i",{"_index":609,"t":{"214":{"position":[[503,7]]}}}],["kb",{"_index":1870,"t":{"574":{"position":[[116,2]]}}}],["key",{"_index":105,"t":{"80":{"position":[[121,5],[248,5]]},"92":{"position":[[118,3]]},"463":{"position":[[176,3],[386,3]]},"550":{"position":[[17,6],[31,3],[58,8],[74,3]]}}}],["key(key1",{"_index":645,"t":{"238":{"position":[[132,9]]}}}],["key(key1,key2",{"_index":643,"t":{"238":{"position":[[99,19]]}}}],["key)reutrn",{"_index":114,"t":{"80":{"position":[[223,10]]}}}],["keydown.native.ent",{"_index":1313,"t":{"443":{"position":[[284,35]]}}}],["keydown.native.enter=\"entercod",{"_index":1310,"t":{"443":{"position":[[209,34]]}}}],["key。查找的时候先找最值key",{"_index":119,"t":{"85":{"position":[[0,83]]}}}],["key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high",{"_index":101,"t":{"80":{"position":[[0,83]]}}}],["key节点，计数一次，然后去块间顺序查找，依次+1",{"_index":120,"t":{"87":{"position":[[5,31]]}}}],["kill",{"_index":742,"t":{"268":{"position":[[137,4]]}}}],["kmp",{"_index":142,"t":{"96":{"position":[[23,7]]},"102":{"position":[[0,54],[211,17]]},"106":{"position":[[236,6]]}}}],["kv模式不变，但是v是一个键值对，map<string,map<object,object",{"_index":1844,"t":{"558":{"position":[[0,47]]}}}],["k能够完全函数依赖整个关系集r，k的闭包完整退出r",{"_index":712,"t":{"245":{"position":[[203,29]]}}}],["l",{"_index":1218,"t":{"428":{"position":[[163,1]]}}}],["l.barcod",{"_index":1221,"t":{"428":{"position":[[200,9]]}}}],["l.check_result",{"_index":1213,"t":{"428":{"position":[[83,15]]}}}],["l.check_statu",{"_index":1212,"t":{"428":{"position":[[67,15]]}}}],["l.clean_peopl",{"_index":1214,"t":{"428":{"position":[[99,15]]}}}],["l.clean_result",{"_index":1211,"t":{"428":{"position":[[51,15]]}}}],["l.clean_tim",{"_index":1210,"t":{"428":{"position":[[37,13]]}}}],["l.item",{"_index":1208,"t":{"428":{"position":[[21,7]]}}}],["l.line",{"_index":1209,"t":{"428":{"position":[[29,7]]}}}],["l.shop_ord",{"_index":1207,"t":{"428":{"position":[[7,13]]}}}],["l.shop_order,l.item,l.line,l.clean_time,l.clean_result,l.check_status,l.check_result,l.clean_peopl",{"_index":1223,"t":{"428":{"position":[[231,99]]}}}],["l[1.......i",{"_index":433,"t":{"193":{"position":[[0,11]]}}}],["l[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得l分为两块：l[1....k",{"_index":503,"t":{"203":{"position":[[7,68]]}}}],["l[i",{"_index":434,"t":{"193":{"position":[[15,4],[287,14],[302,12]]}}}],["l[i+1......n",{"_index":435,"t":{"193":{"position":[[20,13]]}}}],["l[i]，然后将子序列中大于l[i",{"_index":439,"t":{"193":{"position":[[237,49]]}}}],["label=\"$t(languagepath+'cod",{"_index":1307,"t":{"443":{"position":[[127,32]]}}}],["label=\"$t(languagepath+'lin",{"_index":1228,"t":{"431":{"position":[[176,32]]}}}],["last_delivered_id",{"_index":1880,"t":{"578":{"position":[[218,17],[250,35],[286,17]]}}}],["lastactivetim",{"_index":990,"t":{"322":{"position":[[320,17]]},"324":{"position":[[270,17]]},"333":{"position":[[412,17]]},"339":{"position":[[424,17]]},"341":{"position":[[310,17]]},"343":{"position":[[676,17]]},"393":{"position":[[320,17]]},"395":{"position":[[273,17]]},"401":{"position":[[275,17]]}}}],["latest",{"_index":834,"t":{"287":{"position":[[138,6]]}}}],["layui.form.val('#searchform",{"_index":1452,"t":{"465":{"position":[[1066,32]]}}}],["layui，初始化grid",{"_index":1450,"t":{"465":{"position":[[988,18]]}}}],["lbs应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的xxx",{"_index":1854,"t":{"570":{"position":[[0,85]]}}}],["le",{"_index":9,"t":{"11":{"position":[[238,3]]},"38":{"position":[[85,3],[147,3],[153,3]]},"40":{"position":[[146,3],[152,3],[197,3],[203,3]]},"92":{"position":[[432,3]]},"136":{"position":[[238,3],[266,3]]},"209":{"position":[[568,3],[596,3]]},"214":{"position":[[499,3],[511,3],[522,3],[528,3],[536,3],[542,3]]}}}],["left",{"_index":272,"t":{"134":{"position":[[562,4],[612,5]]},"240":{"position":[[404,31],[521,4]]},"481":{"position":[[27,4]]},"498":{"position":[[6467,5]]}}}],["leftchild,nexts",{"_index":305,"t":{"145":{"position":[[414,22]]}}}],["len",{"_index":106,"t":{"80":{"position":[[131,3],[164,3]]},"134":{"position":[[88,5]]},"193":{"position":[[483,5]]},"195":{"position":[[347,5]]},"197":{"position":[[239,5]]},"201":{"position":[[112,5]]},"207":{"position":[[293,5]]},"209":{"position":[[873,5],[989,5],[1344,5]]}}}],["len(a",{"_index":107,"t":{"80":{"position":[[137,7]]}}}],["len/2",{"_index":555,"t":{"209":{"position":[[906,27]]}}}],["len/2;gap>=1;gap",{"_index":467,"t":{"197":{"position":[[284,16]]}}}],["len/2;i>0;i",{"_index":554,"t":{"209":{"position":[[891,14]]}}}],["len;i",{"_index":443,"t":{"193":{"position":[[513,9]]},"195":{"position":[[390,9]]}}}],["len;i>n;i",{"_index":567,"t":{"209":{"position":[[1383,9]]}}}],["length",{"_index":1664,"t":{"498":{"position":[[3542,6]]}}}],["len，那么第一棵子树的根节点下表为len/2",{"_index":552,"t":{"209":{"position":[[746,35]]}}}],["level",{"_index":911,"t":{"306":{"position":[[111,8]]},"310":{"position":[[133,8]]},"349":{"position":[[136,8]]},"351":{"position":[[47,8],[204,8]]},"353":{"position":[[131,8]]},"355":{"position":[[78,8]]},"359":{"position":[[52,8]]},"361":{"position":[[110,8]]},"363":{"position":[[57,8],[765,8]]},"367":{"position":[[72,8]]},"369":{"position":[[72,8]]}}}],["levelnam",{"_index":1047,"t":{"349":{"position":[[153,12]]},"351":{"position":[[221,12]]},"353":{"position":[[148,12]]},"355":{"position":[[95,12]]}}}],["lftp",{"_index":847,"t":{"287":{"position":[[339,4]]}}}],["like'%ict",{"_index":1535,"t":{"487":{"position":[[1588,11],[1729,11]]}}}],["limit",{"_index":1285,"t":{"435":{"position":[[567,5]]},"465":{"position":[[941,5]]}}}],["limitdatetim",{"_index":914,"t":{"306":{"position":[[220,16]]},"310":{"position":[[244,16]]},"361":{"position":[[220,16]]},"363":{"position":[[168,16],[876,16]]}}}],["limitendtim",{"_index":874,"t":{"298":{"position":[[154,15]]}}}],["limitstarttim",{"_index":873,"t":{"298":{"position":[[121,17]]}}}],["line",{"_index":1254,"t":{"431":{"position":[[829,4]]},"435":{"position":[[341,5]]},"443":{"position":[[740,4]]},"460":{"position":[[172,5],[742,5],[1135,5]]},"465":{"position":[[214,5]]},"487":{"position":[[313,5]]}}}],["line,shop_order,process,start_time,end_tim",{"_index":1366,"t":{"460":{"position":[[571,43]]}}}],["line,shop_order,start_time,end_time,inductive_d",{"_index":1363,"t":{"460":{"position":[[473,51]]}}}],["link",{"_index":1232,"t":{"431":{"position":[[287,4]]}}}],["linux启动内核后就会挂在root",{"_index":731,"t":{"262":{"position":[[111,59]]}}}],["list",{"_index":897,"t":{"304":{"position":[[200,7]]},"314":{"position":[[161,7]]},"316":{"position":[[157,7]]},"326":{"position":[[150,7]]},"339":{"position":[[189,7]]},"351":{"position":[[161,7]]},"359":{"position":[[202,7]]},"367":{"position":[[211,7]]},"369":{"position":[[200,7]]},"377":{"position":[[148,7]]},"385":{"position":[[161,7]]},"389":{"position":[[163,7]]},"391":{"position":[[174,7]]},"443":{"position":[[1212,4]]},"498":{"position":[[4130,4],[4177,4]]},"578":{"position":[[476,28]]}}}],["list.length",{"_index":1328,"t":{"443":{"position":[[1366,12]]}}}],["list.map(item",{"_index":1316,"t":{"443":{"position":[[422,13]]}}}],["list.remov",{"_index":1680,"t":{"498":{"position":[[4223,21],[4245,21],[4267,20]]}}}],["list<checkreport",{"_index":1713,"t":{"498":{"position":[[5801,17]]}}}],["list<cleanbarlogdto",{"_index":1269,"t":{"431":{"position":[[1243,20]]}}}],["list<map<str",{"_index":1606,"t":{"498":{"position":[[873,16],[6304,16]]}}}],["list<str",{"_index":1148,"t":{"416":{"position":[[289,12],[415,12]]},"465":{"position":[[755,12]]},"498":{"position":[[4115,14]]}}}],["list[i]._x_row_key",{"_index":1332,"t":{"443":{"position":[[1483,20]]}}}],["listen",{"_index":798,"t":{"285":{"position":[[218,6],[245,6]]}}}],["list（列表），redi",{"_index":1838,"t":{"552":{"position":[[0,82]]}}}],["ll",{"_index":2,"t":{"6":{"position":[[22,5]]},"8":{"position":[[94,5]]},"13":{"position":[[183,21]]}}}],["local",{"_index":855,"t":{"287":{"position":[[566,5]]}}}],["locat",{"_index":804,"t":{"285":{"position":[[389,8]]}}}],["log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1",{"_index":293,"t":{"136":{"position":[[381,94]]}}}],["log_format",{"_index":817,"t":{"285":{"position":[[571,10]]}}}],["low",{"_index":108,"t":{"80":{"position":[[149,3],[197,4],[278,3]]},"195":{"position":[[413,3],[459,4],[495,3]]},"203":{"position":[[305,14],[370,7],[657,6],[718,5]]}}}],["low+high)/2",{"_index":596,"t":{"212":{"position":[[798,13]]}}}],["low,int",{"_index":511,"t":{"203":{"position":[[499,7],[755,7]]},"212":{"position":[[356,7],[759,7]]}}}],["low,j",{"_index":582,"t":{"212":{"position":[[485,5]]}}}],["low;k<=high;k",{"_index":580,"t":{"212":{"position":[[440,16]]}}}],["low位置的元素拿走，填high",{"_index":509,"t":{"203":{"position":[[417,17]]}}}],["low向后移动，直到遇到第一个比pivot",{"_index":508,"t":{"203":{"position":[[391,25]]}}}],["low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j",{"_index":505,"t":{"203":{"position":[[162,142]]}}}],["lr",{"_index":4,"t":{"6":{"position":[[34,7]]},"8":{"position":[[106,7]]},"13":{"position":[[227,29]]}}}],["ls",{"_index":740,"t":{"268":{"position":[[96,2]]}}}],["m",{"_index":22,"t":{"25":{"position":[[253,30]]},"282":{"position":[[226,1]]},"428":{"position":[[195,1]]},"460":{"position":[[1619,1]]},"487":{"position":[[2595,1]]}}}],["m\"提交信息\"git",{"_index":765,"t":{"280":{"position":[[80,10]]}}}],["m*r^en=(−1)s∗m∗r",{"_index":83,"t":{"71":{"position":[[28,17]]}}}],["m+1",{"_index":311,"t":{"152":{"position":[[162,3]]}}}],["m.barcod",{"_index":1222,"t":{"428":{"position":[[212,9]]}}}],["m.end_timewher",{"_index":1560,"t":{"487":{"position":[[2645,15]]}}}],["m.f_all_count)*100",{"_index":1553,"t":{"487":{"position":[[2375,20]]}}}],["m.introduct",{"_index":1392,"t":{"460":{"position":[[1185,14]]}}}],["m.item",{"_index":1412,"t":{"460":{"position":[[1633,6]]}}}],["m.p_all_count)*100",{"_index":1485,"t":{"485":{"position":[[61,20]]},"487":{"position":[[2457,20]]}}}],["m.process",{"_index":1413,"t":{"460":{"position":[[1656,9]]}}}],["m.stand_peopl",{"_index":1399,"t":{"460":{"position":[[1345,14]]}}}],["m.stand_product",{"_index":1401,"t":{"460":{"position":[[1377,15],[1452,16]]}}}],["m.stand_product)*100",{"_index":1406,"t":{"460":{"position":[[1508,22]]}}}],["m.start_tim",{"_index":1559,"t":{"487":{"position":[[2615,12]]}}}],["m/2",{"_index":17,"t":{"23":{"position":[[0,26]]},"25":{"position":[[0,26],[115,27]]},"28":{"position":[[29,37]]}}}],["m/2]（向上取整）棵子树，即至少有[m/2",{"_index":14,"t":{"16":{"position":[[45,45]]}}}],["m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3",{"_index":133,"t":{"92":{"position":[[436,32]]}}}],["main",{"_index":768,"t":{"280":{"position":[[106,4]]},"285":{"position":[[582,4],[770,6]]},"287":{"position":[[101,4]]}}}],["make",{"_index":1807,"t":{"536":{"position":[[143,4]]}}}],["malloc(sizeof(int)*(n+1",{"_index":574,"t":{"212":{"position":[[297,28]]}}}],["map",{"_index":1733,"t":{"498":{"position":[[6830,3]]}}}],["map.get(\"item",{"_index":1736,"t":{"498":{"position":[[6868,16]]}}}],["map<str",{"_index":1696,"t":{"498":{"position":[[5014,11],[5755,11],[6810,11]]}}}],["map<string,str",{"_index":1416,"t":{"463":{"position":[[75,18]]}}}],["master",{"_index":1749,"t":{"504":{"position":[[0,17]]}}}],["math",{"_index":713,"t":{"247":{"position":[[0,4]]}}}],["mathemat",{"_index":749,"t":{"271":{"position":[[4,11]]}}}],["max[ve(j",{"_index":420,"t":{"187":{"position":[[104,9]]}}}],["maxsize;i",{"_index":297,"t":{"145":{"position":[[150,12]]}}}],["merge(a,low,mid,high",{"_index":599,"t":{"212":{"position":[[859,22]]}}}],["merge(int",{"_index":575,"t":{"212":{"position":[[338,9]]}}}],["mergesort(a,low,mid",{"_index":597,"t":{"212":{"position":[[812,21]]}}}],["mergesort(a,mid+1,high",{"_index":598,"t":{"212":{"position":[[834,24]]}}}],["mergesort(int",{"_index":594,"t":{"212":{"position":[[737,13]]}}}],["merge到master中，切记不要将dev合并到mast",{"_index":1754,"t":{"504":{"position":[[138,45]]}}}],["mesext_first_check_report",{"_index":1603,"t":{"498":{"position":[[810,25],[5690,25]]}}}],["mesext_production_plan",{"_index":1725,"t":{"498":{"position":[[6438,22]]}}}],["mesext_xld_barcod",{"_index":1220,"t":{"428":{"position":[[176,18]]}}}],["mesextcontroller.site.notempti",{"_index":1433,"t":{"465":{"position":[[139,33]]}}}],["messag",{"_index":866,"t":{"294":{"position":[[137,10]]},"296":{"position":[[48,10]]},"302":{"position":[[67,10]]},"304":{"position":[[157,10]]},"306":{"position":[[64,10]]},"308":{"position":[[289,10]]},"310":{"position":[[68,10]]},"312":{"position":[[342,10]]},"314":{"position":[[115,10]]},"316":{"position":[[110,10]]},"318":{"position":[[118,10]]},"320":{"position":[[53,10]]},"322":{"position":[[57,10]]},"324":{"position":[[472,10]]},"326":{"position":[[107,10]]},"328":{"position":[[65,10]]},"330":{"position":[[69,10]]},"333":{"position":[[121,10]]},"335":{"position":[[48,10]]},"339":{"position":[[140,10]]},"341":{"position":[[56,10]]},"343":{"position":[[278,10]]},"345":{"position":[[63,10]]},"347":{"position":[[62,10]]},"349":{"position":[[65,10]]},"351":{"position":[[118,10]]},"353":{"position":[[69,10]]},"355":{"position":[[141,10]]},"357":{"position":[[69,10]]},"359":{"position":[[159,10]]},"361":{"position":[[62,10]]},"363":{"position":[[717,10]]},"365":{"position":[[62,10]]},"367":{"position":[[168,10]]},"369":{"position":[[157,10]]},"371":{"position":[[62,10]]},"373":{"position":[[342,10]]},"375":{"position":[[60,10]]},"377":{"position":[[105,10]]},"379":{"position":[[57,10]]},"381":{"position":[[352,10]]},"383":{"position":[[63,10]]},"385":{"position":[[117,10]]},"387":{"position":[[146,10]]},"389":{"position":[[120,10]]},"391":{"position":[[130,10]]},"393":{"position":[[55,10]]},"395":{"position":[[477,10]]},"397":{"position":[[77,10]]},"401":{"position":[[479,10]]},"578":{"position":[[138,7]]}}}],["messageid",{"_index":999,"t":{"326":{"position":[[196,12]]}}}],["messageremindconfigservice.pushmsg(sit",{"_index":1343,"t":{"456":{"position":[[256,40]]}}}],["mes，此时一块拼板(多块小板拼接，小板也有条码)已经形成绑定关系。拼板关系流入smt",{"_index":1132,"t":{"409":{"position":[[0,103]]}}}],["metadata",{"_index":1135,"t":{"416":{"position":[[97,13]]}}}],["method",{"_index":1297,"t":{"439":{"position":[[146,7]]}}}],["mgraph",{"_index":333,"t":{"165":{"position":[[699,20]]}}}],["mhi​=(h(key)+i∗hash2​(key))%m",{"_index":136,"t":{"92":{"position":[[540,29]]}}}],["mid",{"_index":111,"t":{"80":{"position":[[191,3],[234,4],[261,3],[284,3]]},"195":{"position":[[453,3],[501,3],[522,3]]},"212":{"position":[[792,3]]}}}],["mid+1,k",{"_index":583,"t":{"212":{"position":[[493,7]]}}}],["mid,int",{"_index":576,"t":{"212":{"position":[[364,7]]}}}],["mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high",{"_index":577,"t":{"212":{"position":[[379,41]]}}}],["min",{"_index":535,"t":{"207":{"position":[[329,3],[380,3]]}}}],["min[vl(j",{"_index":425,"t":{"187":{"position":[[333,9]]}}}],["mode",{"_index":1814,"t":{"538":{"position":[[43,4],[63,4]]}}}],["model",{"_index":1312,"t":{"443":{"position":[[265,18]]}}}],["model=\"cod",{"_index":1306,"t":{"443":{"position":[[114,12]]}}}],["model=\"lin",{"_index":1230,"t":{"431":{"position":[[250,12]]}}}],["model=\"showlin",{"_index":1235,"t":{"431":{"position":[[348,16]]}}}],["model_nam",{"_index":1604,"t":{"498":{"position":[[842,10]]}}}],["modelname.split",{"_index":1649,"t":{"498":{"position":[[2685,17],[2731,17]]}}}],["model，其中的showline为是否展示选项框，:actions为对应的选项数据，select",{"_index":1239,"t":{"431":{"position":[[461,55]]}}}],["modifytim",{"_index":993,"t":{"322":{"position":[[379,13]]},"324":{"position":[[329,13]]},"333":{"position":[[392,13]]},"339":{"position":[[518,13]]},"341":{"position":[[404,13]]},"343":{"position":[[649,13]]},"393":{"position":[[395,13]]},"395":{"position":[[348,13]]},"401":{"position":[[350,13]]}}}],["mom_cleanbar_log",{"_index":1217,"t":{"428":{"position":[[146,16]]}}}],["mom_sfc_induct",{"_index":1370,"t":{"460":{"position":[[668,17]]},"487":{"position":[[489,17],[695,17],[1846,17]]}}}],["mom_standwork_hour",{"_index":1411,"t":{"460":{"position":[[1599,19]]}}}],["mothdaydoexamquestionvalu",{"_index":1018,"t":{"337":{"position":[[213,29]]}}}],["mothdaytext",{"_index":1019,"t":{"337":{"position":[[258,14]]}}}],["mothdayuseractionvalu",{"_index":1016,"t":{"337":{"position":[[173,25]]}}}],["mq最低位：为1则加x的补码，为0则加0",{"_index":71,"t":{"62":{"position":[[115,22]]}}}],["mq，messag",{"_index":1873,"t":{"576":{"position":[[50,19]]}}}],["msf",{"_index":1509,"t":{"487":{"position":[[713,3]]}}}],["msf.all_count",{"_index":1492,"t":{"487":{"position":[[183,13]]}}}],["msf.caus",{"_index":1499,"t":{"487":{"position":[[319,9]]}}}],["msf.createdd",{"_index":1496,"t":{"487":{"position":[[269,15],[1026,15]]}}}],["msf.end_tim",{"_index":1489,"t":{"487":{"position":[[126,12],[411,12]]}}}],["msf.line",{"_index":1498,"t":{"487":{"position":[[301,8],[953,8]]}}}],["msf.oper",{"_index":1495,"t":{"487":{"position":[[241,13],[886,13]]}}}],["msf.pass_count",{"_index":1493,"t":{"487":{"position":[[211,14]]}}}],["msf.process",{"_index":1501,"t":{"487":{"position":[[339,11]]}}}],["msf.shop_ord",{"_index":1510,"t":{"487":{"position":[[720,14]]}}}],["msf.start_tim",{"_index":1488,"t":{"487":{"position":[[96,14],[395,15],[433,14]]}}}],["myredi",{"_index":1820,"t":{"540":{"position":[[3,13]]}}}],["myredis/redis.conf",{"_index":1821,"t":{"540":{"position":[[30,19]]}}}],["m个子树，即一个节点中至多m",{"_index":13,"t":{"16":{"position":[[5,23]]}}}],["m阶b+树每个结点最多m棵子树（也就是最多m",{"_index":27,"t":{"28":{"position":[[0,28]]}}}],["m（0~22",{"_index":93,"t":{"75":{"position":[[77,9]]}}}],["m，取不大于m的最大质数p，构建函数h(key)=key%ph(key",{"_index":123,"t":{"92":{"position":[[73,42]]}}}],["m，所以总数为n",{"_index":310,"t":{"152":{"position":[[153,8]]}}}],["n",{"_index":68,"t":{"60":{"position":[[97,13]]},"201":{"position":[[177,1]]},"207":{"position":[[179,7],[462,15]]},"212":{"position":[[38,65]]}}}],["n(n",{"_index":315,"t":{"160":{"position":[[67,7]]},"162":{"position":[[44,7]]}}}],["n(n−1)2\\frac{n(n",{"_index":541,"t":{"207":{"position":[[495,36]]}}}],["n)<)(n)<o(nlong_2n)<o(n^2)<o(n^3)<o(2^n)<o(n!)<o(n^n)o(1)<o(log2​n)<)(n)<o(nlong2​n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":234,"t":{"121":{"position":[[268,114]]}}}],["n*n邻接矩阵，每条边的权值用int",{"_index":331,"t":{"165":{"position":[[655,24]]}}}],["n+1",{"_index":35,"t":{"38":{"position":[[0,42]]},"40":{"position":[[116,9]]},"53":{"position":[[143,27]]}}}],["n+1次，左移n",{"_index":77,"t":{"64":{"position":[[92,11]]},"66":{"position":[[105,10]]}}}],["n,0",{"_index":611,"t":{"214":{"position":[[532,3]]}}}],["n/2",{"_index":462,"t":{"197":{"position":[[143,28],[184,8]]}}}],["n2",{"_index":279,"t":{"136":{"position":[[28,2]]}}}],["n=(−1)s∗m∗ren",{"_index":81,"t":{"71":{"position":[[0,17]]}}}],["n[i].par",{"_index":298,"t":{"145":{"position":[[163,11]]}}}],["n[maxsize]；for(int",{"_index":295,"t":{"145":{"position":[[121,18]]}}}],["name",{"_index":829,"t":{"287":{"position":[[62,5],[182,5],[262,5],[346,5],[394,5]]},"298":{"position":[[93,7]]},"302":{"position":[[119,7]]},"304":{"position":[[231,7]]},"306":{"position":[[172,7],[270,7]]},"310":{"position":[[194,7],[338,7]]},"349":{"position":[[115,7]]},"351":{"position":[[183,7]]},"353":{"position":[[110,7]]},"355":{"position":[[57,7]]},"359":{"position":[[231,7]]},"361":{"position":[[171,7],[268,7]]},"363":{"position":[[118,7],[214,7],[826,7],[922,7]]},"367":{"position":[[233,7]]},"379":{"position":[[186,7]]},"381":{"position":[[113,7],[481,7]]},"397":{"position":[[110,7]]},"399":{"position":[[76,7]]},"423":{"position":[[688,5]]},"443":{"position":[[450,5]]}}}],["name\")str",{"_index":1198,"t":{"423":{"position":[[674,13]]}}}],["neq",{"_index":181,"t":{"104":{"position":[[893,4]]}}}],["new",{"_index":1161,"t":{"418":{"position":[[136,3],[192,3]]},"421":{"position":[[179,3],[251,3]]},"463":{"position":[[107,3]]},"498":{"position":[[73,3],[124,3],[759,3],[1400,3],[3174,3],[4184,3],[5784,3],[6222,3],[6698,3],[6971,3],[7190,3]]}}}],["new一个本地修改代码的分支：chenle_xxxx",{"_index":1750,"t":{"504":{"position":[[18,26]]}}}],["next",{"_index":173,"t":{"104":{"position":[[508,24]]},"106":{"position":[[66,4],[279,8]]},"167":{"position":[[160,6]]}}}],["next[++j",{"_index":212,"t":{"106":{"position":[[160,9]]}}}],["next[1",{"_index":207,"t":{"106":{"position":[[93,7]]}}}],["next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1",{"_index":172,"t":{"104":{"position":[[464,43]]}}}],["next[j",{"_index":194,"t":{"104":{"position":[[1823,8]]},"106":{"position":[[191,7],[384,8]]}}}],["next[j+1",{"_index":213,"t":{"106":{"position":[[177,11]]}}}],["next[j]=next[j",{"_index":192,"t":{"104":{"position":[[1752,21]]}}}],["next[k",{"_index":199,"t":{"104":{"position":[[2496,7]]},"106":{"position":[[215,8]]}}}],["nextneighbor(g,v",{"_index":365,"t":{"170":{"position":[[637,19]]},"172":{"position":[[346,18]]}}}],["nextval",{"_index":223,"t":{"108":{"position":[[368,11]]}}}],["nextval[1",{"_index":224,"t":{"108":{"position":[[397,10]]}}}],["nextval[j",{"_index":227,"t":{"108":{"position":[[498,10],[539,10]]}}}],["nextval[k",{"_index":228,"t":{"108":{"position":[[552,11],[591,10]]}}}],["next}child",{"_index":300,"t":{"145":{"position":[[255,11]]}}}],["next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba",{"_index":186,"t":{"104":{"position":[[1105,134]]}}}],["next数组的求解就算结束了。我们来看下next",{"_index":202,"t":{"106":{"position":[[0,38]]}}}],["next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果t[next[j]]等于t[k]，那么直接跳过这一层匹配，改为t[next[next[j]]即可。也就是跳过了中间无效的t[next[j]]和t[k",{"_index":221,"t":{"108":{"position":[[178,154]]}}}],["next数组，next数组的1和2无脑填0和1",{"_index":169,"t":{"104":{"position":[[204,147]]}}}],["next的1和2还是直接填0和1",{"_index":187,"t":{"104":{"position":[[1240,44]]}}}],["ng",{"_index":1616,"t":{"498":{"position":[[1388,5],[3289,5],[5247,11]]}}}],["nginx",{"_index":788,"t":{"285":{"position":[[0,43],[777,15]]}}}],["nginx;worker_process",{"_index":791,"t":{"285":{"position":[[86,22]]}}}],["nginx配置文件nginx.conf",{"_index":789,"t":{"285":{"position":[[44,36]]}}}],["node",{"_index":246,"t":{"134":{"position":[[22,5]]},"145":{"position":[[82,5],[225,5],[248,4],[385,5],[408,5]]},"287":{"position":[[239,4]]}}}],["node.j",{"_index":838,"t":{"287":{"position":[[192,7]]}}}],["node@v2",{"_index":841,"t":{"287":{"position":[[225,7]]}}}],["notblank(messag",{"_index":1278,"t":{"435":{"position":[[210,17]]},"465":{"position":[[119,17]]}}}],["notebook",{"_index":626,"t":{"223":{"position":[[41,9]]}}}],["notify({type:'danger',message:''+this.$t",{"_index":1327,"t":{"443":{"position":[[1269,60]]}}}],["no：操作系统决定何时xiehui",{"_index":1785,"t":{"525":{"position":[[43,17]]}}}],["npm",{"_index":772,"t":{"282":{"position":[[133,3]]},"287":{"position":[[363,3],[378,3]]}}}],["null",{"_index":15,"t":{"16":{"position":[[97,22]]},"21":{"position":[[18,84]]},"235":{"position":[[82,8]]},"238":{"position":[[50,5]]},"294":{"position":[[166,5]]},"296":{"position":[[77,5]]},"298":{"position":[[139,5],[170,4]]},"306":{"position":[[237,5],[481,5]]},"308":{"position":[[70,5],[149,5]]},"310":{"position":[[981,5],[1005,5]]},"312":{"position":[[173,5],[197,5]]},"314":{"position":[[540,4]]},"318":{"position":[[347,4],[401,5],[486,4],[652,5]]},"324":{"position":[[501,5]]},"328":{"position":[[94,5]]},"333":{"position":[[158,5],[176,5],[221,5],[239,5],[252,5],[265,5],[283,5],[302,5],[317,5],[331,5],[347,5],[366,5],[386,5],[406,5],[430,5],[447,5],[465,4]]},"335":{"position":[[77,5]]},"339":{"position":[[315,5],[335,5],[369,5],[412,5],[614,4]]},"341":{"position":[[201,5],[221,5],[255,5],[298,5],[500,4]]},"343":{"position":[[40,5],[206,5],[226,5],[461,5],[479,5],[502,5],[543,5],[602,5],[663,5],[755,4]]},"345":{"position":[[99,5]]},"349":{"position":[[193,5]]},"351":{"position":[[56,5]]},"355":{"position":[[170,5]]},"357":{"position":[[98,5]]},"359":{"position":[[46,5],[61,5],[85,5]]},"361":{"position":[[237,5],[484,5]]},"363":{"position":[[185,5],[454,5],[479,4],[893,5],[1155,5],[1180,4]]},"365":{"position":[[91,5]]},"367":{"position":[[61,5]]},"369":{"position":[[44,5],[66,5],[81,5],[100,5],[263,5],[464,5]]},"371":{"position":[[269,5],[364,4]]},"373":{"position":[[205,5],[317,5],[371,5]]},"375":{"position":[[89,5]]},"377":{"position":[[48,5]]},"379":{"position":[[416,4]]},"383":{"position":[[99,5]]},"385":{"position":[[53,5]]},"387":{"position":[[182,5]]},"389":{"position":[[58,5]]},"391":{"position":[[55,5],[73,5]]},"393":{"position":[[308,5],[451,5],[477,4]]},"395":{"position":[[423,5],[447,4],[506,5]]},"401":{"position":[[425,5],[449,4],[508,5]]},"456":{"position":[[321,5],[368,6]]},"498":{"position":[[52,5],[678,5],[1285,6],[3018,6],[5156,5],[7277,5]]}}}],["nx：当key不存在的时候，才创建key，等效于setnx",{"_index":1830,"t":{"548":{"position":[[30,29]]}}}],["n})\\le",{"_index":37,"t":{"38":{"position":[[76,6]]}}}],["n}−(1−2−n)≤x≤1−2−n",{"_index":39,"t":{"38":{"position":[[95,19]]}}}],["n}−1≤x≤1−2−n",{"_index":47,"t":{"40":{"position":[[162,12]]}}}],["n个内部红节点的红黑树高度h≤2∗log2(n+1)h",{"_index":8,"t":{"11":{"position":[[209,28]]}}}],["n个辅助单元，空间复杂度o(n)o(n)o(n",{"_index":600,"t":{"212":{"position":[[897,26]]}}}],["n和m",{"_index":571,"t":{"212":{"position":[[109,17]]}}}],["n在某个范围的时候，时间复杂度为o(n1.3)o(n^{1.3})o(n1.3)，最坏情况是o(n2)o(n^2)o(n2",{"_index":484,"t":{"197":{"position":[[805,86]]}}}],["n就挂到队列n的队尾中，比如520的个位是0，就挂0",{"_index":617,"t":{"214":{"position":[[760,43]]}}}],["n时，i的右孩子是2i+1",{"_index":290,"t":{"136":{"position":[[270,13]]},"209":{"position":[[600,13]]}}}],["n时，i的左孩子是2i",{"_index":288,"t":{"136":{"position":[[242,11]]},"209":{"position":[[572,11]]}}}],["n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d",{"_index":604,"t":{"214":{"position":[[333,65]]}}}],["n足够大的时候去分析执行时间。采用大o",{"_index":232,"t":{"121":{"position":[[69,65]]}}}],["n，边数为n",{"_index":382,"t":{"174":{"position":[[0,28]]}}}],["o(1",{"_index":1847,"t":{"560":{"position":[[126,15]]},"563":{"position":[[161,5]]}}}],["o(1)<o(log2n)<)(n)<o(nlong2n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn)o(1)<o(log_2",{"_index":233,"t":{"121":{"position":[[196,71]]}}}],["o(1)o(1)o(1",{"_index":461,"t":{"195":{"position":[[630,18]]},"197":{"position":[[781,23]]},"201":{"position":[[286,18]]},"207":{"position":[[434,27]]},"209":{"position":[[1450,24]]},"216":{"position":[[80,12],[166,12],[205,12],[271,12],[458,12],[572,12]]}}}],["o(d(r+1))o(d(r+1))o(d(r+1",{"_index":622,"t":{"216":{"position":[[707,27],[735,27],[763,27]]}}}],["o(log2n)o(log_{2}n)o(log2​n",{"_index":621,"t":{"216":{"position":[[370,28]]}}}],["o(log2n)o(log_{2}n)o(log2​n)，最坏需要n−1次递归调用，所以栈为o(n)n",{"_index":525,"t":{"203":{"position":[[926,89]]}}}],["o(n)o(n)o(n",{"_index":452,"t":{"193":{"position":[[672,40]]},"216":{"position":[[33,12],[224,12],[689,12]]}}}],["o(n)o(n)o(n)调整时间为o(h)o(h)o(h)，最好、最坏、平均情况下的时间复杂度都是o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":570,"t":{"209":{"position":[[1475,84]]}}}],["o(n)o(n)o(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":601,"t":{"212":{"position":[[924,83]]}}}],["o(n)o(n)o(n)，否则则进行n",{"_index":497,"t":{"201":{"position":[[305,30]]}}}],["o(n2)o(n^2)o(n2",{"_index":334,"t":{"165":{"position":[[720,40]]},"195":{"position":[[649,22]]},"216":{"position":[[46,16],[63,16],[132,16],[149,16],[188,16],[237,16],[254,16],[353,16],[407,16],[424,16],[441,16]]}}}],["o(n2)o(n^2)o(n2)，理想情况是o(nlong2n)o(nlong_{2}n)o(nlong2​n",{"_index":527,"t":{"203":{"position":[[1081,69]]}}}],["o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":620,"t":{"216":{"position":[[100,31],[289,31],[321,31],[476,31],[508,31],[540,31],[593,31],[625,31],[657,31]]}}}],["o(r)o(r)o(r",{"_index":623,"t":{"216":{"position":[[791,12]]}}}],["o(∣v∣)o(|v|)o(∣v",{"_index":370,"t":{"170":{"position":[[925,45]]}}}],["o(∣v∣)o(|v|)o(∣v∣)次，搜索邻接边需要o(∣e∣)o(|e|)o(∣e∣)，故为o(∣v∣+∣e)o(|v|+|e)o(∣v∣+∣e)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":369,"t":{"170":{"position":[[724,200]]},"172":{"position":[[392,200]]}}}],["o(∣v∣+∣e∣)o(|v|+|e|)o(∣v∣+∣e∣)若为无向图则o(∣v∣+2∣e∣)o(|v|+2|e|)o(∣v∣+2∣",{"_index":344,"t":{"167":{"position":[[358,98]]}}}],["o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":395,"t":{"180":{"position":[[240,41]]}}}],["object",{"_index":1607,"t":{"498":{"position":[[890,8],[5026,7],[5767,7],[6321,8],[6822,7],[6852,6]]}}}],["objects.nonnull(id",{"_index":1717,"t":{"498":{"position":[[5958,22]]}}}],["objects.nonnull(productplan",{"_index":1702,"t":{"498":{"position":[[5165,31]]}}}],["of，为1",{"_index":53,"t":{"55":{"position":[[15,26]]}}}],["ok",{"_index":324,"t":{"165":{"position":[[290,48]]}}}],["ok和ng",{"_index":1206,"t":{"426":{"position":[[21,42]]}}}],["ondelet",{"_index":1322,"t":{"443":{"position":[[1143,11]]}}}],["onselectline(item",{"_index":1261,"t":{"431":{"position":[[1052,19]]}}}],["on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为nul",{"_index":675,"t":{"240":{"position":[[441,36]]}}}],["openid",{"_index":1043,"t":{"343":{"position":[[760,10]]}}}],["oper",{"_index":1355,"t":{"460":{"position":[[330,9],[343,10]]},"487":{"position":[[258,10]]}}}],["operationresult",{"_index":1195,"t":{"423":{"position":[[622,15],[872,15]]}}}],["operationresult.buildfailureresult(\"已解析过的pdf",{"_index":1611,"t":{"498":{"position":[[1025,53]]}}}],["option]加入这个语句的话，进行uid的时候，需要满足子查询中的条件例：cr",{"_index":697,"t":{"242":{"position":[[118,44]]}}}],["oracl不同于mysql，是以表空间为单位，本次操作的是在meswip中才找到了数据表，mesext_first_check_report",{"_index":1748,"t":{"502":{"position":[[58,83]]}}}],["order",{"_index":659,"t":{"240":{"position":[[74,5],[293,5]]},"460":{"position":[[615,5],[1666,5]]},"477":{"position":[[81,6],[279,5]]},"479":{"position":[[92,5],[170,5],[241,5]]},"483":{"position":[[22,6]]},"487":{"position":[[424,5],[1017,5],[1247,5],[1943,5],[2310,6]]}}}],["origin",{"_index":763,"t":{"280":{"position":[[44,6],[99,6]]},"282":{"position":[[273,6]]},"399":{"position":[[54,11]]}}}],["over",{"_index":1361,"t":{"460":{"position":[[454,4],[552,4]]},"479":{"position":[[48,4],[140,4],[217,4]]},"483":{"position":[[17,4]]},"487":{"position":[[376,4],[2305,4]]}}}],["p",{"_index":1824,"t":{"542":{"position":[[61,1]]}}}],["p.all_count",{"_index":1551,"t":{"487":{"position":[[2275,12]]}}}],["p.causefrom",{"_index":1555,"t":{"487":{"position":[[2512,11]]}}}],["p.end_tim",{"_index":1557,"t":{"487":{"position":[[2567,10],[2632,10]]}}}],["p.start_tim",{"_index":1483,"t":{"483":{"position":[[32,13]]},"487":{"position":[[2320,13],[2535,12],[2600,12]]}}}],["p1和p2",{"_index":572,"t":{"212":{"position":[[142,23]]}}}],["p>什么是快乐星球？</p",{"_index":1070,"t":{"371":{"position":[[165,18]]}}}],["p_all_count",{"_index":1532,"t":{"487":{"position":[[1435,12]]}}}],["p_pass_count",{"_index":1534,"t":{"487":{"position":[[1548,13]]}}}],["p_rate",{"_index":1486,"t":{"485":{"position":[[108,6]]},"487":{"position":[[2504,7]]}}}],["page",{"_index":755,"t":{"276":{"position":[[61,5],[126,5],[215,5],[240,5]]},"282":{"position":[[257,6],[283,5],[343,5]]},"435":{"position":[[533,4]]},"465":{"position":[[907,4]]}}}],["pagecont",{"_index":1589,"t":{"498":{"position":[[380,11],[2557,11]]}}}],["pagecontent.split(\"\\n",{"_index":1593,"t":{"498":{"position":[[503,24],[2821,26]]}}}],["pageindex",{"_index":894,"t":{"304":{"position":[[94,12]]},"314":{"position":[[52,12]]},"316":{"position":[[47,12]]},"318":{"position":[[55,12]]},"326":{"position":[[44,12]]},"339":{"position":[[77,12]]},"351":{"position":[[67,12]]},"359":{"position":[[96,12]]},"367":{"position":[[112,12]]},"369":{"position":[[106,12]]},"377":{"position":[[54,12]]},"385":{"position":[[59,12]]},"389":{"position":[[69,12]]},"391":{"position":[[79,12]]}}}],["pagenum",{"_index":1586,"t":{"498":{"position":[[308,7],[2489,7]]}}}],["pagenum;i",{"_index":1588,"t":{"498":{"position":[[366,13]]}}}],["pages",{"_index":895,"t":{"304":{"position":[[115,11]]},"314":{"position":[[73,11]]},"316":{"position":[[68,11]]},"318":{"position":[[76,11]]},"326":{"position":[[65,11]]},"339":{"position":[[98,11]]},"351":{"position":[[83,11]]},"359":{"position":[[117,11]]},"367":{"position":[[133,11]]},"369":{"position":[[122,11]]},"377":{"position":[[70,11]]},"385":{"position":[[75,11]]},"389":{"position":[[85,11]]},"391":{"position":[[95,11]]}}}],["pagesxcopi",{"_index":776,"t":{"282":{"position":[[165,10]]}}}],["pages分支上，接下来你只需要在仓库的set",{"_index":784,"t":{"282":{"position":[[313,27]]}}}],["pages分支来作为你的pag",{"_index":786,"t":{"282":{"position":[[362,29]]}}}],["paper",{"_index":933,"t":{"310":{"position":[[99,8]]}}}],["paperitem",{"_index":882,"t":{"300":{"position":[[98,13]]},"379":{"position":[[150,13]]},"381":{"position":[[78,13],[446,13]]}}}],["papernam",{"_index":952,"t":{"314":{"position":[[491,12]]},"389":{"position":[[485,12]]}}}],["paperscor",{"_index":950,"t":{"314":{"position":[[371,13]]},"389":{"position":[[363,13]]}}}],["papertyp",{"_index":891,"t":{"304":{"position":[[46,12],[416,12]]},"306":{"position":[[149,12]]},"310":{"position":[[171,12]]},"314":{"position":[[419,12]]},"359":{"position":[[391,12]]},"361":{"position":[[148,12]]},"363":{"position":[[95,12],[803,12]]},"367":{"position":[[89,12],[392,12]]},"379":{"position":[[344,12]]},"381":{"position":[[273,12],[641,12]]},"389":{"position":[[413,12]]}}}],["param",{"_index":1247,"t":{"431":{"position":[[705,6]]},"443":{"position":[[616,6]]},"498":{"position":[[5775,6],[6057,10]]}}}],["param(valu",{"_index":1199,"t":{"423":{"position":[[694,12]]}}}],["params.put(\"id",{"_index":1718,"t":{"498":{"position":[[5981,16]]}}}],["parent;}node*;nod",{"_index":294,"t":{"145":{"position":[[102,18]]}}}],["parm和@requestparm",{"_index":1184,"t":{"423":{"position":[[213,41]]}}}],["partit",{"_index":1362,"t":{"460":{"position":[[459,10],[557,10]]},"479":{"position":[[53,10],[145,10],[222,10]]},"483":{"position":[[59,18]]},"487":{"position":[[381,10]]}}}],["partition(a,low,high",{"_index":521,"t":{"203":{"position":[[801,34]]}}}],["partition(int",{"_index":510,"t":{"203":{"position":[[477,13]]}}}],["pass_count",{"_index":1494,"t":{"487":{"position":[[229,11],[1166,11]]}}}],["password",{"_index":852,"t":{"287":{"position":[[510,9]]},"292":{"position":[[58,11]]},"294":{"position":[[70,11]]},"333":{"position":[[56,11],[209,11]]},"343":{"position":[[74,11],[407,11]]},"540":{"position":[[81,10]]},"542":{"position":[[19,8]]}}}],["pass或ng",{"_index":1652,"t":{"498":{"position":[[2853,11]]}}}],["path也就是在bas",{"_index":1302,"t":{"441":{"position":[[25,29]]}}}],["pcb",{"_index":1130,"t":{"407":{"position":[[40,9]]}}}],["pdf",{"_index":1644,"t":{"498":{"position":[[2449,14]]},"500":{"position":[[0,56]]},"506":{"position":[[0,5],[26,12]]}}}],["pdfreader",{"_index":1576,"t":{"498":{"position":[[33,9]]}}}],["pdfreader(filenam",{"_index":1578,"t":{"498":{"position":[[77,20]]}}}],["pdftextextractor.gettextfrompage(read",{"_index":1590,"t":{"498":{"position":[[395,40],[2572,40]]}}}],["pdf的服务器和测试的服务器不是同一个，但是数据库一样，会导致无法从服务器下载pdf",{"_index":1759,"t":{"506":{"position":[[62,65]]}}}],["pdf类和pdfbox",{"_index":1758,"t":{"506":{"position":[[46,15]]}}}],["pel(pend",{"_index":1883,"t":{"578":{"position":[[456,11]]}}}],["pending_id",{"_index":1881,"t":{"578":{"position":[[336,11]]}}}],["person",{"_index":1203,"t":{"423":{"position":[[915,6],[922,7]]}}}],["ph(key)=key%p，则产生的地址落在区间[0,p−1][0,p",{"_index":124,"t":{"92":{"position":[[125,35]]}}}],["phone",{"_index":988,"t":{"322":{"position":[[292,8]]},"324":{"position":[[242,8]]},"333":{"position":[[308,8]]},"339":{"position":[[403,8]]},"341":{"position":[[289,8]]},"343":{"position":[[217,8],[534,8]]},"393":{"position":[[299,8]]},"395":{"position":[[252,8]]},"401":{"position":[[249,8]]}}}],["pi",{"_index":635,"t":{"235":{"position":[[151,8]]}}}],["pivot",{"_index":512,"t":{"203":{"position":[[518,5],[704,6]]}}}],["pivotpo",{"_index":520,"t":{"203":{"position":[[790,8]]}}}],["pjoin",{"_index":1556,"t":{"487":{"position":[[2524,5]]}}}],["placeholder=\"$t(languagepath+'cod",{"_index":1308,"t":{"443":{"position":[[160,38]]}}}],["placeholder=\"$t(languagepath+'lin",{"_index":1229,"t":{"431":{"position":[[209,38]]}}}],["plan_log_id",{"_index":1712,"t":{"498":{"position":[[5720,11]]}}}],["planloguuid",{"_index":1701,"t":{"498":{"position":[[5142,11],[5197,11],[5890,13]]}}}],["posit",{"_index":1859,"t":{"570":{"position":[[263,8]]}}}],["post",{"_index":1298,"t":{"439":{"position":[[154,7]]}}}],["preambl",{"_index":1796,"t":{"532":{"position":[[161,11]]}}}],["prefix",{"_index":937,"t":{"310":{"position":[[524,9],[596,9]]},"318":{"position":[[295,9]]},"363":{"position":[[396,9],[1097,9]]}}}],["preprocess",{"_index":1159,"t":{"418":{"position":[[100,11]]}}}],["presearch(t[],2*index",{"_index":277,"t":{"134":{"position":[[736,23],[760,21]]}}}],["presearch(t[],int",{"_index":275,"t":{"134":{"position":[[660,17]]}}}],["prim)和克鲁斯卡尔(krusk",{"_index":385,"t":{"174":{"position":[[120,37]]}}}],["primarri",{"_index":642,"t":{"238":{"position":[[90,8]]}}}],["prim是选点，而kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n",{"_index":388,"t":{"178":{"position":[[0,86]]}}}],["privat",{"_index":1191,"t":{"423":{"position":[[487,7]]},"435":{"position":[[234,7],[255,7],[281,7],[305,7],[326,7],[347,7],[373,7],[400,7],[428,7],[456,7],[484,7],[518,7],[552,7]]},"465":{"position":[[75,7],[173,7],[199,7],[225,7],[258,7],[286,7],[321,7],[357,7],[390,7],[420,7],[451,7],[482,7],[514,7],[549,7],[585,7],[617,7],[648,7],[682,7],[713,7],[747,7],[798,7],[859,7],[892,7],[926,7],[960,7]]}}}],["process",{"_index":1354,"t":{"460":{"position":[[310,7],[321,8],[931,8],[1310,8]]},"463":{"position":[[60,14],[503,7]]},"465":{"position":[[466,8]]},"487":{"position":[[354,8]]}}}],["processmap",{"_index":1417,"t":{"463":{"position":[[94,10]]}}}],["processmap.get(key",{"_index":1425,"t":{"463":{"position":[[513,20]]}}}],["processmap.put(key",{"_index":1421,"t":{"463":{"position":[[277,19]]}}}],["productcod",{"_index":1650,"t":{"498":{"position":[[2717,11]]}}}],["productdesc",{"_index":1434,"t":{"465":{"position":[[301,12]]}}}],["productplan",{"_index":1697,"t":{"498":{"position":[[5034,11]]}}}],["productplan.get(\"uuid",{"_index":1703,"t":{"498":{"position":[[5220,24]]}}}],["productstatiticdto",{"_index":1430,"t":{"465":{"position":[[54,18]]}}}],["protect",{"_index":1813,"t":{"538":{"position":[[31,11]]}}}],["proxy_pass",{"_index":805,"t":{"285":{"position":[[402,10]]}}}],["proxy_set_head",{"_index":807,"t":{"285":{"position":[[427,16],[456,16]]}}}],["ps",{"_index":736,"t":{"268":{"position":[[35,2]]}}}],["pub/sub",{"_index":1875,"t":{"576":{"position":[[101,9],[175,9]]}}}],["public",{"_index":1142,"t":{"416":{"position":[[219,6]]},"423":{"position":[[440,6],[615,6],[865,6]]},"431":{"position":[[1214,6]]},"435":{"position":[[176,6]]},"465":{"position":[[41,6]]}}}],["pull一次远程，然后push",{"_index":1753,"t":{"504":{"position":[[122,15]]}}}],["push",{"_index":766,"t":{"280":{"position":[[91,4]]},"282":{"position":[[268,4]]},"287":{"position":[[83,5]]}}}],["pushmsg函数是进行企微推送，需要先开通测试机的企微账号，开通本地ip",{"_index":1346,"t":{"456":{"position":[[375,62]]}}}],["px：key",{"_index":1829,"t":{"548":{"position":[[15,14]]}}}],["p可知:散列地址在[0,p−1][0,p",{"_index":138,"t":{"94":{"position":[[40,41]]}}}],["q",{"_index":780,"t":{"282":{"position":[[197,2]]}}}],["qcd",{"_index":1529,"t":{"487":{"position":[[1367,7],[1479,7]]}}}],["qs",{"_index":1293,"t":{"439":{"position":[[68,2]]}}}],["qs'export",{"_index":1294,"t":{"439":{"position":[[76,10]]}}}],["qs.stringify(data",{"_index":1299,"t":{"439":{"position":[[168,18]]}}}],["query(valu",{"_index":1151,"t":{"416":{"position":[[338,12]]}}}],["questionanswervm",{"_index":967,"t":{"318":{"position":[[499,19]]}}}],["questioncorrect",{"_index":949,"t":{"314":{"position":[[341,18]]},"389":{"position":[[333,18]]}}}],["questioncount",{"_index":899,"t":{"304":{"position":[[254,16]]},"314":{"position":[[314,16]]},"337":{"position":[[78,16]]},"359":{"position":[[255,16]]},"367":{"position":[[257,16]]},"379":{"position":[[207,16]]},"381":{"position":[[137,16],[505,16]]},"389":{"position":[[306,16]]}}}],["questionid",{"_index":926,"t":{"308":{"position":[[56,13],[114,13]]},"310":{"position":[[946,13]]},"312":{"position":[[138,13]]},"318":{"position":[[541,13]]}}}],["questionitem",{"_index":916,"t":{"306":{"position":[[294,16]]},"310":{"position":[[361,16]]},"361":{"position":[[292,16]]},"363":{"position":[[236,16],[944,16]]}}}],["questionscor",{"_index":940,"t":{"310":{"position":[[1096,16]]},"312":{"position":[[290,16]]},"318":{"position":[[684,16]]}}}],["questiontyp",{"_index":917,"t":{"306":{"position":[[331,15]]},"310":{"position":[[405,15]]},"316":{"position":[[189,15]]},"318":{"position":[[183,15]]},"361":{"position":[[330,15]]},"363":{"position":[[281,15],[982,15]]},"369":{"position":[[50,15],[222,15]]},"371":{"position":[[111,15]]},"373":{"position":[[55,15]]}}}],["questionvm",{"_index":962,"t":{"318":{"position":[[149,13]]}}}],["queue），redi",{"_index":1874,"t":{"576":{"position":[[70,12]]}}}],["quicksort(a,low,pivotpo",{"_index":522,"t":{"203":{"position":[[836,24]]}}}],["quicksort(a,pivotpo",{"_index":523,"t":{"203":{"position":[[873,20]]}}}],["quicksort(int",{"_index":518,"t":{"203":{"position":[[733,13]]}}}],["r",{"_index":610,"t":{"214":{"position":[[515,1]]},"487":{"position":[[767,1]]},"570":{"position":[[281,1],[294,1],[303,1],[357,33]]}}}],["r.handl",{"_index":1517,"t":{"487":{"position":[[853,8]]}}}],["r.router_bo",{"_index":1513,"t":{"487":{"position":[[794,11]]}}}],["r.sequenc",{"_index":1514,"t":{"487":{"position":[[810,10]]}}}],["rachel",{"_index":625,"t":{"223":{"position":[[34,6]]}}}],["rachel/test",{"_index":1188,"t":{"423":{"position":[[391,15]]}}}],["racheltestcontrol",{"_index":1189,"t":{"423":{"position":[[453,20]]}}}],["rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天rachel",{"_index":628,"t":{"227":{"position":[[16,119]]}}}],["rdb",{"_index":1787,"t":{"528":{"position":[[41,14]]},"532":{"position":[[33,21],[157,3]]}}}],["rdb+aof",{"_index":1799,"t":{"532":{"position":[[197,12]]}}}],["rdb和aof",{"_index":1795,"t":{"532":{"position":[[120,15]]}}}],["rdb和aof时，重启时只会加在aof不会加在rdb",{"_index":1793,"t":{"532":{"position":[[0,32]]}}}],["rdb文件(dump.rdb)，其中，rdb就是redi",{"_index":1764,"t":{"512":{"position":[[20,118]]}}}],["rdb进行快照存储，然后使用aof持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的rdb记录。这样的话，重启服务的时候会从rdb和aof两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是rdb格式，一部分是aof",{"_index":1801,"t":{"532":{"position":[[245,155]]}}}],["rdb镜像做全量持久化，aof",{"_index":1800,"t":{"532":{"position":[[220,24]]}}}],["rdb：类似快照技术，将当前的数据快照存留成rdb",{"_index":1762,"t":{"510":{"position":[[106,27]]}}}],["read",{"_index":1001,"t":{"326":{"position":[[240,9]]},"506":{"position":[[39,6]]}}}],["readcount",{"_index":1089,"t":{"385":{"position":[[342,12]]}}}],["reader",{"_index":1577,"t":{"498":{"position":[[43,6],[64,6]]}}}],["reader.clos",{"_index":1745,"t":{"498":{"position":[[7285,15]]}}}],["reader.getnumberofpag",{"_index":1587,"t":{"498":{"position":[[318,26],[2499,26]]}}}],["readonly=\"initshow",{"_index":1231,"t":{"431":{"position":[[263,20]]}}}],["readpdf工具读取pdf",{"_index":1573,"t":{"496":{"position":[[0,37]]}}}],["real",{"_index":809,"t":{"285":{"position":[[475,4]]}}}],["realnam",{"_index":972,"t":{"320":{"position":[[147,11]]},"322":{"position":[[178,11]]},"324":{"position":[[128,11]]},"333":{"position":[[227,11]]},"339":{"position":[[303,11]]},"341":{"position":[[189,11]]},"343":{"position":[[101,11],[427,11]]},"391":{"position":[[250,11]]},"393":{"position":[[184,11]]},"395":{"position":[[139,11]]},"401":{"position":[[134,11]]}}}],["recallrecallrecall系数计算公式为：tp(tp+fp)\\frac{tp}{(tp+fp)}(tp+fp)tp",{"_index":725,"t":{"253":{"position":[[0,63]]}}}],["receiv",{"_index":1087,"t":{"385":{"position":[[279,11]]}}}],["receiveusercount",{"_index":1088,"t":{"385":{"position":[[311,19]]}}}],["receiveuserid",{"_index":1093,"t":{"387":{"position":[[89,17]]}}}],["redi",{"_index":1779,"t":{"523":{"position":[[229,12],[449,6]]},"536":{"position":[[96,5],[116,7]]},"538":{"position":[[140,11]]},"540":{"position":[[17,5],[50,5],[65,8]]},"542":{"position":[[0,11],[37,18]]},"556":{"position":[[0,5],[57,16]]},"560":{"position":[[0,5]]},"563":{"position":[[0,5]]},"568":{"position":[[0,5]]},"574":{"position":[[82,5]]},"576":{"position":[[0,5],[15,5],[37,5],[90,5],[111,41],[205,5]]}}}],["redis.conf",{"_index":1769,"t":{"518":{"position":[[73,14]]}}}],["redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredi",{"_index":1811,"t":{"536":{"position":[[251,90]]}}}],["redis.conf配置中的save《seconds》《chang",{"_index":1767,"t":{"518":{"position":[[0,40]]}}}],["redis7",{"_index":1766,"t":{"515":{"position":[[0,14],[15,9]]},"528":{"position":[[66,13]]}}}],["redis中由两种持久化：rdb和aof",{"_index":1761,"t":{"510":{"position":[[0,105]]}}}],["redis官网中下载redis7版本压缩包后，使用xftp软件将本地的redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar",{"_index":1803,"t":{"536":{"position":[[0,89]]}}}],["redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi",{"_index":1776,"t":{"523":{"position":[[0,124]]}}}],["redis版本的mq",{"_index":1876,"t":{"578":{"position":[[0,28]]}}}],["redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb",{"_index":1772,"t":{"518":{"position":[[144,89]]}}}],["ref=\"cod",{"_index":1305,"t":{"443":{"position":[[101,10]]}}}],["ref=\"lin",{"_index":1227,"t":{"431":{"position":[[165,10]]}}}],["refer",{"_index":646,"t":{"238":{"position":[[142,10]]}}}],["ref和v",{"_index":1311,"t":{"443":{"position":[[257,7]]}}}],["regex",{"_index":1432,"t":{"465":{"position":[[96,5]]}}}],["registri",{"_index":735,"t":{"266":{"position":[[73,8],[98,8],[130,8]]}}}],["remark",{"_index":1369,"t":{"460":{"position":[[646,6],[656,6],[1030,6]]},"465":{"position":[[697,7]]}}}],["remarkfrom",{"_index":1410,"t":{"460":{"position":[[1581,10]]}}}],["rememb",{"_index":859,"t":{"292":{"position":[[79,11]]},"333":{"position":[[77,11]]}}}],["remindcod",{"_index":1344,"t":{"456":{"position":[[297,11]]}}}],["remot",{"_index":762,"t":{"280":{"position":[[33,6]]}}}],["remote_addr",{"_index":811,"t":{"285":{"position":[[483,13],[587,13]]}}}],["remote_us",{"_index":818,"t":{"285":{"position":[[603,12]]}}}],["repositori",{"_index":1141,"t":{"416":{"position":[[207,11]]}}}],["request",{"_index":820,"t":{"285":{"position":[[630,10]]},"439":{"position":[[31,7],[127,9]]}}}],["requestbodi",{"_index":1202,"t":{"423":{"position":[[902,12]]}}}],["requestmapping(valu",{"_index":1187,"t":{"423":{"position":[[367,21],[550,21],[800,21]]}}}],["requestparam(valu",{"_index":1197,"t":{"423":{"position":[[652,19]]}}}],["requir",{"_index":1127,"t":{"404":{"position":[[32,8]]},"431":{"position":[[317,10]]},"452":{"position":[[0,44]]}}}],["requirepass",{"_index":1819,"t":{"538":{"position":[[152,11]]}}}],["res.data",{"_index":1255,"t":{"431":{"position":[[836,9]]},"443":{"position":[[747,9]]}}}],["res.messag",{"_index":1260,"t":{"431":{"position":[[1009,12]]},"443":{"position":[[920,12]]}}}],["respons",{"_index":867,"t":{"294":{"position":[[154,11]]},"296":{"position":[[65,11]]},"302":{"position":[[84,11]]},"304":{"position":[[174,11]]},"306":{"position":[[81,11]]},"308":{"position":[[306,11]]},"310":{"position":[[85,11]]},"312":{"position":[[359,11]]},"314":{"position":[[132,11]]},"316":{"position":[[127,11]]},"318":{"position":[[135,11]]},"320":{"position":[[70,11]]},"322":{"position":[[74,11]]},"324":{"position":[[489,11]]},"326":{"position":[[124,11]]},"328":{"position":[[82,11]]},"330":{"position":[[86,11]]},"333":{"position":[[138,11]]},"335":{"position":[[65,11]]},"339":{"position":[[157,11]]},"341":{"position":[[73,11]]},"343":{"position":[[295,11]]},"345":{"position":[[87,11]]},"347":{"position":[[79,11]]},"349":{"position":[[82,11]]},"351":{"position":[[135,11]]},"353":{"position":[[86,11]]},"355":{"position":[[158,11]]},"357":{"position":[[86,11]]},"359":{"position":[[176,11]]},"361":{"position":[[79,11]]},"363":{"position":[[734,11]]},"365":{"position":[[79,11]]},"367":{"position":[[185,11]]},"369":{"position":[[174,11]]},"371":{"position":[[79,11]]},"373":{"position":[[359,11]]},"375":{"position":[[77,11]]},"377":{"position":[[122,11]]},"379":{"position":[[74,11]]},"381":{"position":[[369,11]]},"383":{"position":[[87,11]]},"385":{"position":[[134,11]]},"387":{"position":[[170,11]]},"389":{"position":[[137,11]]},"391":{"position":[[147,11]]},"393":{"position":[[72,11]]},"395":{"position":[[494,11]]},"397":{"position":[[94,11]]},"401":{"position":[[496,11]]}}}],["restcontrol",{"_index":1186,"t":{"423":{"position":[[351,15]]}}}],["restcontroller,@requestmapping(valu",{"_index":1178,"t":{"423":{"position":[[74,39]]}}}],["result",{"_index":1152,"t":{"416":{"position":[[361,6]]},"498":{"position":[[6330,7]]}}}],["results.get(0",{"_index":1734,"t":{"498":{"position":[[6836,15]]}}}],["return",{"_index":116,"t":{"80":{"position":[[297,6]]},"98":{"position":[[360,6]]},"106":{"position":[[407,6],[425,6]]},"134":{"position":[[205,6],[340,6],[476,6],[605,6]]},"203":{"position":[[711,6]]},"423":{"position":[[729,6],[932,6]]},"431":{"position":[[685,6],[1022,6]]},"439":{"position":[[120,6]]},"443":{"position":[[415,6],[441,6],[596,6],[933,6],[1330,6]]},"498":{"position":[[1018,6]]}}}],["right",{"_index":268,"t":{"134":{"position":[[427,5],[483,6]]}}}],["rl",{"_index":5,"t":{"6":{"position":[[42,7]]},"8":{"position":[[114,7]]},"13":{"position":[[257,29]]}}}],["rmdir",{"_index":779,"t":{"282":{"position":[[187,6]]}}}],["rn",{"_index":1368,"t":{"460":{"position":[[642,3]]},"479":{"position":[[124,2]]},"487":{"position":[[457,2]]}}}],["ro",{"_index":1516,"t":{"487":{"position":[[847,2]]}}}],["ro.router_step_bo",{"_index":1518,"t":{"487":{"position":[[864,17]]}}}],["role",{"_index":983,"t":{"322":{"position":[[221,7]]},"324":{"position":[[171,7]]},"333":{"position":[[323,7]]},"339":{"position":[[61,7],[346,7]]},"341":{"position":[[232,7]]},"343":{"position":[[128,7],[555,7]]},"393":{"position":[[226,7]]},"395":{"position":[[181,7]]},"401":{"position":[[176,7]]}}}],["root",{"_index":732,"t":{"264":{"position":[[84,4]]},"285":{"position":[[277,4]]}}}],["root/usr/local/bin下，ll列举redi",{"_index":1808,"t":{"536":{"position":[[158,37]]}}}],["router_oper",{"_index":1515,"t":{"487":{"position":[[830,16]]}}}],["router_step",{"_index":1511,"t":{"487":{"position":[[755,11]]}}}],["router路径下的index.j",{"_index":1301,"t":{"441":{"position":[[0,24]]}}}],["row_numb",{"_index":1365,"t":{"460":{"position":[[539,12]]},"479":{"position":[[35,12],[127,12]]},"487":{"position":[[363,12]]}}}],["rr",{"_index":3,"t":{"6":{"position":[[28,5]]},"8":{"position":[[100,5]]},"13":{"position":[[205,21]]}}}],["run",{"_index":738,"t":{"268":{"position":[[63,3]]},"282":{"position":[[137,3]]},"287":{"position":[[122,4],[287,4],[358,4],[382,3]]}}}],["run/nginx.pid;ev",{"_index":794,"t":{"285":{"position":[[153,21]]}}}],["runtimeexception(\"failur",{"_index":1617,"t":{"498":{"position":[[1404,35],[3178,35]]}}}],["runtimeexception(\"当前线体\"+checkreport.getlinebodi",{"_index":1731,"t":{"498":{"position":[[6702,61]]}}}],["runtimeexception(\"当前线体\"+checkreport.getlinebody()+\"下达工单的产品编码为：\"+itembo+\",与当前上传文件产品编码\"+checkreport.getproductcod",{"_index":1739,"t":{"498":{"position":[[6975,121]]}}}],["runtimeexception(\"未找到pdf",{"_index":1722,"t":{"498":{"position":[[6226,38]]}}}],["runtimeexception(\"解析失败，请检查pdf",{"_index":1742,"t":{"498":{"position":[[7194,36]]}}}],["runtimeexception(e.getmessage(),",{"_index":1176,"t":{"421":{"position":[[255,35]]}}}],["runtimeexception(messag",{"_index":1174,"t":{"421":{"position":[[183,26]]}}}],["rwerw",{"_index":998,"t":{"326":{"position":[[180,8]]}}}],["r。上述的520",{"_index":614,"t":{"214":{"position":[[582,65]]}}}],["r个空队列qr,qr−1.......q0q_r,q_{r",{"_index":615,"t":{"214":{"position":[[663,31]]}}}],["r个队列，q(r)q(r)q(r",{"_index":618,"t":{"214":{"position":[[835,21]]}}}],["r中主键a",{"_index":633,"t":{"235":{"position":[[91,11]]}}}],["r和关系s，r÷s=t，首先找到r和s共同的属性c，然后在r",{"_index":637,"t":{"235":{"position":[[222,54]]}}}],["r和关系s，若r中的主键a与s中的b对应，则称b为关系s中的外码，对于s中元组中b",{"_index":632,"t":{"235":{"position":[[29,52]]}}}],["s",{"_index":235,"t":{"126":{"position":[[0,1]]},"180":{"position":[[574,3]]},"193":{"position":[[213,1],[767,1]]},"195":{"position":[[280,1]]},"282":{"position":[[194,2]]},"460":{"position":[[1053,1]]},"487":{"position":[[587,1]]}}}],["s,string",{"_index":145,"t":{"98":{"position":[[164,8]]},"106":{"position":[[264,8]]}}}],["s.len",{"_index":149,"t":{"98":{"position":[[205,5]]}}}],["s.planned_item_bo",{"_index":1506,"t":{"487":{"position":[[651,17]]}}}],["s.planned_router_bo",{"_index":1512,"t":{"487":{"position":[[772,19]]}}}],["s.qty_to_build",{"_index":1382,"t":{"460":{"position":[[966,15]]}}}],["s.shop_ord",{"_index":1385,"t":{"460":{"position":[[1080,12]]},"487":{"position":[[35,12],[592,12],[737,12]]}}}],["s.site",{"_index":1487,"t":{"487":{"position":[[19,6],[933,6]]}}}],["s801",{"_index":1371,"t":{"460":{"position":[[699,8]]},"498":{"position":[[528,19],[1092,19]]}}}],["s801工厂的pdf",{"_index":1584,"t":{"498":{"position":[[275,16]]}}}],["s801研控部门的pdf",{"_index":1575,"t":{"498":{"position":[[13,16],[178,16]]}}}],["s[i",{"_index":180,"t":{"104":{"position":[[884,8],[906,4],[980,6]]}}}],["s[i]≠t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1]\\begin{align",{"_index":179,"t":{"104":{"position":[[795,88]]}}}],["s_ga",{"_index":701,"t":{"242":{"position":[[288,5]]}}}],["samkirkland/ftp",{"_index":848,"t":{"287":{"position":[[417,15]]}}}],["sap",{"_index":1347,"t":{"460":{"position":[[0,33]]},"463":{"position":[[667,20]]},"490":{"position":[[87,35]]}}}],["sap接口传参要求[工单号，工序]，control",{"_index":1564,"t":{"490":{"position":[[123,41]]}}}],["sap接口查找到的标准产能来计算效率，并且返回到接口的list",{"_index":1565,"t":{"490":{"position":[[195,34]]}}}],["savedatalist.get(i).getsite()+\",\"+savedatalist.get(i).getline()+\",\"+savedatalist.get(i).getoper",{"_index":1424,"t":{"463":{"position":[[392,103]]}}}],["savedatalist.get(i).setprocess(nul",{"_index":1428,"t":{"463":{"position":[[625,37]]}}}],["savedatalist.get(i).setprocess(process",{"_index":1427,"t":{"463":{"position":[[567,40]]}}}],["savedatalist.s",{"_index":1423,"t":{"463":{"position":[[351,20]]}}}],["save和bgsave，其中默认使用bgsav",{"_index":1773,"t":{"520":{"position":[[0,30]]}}}],["save：在程序执行构成会阻塞当前的redi",{"_index":1774,"t":{"520":{"position":[[31,58]]}}}],["sc",{"_index":677,"t":{"240":{"position":[[531,2]]},"242":{"position":[[321,2]]}}}],["sc.sno",{"_index":679,"t":{"240":{"position":[[551,6]]}}}],["schedul",{"_index":1549,"t":{"487":{"position":[[2237,9]]}}}],["score",{"_index":900,"t":{"304":{"position":[[280,8]]},"306":{"position":[[537,8],[607,8]]},"310":{"position":[[571,8],[631,8],[732,8],[807,8],[885,8],[1077,8]]},"312":{"position":[[83,8],[271,8]]},"318":{"position":[[338,8],[433,8],[665,8]]},"359":{"position":[[282,8]]},"361":{"position":[[542,8],[614,8]]},"363":{"position":[[445,8],[605,8],[676,8],[1146,8],[1306,8],[1377,8]]},"367":{"position":[[284,8]]},"369":{"position":[[357,8]]},"371":{"position":[[309,8]]},"373":{"position":[[263,8]]},"379":{"position":[[234,8]]},"381":{"position":[[164,8],[532,8]]}}}],["scset",{"_index":688,"t":{"240":{"position":[[760,5]]}}}],["sdept",{"_index":667,"t":{"240":{"position":[[191,5],[208,5]]}}}],["sdept=‘is’例：将学生的学号及平均成绩定义为一个视图cr",{"_index":700,"t":{"242":{"position":[[246,36]]}}}],["searchresultbyid(str",{"_index":1149,"t":{"416":{"position":[[302,23]]}}}],["searchresultbyid_1(@param(\"id\")str",{"_index":1154,"t":{"416":{"position":[[428,37]]}}}],["secrets.ftp_pwd",{"_index":853,"t":{"287":{"position":[[524,15]]}}}],["secrets.ftp_us",{"_index":851,"t":{"287":{"position":[[484,16]]}}}],["secrets.ftp_user要在github设置中进行配置，添加action的变量，然后设置好你的ftp的用户名和密码即可。同时要在ftp服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到ftp",{"_index":856,"t":{"287":{"position":[[584,114]]}}}],["select",{"_index":654,"t":{"240":{"position":[[3,6],[140,20],[201,6],[340,6],[478,6],[797,6]]},"242":{"position":[[181,6],[294,6]]},"416":{"position":[[353,7]]},"428":{"position":[[0,6]]},"460":{"position":[[148,6],[714,6]]},"475":{"position":[[66,6],[82,7],[132,6]]},"477":{"position":[[116,6]]},"487":{"position":[[12,6],[465,7],[1055,6],[1277,6]]},"498":{"position":[[6380,7]]}}}],["select/selectpage/selectal",{"_index":1447,"t":{"465":{"position":[[823,35]]}}}],["select=\"onselectlin",{"_index":1237,"t":{"431":{"position":[[387,22]]}}}],["selectid",{"_index":1444,"t":{"465":{"position":[[728,10]]}}}],["selectsort(int",{"_index":534,"t":{"207":{"position":[[270,14]]}}}],["sendusernam",{"_index":1003,"t":{"326":{"position":[[307,15]]},"385":{"position":[[37,15],[245,15]]}}}],["serachdetai",{"_index":1196,"t":{"423":{"position":[[638,13],[888,13]]}}}],["serachid\",method={requestmethod.post",{"_index":1194,"t":{"423":{"position":[[574,40],[824,40]]}}}],["server",{"_index":797,"t":{"285":{"position":[[209,6]]},"287":{"position":[[459,7],[548,6]]},"523":{"position":[[242,6],[456,6]]},"536":{"position":[[226,24]]},"540":{"position":[[23,6]]}}}],["server_nam",{"_index":802,"t":{"285":{"position":[[366,11]]}}}],["servic",{"_index":1168,"t":{"421":{"position":[[70,10],[87,15]]}}}],["serviceimpl实现servic",{"_index":1170,"t":{"421":{"position":[[103,23]]}}}],["service提供服务,获取或者返回数据.注意功能逻辑卸载impl类中,不要在control",{"_index":1177,"t":{"423":{"position":[[0,65]]}}}],["set",{"_index":686,"t":{"240":{"position":[[699,7]]},"498":{"position":[[5716,3]]},"560":{"position":[[8,3],[93,32]]},"563":{"position":[[13,3]]}}}],["set的基础上，每个value的值前加一个score分数值，之前set是k1,v1,zset会变成k1,v1,score1",{"_index":1852,"t":{"565":{"position":[[0,62]]}}}],["sex",{"_index":984,"t":{"322":{"position":[[237,6]]},"324":{"position":[[187,6]]},"333":{"position":[[258,6]]},"339":{"position":[[362,6]]},"341":{"position":[[248,6]]},"343":{"position":[[178,6],[472,6]]},"393":{"position":[[242,6]]},"395":{"position":[[197,6]]},"401":{"position":[[192,6]]},"423":{"position":[[722,4]]}}}],["sex\")str",{"_index":1200,"t":{"423":{"position":[[709,12]]}}}],["sf",{"_index":54,"t":{"55":{"position":[[42,14]]}}}],["sfc_config_list.html",{"_index":1456,"t":{"467":{"position":[[125,40]]}}}],["sfc_count",{"_index":1216,"t":{"428":{"position":[[131,9]]}}}],["sfsdf",{"_index":1000,"t":{"326":{"position":[[224,8]]}}}],["sheet",{"_index":1234,"t":{"431":{"position":[[340,5]]}}}],["shellsort(int",{"_index":464,"t":{"197":{"position":[[217,13]]}}}],["shell环境l",{"_index":745,"t":{"268":{"position":[[188,16]]}}}],["shop_ord",{"_index":1349,"t":{"460":{"position":[[178,10],[192,11],[764,11],[1042,10],[1157,11]]},"487":{"position":[[51,11],[473,10],[557,11],[576,10]]},"498":{"position":[[6478,10]]}}}],["shopord",{"_index":1279,"t":{"435":{"position":[[270,10]]},"465":{"position":[[240,10]]},"498":{"position":[[2673,9]]}}}],["shoporder:this.shopord",{"_index":1249,"t":{"431":{"position":[[732,24]]},"443":{"position":[[643,24]]}}}],["shoporderqti",{"_index":1435,"t":{"465":{"position":[[336,13]]}}}],["shorttitl",{"_index":959,"t":{"316":{"position":[[283,13]]},"369":{"position":[[496,13]]}}}],["showlin",{"_index":1240,"t":{"431":{"position":[[517,9]]}}}],["shutdown",{"_index":1823,"t":{"542":{"position":[[28,8],[68,8]]}}}],["sigma",{"_index":634,"t":{"235":{"position":[[116,11]]}}}],["sim",{"_index":175,"t":{"104":{"position":[[625,4],[644,4],[913,4],[929,4],[949,4],[967,4],[989,4],[1005,4],[1795,4],[1813,4],[1868,4],[1893,4],[1919,4],[1935,4]]}}}],["site",{"_index":1272,"t":{"431":{"position":[[1301,5]]},"435":{"position":[[249,5]]},"460":{"position":[[692,4]]},"465":{"position":[[188,5]]},"487":{"position":[[29,5]]},"498":{"position":[[6567,4]]}}}],["site:this.sit",{"_index":1248,"t":{"431":{"position":[[716,15]]},"443":{"position":[[627,15]]}}}],["size",{"_index":1117,"t":{"399":{"position":[[162,7]]}}}],["smt后对板就行序列编码(标记1，2，3",{"_index":1133,"t":{"411":{"position":[[27,33]]}}}],["smt：一种工艺，对pcb进行贴片，将一些元器件安装到pcb",{"_index":1131,"t":{"407":{"position":[[50,32]]}}}],["sname",{"_index":692,"t":{"240":{"position":[[827,5]]}}}],["sname,ssex",{"_index":665,"t":{"240":{"position":[[161,10]]}}}],["sno",{"_index":691,"t":{"240":{"position":[[788,3],[804,3]]},"242":{"position":[[333,3]]}}}],["sno,avg(grad",{"_index":702,"t":{"242":{"position":[[301,14]]}}}],["sno,sname,sag",{"_index":699,"t":{"242":{"position":[[188,14]]}}}],["sofu6",{"_index":158,"t":{"100":{"position":[[193,5]]}}}],["splice",{"_index":1329,"t":{"443":{"position":[[1386,31]]}}}],["split",{"_index":1595,"t":{"498":{"position":[[622,6],[695,5],[1186,6],[1301,5],[2916,6],[3044,5],[3363,5],[3510,5],[3728,5],[3854,5],[4021,5],[4416,5],[4475,5]]}}}],["split(ro.operation_bo,2",{"_index":1519,"t":{"487":{"position":[[902,24]]}}}],["split(s.planned_item_bo,2",{"_index":1383,"t":{"460":{"position":[[982,26]]},"487":{"position":[[63,26]]}}}],["split.length",{"_index":1665,"t":{"498":{"position":[[3551,13]]}}}],["split.length==2",{"_index":1685,"t":{"498":{"position":[[4447,18]]}}}],["split[1",{"_index":1618,"t":{"498":{"position":[[1456,9],[2152,9]]}}}],["split[3",{"_index":1605,"t":{"498":{"position":[[855,17]]}}}],["split[4",{"_index":1625,"t":{"498":{"position":[[1698,14],[4586,12]]}}}],["split[length",{"_index":1667,"t":{"498":{"position":[[3656,12]]}}}],["sql",{"_index":636,"t":{"235":{"position":[[179,42]]},"418":{"position":[[69,23],[125,4],[130,3]]},"460":{"position":[[34,54],[126,6]]},"490":{"position":[[0,25]]}}}],["sql.append",{"_index":1455,"t":{"467":{"position":[[77,12]]}}}],["sql_s801",{"_index":1601,"t":{"498":{"position":[[748,8]]}}}],["sql_s801.append(\"select",{"_index":1602,"t":{"498":{"position":[[779,23]]}}}],["sqlresult",{"_index":1163,"t":{"418":{"position":[[180,9],[311,14]]}}}],["sqlresult.get(i).get(\"line\").tostr",{"_index":1345,"t":{"456":{"position":[[327,40]]}}}],["sqlresult.get(i).get(\"line\").tostring()+\",工单\"+sqlresult.get(i).get(\"shop_order\").tostring()+\"有清洗记录,\"+\"清洗数量\"+sqlresult.get(i).get(\"sfc_count\").tostr",{"_index":1342,"t":{"456":{"position":[[87,168]]}}}],["sqlresult_s801",{"_index":1608,"t":{"498":{"position":[[899,14]]}}}],["sql即可：select",{"_index":1857,"t":{"570":{"position":[[236,16]]}}}],["sql可以将工单下关联的barcode和barcode下关联的sfc进行统计，得出清洗总数，使用聚合函数count注意要结合group",{"_index":1224,"t":{"428":{"position":[[331,68]]}}}],["sql封到serviceimpl类中，能够使用servic",{"_index":1563,"t":{"490":{"position":[[26,40]]}}}],["sql的方法,使用jpa是方便,但是遇到繁杂的业务,需要几次的jpa",{"_index":1157,"t":{"418":{"position":[[0,68]]}}}],["sql设计，简短sql设计使用query在dao中书写即可，复杂sql场景使用stringbuffer来拼接sql，多条件的时候，尽可能的先把表连接起来，然后判断是否进行and",{"_index":1287,"t":{"435":{"position":[[661,88]]}}}],["sss和vvv",{"_index":389,"t":{"180":{"position":[[27,26]]}}}],["sss，此时树中只有一个顶点，然后从剩余顶点集合ttt中选取相距树中顶点集合最近的点，并且将该边加入集合sss中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n",{"_index":386,"t":{"176":{"position":[[0,121]]}}}],["stack",{"_index":1126,"t":{"404":{"position":[[26,5]]}}}],["stand_peopl",{"_index":1400,"t":{"460":{"position":[[1363,13]]}}}],["stand_product",{"_index":1402,"t":{"460":{"position":[[1396,14]]}}}],["standpeopl",{"_index":1440,"t":{"465":{"position":[[529,12]]}}}],["standproduct",{"_index":1441,"t":{"465":{"position":[[564,13]]}}}],["start_tim",{"_index":1351,"t":{"460":{"position":[[238,10],[252,11],[828,11]]},"477":{"position":[[139,11]]},"487":{"position":[[114,11],[1078,11],[1300,11]]}}}],["startdat",{"_index":1436,"t":{"465":{"position":[[372,10]]}}}],["stash",{"_index":1338,"t":{"447":{"position":[[133,8]]}}}],["stash：能够将当前工作区修改的代码进行一个暂存，往往在开发过程中会出现以往功能的一些bug修复，这时候需要从当前分支切换到另一个分支，会出现\"放弃当前想修改\"的提醒，这时候为了能够保存修改，又能切换分支修复bug，对当前修改的文件进行git",{"_index":1337,"t":{"447":{"position":[[10,122]]}}}],["state",{"_index":1120,"t":{"399":{"position":[[193,8]]}}}],["statu",{"_index":821,"t":{"285":{"position":[[643,8]]},"300":{"position":[[213,9]]},"314":{"position":[[471,9]]},"322":{"position":[[416,9]]},"324":{"position":[[366,9]]},"333":{"position":[[337,9]]},"339":{"position":[[562,9]]},"341":{"position":[[448,9]]},"343":{"position":[[144,9],[571,9]]},"369":{"position":[[377,9]]},"389":{"position":[[465,9]]},"393":{"position":[[420,9]]},"395":{"position":[[392,9]]},"401":{"position":[[394,9]]}}}],["step",{"_index":835,"t":{"287":{"position":[[145,6]]}}}],["step1",{"_index":229,"t":{"119":{"position":[[165,13]]}}}],["step2",{"_index":230,"t":{"119":{"position":[[179,16]]}}}],["stop",{"_index":741,"t":{"268":{"position":[[112,4]]}}}],["stream",{"_index":816,"t":{"285":{"position":[[563,7]]},"576":{"position":[[6,6],[43,6],[211,6]]}}}],["string",{"_index":1158,"t":{"418":{"position":[[93,6]]},"431":{"position":[[1274,6],[1294,6],[1307,6]]},"435":{"position":[[242,6],[263,6],[289,6],[313,6],[334,6],[355,6],[381,6],[408,6],[436,6],[464,6],[492,6],[526,6],[560,6]]},"456":{"position":[[73,6]]},"463":{"position":[[169,6],[379,6],[496,6]]},"465":{"position":[[89,6],[181,6],[207,6],[233,6],[266,6],[294,6],[329,6],[365,6],[398,6],[428,6],[459,6],[490,6],[522,6],[557,6],[593,6],[625,6],[656,6],[690,6],[721,6],[806,6],[867,6],[900,6],[934,6],[968,6]]},"498":{"position":[[143,6],[198,6],[218,6],[479,8],[613,8],[629,6],[1176,6],[1193,6],[2666,6],[2710,6],[2797,8],[2907,8],[2923,6],[5135,6],[5211,8],[5663,6],[5923,6]]},"556":{"position":[[15,6]]},"560":{"position":[[14,6]]}}}],["stringbuff",{"_index":1160,"t":{"418":{"position":[[112,12]]},"498":{"position":[[735,12],[763,15]]}}}],["stringbuffer();list<map<string,object",{"_index":1162,"t":{"418":{"position":[[140,39]]}}}],["stringutils.equals(facetype,\"a",{"_index":1694,"t":{"498":{"position":[[4901,35]]}}}],["stringutils.equals(facetype,\"b",{"_index":1695,"t":{"498":{"position":[[4958,35]]}}}],["stringutils.equals(string.valueof(itembo",{"_index":1737,"t":{"498":{"position":[[6888,42]]}}}],["string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg",{"_index":1826,"t":{"545":{"position":[[0,89]]}}}],["string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset",{"_index":1849,"t":{"563":{"position":[[17,143]]}}}],["string类型是redis最基本的数据类型，一个redis中字符串value最多可以是512m",{"_index":1827,"t":{"545":{"position":[[90,49]]}}}],["string，分页调用basefunctionservice的getsqlpagelimitresult函数即可，传入sql",{"_index":1286,"t":{"435":{"position":[[582,78]]}}}],["struct",{"_index":245,"t":{"134":{"position":[[15,6]]},"145":{"position":[[75,6],[218,6],[241,6],[295,6],[378,6],[401,6]]},"165":{"position":[[616,7]]},"167":{"position":[[98,6],[145,6],[196,6],[275,7]]}}}],["student",{"_index":666,"t":{"240":{"position":[[177,7],[513,7],[813,7]]},"242":{"position":[[232,7]]},"292":{"position":[[41,10],[127,10]]},"320":{"position":[[130,10],[187,8]]},"322":{"position":[[161,10]]},"324":{"position":[[111,10]]},"385":{"position":[[291,10]]},"389":{"position":[[526,9]]},"397":{"position":[[44,7],[118,10]]}}}],["student.sno",{"_index":678,"t":{"240":{"position":[[537,11]]}}}],["student.sno,sname,ssex",{"_index":676,"t":{"240":{"position":[[485,22]]}}}],["student5",{"_index":862,"t":{"294":{"position":[[52,11]]}}}],["subjectid",{"_index":892,"t":{"304":{"position":[[69,12],[367,12]]},"306":{"position":[[128,12],[355,12]]},"310":{"position":[[150,12],[431,12]]},"314":{"position":[[289,12]]},"318":{"position":[[209,12]]},"359":{"position":[[72,12],[370,12]]},"361":{"position":[[127,12],[356,12]]},"363":{"position":[[74,12],[305,12],[782,12],[1006,12]]},"367":{"position":[[48,12],[371,12]]},"369":{"position":[[87,12],[313,12]]},"371":{"position":[[135,12]]},"373":{"position":[[79,12]]},"379":{"position":[[322,12]]},"381":{"position":[[252,12],[620,12]]},"389":{"position":[[45,12],[283,12]]}}}],["subjectnam",{"_index":907,"t":{"304":{"position":[[390,14]]},"314":{"position":[[261,14]]},"316":{"position":[[257,14]]},"389":{"position":[[255,14]]}}}],["success",{"_index":1121,"t":{"399":{"position":[[202,10]]}}}],["sudo",{"_index":845,"t":{"287":{"position":[[292,4],[315,4]]}}}],["suggesttim",{"_index":912,"t":{"306":{"position":[[194,14]]},"310":{"position":[[218,14]]},"361":{"position":[[194,14]]},"363":{"position":[[142,14],[850,14]]}}}],["sum",{"_index":1479,"t":{"479":{"position":[[196,13],[210,6]]}}}],["sum(all_count",{"_index":1360,"t":{"460":{"position":[[439,14]]}}}],["sum(cas",{"_index":1527,"t":{"487":{"position":[[1336,8],[1448,8],[1562,8],[1703,8]]}}}],["sum(p.all_count",{"_index":1482,"t":{"483":{"position":[[0,16]]},"487":{"position":[[2288,16]]}}}],["sum(t.all_count",{"_index":1473,"t":{"477":{"position":[[197,16]]},"487":{"position":[[1114,16]]}}}],["sum(t.pass_count",{"_index":1524,"t":{"487":{"position":[[1145,17]]}}}],["sum_count",{"_index":1364,"t":{"460":{"position":[[528,10],[955,10],[1334,10]]},"483":{"position":[[49,9]]},"487":{"position":[[2337,10]]}}}],["sumcount",{"_index":1439,"t":{"465":{"position":[[497,9]]}}}],["sumn",{"_index":316,"t":{"160":{"position":[[80,15]]}}}],["swagger",{"_index":1182,"t":{"423":{"position":[[161,11]]}}}],["swap(a[i],a[1",{"_index":568,"t":{"209":{"position":[[1397,16]]}}}],["swap(a[i],a[min",{"_index":539,"t":{"207":{"position":[[402,18]]}}}],["swap(a[j],a[i]);flag",{"_index":495,"t":{"201":{"position":[[222,20]]}}}],["swap(int",{"_index":485,"t":{"201":{"position":[[32,8]]}}}],["switch",{"_index":1614,"t":{"498":{"position":[[1329,6]]}}}],["system.out.printf",{"_index":1741,"t":{"498":{"position":[[7133,26]]}}}],["system.out.printf(\"第\"+i+\"行数据为：\"+tempstr",{"_index":1612,"t":{"498":{"position":[[1229,41]]}}}],["system.out.printf(string.valueof(result",{"_index":1732,"t":{"498":{"position":[[6766,43]]}}}],["system.out.println(i+\"行数据为：\"+contentsplit[i",{"_index":1654,"t":{"498":{"position":[[2957,46]]}}}],["system.out.println(pagecont",{"_index":1648,"t":{"498":{"position":[[2629,34]]}}}],["systemscor",{"_index":951,"t":{"314":{"position":[[442,14]]},"389":{"position":[[436,14]]}}}],["s和t",{"_index":160,"t":{"102":{"position":[[55,155]]}}}],["s和模式串t的长度n和m。时间复杂度为o(nm)o(nm)o(nm",{"_index":156,"t":{"98":{"position":[[371,109]]}}}],["s的取值决定正负；m表示尾数，r是基数（2,4,8...），e是阶码，表示2e2^e2",{"_index":84,"t":{"71":{"position":[[46,44]]}}}],["s（31",{"_index":91,"t":{"75":{"position":[[58,7]]}}}],["t",{"_index":146,"t":{"98":{"position":[[173,3]]},"475":{"position":[[63,2],[97,1],[112,4]]},"477":{"position":[[232,1]]},"487":{"position":[[5,1],[1211,1],[1864,1],[2530,1]]}}}],["t,int",{"_index":205,"t":{"106":{"position":[[60,5],[273,5]]},"108":{"position":[[362,5]]}}}],["t.all_count",{"_index":1531,"t":{"487":{"position":[[1408,11],[1802,11]]}}}],["t.ch[i",{"_index":153,"t":{"98":{"position":[[241,9]]}}}],["t.ch[j",{"_index":210,"t":{"106":{"position":[[130,9],[352,9]]},"108":{"position":[[444,7]]}}}],["t.ch[k",{"_index":211,"t":{"106":{"position":[[143,9]]},"108":{"position":[[455,9],[489,8]]}}}],["t.daytim",{"_index":1472,"t":{"477":{"position":[[175,9],[269,9]]}}}],["t.descript",{"_index":1550,"t":{"487":{"position":[[2247,14]]}}}],["t.end_tim",{"_index":1471,"t":{"477":{"position":[[151,10],[257,11]]},"487":{"position":[[1090,10],[1236,10],[1312,10],[1932,10]]}}}],["t.end_timejoin",{"_index":1558,"t":{"487":{"position":[[2580,14]]}}}],["t.item",{"_index":1543,"t":{"487":{"position":[[1986,7]]}}}],["t.len",{"_index":151,"t":{"98":{"position":[[219,7],[339,6]]},"106":{"position":[[418,6]]},"108":{"position":[[423,7]]}}}],["t.len)return",{"_index":155,"t":{"98":{"position":[[322,12]]}}}],["t.line",{"_index":1544,"t":{"487":{"position":[[1994,7]]}}}],["t.oper",{"_index":1528,"t":{"487":{"position":[[1350,11],[1378,11],[1462,11],[1490,11],[1576,11],[1603,11],[1631,11],[1717,11],[1744,11],[1772,11],[2262,12]]}}}],["t.pass_count",{"_index":1533,"t":{"487":{"position":[[1520,12],[1661,12]]}}}],["t.process",{"_index":1545,"t":{"487":{"position":[[2002,10]]}}}],["t.rn",{"_index":1561,"t":{"487":{"position":[[2661,4]]}}}],["t.shop_ord",{"_index":1542,"t":{"487":{"position":[[1972,13]]}}}],["t.start_tim",{"_index":1470,"t":{"477":{"position":[[123,12],[243,13],[288,12]]},"487":{"position":[[1062,12],[1222,13],[1284,12],[1918,13],[2550,12]]}}}],["t.start_time),m",{"_index":1526,"t":{"487":{"position":[[1256,15]]}}}],["t.start_time)select",{"_index":1541,"t":{"487":{"position":[[1952,19]]}}}],["t[0",{"_index":183,"t":{"104":{"position":[[925,3],[942,6],[1001,3],[1782,12],[1857,10],[1911,7]]}}}],["t[],int",{"_index":250,"t":{"134":{"position":[[80,7]]}}}],["t[i",{"_index":182,"t":{"104":{"position":[[898,4]]}}}],["t[i].isempti",{"_index":253,"t":{"134":{"position":[[120,12]]}}}],["t[j",{"_index":184,"t":{"104":{"position":[[961,3],[1743,5],[1807,3],[1851,5],[1887,3],[1903,7],[1929,3],[2101,11]]}}}],["t[j]t[k]=t[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是b的位置，此时执行判定t[k]=t[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k",{"_index":198,"t":{"104":{"position":[[2219,274]]}}}],["t[k",{"_index":191,"t":{"104":{"position":[[1735,7],[1840,10],[1880,4],[2115,29]]}}}],["t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j]\\begin{align",{"_index":190,"t":{"104":{"position":[[1577,157]]}}}],["t[k]≠t[j]t[k]\\neq",{"_index":197,"t":{"104":{"position":[[2198,20]]}}}],["tabl",{"_index":640,"t":{"238":{"position":[[7,5],[180,5]]},"416":{"position":[[373,5]]},"443":{"position":[[1168,6]]}}}],["table(nam",{"_index":1137,"t":{"416":{"position":[[119,11]]}}}],["table.getcheckboxrecord",{"_index":1325,"t":{"443":{"position":[[1219,28]]}}}],["table_1,table_2",{"_index":656,"t":{"240":{"position":[[21,15]]}}}],["tag",{"_index":1181,"t":{"423":{"position":[[150,6],[420,9]]}}}],["taxi",{"_index":1858,"t":{"570":{"position":[[253,4]]}}}],["technic",{"_index":1125,"t":{"404":{"position":[[16,9]]}}}],["temp",{"_index":487,"t":{"201":{"position":[[57,4]]}}}],["temp;}void",{"_index":488,"t":{"201":{"position":[[78,10]]}}}],["tempstr",{"_index":1596,"t":{"498":{"position":[[636,7],[666,8],[1200,7],[2930,7]]}}}],["tempstr.split",{"_index":1599,"t":{"498":{"position":[[703,15],[1309,15],[3052,15],[3371,15],[3518,15],[3736,15],[3862,15],[4029,15],[4424,15]]}}}],["test",{"_index":973,"t":{"320":{"position":[[159,7]]},"322":{"position":[[190,7]]},"324":{"position":[[140,7]]},"423":{"position":[[432,7],[542,7],[792,7]]}}}],["test33333",{"_index":872,"t":{"298":{"position":[[101,12]]}}}],["testdao",{"_index":1144,"t":{"416":{"position":[[236,7]]}}}],["testservic",{"_index":1192,"t":{"423":{"position":[[495,11],[507,12]]}}}],["testservice.serachid(name,sex",{"_index":1201,"t":{"423":{"position":[[736,31]]}}}],["testservice.serachid(person.getname,person.getsex",{"_index":1204,"t":{"423":{"position":[[939,51]]}}}],["testtyp",{"_index":1582,"t":{"498":{"position":[[225,12],[1838,8]]}}}],["testtype=split[3",{"_index":1658,"t":{"498":{"position":[[3297,18]]}}}],["testzz",{"_index":1034,"t":{"343":{"position":[[58,9],[391,9]]}}}],["tesx",{"_index":1035,"t":{"343":{"position":[[113,7],[439,7]]}}}],["text",{"_index":1341,"t":{"456":{"position":[[80,4],[309,5]]}}}],["textcontentid",{"_index":1065,"t":{"369":{"position":[[246,16]]}}}],["then(r",{"_index":1252,"t":{"431":{"position":[[788,9]]},"443":{"position":[[699,9]]}}}],["this.$refs.code.focu",{"_index":1265,"t":{"431":{"position":[[1119,24]]}}}],["this.$refs.line.focu",{"_index":1258,"t":{"431":{"position":[[920,24]]},"443":{"position":[[831,24]]}}}],["this.$refs.shoporder.focu",{"_index":1246,"t":{"431":{"position":[[655,29]]},"443":{"position":[[566,29]]}}}],["this.$refs.xt",{"_index":1323,"t":{"443":{"position":[[1177,18]]}}}],["this.$t",{"_index":1245,"t":{"431":{"position":[[636,18]]},"443":{"position":[[547,18]]}}}],["this.convertlisttokeyvalue(lin",{"_index":1257,"t":{"431":{"position":[[864,33]]},"443":{"position":[[775,33]]}}}],["this.info_error",{"_index":1244,"t":{"431":{"position":[[618,15],[898,15],[991,15]]},"443":{"position":[[529,15],[809,15],[902,15]]}}}],["this.lin",{"_index":1263,"t":{"431":{"position":[[1095,9]]}}}],["this.lineresult",{"_index":1256,"t":{"431":{"position":[[846,15]]},"443":{"position":[[757,15]]}}}],["this.showlin",{"_index":1262,"t":{"431":{"position":[[1072,13]]}}}],["this.stopmounter(sit",{"_index":1705,"t":{"498":{"position":[[5285,24]]}}}],["this.tabledata.findindex(item",{"_index":1330,"t":{"443":{"position":[[1430,29]]}}}],["this.tabledata.splice(index",{"_index":1334,"t":{"443":{"position":[[1524,28]]}}}],["throw",{"_index":1173,"t":{"421":{"position":[[173,5],[245,5]]},"498":{"position":[[1394,5],[3168,5],[6216,5],[6692,5],[6965,5],[7184,5]]}}}],["time_loc",{"_index":819,"t":{"285":{"position":[[616,13]]}}}],["time_rang",{"_index":1359,"t":{"460":{"position":[[427,11],[880,11],[1285,11]]},"487":{"position":[[2090,11]]}}}],["timelimitpap",{"_index":875,"t":{"298":{"position":[[189,17]]}}}],["timerang",{"_index":1438,"t":{"465":{"position":[[435,10]]}}}],["tip",{"_index":306,"t":{"148":{"position":[[139,3]]},"223":{"position":[[0,3]]},"227":{"position":[[0,3]]},"271":{"position":[[0,3]]},"404":{"position":[[0,3]]}}}],["titl",{"_index":878,"t":{"300":{"position":[[66,8]]},"306":{"position":[[376,8]]},"310":{"position":[[452,8]]},"318":{"position":[[233,8]]},"326":{"position":[[171,8]]},"361":{"position":[[377,8]]},"363":{"position":[[326,8],[1027,8]]},"371":{"position":[[156,8]]},"373":{"position":[[100,8]]},"377":{"position":[[177,8]]},"379":{"position":[[128,8]]},"381":{"position":[[61,8],[422,8]]},"385":{"position":[[190,8]]},"387":{"position":[[37,8]]}}}],["titleitem",{"_index":915,"t":{"306":{"position":[[252,13]]},"310":{"position":[[320,13]]},"361":{"position":[[250,13]]},"363":{"position":[[196,13],[904,13]]}}}],["to_char((b.all_count",{"_index":1405,"t":{"460":{"position":[[1484,21]]}}}],["to_char((m.f_pass_count",{"_index":1552,"t":{"487":{"position":[[2348,24]]}}}],["to_char((m.p_pass_count",{"_index":1484,"t":{"485":{"position":[[34,24]]},"487":{"position":[[2430,24]]}}}],["to_char(end_tim",{"_index":1358,"t":{"460":{"position":[[395,17]]}}}],["to_char(msf.end_tim",{"_index":1461,"t":{"473":{"position":[[39,21]]}}}],["to_char(p.end_tim",{"_index":1547,"t":{"487":{"position":[[2056,19],[2112,19],[2176,19],[2751,19],[2815,19],[2932,20],[2998,19]]}}}],["to_char(p.start_tim",{"_index":1546,"t":{"487":{"position":[[2013,21]]}}}],["to_char(start_tim",{"_index":1356,"t":{"460":{"position":[[354,19]]}}}],["to_char(systimestamp",{"_index":1562,"t":{"487":{"position":[[2676,22],[2853,22]]}}}],["todolist：学习dock",{"_index":1760,"t":{"506":{"position":[[157,19]]}}}],["token不被认证的错误，需要去对应网关下的base中开启白名单，开白名单使用部分匹配即可，类似lik",{"_index":1571,"t":{"492":{"position":[[212,58]]}}}],["token认证的方法也可以在浏览器中获取到相应的authorization,测试接口的时候使用author",{"_index":1572,"t":{"492":{"position":[[271,68]]}}}],["total",{"_index":896,"t":{"304":{"position":[[188,8]]},"314":{"position":[[146,8]]},"316":{"position":[[141,8]]},"326":{"position":[[138,8]]},"339":{"position":[[171,8]]},"351":{"position":[[149,8]]},"359":{"position":[[190,8]]},"367":{"position":[[199,8]]},"369":{"position":[[188,8]]},"377":{"position":[[136,8]]},"385":{"position":[[148,8]]},"389":{"position":[[151,8]]},"391":{"position":[[161,8]]}}}],["tp+tn}{tp+fn+fp+tn}tp+fn+fp+tntp+tn",{"_index":728,"t":{"255":{"position":[[38,37]]}}}],["tptptp代表的是模型正确预测的样本数，fnfnfn是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80",{"_index":726,"t":{"253":{"position":[[64,124]]}}}],["tree",{"_index":301,"t":{"145":{"position":[[302,5],[437,27]]}}}],["tri",{"_index":1166,"t":{"421":{"position":[[0,38],[149,4]]},"498":{"position":[[58,3]]}}}],["true",{"_index":359,"t":{"170":{"position":[[546,6],[697,5]]},"172":{"position":[[304,5]]},"201":{"position":[[245,5]]},"308":{"position":[[214,5]]},"326":{"position":[[250,5]]},"416":{"position":[[409,5]]},"431":{"position":[[311,5]]},"456":{"position":[[315,5]]}}}],["trunc(msf.start_tim",{"_index":1522,"t":{"487":{"position":[[995,21]]}}}],["trunc(start_tim",{"_index":1503,"t":{"487":{"position":[[530,17]]}}}],["trunc(sysd",{"_index":1502,"t":{"487":{"position":[[513,14],[978,14],[1894,14]]}}}],["trunc(t.start_tim",{"_index":1540,"t":{"487":{"position":[[1872,19]]}}}],["ture",{"_index":258,"t":{"134":{"position":[[192,6]]}}}],["typdef",{"_index":299,"t":{"145":{"position":[[211,6]]}}}],["type",{"_index":1119,"t":{"399":{"position":[[177,7]]}}}],["typedef",{"_index":244,"t":{"134":{"position":[[7,7]]},"145":{"position":[[67,7],[267,27],[370,7]]},"165":{"position":[[608,7]]},"167":{"position":[[90,7],[188,7]]}}}],["t）与问题规模（n）的关系，t就是时间。说白了就是分析代码，算一下n",{"_index":231,"t":{"121":{"position":[[6,56]]}}}],["u",{"_index":767,"t":{"280":{"position":[[97,1]]}}}],["ubuntu",{"_index":833,"t":{"287":{"position":[[131,6]]}}}],["updat",{"_index":685,"t":{"240":{"position":[[692,6]]},"287":{"position":[[305,6]]},"498":{"position":[[5682,7],[6007,6]]}}}],["updatesql",{"_index":1711,"t":{"498":{"position":[[5670,9]]}}}],["up主的讲解视频kmp算法之求next数组代码讲解_哔哩哔哩_bilibili",{"_index":201,"t":{"104":{"position":[[2545,55]]}}}],["url",{"_index":770,"t":{"282":{"position":[[49,4]]},"399":{"position":[[94,6]]},"439":{"position":[[137,4]]},"492":{"position":[[194,17]]}}}],["us",{"_index":836,"t":{"287":{"position":[[154,5],[188,3],[205,5],[411,5]]},"532":{"position":[[153,3]]}}}],["user",{"_index":790,"t":{"285":{"position":[[81,4]]}}}],["userid",{"_index":971,"t":{"320":{"position":[[98,9]]},"391":{"position":[[45,9],[203,9]]}}}],["userlevel",{"_index":864,"t":{"294":{"position":[[97,12]]},"322":{"position":[[434,12]]},"324":{"position":[[384,12]]},"333":{"position":[[289,12]]},"339":{"position":[[580,12]]},"341":{"position":[[466,12]]},"343":{"position":[[238,12],[513,12]]},"393":{"position":[[438,12]]},"395":{"position":[[410,12]]},"401":{"position":[[412,12]]}}}],["usernam",{"_index":850,"t":{"287":{"position":[[470,9]]},"292":{"position":[[29,11],[115,11]]},"294":{"position":[[40,11]]},"314":{"position":[[528,11]]},"320":{"position":[[118,11]]},"322":{"position":[[149,11]]},"324":{"position":[[99,11]]},"333":{"position":[[29,11],[182,11]]},"339":{"position":[[39,11],[280,11]]},"341":{"position":[[166,11]]},"343":{"position":[[46,11],[379,11]]},"389":{"position":[[514,11]]},"391":{"position":[[61,11],[223,11]]},"393":{"position":[[157,11]]},"395":{"position":[[112,11]]},"401":{"position":[[107,11]]}}}],["username.github.io",{"_index":760,"t":{"278":{"position":[[0,50]]}}}],["userscor",{"_index":947,"t":{"314":{"position":[[236,12]]},"389":{"position":[[229,12]]}}}],["useruuid",{"_index":976,"t":{"322":{"position":[[97,11]]},"324":{"position":[[47,11]]},"333":{"position":[[164,11]]},"339":{"position":[[219,11]]},"341":{"position":[[105,11]]},"343":{"position":[[320,11]]},"393":{"position":[[96,11]]},"395":{"position":[[53,11]]},"401":{"position":[[46,11]]}}}],["usr/workspace/rachelnootebook/usr/workspace/rachelnootebook/web",{"_index":800,"t":{"285":{"position":[[282,65]]}}}],["utils/request'import",{"_index":1292,"t":{"439":{"position":[[44,23]]}}}],["uuid",{"_index":1028,"t":{"339":{"position":[[271,8]]},"341":{"position":[[157,8]]},"393":{"position":[[148,8]]},"401":{"position":[[98,8]]}}}],["v",{"_index":379,"t":{"172":{"position":[[277,3]]},"174":{"position":[[104,3]]},"431":{"position":[[248,1],[346,1],[437,23]]},"443":{"position":[[112,1]]}}}],["v)格式的数据，initlineresult",{"_index":1319,"t":{"443":{"position":[[997,28]]}}}],["v,e)和g^{'}=(v^{'},e^{'})g=(v,e)和g′=(v′,",{"_index":313,"t":{"156":{"position":[[110,43]]}}}],["v0v_0v0​加入sss，计算出v0v_0v0",{"_index":390,"t":{"180":{"position":[[54,40]]}}}],["v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1",{"_index":327,"t":{"165":{"position":[[485,122]]}}}],["v=asbsssˉ+asˉbsˉssv",{"_index":56,"t":{"57":{"position":[[39,19]]}}}],["v_i,v_j)是g的边，则a[i][j",{"_index":321,"t":{"165":{"position":[[182,24]]}}}],["valu",{"_index":1113,"t":{"397":{"position":[[135,8]]},"443":{"position":[[462,6]]},"556":{"position":[[38,8]]}}}],["values(值1，值2",{"_index":684,"t":{"240":{"position":[[668,18]]}}}],["van",{"_index":1225,"t":{"431":{"position":[[154,4],[328,4]]},"443":{"position":[[90,4],[244,5]]}}}],["var/log/nginx/access.log",{"_index":827,"t":{"285":{"position":[[744,25]]}}}],["var/log/nginx/error.log;pid",{"_index":793,"t":{"285":{"position":[[124,28]]}}}],["ve(0)ve(0)ve(0",{"_index":423,"t":{"187":{"position":[[275,19]]}}}],["ve(0)ve(0)ve(0)为0",{"_index":418,"t":{"187":{"position":[[48,17]]}}}],["ve(i)ve(i)ve(i",{"_index":428,"t":{"187":{"position":[[513,24]]}}}],["ve(k)=max[ve(j)+weight(vj,vk)]ve(k",{"_index":419,"t":{"187":{"position":[[66,35]]}}}],["version",{"_index":842,"t":{"287":{"position":[[244,8]]}}}],["vex[n",{"_index":329,"t":{"165":{"position":[[629,7]]},"167":{"position":[[289,7]]}}}],["vexindex",{"_index":338,"t":{"167":{"position":[[123,9]]}}}],["vexnum,arcnum",{"_index":332,"t":{"165":{"position":[[684,14]]},"167":{"position":[[301,14]]}}}],["vi,vj)是g的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{align",{"_index":320,"t":{"165":{"position":[[129,52]]}}}],["view",{"_index":694,"t":{"242":{"position":[[88,4],[163,4],[203,23],[283,4]]}}}],["visit(t[index",{"_index":276,"t":{"134":{"position":[[719,16]]}}}],["visit(v",{"_index":357,"t":{"170":{"position":[[525,9]]},"172":{"position":[[281,9]]}}}],["visit(w",{"_index":367,"t":{"170":{"position":[[674,9]]}}}],["visited[i",{"_index":351,"t":{"170":{"position":[[417,10]]}}}],["visited[max_size];void",{"_index":346,"t":{"170":{"position":[[345,22]]},"172":{"position":[[112,22]]}}}],["visited[v",{"_index":358,"t":{"170":{"position":[[535,10]]},"172":{"position":[[184,10],[291,10]]}}}],["visited[w",{"_index":368,"t":{"170":{"position":[[684,10]]}}}],["vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i",{"_index":430,"t":{"187":{"position":[[570,73]]}}}],["vl(k)=min[vl(j)−weight(vk,vj)]vl(k",{"_index":424,"t":{"187":{"position":[[295,35]]}}}],["vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i",{"_index":432,"t":{"187":{"position":[[686,54]]}}}],["vnode",{"_index":340,"t":{"167":{"position":[[203,6],[283,5]]}}}],["vnode;typedef",{"_index":342,"t":{"167":{"position":[[243,31]]}}}],["void",{"_index":203,"t":{"106":{"position":[[39,4]]},"108":{"position":[[338,4]]},"134":{"position":[[61,4],[655,4]]},"170":{"position":[[504,6]]},"193":{"position":[[455,4]]},"195":{"position":[[315,4]]},"197":{"position":[[212,4]]},"201":{"position":[[27,4]]},"203":{"position":[[728,4]]},"207":{"position":[[265,4]]},"209":{"position":[[843,4],[1318,4]]},"212":{"position":[[329,8],[732,4]]}}}],["vo类来接收前端过来的参数，一般是复杂的组合，list和一些string类型，list可以封装好实体类或者字符串，如上述的cleanbarlogvo",{"_index":1275,"t":{"435":{"position":[[68,81]]}}}],["vsv_svs​加入sss",{"_index":391,"t":{"180":{"position":[[95,22]]}}}],["vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来a到d距离是10，但是加入了b后，通过a",{"_index":392,"t":{"180":{"position":[[118,56]]}}}],["vue",{"_index":1289,"t":{"437":{"position":[[0,33]]},"443":{"position":[[0,23]]}}}],["vue)结合的需求，学会后端和vue一起的操作和vu",{"_index":1336,"t":{"445":{"position":[[0,45]]}}}],["vue开发中遇到最大的问题，希望能够根据表格勾选来完成选中删除的功能(仅前端删除)，数据是绑定的，所以可以在谷歌浏览器中安装vu",{"_index":1321,"t":{"443":{"position":[[1049,87]]}}}],["vue的结构为界面和函数逻辑，部分写界面设计的逻辑，大多都是采用组建，这里使用的是vxet",{"_index":1304,"t":{"443":{"position":[[24,58]]}}}],["vvv表示事件，<vi,vj><v_i,v_j><vi​,vj​>的这样一条边表示活动vjv_jvj​必须要viv_ivi",{"_index":412,"t":{"183":{"position":[[0,83]]}}}],["vxetable中，使用了_x_row_key为唯一id字段来进行选择删除了，使用getcheckboxrecords函数来获取选中的数据，splic",{"_index":1335,"t":{"443":{"position":[[1562,90]]}}}],["v′是v的子集e′是e的子集v^{'}是v的子集e^{'}是e的子集v′是v的子集e′是",{"_index":314,"t":{"156":{"position":[[154,50]]}}}],["v到w和w到v",{"_index":318,"t":{"162":{"position":[[17,11]]}}}],["v行v列的矩阵，其中若vi到vj有路径，则a[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则a[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则a[i][j]为1",{"_index":319,"t":{"165":{"position":[[0,128]]}}}],["weight",{"_index":339,"t":{"167":{"position":[[137,7]]}}}],["weight(v_j,v_k)]ve(k)=max[ve(j)+weight(vj​,vk​)]其中k是j",{"_index":421,"t":{"187":{"position":[[116,56]]}}}],["weight(v_k,v_j)]vl(k)=min[vl(j)−weight(vk​,vj",{"_index":426,"t":{"187":{"position":[[345,48]]}}}],["weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj",{"_index":431,"t":{"187":{"position":[[644,41]]}}}],["weight[n][n",{"_index":330,"t":{"165":{"position":[[641,13]]}}}],["welcom",{"_index":624,"t":{"223":{"position":[[23,7]]}}}],["where后group",{"_index":1468,"t":{"477":{"position":[[65,12]]}}}],["while(!isempty(q",{"_index":361,"t":{"170":{"position":[[567,19]]}}}],["while(i",{"_index":148,"t":{"98":{"position":[[194,7]]}}}],["while(i<=mid",{"_index":590,"t":{"212":{"position":[[609,13]]}}}],["while(i<s.len",{"_index":216,"t":{"106":{"position":[[305,13]]}}}],["while(j",{"_index":225,"t":{"108":{"position":[[413,7]]}}}],["while(j<=high",{"_index":591,"t":{"212":{"position":[[640,14]]}}}],["while(k<t.len",{"_index":208,"t":{"106":{"position":[[106,15]]}}}],["while(low",{"_index":514,"t":{"203":{"position":[[534,9]]}}}],["while(low<=high",{"_index":110,"t":{"80":{"position":[[173,17]]},"195":{"position":[[435,17]]}}}],["while(low<high",{"_index":515,"t":{"203":{"position":[[553,14],[624,14]]}}}],["wm_concat(t.caus",{"_index":1525,"t":{"487":{"position":[[1178,18]]}}}],["worker_connect",{"_index":795,"t":{"285":{"position":[[177,18]]}}}],["www",{"_index":803,"t":{"285":{"position":[[381,7]]}}}],["wxopenid",{"_index":1007,"t":{"333":{"position":[[453,11]]},"343":{"position":[[743,11]]}}}],["w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z",{"_index":6,"t":{"8":{"position":[[0,93]]}}}],["x",{"_index":38,"t":{"38":{"position":[[83,1],[151,1]]},"40":{"position":[[89,26],[150,1],[201,1]]},"62":{"position":[[61,4],[142,4]]},"134":{"position":[[163,3],[251,3],[272,1],[384,3],[405,1],[519,3],[540,1]]},"148":{"position":[[34,76]]},"285":{"position":[[473,1]]},"570":{"position":[[285,1]]}}}],["x/2",{"_index":264,"t":{"134":{"position":[[302,4]]}}}],["x0",{"_index":1860,"t":{"570":{"position":[[278,2],[289,2]]}}}],["x1",{"_index":662,"t":{"240":{"position":[[118,2]]}}}],["x1~x2",{"_index":664,"t":{"240":{"position":[[128,8]]}}}],["x2",{"_index":663,"t":{"240":{"position":[[125,2]]}}}],["x<1){return",{"_index":257,"t":{"134":{"position":[[180,11]]}}}],["xgroup",{"_index":1879,"t":{"578":{"position":[[176,12]]}}}],["xld",{"_index":1205,"t":{"426":{"position":[[0,20],[87,45]]}}}],["xxx",{"_index":1288,"t":{"435":{"position":[[750,3],[756,6]]}}}],["xxxx/xxxx",{"_index":747,"t":{"268":{"position":[[218,10]]}}}],["xxxxx.rdb即可，我修改为dbfienam",{"_index":1770,"t":{"518":{"position":[[95,35]]}}}],["xx：当key存在的时候，覆盖key",{"_index":1831,"t":{"548":{"position":[[60,18]]}}}],["x、y的绝对值，i",{"_index":73,"t":{"64":{"position":[[8,15]]},"66":{"position":[[31,15]]},"68":{"position":[[8,15]]}}}],["x和y计算出对应的x和i",{"_index":69,"t":{"62":{"position":[[43,17]]}}}],["x，唯一确定一个y，则x函数确定y或者y函数依赖于x，x",{"_index":703,"t":{"245":{"position":[[0,44]]}}}],["y",{"_index":74,"t":{"64":{"position":[[24,4]]},"66":{"position":[[47,4]]},"68":{"position":[[24,4]]},"287":{"position":[[337,1]]},"570":{"position":[[307,1]]}}}],["y0",{"_index":1861,"t":{"570":{"position":[[300,2]]}}}],["y0+r",{"_index":1862,"t":{"570":{"position":[[311,5]]}}}],["yaml文件中找到oracl",{"_index":1746,"t":{"502":{"position":[[0,37]]}}}],["ye",{"_index":1797,"t":{"532":{"position":[[173,3]]},"538":{"position":[[27,3]]}}}],["yes。其保存的是appendonly.aof",{"_index":1778,"t":{"523":{"position":[[158,33]]}}}],["yes改为protect",{"_index":1815,"t":{"538":{"position":[[48,14]]}}}],["yes表示开启，设置为no",{"_index":1798,"t":{"532":{"position":[[177,17]]}}}],["y。也就是对于一个函数f，给定f(x)=i",{"_index":704,"t":{"245":{"position":[[45,22]]}}}],["zf，zf为1代表全0",{"_index":52,"t":{"55":{"position":[[0,14]]}}}],["zh",{"_index":1508,"t":{"487":{"position":[[685,4]]}}}],["zset",{"_index":1848,"t":{"563":{"position":[[6,4]]}}}],["zxvf",{"_index":1804,"t":{"536":{"position":[[91,4]]}}}]],"pipeline":["stemmer"]}}]