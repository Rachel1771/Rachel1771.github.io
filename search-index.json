[{"documents":[{"i":1,"t":"","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","b":["Foundation","Foundation","数据结构"]},{"i":32,"t":"","u":"/docs/Foundation/数据结构/查找","b":["Foundation","Foundation","数据结构"]},{"i":51,"t":"","u":"/docs/Foundation/计算机组成原理/数组表示和运算","b":["Foundation","Foundation","计算机组成原理"]},{"i":95,"t":"","u":"/docs/Foundation/数据结构/内部排序算法","b":["Foundation","Foundation","数据结构"]},{"i":128,"t":"","u":"/docs/Foundation/数据结构/数据结构基础知识","b":["Foundation","Foundation","数据结构"]},{"i":141,"t":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","b":["Foundation","Foundation","数据结构","算法"]},{"i":155,"t":"","u":"/docs/Foundation/数据结构/树、森林的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":186,"t":"","u":"/docs/Foundation/数据结构/图的性质总结","b":["Foundation","Foundation","数据结构"]},{"i":221,"t":"intro","u":"/docs/intro","b":[]},{"i":225,"t":"","u":"/docs/Foundation/intro","b":["Foundation","Foundation"]},{"i":228,"t":"","u":"/docs/Foundation/数据库/数据库系统概论复试","b":["Foundation","Foundation","数据库"]},{"i":246,"t":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","b":["Math","DeepLearning"]},{"i":258,"t":"","u":"/docs/Math/intro","b":["Math"]},{"i":261,"t":"","u":"/docs/Web/部署Docsaururs","b":["Web","Web"]},{"i":277,"t":"接口文档","u":"/docs/Web/软件工程课设/接口文档","b":["Web","Web","软件工程课设"]},{"i":391,"t":"","u":"/docs/Web/intro","b":["Web","Web"]},{"i":394,"t":"","u":"/docs/Web/Redis/Redis 持久化","b":["Web","Web","Redis"]},{"i":420,"t":"","u":"/docs/Web/Redis/Redis安装&&十大数据","b":["Web","Web","Redis"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/32",[]],["t/51",[]],["t/95",[]],["t/128",[]],["t/141",[0,1.044]],["t/155",[]],["t/186",[]],["t/221",[1,1.044]],["t/225",[]],["t/228",[]],["t/246",[2,0.834]],["t/258",[]],["t/261",[]],["t/277",[2,0.834]],["t/391",[]],["t/394",[]],["t/420",[]]],"invertedIndex":[["",{"_index":2,"t":{"246":{"position":[[0,8]]},"277":{"position":[[0,4]]}}}],["intro",{"_index":1,"t":{"221":{"position":[[0,5]]}}}],["kmp",{"_index":0,"t":{"141":{"position":[[0,7]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":2,"t":"8-几种奇怪恶心的树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":3,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":5,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":7,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":9,"t":"红黑树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":10,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":12,"t":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":14,"t":"B树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":15,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":17,"t":"B树高（磁盘存取次数）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b树高磁盘存取次数","p":1},{"i":18,"t":"最矮","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最矮","p":1},{"i":19,"t":"最高","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最高","p":1},{"i":20,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":22,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":24,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":26,"t":"B+树（常用于关系型数据库的存储）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":27,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":29,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":31,"t":"B和B+的类比","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b和b的类比","p":1},{"i":33,"t":"9-查找","u":"/docs/Foundation/数据结构/查找","h":"","p":32},{"i":34,"t":"折半查找","u":"/docs/Foundation/数据结构/查找","h":"#折半查找","p":32},{"i":35,"t":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":32},{"i":37,"t":"构造二叉树","u":"/docs/Foundation/数据结构/查找","h":"#构造二叉树","p":32},{"i":38,"t":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":32},{"i":40,"t":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":32},{"i":42,"t":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":32},{"i":44,"t":"散列查找","u":"/docs/Foundation/数据结构/查找","h":"#散列查找","p":32},{"i":45,"t":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":32},{"i":47,"t":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":32},{"i":49,"t":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":32},{"i":52,"t":"2-数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"","p":51},{"i":53,"t":"码制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#码制","p":51},{"i":54,"t":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":51},{"i":56,"t":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":51},{"i":58,"t":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":51},{"i":60,"t":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":51},{"i":62,"t":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":51},{"i":64,"t":"移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移位","p":51},{"i":65,"t":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":51},{"i":67,"t":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":51},{"i":69,"t":"循环移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#循环移位","p":51},{"i":70,"t":"定点数加减","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数加减","p":51},{"i":71,"t":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":51},{"i":73,"t":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":51},{"i":75,"t":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":51},{"i":77,"t":"定点数乘除","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数乘除","p":51},{"i":78,"t":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":51},{"i":80,"t":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":51},{"i":82,"t":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":51},{"i":84,"t":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":51},{"i":86,"t":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":51},{"i":88,"t":"浮点数","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数","p":51},{"i":89,"t":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":51},{"i":91,"t":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":51},{"i":93,"t":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":51},{"i":96,"t":"7-内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","h":"","p":95},{"i":97,"t":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":95},{"i":99,"t":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":95},{"i":101,"t":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":95},{"i":103,"t":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":95},{"i":105,"t":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":95},{"i":107,"t":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":95},{"i":109,"t":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":95},{"i":111,"t":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":95},{"i":113,"t":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":95},{"i":115,"t":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":95},{"i":117,"t":"归并排序和基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序和基数排序","p":95},{"i":118,"t":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":95},{"i":120,"t":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":95},{"i":122,"t":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":95},{"i":124,"t":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":95},{"i":126,"t":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":95},{"i":129,"t":"0-数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"","p":128},{"i":130,"t":"1.1基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#11基本概念","p":128},{"i":131,"t":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":128},{"i":133,"t":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":128},{"i":135,"t":"2.算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#2算法","p":128},{"i":136,"t":"2.1算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#21算法","p":128},{"i":137,"t":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":128},{"i":139,"t":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":128},{"i":143,"t":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":141},{"i":145,"t":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":141},{"i":147,"t":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":141},{"i":149,"t":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":141},{"i":151,"t":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":141},{"i":153,"t":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":141},{"i":156,"t":"5-树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"","p":155},{"i":157,"t":"几种常考的二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#几种常考的二叉树","p":155},{"i":158,"t":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":155},{"i":160,"t":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":155},{"i":162,"t":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":155},{"i":164,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":155},{"i":166,"t":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":155},{"i":168,"t":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":155},{"i":170,"t":"树和森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和森林","p":155},{"i":171,"t":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":155},{"i":173,"t":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":155},{"i":175,"t":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":155},{"i":177,"t":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":155},{"i":179,"t":"考试选择盲猜","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#考试选择盲猜","p":155},{"i":180,"t":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":155},{"i":182,"t":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":155},{"i":184,"t":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":155},{"i":187,"t":"6-图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","h":"","p":186},{"i":188,"t":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":186},{"i":190,"t":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":186},{"i":192,"t":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":186},{"i":194,"t":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":186},{"i":196,"t":"两种存储结构：矩阵和链表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#两种存储结构矩阵和链表","p":186},{"i":197,"t":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":186},{"i":199,"t":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":186},{"i":201,"t":"BFS和DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs和dfs","p":186},{"i":202,"t":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":186},{"i":204,"t":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":186},{"i":206,"t":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":186},{"i":208,"t":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":186},{"i":210,"t":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":186},{"i":212,"t":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":186},{"i":214,"t":"拓扑","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑","p":186},{"i":215,"t":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":186},{"i":217,"t":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":186},{"i":219,"t":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":186},{"i":223,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":221},{"i":226,"t":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":225},{"i":229,"t":"1-数据库系统概论复试","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"","p":228},{"i":230,"t":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":228},{"i":232,"t":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":228},{"i":234,"t":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":228},{"i":236,"t":"3.SQL","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#3sql","p":228},{"i":237,"t":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":228},{"i":239,"t":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":228},{"i":241,"t":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":228},{"i":243,"t":"4.关系数据理论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#4关系数据理论","p":228},{"i":244,"t":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":228},{"i":248,"t":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":246},{"i":250,"t":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":246},{"i":252,"t":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":246},{"i":254,"t":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":246},{"i":256,"t":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":246},{"i":259,"t":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":258},{"i":262,"t":"2-部署Docsaururs","u":"/docs/Web/部署Docsaururs","h":"","p":261},{"i":263,"t":"两种方式部署","u":"/docs/Web/部署Docsaururs","h":"","p":261},{"i":264,"t":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":261},{"i":266,"t":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":261},{"i":268,"t":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":261},{"i":270,"t":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":261},{"i":272,"t":"二、GitHubAction+云服务器部署","u":"/docs/Web/部署Docsaururs","h":"#二githubaction云服务器部署","p":261},{"i":273,"t":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":261},{"i":275,"t":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":261},{"i":279,"t":"4.1 学生端","u":"/docs/Web/软件工程课设/接口文档","h":"#41-学生端","p":277},{"i":280,"t":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":277},{"i":282,"t":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":277},{"i":284,"t":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":277},{"i":286,"t":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":277},{"i":288,"t":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":277},{"i":290,"t":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":277},{"i":292,"t":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":277},{"i":294,"t":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":277},{"i":296,"t":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":277},{"i":298,"t":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":277},{"i":300,"t":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":277},{"i":302,"t":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":277},{"i":304,"t":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":277},{"i":306,"t":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":277},{"i":308,"t":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":277},{"i":310,"t":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":277},{"i":312,"t":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":277},{"i":314,"t":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":277},{"i":316,"t":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":277},{"i":318,"t":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":277},{"i":320,"t":"4.3 管理端","u":"/docs/Web/软件工程课设/接口文档","h":"#43-管理端","p":277},{"i":321,"t":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":277},{"i":323,"t":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":277},{"i":325,"t":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":277},{"i":327,"t":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":277},{"i":329,"t":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":277},{"i":331,"t":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":277},{"i":333,"t":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":277},{"i":335,"t":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":277},{"i":337,"t":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":277},{"i":339,"t":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":277},{"i":341,"t":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":277},{"i":343,"t":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":277},{"i":345,"t":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":277},{"i":347,"t":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":277},{"i":349,"t":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":277},{"i":351,"t":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":277},{"i":353,"t":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":277},{"i":355,"t":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":277},{"i":357,"t":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":277},{"i":359,"t":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":277},{"i":361,"t":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":277},{"i":363,"t":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":277},{"i":365,"t":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":277},{"i":367,"t":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":277},{"i":369,"t":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":277},{"i":371,"t":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":277},{"i":373,"t":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":277},{"i":375,"t":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":277},{"i":377,"t":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":277},{"i":379,"t":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":277},{"i":381,"t":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":277},{"i":383,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":277},{"i":385,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":277},{"i":387,"t":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":277},{"i":389,"t":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":277},{"i":392,"t":"1-持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":391},{"i":395,"t":"1.持久化","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":396,"t":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":394},{"i":398,"t":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":400,"t":"2.1 配置文件和操作","u":"/docs/Web/Redis/Redis 持久化","h":"#21-配置文件和操作","p":394},{"i":401,"t":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":394},{"i":403,"t":"2.2操作","u":"/docs/Web/Redis/Redis 持久化","h":"#22操作","p":394},{"i":404,"t":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":394},{"i":406,"t":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":394},{"i":408,"t":"3.AOF","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":409,"t":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":394},{"i":411,"t":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":394},{"i":413,"t":"3.3操作","u":"/docs/Web/Redis/Redis 持久化","h":"#33操作","p":394},{"i":414,"t":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":394},{"i":416,"t":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":394},{"i":418,"t":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":421,"t":"1.Linux中的安装和启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":420},{"i":422,"t":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":420},{"i":424,"t":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":420},{"i":426,"t":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":420},{"i":428,"t":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":420},{"i":430,"t":"2.十大数据类型","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":420},{"i":431,"t":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":420},{"i":433,"t":"2.1.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#211常用指令","p":420},{"i":434,"t":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":420},{"i":436,"t":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":420},{"i":438,"t":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":420},{"i":440,"t":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":420},{"i":442,"t":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":420},{"i":444,"t":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":420},{"i":446,"t":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":420},{"i":448,"t":"2.4.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#241常用指令","p":420},{"i":449,"t":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":420},{"i":451,"t":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":420},{"i":453,"t":"2.5.2常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#252常用指令","p":420},{"i":454,"t":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":420},{"i":456,"t":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":420},{"i":458,"t":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":420},{"i":460,"t":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":420},{"i":462,"t":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":420},{"i":464,"t":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":420},{"i":466,"t":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":420}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/2",[0,4.253,1,0.305]],["t/3",[1,0.409]],["t/5",[1,0.409]],["t/7",[1,0.409]],["t/9",[1,0.409]],["t/10",[1,0.409]],["t/12",[1,0.409]],["t/14",[2,4.757]],["t/15",[1,0.409]],["t/17",[2,4.757]],["t/18",[1,0.409]],["t/19",[1,0.409]],["t/20",[1,0.409]],["t/22",[1,0.409]],["t/24",[1,0.409]],["t/26",[2,4.757]],["t/27",[1,0.409]],["t/29",[1,0.409]],["t/31",[3,5.702]],["t/33",[1,0.305,4,4.253]],["t/34",[1,0.409]],["t/35",[1,0.409]],["t/37",[1,0.409]],["t/38",[5,5.702]],["t/40",[1,0.409]],["t/42",[6,5.702]],["t/44",[1,0.409]],["t/45",[1,0.409]],["t/47",[1,0.409]],["t/49",[1,0.409]],["t/52",[1,0.305,7,3.033]],["t/53",[1,0.409]],["t/54",[1,0.409]],["t/56",[1,0.409]],["t/58",[1,0.409]],["t/60",[1,0.409]],["t/62",[1,0.409]],["t/64",[1,0.409]],["t/65",[1,0.409]],["t/67",[1,0.409]],["t/69",[1,0.409]],["t/70",[1,0.409]],["t/71",[1,0.409]],["t/73",[1,0.409]],["t/75",[1,0.409]],["t/77",[1,0.409]],["t/78",[1,0.409]],["t/80",[8,5.702]],["t/82",[1,0.409]],["t/84",[1,0.409]],["t/86",[1,0.409]],["t/88",[1,0.409]],["t/89",[1,0.409]],["t/91",[1,0.409]],["t/93",[9,5.702]],["t/96",[1,0.305,10,4.253]],["t/97",[1,0.409]],["t/99",[1,0.409]],["t/101",[1,0.409]],["t/103",[1,0.409]],["t/105",[1,0.409]],["t/107",[1,0.409]],["t/109",[1,0.409]],["t/111",[1,0.409]],["t/113",[1,0.409]],["t/115",[1,0.409]],["t/117",[1,0.409]],["t/118",[1,0.409]],["t/120",[1,0.409]],["t/122",[1,0.409]],["t/124",[1,0.409]],["t/126",[1,0.409]],["t/129",[1,0.305,11,4.253]],["t/130",[12,4.757]],["t/131",[1,0.409]],["t/133",[13,5.132]],["t/135",[7,4.067]],["t/136",[14,4.477]],["t/137",[1,0.409]],["t/139",[15,4.477]],["t/143",[16,3.907]],["t/145",[17,5.702]],["t/147",[1,0.305,14,3.339]],["t/149",[15,3.339,18,3.828]],["t/151",[1,0.305,19,3.828]],["t/153",[18,3.828,20,3.828]],["t/156",[1,0.305,21,3.828]],["t/157",[1,0.409]],["t/158",[1,0.409]],["t/160",[1,0.409]],["t/162",[1,0.409]],["t/164",[1,0.409]],["t/166",[1,0.409]],["t/168",[1,0.409]],["t/170",[1,0.409]],["t/171",[1,0.409]],["t/173",[1,0.409]],["t/175",[1,0.409]],["t/177",[1,0.409]],["t/179",[1,0.409]],["t/180",[1,0.409]],["t/182",[1,0.409]],["t/184",[1,0.409]],["t/187",[1,0.305,22,4.253]],["t/188",[1,0.409]],["t/190",[1,0.409]],["t/192",[1,0.409]],["t/194",[1,0.409]],["t/196",[1,0.409]],["t/197",[1,0.409]],["t/199",[1,0.409]],["t/201",[23,5.702]],["t/202",[24,5.702]],["t/204",[25,5.702]],["t/206",[1,0.409]],["t/208",[26,5.702]],["t/210",[27,5.702]],["t/212",[1,0.409]],["t/214",[1,0.409]],["t/215",[28,5.702]],["t/217",[1,0.409]],["t/219",[1,0.409]],["t/223",[1,0.409]],["t/226",[29,4.253,30,4.253]],["t/229",[1,0.305,16,2.914]],["t/230",[16,3.907]],["t/232",[7,4.067]],["t/234",[1,0.305,14,3.339]],["t/236",[31,5.702]],["t/237",[1,0.305,32,3.828]],["t/239",[33,3.828,34,4.253]],["t/241",[1,0.305,35,3.828]],["t/243",[36,5.132]],["t/244",[1,0.305,37,3.828]],["t/248",[38,5.702]],["t/250",[39,5.702]],["t/252",[40,5.702]],["t/254",[41,5.702]],["t/256",[21,5.132]],["t/259",[1,0.409]],["t/262",[7,3.033,42,4.253]],["t/263",[1,0.409]],["t/264",[43,5.702]],["t/266",[16,3.907]],["t/268",[7,4.067]],["t/270",[44,5.702]],["t/272",[45,5.702]],["t/273",[16,3.907]],["t/275",[46,5.702]],["t/279",[1,0.305,37,3.828]],["t/280",[1,0.305,47,4.253]],["t/282",[1,0.305,48,4.253]],["t/284",[1,0.305,49,4.253]],["t/286",[1,0.305,50,4.253]],["t/288",[1,0.305,51,4.253]],["t/290",[1,0.305,52,4.253]],["t/292",[1,0.305,53,4.253]],["t/294",[1,0.305,54,4.253]],["t/296",[1,0.305,55,4.253]],["t/298",[1,0.305,56,4.253]],["t/300",[1,0.305,57,4.253]],["t/302",[1,0.305,58,4.253]],["t/304",[1,0.305,59,4.253]],["t/306",[1,0.305,60,4.253]],["t/308",[1,0.305,61,4.253]],["t/310",[1,0.305,62,4.253]],["t/312",[1,0.305,63,4.253]],["t/314",[1,0.305,64,4.253]],["t/316",[1,0.305,65,4.253]],["t/318",[1,0.305,66,4.253]],["t/320",[1,0.305,67,4.253]],["t/321",[1,0.305,68,4.253]],["t/323",[1,0.305,69,4.253]],["t/325",[1,0.305,70,4.253]],["t/327",[1,0.305,71,4.253]],["t/329",[1,0.305,72,4.253]],["t/331",[1,0.305,73,4.253]],["t/333",[1,0.305,74,4.253]],["t/335",[1,0.305,75,4.253]],["t/337",[1,0.305,76,4.253]],["t/339",[1,0.305,77,4.253]],["t/341",[1,0.305,78,4.253]],["t/343",[1,0.305,79,4.253]],["t/345",[1,0.305,80,4.253]],["t/347",[1,0.305,81,4.253]],["t/349",[1,0.305,82,4.253]],["t/351",[1,0.305,83,4.253]],["t/353",[1,0.305,84,4.253]],["t/355",[1,0.305,85,4.253]],["t/357",[1,0.305,86,4.253]],["t/359",[1,0.305,87,4.253]],["t/361",[1,0.305,88,4.253]],["t/363",[1,0.305,89,4.253]],["t/365",[1,0.305,90,4.253]],["t/367",[1,0.305,91,4.253]],["t/369",[1,0.305,92,4.253]],["t/371",[1,0.305,93,4.253]],["t/373",[1,0.305,94,4.253]],["t/375",[1,0.305,95,4.253]],["t/377",[1,0.305,96,4.253]],["t/379",[1,0.305,97,4.253]],["t/381",[1,0.305,98,4.253]],["t/383",[1,0.305,99,3.828]],["t/385",[1,0.305,99,3.828]],["t/387",[1,0.305,100,4.253]],["t/389",[1,0.305,101,4.253]],["t/392",[1,0.305,16,2.914]],["t/395",[16,3.907]],["t/396",[1,0.305,12,3.548]],["t/398",[102,5.702]],["t/400",[1,0.305,14,3.339]],["t/401",[103,5.132]],["t/403",[15,4.477]],["t/404",[104,5.132]],["t/406",[105,5.702]],["t/408",[106,5.702]],["t/409",[1,0.305,32,3.828]],["t/411",[1,0.305,33,3.828]],["t/413",[35,5.132]],["t/414",[107,5.702]],["t/416",[108,5.702]],["t/418",[36,5.132]],["t/421",[109,5.702]],["t/422",[1,0.305,12,3.548]],["t/424",[13,5.132]],["t/426",[1,0.305,110,4.253]],["t/428",[111,5.702]],["t/430",[7,4.067]],["t/431",[112,5.702]],["t/433",[103,5.132]],["t/434",[113,5.702]],["t/436",[114,5.702]],["t/438",[1,0.305,15,3.339]],["t/440",[104,5.132]],["t/442",[19,5.132]],["t/444",[115,5.702]],["t/446",[20,5.132]],["t/448",[116,5.702]],["t/449",[117,5.702]],["t/451",[118,5.702]],["t/453",[119,5.702]],["t/454",[120,5.702]],["t/456",[121,5.702]],["t/458",[122,5.702]],["t/460",[123,5.702]],["t/462",[124,5.702]],["t/464",[125,5.702]],["t/466",[126,5.702]]],"invertedIndex":[["",{"_index":1,"t":{"2":{"position":[[2,8]]},"3":{"position":[[0,5]]},"5":{"position":[[0,2]]},"7":{"position":[[0,2]]},"9":{"position":[[0,3]]},"10":{"position":[[0,2]]},"12":{"position":[[0,4]]},"15":{"position":[[0,2]]},"18":{"position":[[0,2]]},"19":{"position":[[0,2]]},"20":{"position":[[0,2]]},"22":{"position":[[0,2]]},"24":{"position":[[0,2]]},"27":{"position":[[0,2]]},"29":{"position":[[0,2]]},"33":{"position":[[2,2]]},"34":{"position":[[0,4]]},"35":{"position":[[0,2]]},"37":{"position":[[0,5]]},"40":{"position":[[0,4]]},"44":{"position":[[0,4]]},"45":{"position":[[0,4]]},"47":{"position":[[0,4]]},"49":{"position":[[0,7]]},"52":{"position":[[2,7]]},"53":{"position":[[0,2]]},"54":{"position":[[0,9]]},"56":{"position":[[0,2]]},"58":{"position":[[0,2]]},"60":{"position":[[0,2]]},"62":{"position":[[0,2]]},"64":{"position":[[0,2]]},"65":{"position":[[0,4]]},"67":{"position":[[0,4]]},"69":{"position":[[0,4]]},"70":{"position":[[0,5]]},"71":{"position":[[0,4]]},"73":{"position":[[0,4]]},"75":{"position":[[0,4]]},"77":{"position":[[0,5]]},"78":{"position":[[0,4]]},"82":{"position":[[0,10]]},"84":{"position":[[0,18]]},"86":{"position":[[0,11]]},"88":{"position":[[0,3]]},"89":{"position":[[0,8]]},"91":{"position":[[0,3]]},"96":{"position":[[2,6]]},"97":{"position":[[0,4]]},"99":{"position":[[0,4]]},"101":{"position":[[0,4]]},"103":{"position":[[0,4]]},"105":{"position":[[0,4]]},"107":{"position":[[0,4]]},"109":{"position":[[0,4]]},"111":{"position":[[0,4]]},"113":{"position":[[0,4]]},"115":{"position":[[0,3]]},"117":{"position":[[0,9]]},"118":{"position":[[0,4]]},"120":{"position":[[0,4]]},"122":{"position":[[0,8]]},"124":{"position":[[0,7]]},"126":{"position":[[0,9]]},"129":{"position":[[2,8]]},"131":{"position":[[0,28]]},"137":{"position":[[0,7]]},"147":{"position":[[4,4]]},"151":{"position":[[4,4]]},"156":{"position":[[2,9]]},"157":{"position":[[0,8]]},"158":{"position":[[0,4]]},"160":{"position":[[0,5]]},"162":{"position":[[0,5]]},"164":{"position":[[0,5]]},"166":{"position":[[0,11]]},"168":{"position":[[0,5]]},"170":{"position":[[0,4]]},"171":{"position":[[0,8]]},"173":{"position":[[0,6]]},"175":{"position":[[0,10]]},"177":{"position":[[0,8]]},"179":{"position":[[0,6]]},"180":{"position":[[0,8]]},"182":{"position":[[0,4]]},"184":{"position":[[0,13]]},"187":{"position":[[2,6]]},"188":{"position":[[0,10]]},"190":{"position":[[0,9]]},"192":{"position":[[0,3]]},"194":{"position":[[0,3]]},"196":{"position":[[0,12]]},"197":{"position":[[0,4]]},"199":{"position":[[0,3]]},"206":{"position":[[0,3]]},"212":{"position":[[0,15]]},"214":{"position":[[0,2]]},"217":{"position":[[0,4]]},"219":{"position":[[0,4]]},"223":{"position":[[0,30]]},"229":{"position":[[2,9]]},"234":{"position":[[4,6]]},"237":{"position":[[4,2]]},"241":{"position":[[4,2]]},"244":{"position":[[4,4]]},"259":{"position":[[0,8]]},"263":{"position":[[0,6]]},"279":{"position":[[4,3]]},"280":{"position":[[7,2]]},"282":{"position":[[7,2]]},"284":{"position":[[7,2]]},"286":{"position":[[7,2]]},"288":{"position":[[7,4]]},"290":{"position":[[7,4]]},"292":{"position":[[7,4]]},"294":{"position":[[7,4]]},"296":{"position":[[7,4]]},"298":{"position":[[8,4]]},"300":{"position":[[8,4]]},"302":{"position":[[8,6]]},"304":{"position":[[8,5]]},"306":{"position":[[8,4]]},"308":{"position":[[8,4]]},"310":{"position":[[8,6]]},"312":{"position":[[8,6]]},"314":{"position":[[8,4]]},"316":{"position":[[8,6]]},"318":{"position":[[8,6]]},"320":{"position":[[4,3]]},"321":{"position":[[7,2]]},"323":{"position":[[7,2]]},"325":{"position":[[7,2]]},"327":{"position":[[7,4]]},"329":{"position":[[7,4]]},"331":{"position":[[7,4]]},"333":{"position":[[7,4]]},"335":{"position":[[7,6]]},"337":{"position":[[7,4]]},"339":{"position":[[8,4]]},"341":{"position":[[8,4]]},"343":{"position":[[8,4]]},"345":{"position":[[8,4]]},"347":{"position":[[8,4]]},"349":{"position":[[8,4]]},"351":{"position":[[8,4]]},"353":{"position":[[8,4]]},"355":{"position":[[8,6]]},"357":{"position":[[8,4]]},"359":{"position":[[8,4]]},"361":{"position":[[8,4]]},"363":{"position":[[8,4]]},"365":{"position":[[8,4]]},"367":{"position":[[8,4]]},"369":{"position":[[8,4]]},"371":{"position":[[8,4]]},"373":{"position":[[8,4]]},"375":{"position":[[8,4]]},"377":{"position":[[8,4]]},"379":{"position":[[8,4]]},"381":{"position":[[8,6]]},"383":{"position":[[8,6]]},"385":{"position":[[8,6]]},"387":{"position":[[8,4]]},"389":{"position":[[8,6]]},"392":{"position":[[2,9]]},"396":{"position":[[4,6]]},"400":{"position":[[4,7]]},"409":{"position":[[4,4]]},"411":{"position":[[4,6]]},"422":{"position":[[4,5]]},"426":{"position":[[4,4]]},"438":{"position":[[4,2]]}}}],["0",{"_index":11,"t":{"129":{"position":[[0,1]]}}}],["1",{"_index":16,"t":{"143":{"position":[[0,11]]},"229":{"position":[[0,1]]},"230":{"position":[[0,4]]},"266":{"position":[[0,8]]},"273":{"position":[[0,5]]},"392":{"position":[[0,1]]},"395":{"position":[[0,5]]}}}],["1.1",{"_index":12,"t":{"130":{"position":[[0,7]]},"396":{"position":[[0,3]]},"422":{"position":[[0,3]]}}}],["1.2",{"_index":13,"t":{"133":{"position":[[0,10]]},"424":{"position":[[0,5]]}}}],["1.3",{"_index":110,"t":{"426":{"position":[[0,3]]}}}],["1.4",{"_index":111,"t":{"428":{"position":[[0,5]]}}}],["1.linux",{"_index":109,"t":{"421":{"position":[[0,14]]}}}],["1.交并比iou交并比iou交并比i",{"_index":38,"t":{"248":{"position":[[0,20]]}}}],["2",{"_index":7,"t":{"52":{"position":[[0,1]]},"135":{"position":[[0,4]]},"232":{"position":[[0,8]]},"262":{"position":[[0,1]]},"268":{"position":[[0,6]]},"430":{"position":[[0,8]]}}}],["2.1",{"_index":14,"t":{"136":{"position":[[0,5]]},"147":{"position":[[0,3]]},"234":{"position":[[0,3]]},"400":{"position":[[0,3]]}}}],["2.1.1",{"_index":103,"t":{"401":{"position":[[0,7]]},"433":{"position":[[0,9]]}}}],["2.1.2",{"_index":113,"t":{"434":{"position":[[0,9]]}}}],["2.1.3",{"_index":114,"t":{"436":{"position":[[0,9]]}}}],["2.1字符串string",{"_index":112,"t":{"431":{"position":[[0,12]]}}}],["2.2",{"_index":15,"t":{"139":{"position":[[0,8]]},"149":{"position":[[0,3]]},"403":{"position":[[0,5]]},"438":{"position":[[0,3]]}}}],["2.2.1",{"_index":104,"t":{"404":{"position":[[0,9]]},"440":{"position":[[0,9]]}}}],["2.2.2",{"_index":105,"t":{"406":{"position":[[0,9]]}}}],["2.3",{"_index":19,"t":{"151":{"position":[[0,3]]},"442":{"position":[[0,5]]}}}],["2.3.1",{"_index":115,"t":{"444":{"position":[[0,9]]}}}],["2.4",{"_index":20,"t":{"153":{"position":[[0,3]]},"446":{"position":[[0,5]]}}}],["2.4.1",{"_index":116,"t":{"448":{"position":[[0,9]]}}}],["2.5",{"_index":117,"t":{"449":{"position":[[0,7]]}}}],["2.5.1跟set",{"_index":118,"t":{"451":{"position":[[0,12]]}}}],["2.5.2",{"_index":119,"t":{"453":{"position":[[0,9]]}}}],["2.6",{"_index":120,"t":{"454":{"position":[[0,9]]}}}],["2.6.1",{"_index":121,"t":{"456":{"position":[[0,7]]}}}],["2.6.2",{"_index":122,"t":{"458":{"position":[[0,7]]}}}],["2.7hyperloglog",{"_index":123,"t":{"460":{"position":[[0,14]]}}}],["2.8",{"_index":124,"t":{"462":{"position":[[0,4]]}}}],["2.8.1",{"_index":125,"t":{"464":{"position":[[0,8]]}}}],["2.8.2",{"_index":126,"t":{"466":{"position":[[0,9]]}}}],["2.dicedicedic",{"_index":39,"t":{"250":{"position":[[0,16]]}}}],["2.kmp",{"_index":17,"t":{"145":{"position":[[0,5]]}}}],["2.rdb",{"_index":102,"t":{"398":{"position":[[0,5]]}}}],["2.项目配置action",{"_index":46,"t":{"275":{"position":[[0,17]]}}}],["3",{"_index":44,"t":{"270":{"position":[[0,6]]}}}],["3.1",{"_index":32,"t":{"237":{"position":[[0,3]]},"409":{"position":[[0,3]]}}}],["3.2",{"_index":33,"t":{"239":{"position":[[0,3]]},"411":{"position":[[0,3]]}}}],["3.3",{"_index":35,"t":{"241":{"position":[[0,3]]},"413":{"position":[[0,5]]}}}],["3.3.1",{"_index":107,"t":{"414":{"position":[[0,7]]}}}],["3.3.2aof",{"_index":108,"t":{"416":{"position":[[0,13]]}}}],["3.aof",{"_index":106,"t":{"408":{"position":[[0,5]]}}}],["3.sql",{"_index":31,"t":{"236":{"position":[[0,5]]}}}],["3.召回率recallrecallrecal",{"_index":40,"t":{"252":{"position":[[0,23]]}}}],["4",{"_index":36,"t":{"243":{"position":[[0,8]]},"418":{"position":[[0,6]]}}}],["4.1",{"_index":37,"t":{"244":{"position":[[0,3]]},"279":{"position":[[0,3]]}}}],["4.1.1",{"_index":47,"t":{"280":{"position":[[0,6]]}}}],["4.1.10",{"_index":56,"t":{"298":{"position":[[0,7]]}}}],["4.1.11",{"_index":57,"t":{"300":{"position":[[0,7]]}}}],["4.1.12",{"_index":58,"t":{"302":{"position":[[0,7]]}}}],["4.1.13",{"_index":59,"t":{"304":{"position":[[0,7]]}}}],["4.1.14",{"_index":60,"t":{"306":{"position":[[0,7]]}}}],["4.1.15",{"_index":61,"t":{"308":{"position":[[0,7]]}}}],["4.1.16",{"_index":62,"t":{"310":{"position":[[0,7]]}}}],["4.1.17",{"_index":63,"t":{"312":{"position":[[0,7]]}}}],["4.1.18",{"_index":64,"t":{"314":{"position":[[0,7]]}}}],["4.1.19",{"_index":65,"t":{"316":{"position":[[0,7]]}}}],["4.1.2",{"_index":48,"t":{"282":{"position":[[0,6]]}}}],["4.1.20",{"_index":66,"t":{"318":{"position":[[0,7]]}}}],["4.1.3",{"_index":49,"t":{"284":{"position":[[0,6]]}}}],["4.1.4",{"_index":50,"t":{"286":{"position":[[0,6]]}}}],["4.1.5",{"_index":51,"t":{"288":{"position":[[0,6]]}}}],["4.1.6",{"_index":52,"t":{"290":{"position":[[0,6]]}}}],["4.1.7",{"_index":53,"t":{"292":{"position":[[0,6]]}}}],["4.1.8",{"_index":54,"t":{"294":{"position":[[0,6]]}}}],["4.1.9",{"_index":55,"t":{"296":{"position":[[0,6]]}}}],["4.3",{"_index":67,"t":{"320":{"position":[[0,3]]}}}],["4.3.1",{"_index":68,"t":{"321":{"position":[[0,6]]}}}],["4.3.10",{"_index":77,"t":{"339":{"position":[[0,7]]}}}],["4.3.11",{"_index":78,"t":{"341":{"position":[[0,7]]}}}],["4.3.12",{"_index":79,"t":{"343":{"position":[[0,7]]}}}],["4.3.13",{"_index":80,"t":{"345":{"position":[[0,7]]}}}],["4.3.14",{"_index":81,"t":{"347":{"position":[[0,7]]}}}],["4.3.15",{"_index":82,"t":{"349":{"position":[[0,7]]}}}],["4.3.16",{"_index":83,"t":{"351":{"position":[[0,7]]}}}],["4.3.17",{"_index":84,"t":{"353":{"position":[[0,7]]}}}],["4.3.18",{"_index":85,"t":{"355":{"position":[[0,7]]}}}],["4.3.19",{"_index":86,"t":{"357":{"position":[[0,7]]}}}],["4.3.2",{"_index":69,"t":{"323":{"position":[[0,6]]}}}],["4.3.20",{"_index":87,"t":{"359":{"position":[[0,7]]}}}],["4.3.21",{"_index":88,"t":{"361":{"position":[[0,7]]}}}],["4.3.22",{"_index":89,"t":{"363":{"position":[[0,7]]}}}],["4.3.23",{"_index":90,"t":{"365":{"position":[[0,7]]}}}],["4.3.24",{"_index":91,"t":{"367":{"position":[[0,7]]}}}],["4.3.25",{"_index":92,"t":{"369":{"position":[[0,7]]}}}],["4.3.26",{"_index":93,"t":{"371":{"position":[[0,7]]}}}],["4.3.27",{"_index":94,"t":{"373":{"position":[[0,7]]}}}],["4.3.28",{"_index":95,"t":{"375":{"position":[[0,7]]}}}],["4.3.29",{"_index":96,"t":{"377":{"position":[[0,7]]}}}],["4.3.3",{"_index":70,"t":{"325":{"position":[[0,6]]}}}],["4.3.30",{"_index":97,"t":{"379":{"position":[[0,7]]}}}],["4.3.31",{"_index":98,"t":{"381":{"position":[[0,7]]}}}],["4.3.32",{"_index":99,"t":{"383":{"position":[[0,7]]},"385":{"position":[[0,7]]}}}],["4.3.33",{"_index":100,"t":{"387":{"position":[[0,7]]}}}],["4.3.34",{"_index":101,"t":{"389":{"position":[[0,7]]}}}],["4.3.4",{"_index":71,"t":{"327":{"position":[[0,6]]}}}],["4.3.5",{"_index":72,"t":{"329":{"position":[[0,6]]}}}],["4.3.6",{"_index":73,"t":{"331":{"position":[[0,6]]}}}],["4.3.7",{"_index":74,"t":{"333":{"position":[[0,6]]}}}],["4.3.8",{"_index":75,"t":{"335":{"position":[[0,6]]}}}],["4.3.9",{"_index":76,"t":{"337":{"position":[[0,6]]}}}],["4.准确率accaccacc",{"_index":41,"t":{"254":{"position":[[0,14]]}}}],["5",{"_index":21,"t":{"156":{"position":[[0,1]]},"256":{"position":[[0,4]]}}}],["6",{"_index":22,"t":{"187":{"position":[[0,1]]}}}],["7",{"_index":10,"t":{"96":{"position":[[0,1]]}}}],["8",{"_index":0,"t":{"2":{"position":[[0,1]]}}}],["9",{"_index":4,"t":{"33":{"position":[[0,1]]}}}],["aov",{"_index":28,"t":{"215":{"position":[[0,3]]}}}],["asl",{"_index":6,"t":{"42":{"position":[[0,3]]}}}],["asl和失败asl",{"_index":5,"t":{"38":{"position":[[0,13]]}}}],["b",{"_index":2,"t":{"14":{"position":[[0,2]]},"17":{"position":[[0,11]]},"26":{"position":[[0,17]]}}}],["bf",{"_index":24,"t":{"202":{"position":[[0,3]]}}}],["bfs和df",{"_index":23,"t":{"201":{"position":[[0,7]]}}}],["booth",{"_index":8,"t":{"80":{"position":[[0,13]]}}}],["b和b",{"_index":3,"t":{"31":{"position":[[0,7]]}}}],["crud",{"_index":34,"t":{"239":{"position":[[4,4]]}}}],["df",{"_index":25,"t":{"204":{"position":[[0,3]]}}}],["docsaurur",{"_index":42,"t":{"262":{"position":[[2,12]]}}}],["foundat",{"_index":29,"t":{"226":{"position":[[0,10]]}}}],["githubact",{"_index":45,"t":{"272":{"position":[[0,21]]}}}],["githubpag",{"_index":43,"t":{"264":{"position":[[0,13]]}}}],["ieee754",{"_index":9,"t":{"93":{"position":[[0,9]]}}}],["kruskal",{"_index":27,"t":{"210":{"position":[[0,14]]}}}],["next",{"_index":18,"t":{"149":{"position":[[4,6]]},"153":{"position":[[4,8]]}}}],["prim",{"_index":26,"t":{"208":{"position":[[0,9]]}}}],["road",{"_index":30,"t":{"226":{"position":[[14,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":4,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":6,"t":"找到合适的位置插入，然后判断类型进行处理： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":8,"t":"删除一个节点后，会导致一棵子树失衡，假设删除w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z的： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左 删除和插入操作类似，不同之处在于删除的调整，可能会导致另外的不平衡，需要反复多次进行调整。","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":11,"t":"什么是红黑树，红黑树是一种特殊的二叉排序树，考试内容不会很深，简单清楚性质概念和插入操作即可，删除操作很难，考察概率不大。 主要性质： 每个结点或黑或红 根节点必黑 叶节点必黑，这里的叶节点是外部结点 不存在两个相邻的红节点 任意一个节点，该节点到任意一个叶节点的简单路径上，经过的黑节点数目是一样的 顺口溜： info 左根右（排序） 根叶黑 不红红 黑路同 两个结论： 从根出发到叶节点的路径不大于最短路径的一半 有n个内部红节点的红黑树高度h≤2∗log2(n+1)h \\le 2*log_{2}{(n+1)}h≤2∗log2​(n+1) 插入的节点初始化为红","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":13,"t":"第一步先确定要插入的位置 若为根节点，直接染黑 如果不破坏红黑树特征，正常 如果破坏了“不红红”的条件，找到父亲的兄弟结点，也就是叔结点，按照叔结点的两种情况去调整:(1)红叔叔（2）黑叔叔 （1）红叔叔 叔、父、爷结点染色（颜色反转），同时爷结点变成新节点（变黑则无所谓，变红则要再调整）。 （2）黑叔叔 找父节点和爷结点，判断当前节点对于爷结点的位置进行调整： LL：右旋，父节点换爷结点，同时父和爷染色 RR：左旋，父节点换爷结点，同时父和爷染色 LR：先左后右，当前节点先左后右，儿结点换爷结点，同时染色 RL：先右后左，当前节点先右后左，儿结点换爷结点，同时染色","s":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":16,"t":"info 树中每个结点至多有m个子树，即一个节点中至多m-1个关键字 根节点至少两棵子树 初根节点外的所有非叶节点，至少[m/2]（向上取整）棵子树，即至少有[m/2]（向上取整）-1个关键字 所有叶节点在最后一层（NULL节点，空指针）","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":21,"t":"在B树中找节点 在节点中中找关键字 与节点中的关键字进行比对，其中节点的左指针指向的节点集合小于该节点，右指针指向的节点集合大于节点，依据这种特性，一层层进行查找，如果到最后NULL节点，则说明找不到了。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":23,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1] 定位，找到应该插入的位置 插入，如果关键字个数插入后在正确范围内，则直接插入，否则进行处理 多的情况处理如下： 如下处理：","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":25,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1]，所以删除后节点的关键字个数不能小于（m/2）向上取整-1。 直接删除，如果删除满足关键字的最低要求，则直接删除 如果在非终端节点，则用直接前驱或者直接后继来代替 如果在兄弟够借，即目前关键字删除前为（m/2）向上取整-1，且其左（右）兄弟的关键字数目大于（m/2）向上取整，则从兄弟中拿一个节点，放到父节点中，然后从父节点中拿一下下来填充给不满足要求的节点，称为父子换位法 这里的92处已经不满足，但是左兄弟仍然充裕，则进行父子换位法： 兄弟不够借。当兄弟不够借的时候，当前节点+兄弟结点的个数为m-2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m-1，同时父节点关键字数目-1。如果父节点不满足要求，则进行兄弟够借和兄弟不够借两种试探，进行填补跟合并。如果操作使得根节点-1变为0，则直接删除根节点，换成新的根节点。(切记不可进行前驱后继填补) 此时需要父节点落下70，进行合并： 73处不满足，同时左兄弟不够借，则82落下，进行合并： 删除根节点，合并得新根节点：","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":28,"t":"m阶B+树每个结点最多m棵子树（也就是最多m个孩子节点） 非叶、根节点至少有两棵子树，其他每个分支节点至少有（m/2）向上取整棵子树 节点的子树个树和关键字个数一样 叶节点包含所有关键字，也就是全部关键字都会存储在叶子节点，节点内按大小排序 所有分支节点，中仅仅包含它所指向的子节点中的最大值，及其子节点的指针 叶节点之间会有指针穿在一起（支持顺序查找） 如上：3，9，15中存储的分别是三个子节点中的最大值，最后绿色的叶节点之间有指针连在一起。","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":30,"t":"从根出发，找到合适的位置（处于哪个子节点），过程中会在非叶节点中遇到关键字，但这并不是查找成功，要一直查到叶节点中才算成功，这是区别于B树的一个地方，B树是能够在非终端节点中就找到结果的。 如下是一个查找成功的例子，查找9，从根出发，直到叶节点。 如下是查找失败的例子：从根出发，进入15的子节点，然后进入9的子节点，对比了6->8，发现8已经大于7，则查找失败了。 总之无论成功与否，最终都一定要走到最下面的一层节点。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":36,"t":"折半查找思想，将给定值key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high的时候会结束查找，最终显示查找失败。折半不适用于链式存储 直接看算法： int Binary_Search(int a[],int key){ int len = len(a); int low = 0;high = len - 1; while(low<=high){ mid = (low + high)/2; if(mid == key)reutrn mid; if(mid < key){ high = mid - 1; } else{ low = mid + 1; } } return }","s":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":32},{"i":39,"t":"1）成功： 层数乘以结点数求和再除以长度 成功ASL为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4​ 2）失败： 将图中的二叉树补上结点，原来的每个叶子结点都补成度为2的结点 这些失败结点是虚拟的，实际是不存在的，所以计算的时候，层数是按它的父节点来计算 所以图中的失败ASL为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12是失败结点。","s":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":32},{"i":41,"t":"分块查找综合了顺序查找和折半查找的优点，将数据分组，组内可以无序，但是组间必定有序，然后分别记录各组内的最值key。查找的时候先找最值Key，再按分组指针去顺序查找。 下图举例：","s":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":32},{"i":43,"t":"1）成功 先找到分块的key节点，计数一次，然后去块间顺序查找，依次+1 2）失败 整体失败的情况无法预估，题目更可能考察某一个点的查找失败，与成功类似，块间顺序查找完全部元素，即为查找失败，其实就是块长+1","s":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":32},{"i":46,"t":"一种特殊的数据结构，能够根据元素关键字计算出他在散列表中的存储地址","s":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":32},{"i":48,"t":"散列哈希函数：Addr=H(key)Addr = H(key)Addr=H(key)建立起关键字和散列地址的映射关系，408一般考察除留余数法。 散列表表长是m，取不大于m的最大质数p，构建函数H(key)=key%pH(key) = key \\% pH(key)=key%p，则产生的地址落在区间[0,p−1][0,p-1][0,p−1] 处理冲突：冲突是指经过散列函数映射的地址上已经有关键字，则需要采取一定处理办法解决冲突。如下解决冲突办法： 开放地址法​ 1、线性探测： 一个一个向下探测，按di=0,1,2...d_i = 0,1,2...di​=0,1,2...进行探测 2、平方探测（二次探测法）： 按照di=02,12,−12,22,−22.........k2,−k2d_i = 0^2,1^2,-1^2,2^2,-2^2.........k^2,-k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k \\le m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3的素数 3、双散列 两个散列函数：Hi=(H(key)+i∗Hash2(key))%mH_i = (H(key)+i*Hash_2(key)) \\% mHi​=(H(key)+i∗Hash2​(key))%m 4、伪随机序列法 当did_idi​为伪随机数序列时候 拉链法​ 一张图理解","s":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":32},{"i":50,"t":"查找成功是针对关键字的，计算出查找每个关键字查找成功的次数，除以关键字个数即可 查找失败是针对散列函数的，由散列函数的质数p可知:散列地址在[0,p−1][0,p-1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p即可","s":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":32},{"i":55,"t":"除基取余法（针对整数）​ 拿十进制的数除以基数（什么进制就是什么基数），留下余数和商，继续执行除基取余，知道商为0，最后将余数从下向上串起来，得到整数部分。 乘基取整法（针对小数）​ 拿小数不断乘以基数，取掉最高位（小数点前一位），知道乘积的结果为1.000....，将结果从下向上串起来即可。","s":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":51},{"i":57,"t":"机器数的最高位表示数据的符号，剩下的数据位表示数据的绝对值真值。假设字长为n+1位。 则小数表示范围：−(1−2−n)≤x≤1−2−n-(1-2 ^{-n})\\le x \\le 1-2^{-n}−(1−2−n)≤x≤1−2−n， 整数表示范围：−(2n−1)≤x≤2n−1-(2^{n}-1) \\le x \\le 2^n -1−(2n−1)≤x≤2n−1。 其中原码的0有两种表示：10000和00000。","s":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":51},{"i":59,"t":"基于原码的不方便运算二设计的，模二运算。正数的补码和原码一样，负数的补码是在原码的基础上，除符号位外取反，末位加1（从右到左找到第一个1，前面的数取反即可）。如果是从x的补码求-x的补码，也是上述的步骤，同时将符号位进行变换即可。 对于字长n+1位。 小数表示范围：−1≤x≤1−2−n-1 \\le x \\le 1-2^{-n}−1≤x≤1−2−n 整数表示范围：−2n≤x≤2n−1-2^n \\le x \\le 2^n -1−2n≤x≤2n−1 零的表示唯一，都是0.000","s":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":51},{"i":61,"t":"正数的反码同原码，负数的反码等于原码的数值为全部取反。其中反码的零也有正负之分。","s":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":51},{"i":63,"t":"移码常常用来表示浮点数的阶码，理解为在真值上加上一个常数（偏置值），通常是2n2^n2n，相当于x在数轴上正向偏移若干单位，移码等于补码的符号位取反。 移码的零表示唯一。","s":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":51},{"i":66,"t":"码制 添加 正数 原、补、反 0 负数 原 0 补 左1 右0 反 1","s":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":51},{"i":68,"t":"无脑0","s":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":51},{"i":72,"t":"原码加减计算在计算机中容易失误得不到正确的结果，于是计算机内部的加减运算都是采用补码进行运算的，减法的本质是加法，等于加上一个负数的补码。步骤： 按二进制规则，逢二进一 加法：直接相加；减法：减数转换成负数补码后和被减数相加 符号位和数值位一起参与运算，加减法的符号位在运算中直接得到 最终运算结果的高位丢弃，保留n+1位，运算结果还是补码","s":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":51},{"i":74,"t":"零标志ZF，ZF为1代表全0 溢出标志OF，为1表示溢出，对于无符号数这个标志没用 符号标志SF，表示结果的符号 进/借位标志CF，对无符号有用，有符号数的运算没用","s":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":51},{"i":76,"t":"1）一位符号位 参加运算的两个数符号相同，结果与原操作数不同的话，表示溢出。 V=AsBsSsˉ+AsˉBsˉSsV = A_sB_s \\bar{S_s}+\\bar{A_{s}}\\bar{B_{s}}S_sV=As​Bs​Ss​ˉ​+As​ˉ​Bs​ˉ​Ss​ 逻辑表达式为1时候为溢出 2）双符号位 模四补码，运算结果两个符号位一样则不溢出，否则是溢出。 00 11 01上溢出 10下溢出 3）一位符号位 采用一位符号位结合仅为情况判断溢出，若符号位进位CF和最高位数位的进位C1一样表示没有溢出，反之溢出。","s":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":51},{"i":79,"t":"符号位单独运算，被乘数和乘数按绝对值进行运算 初始ACC里面设置为00.0000（00符号位隐藏） 乘数最低位为1，则加上被乘数，为0则加0 执行完3后，整体带上ACC的符号位进行右移（逻辑） 重复执行加法和右移n次即可 手算模拟：","s":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":51},{"i":81,"t":"在乘数后面初始加一个辅助位0，根据辅助位和乘数的最后一位的加减结果判断下一步加什么。 x和y计算出对应的x和y的补码以及-x的补码 初始ACC设置00.0000，MQ中为乘数，乘数后添加一个辅助位（辅助位就是MQ后一位） 辅助位-MQ最低位：为1则加x的补码，为0则加0，为-1则加-x的补码 执行3后，整体右移（逻辑）一位 整体执行3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n次的右移） 比较：","s":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":51},{"i":83,"t":"符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 第一步是用被除数-除数的补码 判断余数，余数为负商0，并且加上除数的补码，余数为正商0，不恢复 执行完4后，余数进行逻辑左移 加减n+1次，左移n次 流程图：","s":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":51},{"i":85,"t":"由余数和除数的符号共同决定，不需要恢复余数。 符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 被除数减去除数，判断余数正负 余数为负，商0，余数左移并且加上除数；余数为正，商1，余数左移并且减去除数 加减n+1次，左移n","s":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":51},{"i":87,"t":"符号位参与运算 计算x、y的绝对值，y的补码和-y的补码 第一步：被除数和除数同号，则被除数减去除数，被除数和除数异号，则加上除数 判断除数和余数是否同号，同号商1，余数左移减去除数；异号商0，余数左移加上除数 执行4操作n次，最后一步恒置1，“末位恒置1”","s":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":51},{"i":90,"t":"表示为：N=(−1)S∗M∗REN =(-1)^S * M*R^EN=(−1)S∗M∗RE S的取值决定正负；M表示尾数，R是基数（2,4,8...），E是阶码，表示2E2^E2E","s":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":51},{"i":92,"t":"正数：0.1xxxxx 负数：1.1xxxxx 对于基数为2的，要求小数点后一位不全为0，也就是要为1 对于基数为4的，要求小数点后两位不全为0 策略： 左规：尾数左移，则阶码要-1 右规：尾数右移，阶码+1","s":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":51},{"i":94,"t":"小概念​ 符号位：1；阶码：8；尾数：23 其中尾数前面隐含了一个1.，所以尾数的精度是24，能表示24位有效数字 符号S（31） 阶码E（23~30） 尾数M（0~22） 1+8+23组合。IEEE754标准表示成浮点数真值为：(−1)S∗1.M∗2E−127(-1)^S *1.M*2^{E-127}(−1)S∗1.M∗2E−127 其中注意阶码E是移码表示的。 阶码的全0和全1： 阶码 符号 尾数 值 全0 0 0 0 全0 1 0 -0 全1 0 0 正无穷 全1 1 0 负无穷 浮点数的加减运算​ 给定两个数，先转化成二进制表示形式。 对阶，两阶码相减，小的向大的对齐，阶码对齐过程中尾数也会进行移动 尾数加减（符号参与运算，一般都是两位符号） 将尾数规格化：正数0.1xxx，负数1.1xxx，规格化过程左移或者右移要进行阶码的改动 舍入：0舍1入、末位恒置1、截断 溢出判断 溢出的两种情况： 右规和尾数舍入，尾数大的舍入时候，末位加1，可能导致尾数溢出，此时会进行右规调整，但同时会影响到阶码，导致阶码溢出。 左规，进行左规时，阶码减1，可能导致下溢 结合一个例题：","s":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":51},{"i":98,"t":"插入排序就是每次都从后面未排序的序列中按照大小插入到前面已经排好的子序列中，这里会产生子序列（已经排好序的）和待排序列，当没有待排序则算法结束，每次从未排序的头部取出一个插入到子序列中合适的位置。包含有：直接插入、折半插入、希尔排序。","s":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":95},{"i":100,"t":"L[1.......i-1] L[i] L[i+1......n] 如上模拟插入排序状态，此时待排序指针指向i，前面i-1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i-1中找到适合L[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i。每次都从未排好序的中取出第一个进行插入，此处需要和后面的选择排序进行区分，当执行所以待插入的都执行完毕则算是排好啦。 s 初始第一个值默认自成一个已经排好序的子序列 采用哨兵复制L[i]，然后将子序列中大于L[i]的值进行后移，因为已经找到位置，要插入就得有空位嘛 给L[i]找到合适的插入位置 将腾出的空位放入L[i] 继续循环 弄清楚算法思想，代码是比较容易实现的，算法核心在于，从初始子序列为1的数组中，指针依次后移，为当前指向的值，从子序列中找到一个合适的位置，然后插入即可，此处可能会有疑问，插入到前面，那当前的位置呢？因为会要进行移动，所以此处的位置必然也是一个已经排好序的值。 1）代码 void InsertSort(int a[],int len){ int i,j; for(i = 2;i <= len;i++){ if(a[i]<a[i-1]){ a[0] = a[i]; for(j = i - 1;a[0] < a[j];--j){ a[j+1] = a[j]; } a[j+1] = a[0]; } }} 2）时空复杂度分析 空间上只使用了a[0]当哨兵作为辅助，故空间复杂度上为O(1)O(1)O(1) 最优时间复杂度，如果已经有序，一趟循环即可，时间复杂度为O(n)O(n)O(n) 最坏时间复杂度，初始全部乱序，两个for循环，时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性分析 s 这里第一次提及稳定性，所谓稳定性是指，数组中有a[i] == a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j]前面，假若这里反过来，就是不稳定的。如果值相同的元素在排序后相对位置没有发生改变则认为是稳定的。 据此分析，直接插入排序每次都是从未排序的数组中取出第一个进行插入，循环条件为小于号，故不会出现同值元素出现相对位置改变的情况，由此是稳定的。同时适用于顺序和链式两种结构。","s":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":95},{"i":102,"t":"折半插入是对直接插入的一个改进。在直接插入中可以发现，每次都会从子序列开头去查找一个合适插入的位置，这会带来一定的时间消耗，折半插入的改进就在于查找使用了折半查找，二分查找找到合适的位置，然后一次性进行移动。 如下图就是算法模拟步骤。默认第一个元素自成一个子序列，此时待排序指针指向5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8右移一个单位，如下所示，最后将哨兵存储的复制值放到合适的位置即可。 s 折半查找子序列找到合适的位置 右移元素 将哨兵元素插入 1）代码 void InsertSortPlus(int a[],int len){ int i,j,low,high,mid; for(i = 2;i <= len;i++){ a[0] = a[i]; low = 1;high = i - 1; while(low<=high){ mid = (low + high) / 2; if(a[mid] > a[0]) low = mid + 1; else high = mid - 1; } for(j = i - 1;j >= high + 1;j--){ a[j + 1] = a[j]; } a[high + 1] = a[0]; }} 2）时空复杂度 与直接插入排序是一样的。 空间复杂度上O(1)O(1)O(1) 时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性 这是稳定的排序算法，不会改变同大小元素的相对位置，该算法依赖初始状态，在初始相对有序且数据量不大的情况下，表现不错。","s":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":95},{"i":104,"t":"缩小增量排序，具体思想是按照一个增量将排序表分割成若干小组，小组内部进行直接插入排序。一趟完毕后增量减小，继续分组，然后进行内部的直接插入排序。知道增量为1，最后是一次完整的直接插入排序。这样的好处是，让值更大的更快跑到后面，值更小的更快到前面，在数据量大的时候，较为优秀。 info 确定初始增量，这里随便写n/2，然后对排序表按照增量分组 各组内进行一趟插入排序 增量缩小，n/2 重复步骤2，知道增量变成1 1）代码 void ShellSort(int a[],int len){ int gap,i,j; //分别定义增量和两个循环变量 for(gap = len/2;gap>=1;gap = gap/2){ //增量减小 for(i = gap+1;i<=n;i++){ //gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的pic辅助理解) if(a[i] < a[i-gap]){ //组内前一个元素大 a[0] = a[i]; //哨兵 for(j = i-gap;j>0 && a[0]<a[j];j -= gap) a[j+gap] = a[j]; a[j+gap] = a[0]; } } }} 这里随便拿两个图来看下希尔排序中i指针，在前移的过程都会进行一次组内排序。不是我们手工算的一次就直接把组内给排好的。 这里看出来49-27-76-65是一组的，此时i=3，j=1，所以要进行插入排序。 完了之后指针i向前走到4，切换到另一个组 此时对另一个组进行排序。i++后指向5，对前一个组进行排序，只不过前一个表是27-49，这次变成了27-49-76，依次类推，当i为7的时候，组内元素齐整了。 2）时空复杂度、稳定性 空间只用了一个哨兵，为O(1)O(1)O(1) 时间复杂度在数学上未能解决，分析没有结果，只知道n在某个范围的时候，时间复杂度为O(n1.3)O(n^{1.3})O(n1.3)，最坏情况是O(n2)O(n^2)O(n2) 不稳定，且只适用于顺序表","s":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":95},{"i":106,"t":"根据序列中两个元素的比较结果来交换两者的位置，所以叫交换排序。两种算法：冒泡和排序，冒泡随便，快排重点，算法题爱考","s":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":95},{"i":108,"t":"直接看图理解： 每次都把最小（大）的冒上去 1）代码 void swap(int &a,int &b){ int temp = a; a = b; b = temp;}void BubbleSort(int a[],int len){ bool = flag = false; for(int i = 0;i<n-1;i++){ for(int j = n-1;j>i;j--){ if(a[j] < a[i]) //这里的小于是确保稳定性的 swap(a[j],a[i]);flag = true; } if(!flag)return ; }} 2）时空复杂度、稳定性 空间复杂度为O(1)O(1)O(1) 最好情况下，本来就有序O(n)O(n)O(n)，否则则进行n-1躺排序，第i躺排序要进行n-i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n-1}(n-i) = \\frac{n(n-1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为O(n2)O(n^2)O(n2)，其中每次都要移动元素三次，总移动次数为比较次数的三倍 稳定","s":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":95},{"i":110,"t":"1）分而治之 快排的基本思想是分治，一个待排序表L[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得L分为两块：L[1....k-1]和L[k+1...n]，其中L[k]为pivot，使得左边表的值都小于pivot，右边都大于。然后分别再对这两个表执行上面的操作。直到每个部分只有一个元素。 2）交换 知道了分治排序，那么如何高效的将表一分为二呢？使用两个指针low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j谁有坑，另一个就得去找元素填坑。按照下面的步骤执行交换 若此时指针low的位置有坑： high向前移动，直到遇到第一个比pivot小的元素 将high位置的元素拿走（挖坑），去填low 同时low++ 若此时指针j的位置有坑： low向后移动，直到遇到第一个比pivot大的元素 将low位置的元素拿走，填high 同时high-- 3）代码 理解了分治和交换，代码如下： 先看交换部分的： int Partition(int a[],int low,int high){ int pivot = a[low]; while(low < high){ while(low<high && a[high]>=pivot) --high; //后面找元素填前面 a[low] = a[high]; while(low<high && a[low]<=pivot) ++low; //前面找元素填后面 a[high] = a[low]; } a[low] = pivot; return low;} 快排： void QuickSort(int a[],int low,int high){ if(low < high){ int pivotpos = Partition(a,low,high);//找到第一次的枢轴值点 QuickSort(a,low,pivotpos - 1); //左排序 QuickSort(a,pivotpos + 1,high); //右排序 }} 3）时空复杂度、稳定性 算法是递归的，需要一个递归栈开销，容量和递归调用的最大深度一致。最好情况下位O(log2n)O(log_{2}n)O(log2​n)，最坏需要n−1次递归调用，所以栈为O(n)n-1次递归调用，所以栈为O(n)n−1次递归调用，所以栈为O(n)，平均是O(log2n)O(log_{2}n)O(log2​n) 最坏请跨国下的时间复杂度为O(n2)O(n^2)O(n2)，理想情况是O(nlong2n)O(nlong_{2}n)O(nlong2​n) 不稳定 所有内部排序中平均性能最优","s":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":95},{"i":112,"t":"每一趟选择从待排序的元素中选取最小（大）的作为有序序列的第i个元素。分选择排序和堆排序，堆排序是重点。","s":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":95},{"i":114,"t":"跟插入排序是挺类似的，都是从待排序的序列中拿一个元素放到前面去。但是要进行区分的是，插入排序是，i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i指向的位置元素进行交换。 此时38和27进行交换（因为27最小） 按照这样执行n-1次即可 当前指向a[i]，则从a[i.....n-1]中寻找最小的元素a[k] 交换a[k]和a[i] 待排指针i前移（i++），重复上述操作 1）代码 void SelectSort(int a[],int len){ for(int i = 0;i<n-1;i++){ int min = i; for(int j = i+1;j<n;j++){ if(a[j]<a[min]) min = j; } if(i!=min) swap(a[i],a[min]); }} 2）时空复杂度分析 没有借助辅助空间，空间复杂度为O(1)O(1)O(1) 每次进行三个元素的移动，一共n-1躺，一共移动3(n-1)次元素 元素的比较次数和初始状态没有关系一共进行n(n−1)2\\frac{n(n-1)}{2}2n(n−1)​，故时间复杂度为O(n2)O(n^2)O(n2) 不稳定","s":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":95},{"i":116,"t":"1）堆 将堆看成一棵完全二叉树，其中二叉树满足性质：任意一个非根节点都小（大）于其根节点。简单来说就是每个根，存放的是该根为根节点的树中最大（小）的值。其中根最大的叫大根堆，最小的叫小根堆。如下是一个大根堆： 2）如何造堆： 这里说的是大根堆的，小根堆跟大根堆差不多。 先将数据表表示成完全二叉树的格式 最树的最后一棵子树开始，从后往前调整 3）处理上升和下坠： 若当前处理的根节点的小于左右孩子中的最大值，那么最大值会替换根节点的值，同时让根节点下坠 根节点下坠的过程，从上往下进行继续进行上述的操作1，如果有比自己还大的孩子，就下坠，直到找到合适的位置 这里贴几个图： 初始处理倒数第一棵子树 处理可能要下坠的情况，这里处理到了最后一棵树，53＜87，所以要下坠 53下坠到原87的位置，发现这棵子树不符合，所以继续下坠。 53放到了合适的位置，大根堆构建结束。 4）造堆的代码 先来看一下树中儿子和父亲的关系函数： 1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为\\frac{i}{2}向下取整 \\\\ & 2.若i为奇数则双亲为\\frac{(i-1)}{2} \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 其中要注意的是数组a是从0开始存储还是1开始存储，对应的表达式会有改变。 要点： 若表长为len，那么第一棵子树的根节点下表为len/2，从这里开始调整 若根节点需要下坠，把最大值放到根节点位置 根节点下坠到缺空处，此时需要调整指针标记值，去判断下坠位置时候符合大根堆的条件 void BuildMaxHeap(int a[],int len){ for(int i = len/2;i>0;i++) //第一棵子树的根节点下表为len/2，从这里开始调整 HeadAdjust(a,i,len);}void HeadAdjust(int a[],int k,int len){ a[0] = a[k]; //复制一份当前处理节点数据，后面交换后会被覆盖 for(int i = k*2;i<len;i*=2){ //k*2直接指向其左孩子，每次循环开始都会向下走一层 if(i<len && a[i]<a[i+1]) i++; //i标记的是左右孩子哪个更大 if(a[0]>a[i])break; //根最大，满足，不处理 else{ a[k] = a[i]; //根小孩子大，孩子上去 k = i; //将根的指针指向这个孩子的，重新循环判断寻找初始根应该放的位置 } } a[k] = a[0] } 5）堆排序 已经造好了大根堆 输出堆顶元素（堆定元素和堆底元素在完全二叉树的逻辑上进行互换） 调整大根堆 循环1和2 void HeapSort(int a[],int len){ BuildMaxHeap(a,len); for(int i = len;i>n;i--){ swap(a[i],a[1]); HeadAdjust(a,1,i-1); }} 6）时空复杂度、稳定性 空间上借助常数个空间单元O(1)O(1)O(1) 建堆时间O(n)O(n)O(n)调整时间为O(h)O(h)O(h)，最好、最坏、平均情况下的时间复杂度都是O(nlog2n)O(nlog_{2}n)O(nlog2​n) 不稳定","s":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":95},{"i":119,"t":"将两个（或多个，取决于归并路数）有序表，合并成一个新的有序表，看个图理解： 以上是二路归并，初始每个元素独立为一个有序表，则取两两合并，如有剩下不成组则单独为一组，n路归并同理。直到归并成一个完整的有序表。 1）归并 如何合并两个有序表长度分别问n和m 需要一个辅助数组b存放两个表 两个指针p1和p2分别指向两个有序表的起始位置 比较b[p1]和b[p2]，较小者放入a中，同时指针后移 当出现某一个表已经复制完了，剩下的表直接将剩余元素按序复制到a中 图例： 这是初始状态。 复制元素，指针后移，继续比较。 当一个表复制完了，剩下的直接复制进去。 3）归并代码 int *b = (int *)malloc(sizeof(int)*(n+1)); // 辅助数组void Merge(int a[],int low,int mid,int high){ //mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high] int i,j,k; for(k = low;k<=high;k++) //复制元素 b[k] = a[k]; for(i = low,j = mid+1,k = i;i<=mid && j<=high;k++){ //i做前段指针，j做后段指针 if(b[i]<=b[j]) a[k] = b[i++]; else a[k] = b[j++]; } //两种情况复制剩下的 while(i<=mid) a[k++] = b[i++]; while(j<=high) a[k++] = b[j++];} 4）n路归并排序 这里以2路归并，基于分治思想，将n个元素分解成n/2个子表，两两归并。几路就按几个元素一组来划分。 void MergeSort(int a[],int low,int high){ if(low<high){ int mid = (low+high)/2; MergeSort(a,low,mid); MergeSort(a,mid+1,high); Merge(a,low,mid,high); }} 5）时空复杂度、稳定性 需要n个辅助单元，空间复杂度O(n)O(n)O(n) 每趟归并的复杂度为O(n)O(n)O(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为O(nlog2n)O(nlog_{2}n)O(nlog2​n) 稳定","s":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":95},{"i":121,"t":"基数排序不基于比较和移动进行排序，按照关键字各个位置的大小进行比较。如果按0~999的数来比较，个人理解为，分别按个十百或者百个十进行比较。有两种关键字排序法： 最高位优先：从高位开始排序 最低位优先：从低位开始排序 1）举个🌰： 有520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999中，个十百各排序一次，需要三次。 基于上述的顺序，进行个位的分配，如下第一趟： 接下来将各个队列的值串起来（收集），从前往后： 接下来，基于这个顺序进行百位的分配和收集： 最后进行百位的分配和收集： 2）具体过程 感觉通过上面的例子都会理解了，这里还是按过程随便写一下。 给定长度n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d-1},k_j^{d-2},k_j^{d-3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0​)组成 其中，0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0 \\le k_j^{i} \\le r-1 (0 \\le j \\le n,0 \\le i \\le d-1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r称为基数 有点难说，简单认为就是，一个关键字有多少位就是几元组，关键字中的任意一位的取值范围最大值就是基数r。上述的520就是三元组，基数。 基数排序得到递减序列的过程： 设置r个空队列Qr,Qr−1.......Q0Q_r,Q_{r-1}.......Q_0Qr​,Qr−1​.......Q0​ 按各个关键字位权重递增次序，就是个十百的顺序，对关键字分配和回收 分配：如果当前处理的关键字位是n就挂到队列n的队尾中，比如520的个位是0，就挂0队列 回收：从前到后将队列元素出队，串起来 3）时空复杂度、稳定性 空间需要r个队列，Q(r)Q(r)Q(r) 需要进行d躺排序，一次分配要Q(n)Q(n)Q(n)，一次收集要Q(r)Q(r)Q(r)，所以时间复杂度为O(d(n+1))O(d(n+1))O(d(n+1)) 稳定 4）应用 基本不考大题，了解手算，一般适用于那种有关键字的比较，年月日、身份证这种。","s":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":95},{"i":123,"t":"算法 时间复杂度 空间复杂度 稳定性 最好 最坏 平均 直接插入 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 折半插入 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 希尔 \\ \\ O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 冒泡 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 快排 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(log2n)O(log_{2}n)O(log2​n) 不稳 简单选择 O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 堆 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(1)O(1)O(1) 不稳 2路归并 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n)O(n)O(n) 稳 基数 O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(r)O(r)O(r) 稳","s":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":95},{"i":125,"t":"1）希尔 2）快排 3）简单选择 4）堆","s":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":95},{"i":127,"t":"顺序表结构 直接插入、折半插入、希尔、冒泡、快排、简单选择、堆、归并、基数 链表结构 直接插入、冒泡、简单选择、基数（可能降低效率）；（快排、希尔、归并、堆都可以用，但是不推荐）","s":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":95},{"i":132,"t":"数据就是信息的载体，描述客观事物的数字、字符和所有能输入到计算程序识别和处理符号的集合。 数据元素是数据的基本单位，通常当做一个整体来考虑的。例如一个简单的排队单子： 号码 取号时间 前面排队人数 上述就是数据元素，数据元素内的就是数据项 数据对象是具有相同性质的数据元素的集合，数据对象是数据的一个子集。","s":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":128},{"i":134,"t":"分为逻辑结构、物理结构、数据的运算 逻辑结构 逻辑结构可以理解为数据之间的逻辑关系，类似于函数之间的关系，一对一或者多对多之类 物理结构 物理结构就是存储结构，就是数据存储的方式，分为： 顺序存储：物理上是连续的 链式存储：不一定连续，采用指针连接 索引存储：有一个索引表，表中每项成为索引项，一般是关键字或者地址，能够快速查找 散列存储：哈希算法，散列存储 数据运算 关注的是数据之间的操作","s":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":128},{"i":138,"t":"基础的认知就是，算法是解决一个问题的方式方法，例如解决二元方程组的通用公式，这个方法就是一个算法。在计算机中，算法指的是高效处理数据，解决实际问题。 公式：程序 = 数据结构 + 算法 算法是对特定问题求解的一种描述。 例如：写一个求解最年轻富豪的程序 由公式得：设计数据结构个人信息数据元素： 个人信息 年龄 身家 设计算法： step1：对根据年龄排序 step2：输出对应的数据元素项 评价算法的两个标度：时间复杂度和空间复杂度","s":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":128},{"i":140,"t":"1.概念​ 事前预估算法的时间开销（T）与问题规模（N）的关系，T就是时间。说白了就是分析代码，算一下N情况下要花多少时间。 2.方法​ 分析代码中的执行情况，一般重点就是在循环次数、循环条件、循环内部的操作。当N足够大的时候去分析执行时间。采用大O表示法。两个结论： 可以只考虑阶数高的部分 常数项可以忽略 3.两个运算规则：​ 多项相加，取最大的 多项相乘，取乘积结果 4.常用比较：​ O(1)<O(log2n)<)(n)<O(nlong2n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)O(1)<O(log_2 n)<)(n)<O(nlong_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)O(1)<O(log2​n)<)(n)<O(nlong2​n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) 简单结论：常对幂指阶","s":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":128},{"i":142,"t":"Foundation 数据结构 算法 KMP定位子串","s":"KMP定位子串","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"","p":141},{"i":144,"t":"一种很基础朴素的方法就是暴力匹配，采用定长顺序存储结构，不依赖于串的操作进行暴力匹配。 算法思想 ：采用暴力匹配的方法，对主串和模式串设置i和j两个指针，从左到右一个一个进行匹配，当出现不匹配时，主串指针回溯，模式串从新开始进行匹配。 初始处理： 进行匹配： 指针回溯： 指针回溯： 代码如下 int Index(String S,String T){ int i = 1,j = 1; while(i <= S.len && j <= T.len){ if(S.ch[i] == T.ch[i]){ // 匹配则指针向前移动 ++i; ++j; } else{ i = i - j + 2; //指针回溯 j = 1; } } if(j > T.len)return i - T.len; //匹配成功返回第一个定位 return 0;} 时间复杂度分析：分析最坏时间复杂度，如果主串前部分一直和模式串不能匹配，则指针会一直进行回溯，直到进行到最后的串，成功匹配，此时的时间复杂度取决于主串S和模式串T的长度n和m。时间复杂度为O(nm)O(nm)O(nm)","s":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":141},{"i":146,"t":"很显然如果采用暴力算法，当主串和模式串不长的情况下，时间复杂度还算可行，但是一旦长度很长，时间开销将会很大。于是三位大牛：D.E.Knuth、J.H.Morris和V.R.Prat一起发明了KMP算法，致力于解决这个主串指针回溯的问题来降低时间开销。KMP算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。KMP算法详解-彻底清楚了(转载+部分原创) - sofu6 - 博客园 (cnblogs.com)","s":"2.KMP","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#2kmp","p":141},{"i":148,"t":"算法思想：算法思想是按照我个人理解，KMP的核心就是基于朴素匹配算法，解决其主串指针回溯，从而降低时间开销。 过程描述对于S和T的匹配，当有相同部分，则指针将会向前移动，当出现不匹配时，是否有必要进行回溯呢？答案当然是否，因为对于主串来说，对于匹配的部分是已知信息，能否根据已知信息来判断模式串指针的下一步移动呢，从而达到降低时间复杂度的效果。由此，主串指针是不需要移动的，只需要根据已知信息来判断模式串的指针移动即可。 通过如下图片来感受下KMP的简化： 从上图发现当移动到C和D时，不匹配，肉眼观察，可以直接将j移动成如下的情况： 为什么呢？因为肉眼观察，前面的ABA是匹配的鸭！ 从上述的过程分析，我们可以发现当匹配失败时，j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k个字符是一样的。使用数学公式进行如下描述： ch[0...k−1]=ch[j−k...j−1]ch[0...k-1] = ch[j-k...j-1]ch[0...k−1]=ch[j−k...j−1] 使用如下图片进行理解： 通过上述的分析，我们可以发现，进行匹配的过程中，对于主串的指针，是一往无前，无需回溯的，算法的核心在对于模式串的指针移动，当移动到不匹配的位置时候，需要进行计算，确定指针j的下一步走向。","s":"2.1 算法思想","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#21-算法思想","p":141},{"i":150,"t":"接下来就是重点，我们现在知道了对于算法的核心就是当出现不匹配时候，我们的指针j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next数组的方法。 1.王道老师的方法​ 根据课程的所给方法，我总结一下，该方法的相对直观，在手算中十分方便，目测观察，当主串和模式串出现不匹配时候，观察对于模式串指针，如何移动能使得在下一步匹配前，有较多模式串和主串已经匹配。如下图例，首先要初始化next数组，next数组的1和2无脑填0和1，不要问为什么，很明显，自己推一下即可： 当出现不匹配时候，在不匹配的前段，划一条竖线，观察模式串的指针j移动。 向前移动至2，o不匹配。 再向前移动到1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0的会执行++，所以没有意义) 所以在next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1处。 后面的步骤都是依次类推，该方法适合手算next。 2.重复前后缀计算法​ 当我们匹配模式串和主串到一个不匹配的位置时候，我们要进行指针j的跳转。但是由于前面匹配的信息，我们可以发现 ch[0∼k−1]=ch[j−k∼j−1]ch[0 \\sim k-1] = ch[j-k \\sim j-1]ch[0∼k−1]=ch[j−k∼j−1] 通过下图可以理解更透彻： 根据上图，当匹配到指针j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的AB相等呀，而主串中指针扫过的位置，必有AB匹配，那么我们可以直接跳过前部的AB匹配。我们可以得出公式 当出现S[i]≠T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]\\begin{aligned} &当出现S[i] \\neq T[i] \\\\ &S[i-j \\sim i-1] = T[0 \\sim j-1] \\\\ &其中T[0 \\sim k-1] = T[j-k \\sim j-1] \\\\ &所以S[i-k \\sim i-1] = T[0 \\sim k-1] \\end{aligned}​当出现S[i]=T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]​ 上述公式就是我们求解next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba}。 接下来我们来模拟感受一下这个求解过程。首先next的1和2还是直接填0和1，没有为什么。 我们来看下图 当模式串指针走到j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j-1个字符串有关。我们看前部分字符串，发现共同前后缀是AB，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是C这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是ABC？长度为2，那么next[j+1]就是在next[j]的基础上加1即可，这个是可以递推出来的。我们发现如下规律 当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]\\begin{aligned} &当有T[k] =T[j] \\\\ &可以很快得出next[j]=next[j-1]+1 \\\\ &因为我们可以得出T[0 \\sim k-1] = T[j-k \\sim j-1] (next[j] = k) \\\\ &这时候因为T[k] =T[j] 那我们可以得出T[0 \\sim k-1] + T[k] = T[j-k \\sim j-1] +T[j]\\\\ &也就是T[0 \\sim k] = T[j-k \\sim j] \\end{aligned}​当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]​ 上述讨论的是当T[j] = T[k]的情况，那如果出现不相等的情况，如何处理呢？如下图 对于这种情况，我们执行k=next[k]k=next[k]k=next[k]。为什么呢？我们再来看下图： 当到了T[k]≠T[j]T[k]\\neq T[j]T[k]=T[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是B的位置，此时执行判定T[k]=T[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k = next[k] = 1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0。 阅读文字难以理解，可以参考一个up主的讲解视频KMP算法之求next数组代码讲解_哔哩哔哩_bilibili。","s":"2.2 next数组","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#22-next数组","p":141},{"i":152,"t":"阅读到这里，next数组的求解就算结束了。我们来看下next数组的求解代码： void get_next(String T,int next []){ int j = 1,k = 0; next[1] = 0; while(k<T.len){ if(k==0 ||T.ch[j] == T.ch[k]){ //如果相等 next[++j] = ++k; //next[j+1] = next[j] + 1 } else{ k = next[k]; //回头寻找 } }} KMP算法： int Index_KMP(String S,String T,int next[]){ int i = 1;j = 1; while(i<S.len && j<T.len){ if(j==0||S.ch[i] == T.ch[j]){ ++i; ++j; } else{ j = next[j]; } if(j>T.len) return i - T.len; return 0; }}","s":"2.3 求解代码","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#23-求解代码","p":141},{"i":154,"t":"仔细观察前述的图解跟代码，会发现，尽管主串指针不会回溯，但是模式串中的指针跳转重新匹配的过程中，会出现重复匹配失败的问题，从而浪费时间。例如下图： 我们观察可以发现，匹配C和B时候会发现不匹配，此时的next会跳转到2，从AB再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟AB中的B进行匹配成功的，此时产生了一次无效匹配，然后next到1。 针对next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果T[next[j]]等于T[k]，那么直接跳过这一层匹配，改为T[next[next[j]]即可。也就是跳过了中间无效的T[next[j]]和T[k]的比较。 代码实现 void get_nextval(String T,int nextval[]){ int j = 1,k = 0; nextval[1] = 0; while(j < T.len){ if(j == 0 || T.ch[j] == T.ch[k]){ ++j; ++k; if(T.ch[j] != T.ch[k]) nextval[j] = k; //不相等，则保留原有的最长重复前后缀 else nextval[j] = nextval[k]; //相等那就跳转，减少时间开销 } else k = nextval[k] }}","s":"2.4 next数组优化","u":"/docs/Foundation/数据结构/算法/KMP定位子串","h":"#24-next数组优化","p":141},{"i":159,"t":"s 就是常见的二叉树，除了叶节点外，每个结点都是有两个分支的，这种二叉树也是最好计算的。 1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{aligned} & 1.已知树高求结点总数：sum = 2^h-1\\\\ & 2.已知编号i求双亲：(i/2)向下取整\\\\ & 3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\\\ \\end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1​","s":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":155},{"i":161,"t":"这种二叉树是少了一些结点的满二叉树，每个几点的编号都都跟1~n一一对应，也就是说，只允许在右屁股部分缺少一些叶子节点，注意，少也是少叶子节点。 上述就是一个完全二叉树的例子，需要注意，因为是1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3号结点。","s":"完全二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树","p":155},{"i":163,"t":"以根节点为比较标准，左边的全部结点均小于根节点，右边的全部结点均大于根节点，左右子树又各自为二叉排序树。 可以从性质发现，要找最小的结点，只需去找左子树的最左叶结点即可。同理最大结点在右子树的最右叶结点。","s":"二叉排序树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉排序树","p":155},{"i":165,"t":"树中任意一个结点的左子树和右子树的深度之差不超过1","s":"平衡二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#平衡二叉树","p":155},{"i":167,"t":"1）顺序存储 typedef struct Node{ int data; int isEmpty;}TreeNode; void Init(TreeNode T[],int len){ for(int i = 0;i<len;i++){ t[i].isEmpty = 1; } } bool isEmpty(T[],int x){ if(x>=len || x<1){return ture}; else{ return fasle; }}//找到父节点int findparent(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ index = x/2; if(isEmpty(index))return 0; esle return index; }}//找右孩子int findright(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ right = 2x + 1; if(isEmpty(right))return 0; esle return right; }}//找左孩子int findleft(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ left = 2x; if(isEmpty(left))return 0; esle return left; }}//这里的代码都是按照其实结点从1开始的，如果是0开始的还要进行改变 void PreSearch(T[],int index){ if(isEmpty(index))return ; esle{ visit(T[index]); PreSearch(T[],2*index); PreSearch(T[],2*index + 1); }}//后序跟中序只需要调换顺序即可","s":"二叉树数据结构代码实现","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树数据结构代码实现","p":155},{"i":169,"t":"1、非空二叉树的叶结点等于度为2的结点数加1，即n0= n2 + 1 2、二叉树第k层上最多有2k-1 个结点 3、高度为k的二叉树最多有2k -1个结点 4、对于结点i(i>1)的编码： 1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为i/2向下取整 \\\\ & 2.若i为奇数则双亲为(i-1)/2 \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 5、求树高 log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1","s":"二叉树性质","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树性质","p":155},{"i":172,"t":"“左指针串糖葫芦法” 每个结点左指针指向他的第一个孩子，右指针指向它在树中的相邻右兄弟，左孩子右兄弟规则，构造后的整体看起来就是根节点出发将孩子串了起来，由于这个规则，这是一颗没有右子树的二叉树。","s":"树和二叉树的转换","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树和二叉树的转换","p":155},{"i":174,"t":"”孩子兄弟表示“ 将森林里面的树都变成二叉树，每个根节点都是兄弟，将第一个根节点作为二叉树的根节点，剩下的二叉树都依次接到右子树中。 森林转二叉树 摘下第一个右子树，根节点跟左子树就是第一颗树的二叉树，其剩下的右子树又可以依次进行拆解，直到没有右子树为止。","s":"森林转二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#森林转二叉树","p":155},{"i":176,"t":"树 森林 二叉树 先根 先序 先序 后根 中序 中序","s":"二叉树遍历的对应关系","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#二叉树遍历的对应关系","p":155},{"i":178,"t":"如下是三种实现的数据结构：双亲表示法、孩子表示法、孩子兄弟表示法 1）双亲表示法（顺序存储） 每个结点都设计一个伪指针指向自己的父亲 typedef struct Node{ int data; int parent;}Node*;Node n[maxsize]；for(int i = 0;i < maxsize;i++) n[i].parent = -1; 2)孩子表示法 如上图所示，每个结点后都会串着一串孩子链表 typdef struct Node{ int data; struct Node * next}Child; //对应的是左边的结构，也是一个头的开始typedef struct Tree{ ElmentType data; Child *firstChild;}*TreeList;//树节点 3）孩子兄弟表示法 typedef struct Node{ int data; struct Node* leftchild,nextsibling; //分别指向左边第一个孩子，和右边的兄弟}*Tree;","s":"代码实现树、森林","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#代码实现树森林","p":155},{"i":181,"t":"给出完全二叉树的总结点数，求解叶结点数。对于这种问题可以如下求解： 估计倒数第二层，根据估算求出最后一层有多少个叶结点，反过来求解用了上一层多少个结点，再计算上一层剩下的叶结点数，加上最后一层的结点数即可，数目大设x求解 给完全二叉树的叶结点个数，求解结点数最多的情况，求解： tip 对于这种问题求解，就要考虑完全二叉树的性质，其缺少，只能是缺少右边屁股的叶结点。估计出合适的层次范围(倒数第二层)，然后裂解到最后一层，根据叶结点个数进行分布，计算。注意看看能不能多分裂出来一些，但是叶子结点数仍然不变的情况，这里不要直接死算第一步就结束了，要记得画图观察观察。","s":"完全二叉树求结点","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#完全二叉树求结点","p":155},{"i":183,"t":"给定结点数求树高最大最小的问题： danger 满二叉树的情况下树就是最矮的，反之每一层都有一个度为1的结点时，树最高","s":"树高问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#树高问题","p":155},{"i":185,"t":"1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m，求解 danger 首先要搞清楚谁的右节点(右指针域为空)，对于树来说，转换后的二叉树根节点的右指针域肯定是空的，然后是根节点下来每一个分支都会到最右边的指针域为空。所以右节点的右指针域为空的总数为：非终端结点数+1，二叉树的非终端结点数为：n-m，所以总数为n-m+1 2.对于森林的也是如此，森林先转二叉树然后合并，过程是一样的，求解方法一样。","s":"右节点（右指针域）为空问题","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#右节点右指针域为空问题","p":155},{"i":189,"t":"满足如下条件的就是简单图： 不存在重复边 不存在顶点到自己的表(自环) 多重图： 若图中某两个顶点的边数大于1 允许顶点通过一条边和自身关联 数据结构里面只讨论简单图 子图： G=(V,E)和G′=(V′,E′)G = (V,E)和G^{'}=(V^{'},E^{'})G=(V,E)和G′=(V′,E′) 其中V′是V的子集E′是E的子集V^{'}是V的子集E^{'}是E的子集V′是V的子集E′是E的子集 如果顶点集相同，则是生成子图","s":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":186},{"i":191,"t":"一个路径序列中不存在重复节点的是简单路径 除第一个顶点和最后一个顶点外，其余节点不重复出现的是简单回路","s":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":186},{"i":193,"t":"这些术语跟有向图区分开来 连通 连通图 连通分量 完全图 度 两个顶点可达 图任意两点连通 极大连通子图就是连通分量，要求包含所有边 边数为：n(n-1)/2 度数之和等于边的两倍：Sumn = 2e","s":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":186},{"i":195,"t":"强连通图 强连通分量 完全图 度 v到w和w到v都有路径 极大强连通子图就是强连通分量 边数为：n(n-1) 出度=入度=e","s":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":186},{"i":198,"t":"邻接矩阵是采用二维数组的存储方式来存储图，为v行v列的矩阵，其中若vi到vj有路径，则A[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则A[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则A[i][j]为1，或者是对应的路径权值。 当(vi,vj)是G的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{aligned} &当(v_i,v_j)是G的边，则a[i][j] = 1 \\\\ &否则a[i][j] = 0或无穷 \\\\ \\end{aligned}​当(vi​,vj​)是G的边，则a[i][j]=1否则a[i][j]=0或无穷​ 值可以是权值，有向图和无向图有着一定的区别（无向图对称，可以压缩的），能理解其表达的意思就OK。 随便写个矩阵： [0110000000011000]\\begin{bmatrix} 0 & 1 & 1& 0 \\\\ 0 & 0 & 0 &0 \\\\ 0 & 0 & 0 &1 \\\\ 1 & 0 & 0 &0 \\\\ \\end{bmatrix}⎣⎡​0001​1000​1000​0010​⎦⎤​ 其中当图是无向图的时候，矩阵是对称的。有向图则不一定，有向图中，行代表顶点的出，列代表顶点的入，比如上述矩阵，顶点v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1​的一条边。 typedef struct{ char vex[N]; int weight[N][N]; //N*N邻接矩阵，每条边的权值用int变量表示 int vexnum,arcnum; //图的当前顶点数和弧数}MGraph; 空间复杂度：显而易见空间复杂度跟顶点个数有关，为O(n2)O(n^2)O(n2) 对于AnA^nAn的元素An[i][j]A^n[i][j]An[i][j]表示的是由顶点i到j长度为n的路径有多少条。该结论了解即可 邻接矩阵适用于存储相对稠密的图。","s":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":186},{"i":200,"t":"看下图理解： 设计顶点表结点和边表结点来存储。顶点表节点由顶点域和指向第一条邻接边的指针构成，包含(顶点域data，边表头指针first)。边表结点中包含指向下一跳邻接边的指针。 typedef struct ArcNode{ //边表 int vexIndex; int weight; struct ArcNode *next; //指向下一个边表结点}ArcNode; typedef struct VNode{ //顶点表 char data; ArcNode *first; //指向第一条依附该顶点的弧的指针}VNode;typedef struct{ VNode vex[N]; int vexnum,arcnum; //图的顶点数和边数} ALGraph; //ALGraph是以邻接表存储的图类型 空间复杂度：空间复杂度跟顶点个数和边数有关，若为有向图则O(∣V∣+∣E∣)O(|V|+|E|)O(∣V∣+∣E∣)若为无向图则O(∣V∣+2∣E∣)O(|V|+2|E|)O(∣V∣+2∣E∣)。","s":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":186},{"i":203,"t":"1）树的广搜 广度优先搜索遍历是在各种算法中广泛应用的一种优先遍历算法。就是往宽了去搜索，再搜索下一层。 若树非空，根节点入队 若队列非空，队头元素出队并且访问，同时将其孩子入队 重复2直到队列为空为止 树的BFS借助了队列的帮助，与此同时因为树中不存在回路，搜索到相邻节点的时候不可能搜索到已经访问到的节点。 2）图的广搜 在图中，广度优先搜索会面临一个问题就是图若存在回路，会重复访问到已经访问过的结点，从而带来不必要的时间开销，此处需要设计一个辅助数组来标记是否被访问过，其余的思想与树的层次遍历思想大致相同，从一个节点开始，访问其邻接点，依次进行。具体思想如下： 从起始节点开始找到与顶点相邻的所有顶点(过程会有入队和出队操作) 辅助数组标记 循环递归 需要借助辅助队列 bool visited[MAX_SIZE];void BFSTraverse(Graph G){ for(i = 0;i<G.vexnuml;i++) visited[i] = fasle; InitQueue(Q); for(i = 0;i<G.vexnum;i++){ if(!visited[i]) BFS(G,i); }}void BFS(Graph G){ visit(v); visited[v] =true; EnQueue(Q,v); while(!isEmpty(Q)){ DeQueue(Q,v); for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)){ if(!visited[w]){ visit(w); visited[w] = true; EnQueue(Q,v); } } }} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：空间开销来源于辅助队列，故空间开销为O(∣V∣)O(|V|)O(∣V∣)。","s":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":186},{"i":205,"t":"图的DFS就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟BFS一样同样需要一个标记数组来标记节点是否被访问过。如下是伪代码： bool visited[MAX_SIZE];void DESTralverse(Graph G){ for(v = 0;v<G.vexnum;++v) visited[v] = false; for(v = 0;v<G.vexnum;++v) if(!visited[w]) DFS(G,v);}void DFS(Graph G,int v){ visit(v); visited[v] = true; for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)) if(!visited[w]) DFS(G,v);} 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：DFS算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为O(1)O(1)O(1)，平均的为O(∣V∣)O(|V|)O(∣V∣)。","s":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":186},{"i":207,"t":"包含所有顶点的极小连通子图子图，其中结点数为n，边数为n-1，少一条边非连通，多一条边有回路。其具有性质： 不一定唯一 不唯一但是权值之和唯一(存在权值相同的边时会存在不唯一) ∣E∣=∣V∣−1|E| = |V| -1∣E∣=∣V∣−1 最小生成树的两种算法：“普利姆(Prim)和克鲁斯卡尔(Kruskal)”","s":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":186},{"i":209,"t":"这个算法是选点的算法，一开始选择一个顶点加入集合SSS，此时树中只有一个顶点，然后从剩余顶点集合TTT中选取相距树中顶点集合最近的点，并且将该边加入集合SSS中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n-1n−1次后得到最小生成树。","s":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":186},{"i":211,"t":"Prim是选点，而Kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n-1n−1次即可。","s":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":186},{"i":213,"t":"耳熟能详的算法了，大致了解算法思路，用个人理解简述： 两个集合SSS和VVV分别用来记录已选结点和剩余结点 选定初始结点v0v_0v0​加入SSS，计算出v0v_0v0​到各可达结点的距离 选出距离最短的结点vsv_svs​加入SSS 因为加入了vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来A到D距离是10，但是加入了B后，通过A->B->D的距离是5，距离更短，所以要更新) 跳转到3，执行n−1n-1n−1次即可计算出到每个节点的最短距离(可能存在不可达) 本质是贪心，时间复杂度两种数据结构都是O(∣V∣2)O(|V|^2)O(∣V∣2) 看个例子就明白了： 顶点（这一列不包含起点） 第 1 轮 第 2 轮 第 3 轮 第 4 轮 第 5 轮 第 6 轮 第 7 轮 0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ 2 4 1→2 已完成 已完成 已完成 已完成 已完成 已完成 3 ∞ ∞ 7 1→5→3 7 1→5→3 已完成 已完成 已完成 4 ∞ 13 1→2→4 13 1→2→4 13 1→2→4 13 1→2→4 已完成 已完成 5 5 1→5 5 1→5 已完成 已完成 已完成 已完成 已完成 6 5 1→6 5 1→6 5 1→6 已完成 已完成 已完成 已完成 7 ∞ ∞ ∞ ∞ ∞ 14 1→2→4→7 已完成 集合S {1, 2} {1,2,5} {1,2,5,6} {1,2,5,6,3} {1,2,5,6,3,4} {1,2,5,6,3,4,7} {1,2,5,6,3,4,7,0}","s":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":186},{"i":216,"t":"顶点VVV表示事件，<Vi,Vj><V_i,V_j><Vi​,Vj​>的这样一条边表示活动VjV_jVj​必须要ViV_iVi​在它之前执行。这两个节点互为前驱后继。","s":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":186},{"i":218,"t":"一个有向无环图的顶点序列满足以下条件： 每个顶点只出现一次 如果A在B前面，则图中不存在B到A的路径 实现步骤： AOV网中选择一个没有前驱的节点(入度为0) 删除该节点和所有以他为起点的有向边 重复1和2，知道网为空或者网中不存在无前驱的顶点位置（此时必有环） 性质： 一个顶点有多个直接后继的话，则可能导致拓扑序列不是唯一的，如果图内的唯一前驱和后继的话，序列唯一 可以对AOV网进行拓扑排序后重新编号，使得新的图用邻接矩阵存储，此时是三角阵，是可以压缩成上（下）三角的(原理？暂不懂)。由此得到一个充分性结论：邻接矩阵是三角阵则存在拓扑排序。 这里用个例子来看一下： 将这个有向无环图进行压缩存储。 有向无环图，一定可以转化为一个上三角或下三角矩阵。但是需要调整顶点的编号。 如果要用上三角矩阵表示有向无环图的邻接矩阵，可以对图进行拓扑排序，按照拓扑排序序列，重新调整各个顶点的编号。这样可以确保，所有的弧都是从小编号顶点指向大编号顶点，从而也就保证了邻接矩阵可以转化为“上三角矩阵”","s":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":186},{"i":220,"t":"恶心，算四个表，小心计算 1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k) ve(0)ve(0)ve(0)为0 ve(k)=Max[ve(j)+weight(vj,vk)]ve(k) = Max[ve(j) + weight(v_j,v_k)]ve(k)=Max[ve(j)+weight(vj​,vk​)]其中k是j的后继 从头开始顺着算，计算一个事件的最早发生时间就是，找到它的所有前驱，计算其前驱的最早发生时间加上其代价(边权)，存在多个前驱取最大的。 2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k) 终点等于ve(0)ve(0)ve(0) vl(k)=Min[vl(j)−weight(vk,vj)]vl(k) = Min[vl(j) - weight(v_k,v_j)]vl(k)=Min[vl(j)−weight(vk​,vj​)] 从最后开始逆过来算，计算一个事件的最迟发生时间，找到它的所有后继，计算该后继减去代价到该活动点的值，可能有多个后继，取差值最小的。 3）活动aia_iai​的最早开始事件e(i)e(i)e(i) 等于该活动起始点(某事件)的最早发生时间 找边，找起始点，找ve(i)ve(i)ve(i) 4）活动aia_iai​的最迟开始事件l(i)l(i)l(i) <vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i)-weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj​) 找到边，对应的终点，查该事件点的vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i)","s":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":186},{"i":222,"t":"intro","s":"intro","u":"/docs/intro","h":"","p":221},{"i":224,"t":"tip 现在是过去和未来的交点 欢迎来到Rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天Rachel已经老去，但是在一个明媚温暖的午后，他能在开在河边的咖啡店里面，安静地看着自己的历程，感慨过去和未来。","s":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":221},{"i":227,"t":"tip 总会有那么几门基础学科是要学的对吧。 Welcome to Rachel NoteBook!","s":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":225},{"i":231,"t":"数据：数据是数据库中存储的基本对象，描述事物的符号记录称为数据，数据的含义称为数据的语义 数据库（DB）：数据库是长期储存在计算机内、有组织的、可共享的大量数据集合 数据按照一定数据模型组织、描述和存储 具有较小的冗余度 较高的数据独立性 易扩展性 永久存储、有组织、可共享 数据库管理系统（DBMS）：数据库管理系统是位于用户与操作系统之间的一层数据管理软件 数据库系统（DBS）：由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统 物理独立性：用户的应用程序与存储在磁盘上的数据库中的数据是相互独立的，数据的物理存储改变了，但是其应用程序不用改变 逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的，数据的逻辑结构变了，但是应用程序可以不变","s":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":228},{"i":233,"t":"关系：只包含单一的数据结构，用户视角来看就是一张数据库的表 域、笛卡尔积：数据的取值范围叫做域、笛卡尔积就是配对乘起来 元组和属性：元组就是表中的一行，属性就是表中的一列","s":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":228},{"i":235,"t":"实体完整性：如果属性A是关系R的主属性，A不能为NULL 参照完整性：关系R和关系S，若R中的主键A与S中的B对应，则称B为关系S中的外码，对于S中元组中B的值： 为空（NULL） 等于关系R中主键A的值 关系代数：并交差和笛卡尔 选择：σ\\sigmaσ (选择条件)(表名)，选择符合条件的一行元组 投影：π\\piπ (列名)(表名)，选择符合条件的一列 连接：将两个关系的笛卡尔积中选取属性间符合条件的一些元组，理解成SQL语句中的表连接 除：有点抽象，理解成关系里面的差运算，关系R和关系S，R÷S=T，首先找到R和S共同的属性C，然后在R中找到 不属于C中的属性T，T和S的组合要全部出现在R中","s":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":228},{"i":238,"t":"create table <表名>( 列名 数据类型（integer、varchar、等等）not null, ..............., ..............., primarry key(key1,key2....), //主键 foreign key(key1) references 表2(key1) // 外键) 修改表： alter table <表名> add 列名 数据类型 约束条件（主键、不为空等等） add 约束 drop 列名 [cascade|restrict]（ cascade就是删除引用该列的其他对象，例如视图）（restrict如果该列有其他对象引用，则拒绝删除该列） drop constraint 完整性约束 alter 列名 数据类型","s":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":228},{"i":240,"t":"模板 select a,b,c from table_1,table_2 where 条件语句 group by 分组列名 having 分组条件 order by 排序列名 desc|asc where：添加查询条件 between x1 and x2 x1~x2范围内 in 嵌套语句中使用，可以筛选例：select Sname,Ssex from Student where Sdept in( select Sdept from Course where core>=30 )not in 不在like 用于字符串匹配，基本不用 group by：查询出来的元组按某列进行分组 order by：按某列的属性值进行排序 表连接： 自身连接，两张一样的表，通过条件语句连接 select a.cno,b.cpno from Course a,Course b where a.Cpno = b.Cno 外连接，两张或多张不一样的表通过条件语句连接，一般采用left join on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为NULL select Student.Sno,Sname,Ssex from Student left join SC on Student.Sno = SC.Sno 聚集函数 count(*)avg(*)max(*)min(*) 集合查询 查询语句1union|intersect|except（并、交、差）查询语句2 插入数据 insert into <表名> 列1，列2，.... values(值1，值2.....) 更新数据 update <表名>set 列名 = 操作（加减乘除都可以）where 条件（此处可以嵌套in配合select查询）例：update SCset grade = grade+10where Sno in ( select Sno from Student where Sname = '牛顿' ) 删除数据 delete from 表名where 条件删除一行元组","s":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":228},{"i":242,"t":"视图是将几个表导出一些数据的表，是虚表，不是实际存在的。类似一个窗口，透过它可以看到数据库中自己感兴趣的那部分数据的变化，经过定义后，这个虚表也可以查询和删除。 create view <视图名>as<查询语句>[with check option]加入这个语句的话，进行UID的时候，需要满足子查询中的条件例：create view IS_studentas select Sno,Sname,Sage //通过这种方式就不用再view那里写列名式子 from Student where Sdept=‘IS’例：将学生的学号及平均成绩定义为一个视图create view S_Gas select Sno,avg(Grade) from SC group by Sno","s":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":228},{"i":245,"t":"函数依赖：数据表中，给定一个属性X，唯一确定一个Y，则X函数确定Y或者Y函数依赖于X，X->Y。也就是对于一个函数F，给定F(X)=Y 非平凡的函数依赖：平凡函数依赖就是(A,B)->A|B|A,B。非平凡就是 (A,B)->C 完全函数依赖：(A,B)->C，少了A或者B都推不出来C 部分依赖：(A,B)->C，同时A|B->C 传递函数依赖：A->B,B->C，且B推不出A，则C对于A传递函数依赖 候选码：K能够完全函数依赖整个关系集R，K的闭包完整退出R 主属性：候选码中的都是主属性，无论是否入选主码","s":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":228},{"i":247,"t":"Math DeepLearning 图像分割评价指标","s":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"","p":246},{"i":249,"t":"IoUIoUIoU的计算公式为：IoU=∣A∩B∣A∪BIoU = \\frac{|A \\cap B|}{A \\cup B}IoU=A∪B∣A∩B∣​其中分子代表的是真实标注和模型预测的交集面积，即重叠区域。分母代表真实标注和模型预测的并集面积。具体解释为：衡量标注数据集和模型预测的肿瘤区域之间有多大的重合程度，更关注预测和标注的重叠，注重局部精度，对边缘和细节分割更加敏感，反应分割结果的准确性和覆盖度，也就是衡量模型预测结果“精不精”能力的。","s":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":246},{"i":251,"t":"DiceDiceDice系数的计算公式为：IoU=2∣A∩B∣∣A+B∣IoU = \\frac{2|A \\cap B|}{|A + B|}IoU=∣A+B∣2∣A∩B∣​ 其中分子代表真实标注和模型预测的交集面积的两倍，也就是重叠区域的两倍。分母代表真实标注和模型预测两者的面积总和。总的来说这个指标是“相似度”的度量，反映的是预测和标注之间的相似程度，也就是衡量模型预测结果“像不像”能力的。","s":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":246},{"i":253,"t":"RecallRecallRecall系数计算公式为：TP(TP+FP)\\frac{TP}{(TP+FP)}(TP+FP)TP​ 其中TPTPTP代表的是模型正确预测的样本数，FNFNFN是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80%，可以表示模型在某个分类上的识别能力强弱，指标越高表示分类正确的能力越强。","s":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":246},{"i":255,"t":"AccAccAcc的计算公式为：TP+TNTP+FN+FP+TN\\frac {TP+TN}{TP+FN+FP+TN}TP+FN+FP+TNTP+TN​ 该指标代表的就是模型正确预测的像素点比例，包括肿瘤和非肿瘤的像素比例。综合考虑了识别为肿瘤和非肿瘤的两个能力。简单来说就是模型预测的“准不准”。","s":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":246},{"i":257,"t":"可以发现Dice和IoUDice和IoUDice和IoU是非常相似的两个指标，但是又有着区别，IoUIoUIoU更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。DiceDiceDice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是DiceDiceDice检验识别肿瘤的大致形状，IoUIoUIoU识别肿瘤的整体细节。 而Acc和RecallAcc和RecallAcc和Recall也是非常相似的两个指标，同时也有着区别，RecallRecallRecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是RecallRecallRecall关注的是正向的像素点。而AccAccAcc关注的是模型识别肿瘤和非肿瘤的能力。","s":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":246},{"i":260,"t":"tip Mathematics is the end of all fundamental disciplines 数学是人类对事物的抽象结构与模式进行严格描述、推导的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。 对于我们来说，数学也许繁琐无味，但是确实我们认知世界的一把重要钥匙。 数学的尽头是哲学:数学是一种思维逻辑的集合。它是人类根据观察到的自然现象和自身的体验,用思维来做逻辑的推导和延伸总结出的自然运动规律的抽象结果。而哲学也就是基于人的思维和经验总结自然界和人类社会发展中的规律的学说,即研究该如何去思考和解释所观察和体验到的现象的方法论。","s":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":258},{"i":265,"t":"推荐采用这种方式进行部署，较为方便，采用GitHub提供的托管工具Githubpages进行静态页面部署。 GitHub Pages 是由 GitHub 提供的静态网站托管服务。它允许用户直接从他们的 GitHub 存储库托管他们的网站。GitHub Pages 支持多种静态网站生成器，并提供免费的 HTTPS 加密、自定义域和通过 Git 的版本控制。用户还可以使用 Jekyll，一个流行的静态网站生成器，在 GitHub Pages 上构建他们的网站。另外，GitHub Pages 还内置了持续集成和部署支持，使得每次您将更改推送到存储库时都可以轻松更新您的网站。 但是有一个弊端就是，单纯的Githubpages部署，每次添加新的笔记都得重新推送上远程仓库。","s":"一、GitHubPages","u":"/docs/Web/部署Docsaururs","h":"#一githubpages","p":261},{"i":267,"t":"首先就是在远程建立一个仓库，仓库名为username.github.io，其中设置为你个人的用户名。","s":"1.远程创建仓库","u":"/docs/Web/部署Docsaururs","h":"#1远程创建仓库","p":261},{"i":269,"t":"打开本地写好的项目终端进行远程连接仓库。 git initgit remote add origin \"你的仓库地址\"git add .git commit -m\"提交信息\"git push -u origin main 上述就是将你的代码远程上传到远程仓库了","s":"2.本地连接","u":"/docs/Web/部署Docsaururs","h":"#2本地连接","p":261},{"i":271,"t":"本地首先要进行配置，将你的Docsaururs配置文件进行修改，将config配置中的代码段修改 url: 'https://username.github.io',baseUrl: '/', 改为自己的仓库地址所对应的那个名称就好，这也是部署后的访问地址。 执行 npm run buildgit checkout -b gh-pagesxcopy /E/Y build .rmdir /S /Q buildgit add .git commit -m \"Deploy Docusaurus to GitHub Pages\" git push origin gh-pages 上述代码就是将你的build后的代码上传到gh-pages分支上，接下来你只需要在仓库的setting-> pages->Branch设置为gh-pages分支来作为你的pages读取静态文件的地址即可。 部署成功后，即可通过上述配置文件中的https://username.github.io访问到你的网站。","s":"3.打包部署","u":"/docs/Web/部署Docsaururs","h":"#3打包部署","p":261},{"i":274,"t":"自行购买云服务器和域名，然后对域名进行解析，同时在服务器中下载Nginx并且进行配置。 在Nginx配置文件Nginx.conf中对你的域名和端口进行配置。例如 user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events { worker_connections 1024;}http { server { listen 端口号 default_server; listen [::]:端口号 default_server; root /usr/workspace/RachelNooteBook/usr/workspace/RachelNooteBook/web; index index.html; server_name 域名 www.域名; location / { proxy_pass http://服务器IP; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main;} 通过上述配置好你的Nginx。","s":"1.云服务","u":"/docs/Web/部署Docsaururs","h":"#1云服务","p":261},{"i":276,"t":"在项目根目录下创建文件夹.github/workflows，并且在里面创建nodejs.yml文件，进行自动化部署的配置。 name: FTP Deploy on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: '16.x' - name: Install FTP client run: sudo apt-get update && sudo apt-get install -y lftp - name: Build run: npm install && npm run build - name: FTP Deploy uses: SamKirkland/FTP-Deploy-Action@4.0.0 with: server: 域名 username: ${{ secrets.FTP_USER }} //用户名 password: ${{ secrets.FTP_PWD }} //密码 server-dir: FTP路径 local-dir: build/ 其中的secrets.FTP_USER要在github设置中进行配置，添加action的变量，然后设置好你的FTP的用户名和密码即可。同时要在FTP服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到FTP服务器上。 接下来创建一个简单的.git-ftp-include文件 加入代码： !build/ 这个是默认让其读取build目录下的静态文件。 通过这样配置，推送到远程后，就会自动化的使用action进行部署到你的服务器中，然后通过你的域名就可以正常访问。","s":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docsaururs","h":"#2项目配置action自动化脚本","p":261},{"i":278,"t":"Web 软件工程课设 接口文档","s":"接口文档","u":"/docs/Web/软件工程课设/接口文档","h":"","p":277},{"i":281,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"student\", //用户名 \"password\": \"\", //密码 \"remember\": false //下次自动登录} 返回参数： { \"userName\": \"student\", //用户名 \"imagePath\": \"\", //头像}","s":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":277},{"i":283,"t":"接口地址：/api/student/user/register 请求参数： { \"userName\": \"student5\", //用户名 \"password\": \"123456\", //密码 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":277},{"i":285,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":277},{"i":287,"t":"接口地址：/api/student/dashboard/index 请求参数：无 返回参数： { \"fixedPaper\": [ //固定试卷 { \"id\": 2399, //试卷Id \"name\": \"test33333\", //试卷名称 \"limitStartTime\": null, //考试开始时间 \"limitEndTime\": null //考试结束时间 } ], \"timeLimitPaper\": [] //时段试卷}","s":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":277},{"i":289,"t":"接口地址：/api/student/dashboard/task 请求参数：无 返回参数： [ { \"id\": 8, //任务id \"title\": \"2021-04-25作业\", //任务标题 \"paperItems\": [ { \"examPaperId\": 181, //任务试卷id \"examPaperName\": \"第一次出卷\", //任务试卷名称 \"examPaperAnswerId\": 579, //答卷id \"status\": 2 //答卷状态 } ] } ]","s":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":277},{"i":291,"t":"接口地址：/api/student/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": \"18\", //学科id \"name\": \"英语\" //学科名称 } ]}","s":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":277},{"i":293,"t":"接口地址：/api/student/exam/paper/pageList 请求参数： { \"paperType\": 1, //试卷类型 \"subjectId\": 158, //学科id \"pageIndex\": 1, //页数 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 2520, //试卷id \"name\": \"生理卫生\", //试卷名称 \"questionCount\": 1, //题目数 \"score\": 20, //试卷分数 \"createTime\": \"2021-05-31 13:34:49\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 158, //学科 \"subjectName\": \"英语\", //学科 \"paperType\": 1, //试卷类型 \"frameTextContentId\": 9016 //试卷内容 } ] }}","s":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":277},{"i":295,"t":"接口地址：/api/student/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"测试一\", //试卷名称 \"suggestTime\": 22, //建议时长 \"limitDateTime\": null, //考试时间限制 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 8, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //标题 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //顺序 } ] } ], \"score\": \"10\" }}","s":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":277},{"i":297,"t":"接口地址：/api/student/exampaper/answer/answerSubmit 请求参数： { \"questionId\": null, \"doTime\": 14, //耗时 \"answerItems\": [ { \"questionId\": 4, //题目id \"content\": null, //答题内容 \"contentArray\": [ //填空题内容 \"测试\", \"1\" ], \"completed\": true, //是否完成 \"itemOrder\": 1 //题目序号 } ], \"id\": 4 //试卷id} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"2\" //试卷得分}","s":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":277},{"i":299,"t":"接口地址：/api/student/exampaper/answer/read/4 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"paper\": { //试卷信息 \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 4, //试卷类型 \"name\": \"限时考试二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": [ //考试时间限制 \"2021-06-22 00:00:00\", \"2021-08-06 00:00:00\" ], \"titleItems\": [ { \"name\": \"一、完成题目\", //标题 \"questionItems\": [ //题目列表 { \"id\": 8, //题目id \"questionType\": 4, //题目类型 \"subjectId\": 1, //学科 \"title\": \"曲项向天歌红掌拨清波\", //题目标题 \"gradeLevel\": 1, //年级 \"items\": [ //题目选项 { \"prefix\": \"1\", //选项标识 \"content\": \"鹅鹅鹅\", //选项内容 \"score\": \"2\" //选项分数 }, { \"prefix\": \"2\", \"content\": \"白毛浮绿水\", \"score\": \"2\" } ], \"analyze\": \"咏鹅\", //解析 \"correctArray\": [ //标答 \"鹅鹅鹅\", \"白毛浮绿水\" ], \"correct\": \"\", //标答 \"score\": \"4\", //题目分数 \"difficult\": 4, //题目难度 \"itemOrder\": 1 //题目顺序 } ] } ], \"score\": \"18\" //试卷分数 }, \"answer\": { //答卷信息 \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分 \"answerItems\": [ //答题信息 { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"0\", //得分 \"questionScore\": \"4\" //题目分数 } ] } }}","s":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":277},{"i":301,"t":"接口地址：/api/student/exampaper/answer/edit 请求参数： { \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分数 \"answerItems\": [ { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题目顺序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"4\", //得分 \"questionScore\": \"4\" //题目分数 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"16\" //试卷得分}","s":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":277},{"i":303,"t":"接口地址：/api/student/exampaper/answer/pageList 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 6204, \"list\": [ { \"id\": 6534, //试卷id \"createTime\": \"2021-06-01 17:56:38\", //创建时间 \"userScore\": \"0\", //考试分数 \"subjectName\": \"数学\", //考试学科 \"subjectId\": 129, //学科id \"questionCount\": 1, //题目数量 \"questionCorrect\": 0, //题目正确数 \"paperScore\": \"3\", //试卷总分 \"doTime\": \"4 秒\", //耗时 \"paperType\": 7, //试卷类型 \"systemScore\": \"0\", //系统批改得分 \"status\": 2, //试卷状态 \"paperName\": \"智能训练试卷 - 1845\", //试卷名称 \"userName\": null //用户名 } ] }}","s":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":277},{"i":305,"t":"接口地址：/api/student/question/answer/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 17002, \"list\": [ { \"id\": 24928, //题目id \"questionType\": 1, //题型 \"createTime\": \"2021-06-02 16:07:11\", //创建时间 \"subjectName\": \"语文\", //学科 \"shortTitle\": \"666\" //题干 } ] }}","s":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":277},{"i":307,"t":"接口地址：/api/student/question/answer/select/25067 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"questionVM\": { \"id\": 507, //题目id \"questionType\": 1, //题目类型 \"subjectId\": 46, //学科id \"title\": \"111\", //题干 \"gradeLevel\": 12, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项 \"content\": \"A\", //选项内容 \"score\": null //选项分数 } ], \"analyze\": \"D\", //解析 \"correctArray\": null, //标答 \"correct\": \"D\", //标答 \"score\": \"2\", //分数 \"difficult\": 3, //难度 \"itemOrder\": null //排序 }, \"questionAnswerVM\": { //用户答案 \"id\": 25067, \"questionId\": 507, //题目id \"doRight\": false, //是否正确 \"content\": \"A\", //用户答案 \"itemOrder\": 2, //排序 \"contentArray\": null, //用户答案 \"score\": \"0\", //得分 \"questionScore\": \"2\" //题目分数 } }}","s":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":277},{"i":309,"t":"接口地址：/api/student/user/log 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 1812, \"userId\": 1, //用户id \"userName\": \"student\", //用户名 \"realName\": \"Test\", //用户真实姓名 \"content\": \"student 登录了学之思开源考试系统\", //动态内容 \"createTime\": \"2021-06-08 17:12:50\" //创建时间 } ]}","s":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":277},{"i":311,"t":"接口地址：/api/student/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 }}","s":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":277},{"i":313,"t":"接口地址：/api/student/user/update 请求参数： { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":277},{"i":315,"t":"接口地址：/api/student/user/message/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 5, \"list\": [ { \"id\": 8, \"title\": \"rwerw\", //消息标题 \"messageId\": 10, \"content\": \"sfsdf\", //消息内容 \"readed\": true, //是否已读 \"createTime\": \"2021-06-11 16:32:40\", //创建时间 \"sendUserName\": \"admin\" //发送人 } ] }}","s":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":277},{"i":317,"t":"接口地址：/api/student/user/message/read/14 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":277},{"i":319,"t":"接口地址：/api/student/user/message/unreadCount 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 0 //未读消息数量}","s":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":277},{"i":322,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"admin\", //用户名 \"password\": \"\", //密码 \"remember\": false //记住我} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": null, \"userUuid\": null, \"userName\": \"admin\", //用户名 \"password\": null, \"realName\": null, \"age\": null, \"sex\": null, \"birthDay\": null, \"userLevel\": null, \"phone\": null, \"role\": null, \"status\": null, \"imagePath\": null, \"createTime\": null, \"modifyTime\": null, \"lastActiveTime\": null, \"deleted\": null, \"wxOpenId\": null }}","s":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":277},{"i":324,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":277},{"i":326,"t":"接口地址：/api/admin/dashboard/index 请求参数：无 返回参数： { \"examPaperCount\": 2413, //试卷总数 \"questionCount\": 1025, //题目总数 \"doExamPaperCount\": 6148, //总答卷数 \"doQuestionCount\": 23945, //总题数 \"mothDayUserActionValue\": [ //活跃度 85 ], \"mothDayDoExamQuestionValue\": [ //月做题数 22 ], \"mothDayText\": [ //本月天数 \"1\" ]}","s":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":277},{"i":328,"t":"接口地址：/api/admin/user/page/list 请求参数： { \"userName\": \"\", //用户名 \"role\": 1, //角色 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 81, //总数 \"list\": [ { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } ] }}","s":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":277},{"i":330,"t":"接口地址：/api/admin/user/select/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 }}","s":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":277},{"i":332,"t":"接口地址：/api/admin/user/edit 请求参数： { \"id\": null, \"userName\": \"testzz\", //用户名 \"password\": \"123456\", //密码 \"realName\": \"tesx\", //真实姓名 \"role\": 1, //角色 \"status\": 1, //状态 \"age\": \"\", //年龄 \"sex\": \"\", //性别 \"birthDay\": null, //生日 \"phone\": null, //手机号 \"userLevel\": 1 //年级} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 109, \"userUuid\": \"321dec89-0656-4736-ae4c-e2b07f4fcc67\", //用户id \"userName\": \"testzz\", //用户名 \"password\": \"\" //密码 \"realName\": \"tesx\", //真实姓名 \"age\": null, //年龄 \"sex\": null, //性别 \"birthDay\": null, //生日 \"userLevel\": 1, //年级 \"phone\": null, //手机号 \"role\": 1, //角色 \"status\": 1, //状态 \"imagePath\": null, //头像 \"createTime\": 1624538837259, //创建日期 \"modifyTime\": null, //修改时间 \"lastActiveTime\": 1624538837259, //最后活动时间 \"deleted\": false, //是否删除 \"wxOpenId\": null //微信openId }}","s":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":277},{"i":334,"t":"接口地址：/api/admin/user/delete/3 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":277},{"i":336,"t":"接口地址：/api/admin/user/changeStatus/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 2}","s":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修改","p":277},{"i":338,"t":"接口地址：/api/admin/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 13, //学科id \"name\": \"语文\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\", //年级名称 \"itemOrder\": null, //排序 \"deleted\": false //是否删除 } ]}","s":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":277},{"i":340,"t":"接口地址：/api/admin/education/subject/page 请求参数： { \"level\": null, //年级 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } ] }}","s":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":277},{"i":342,"t":"接口地址：/api/admin/education/subject/select/2 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 }}","s":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":277},{"i":344,"t":"接口地址：/api/admin/education/subject/edit 请求参数： { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 2, //年级 \"levelName\": \"二年级\" //年级名称} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":277},{"i":346,"t":"接口地址：/api/admin/education/subject/delete/3 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":277},{"i":348,"t":"接口地址：/api/admin/exam/paper/page 请求参数： { \"id\": null, \"level\": null, //年级 \"subjectId\": null, //学科 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页数量} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 9, \"list\": [ { \"id\": 13, //试卷id \"name\": \"中级任务二\", //试卷名称 \"questionCount\": 5, //题目总数 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:31\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 13 //试卷内容 } ] }}","s":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":277},{"i":350,"t":"接口地址：/api/admin/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"语文试卷\", //试卷名称 \"suggestTime\": 20, //考试时间 \"limitDateTime\": null, //限时考试 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 5, //题目类型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //题目选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答数组 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"10\" //试卷总分 }}","s":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":277},{"i":352,"t":"接口地址：/api/admin/exam/paper/edit 请求参数： { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ //题目列表 { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //试卷总分} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //题序 }}","s":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":277},{"i":354,"t":"接口地址：/api/admin/exam/paper/delete/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":277},{"i":356,"t":"接口地址：/api/admin/exam/paper/taskExamPage 请求参数： { \"subjectId\": null, //学科 \"level\": 1, //年级 \"paperType\": 6, //试卷类型 \"pageIndex\": 1, //页面 \"pageSize\": 5 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 13, \"name\": \"任务试卷五\", //试卷名称 \"questionCount\": 2, //题目总数 \"score\": 60, //试卷分数 \"createTime\": \"2021-08-02 14:36:26\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 26 //试卷内容 } ] }}","s":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":277},{"i":358,"t":"接口地址：/api/admin/question/page 请求参数： { \"id\": null, \"questionType\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 7, \"list\": [ { \"id\": 13, \"questionType\": 5, //题型 \"textContentId\": null, \"createTime\": \"2021-01-21 11:45:57\", //创建时间 \"subjectId\": 1, //学科 \"createUser\": 2, //创建人 \"score\": \"10\", //得分 \"status\": 1, //状态 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"analyzeTextContentId\": null, //解析 \"difficult\": 3, //难度 \"shortTitle\": \"默写咏鹅\" //题干 } ] }}","s":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":277},{"i":360,"t":"接口地址：/api/admin/question/select/508 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 508, //题目id \"questionType\": 5, //题型 \"subjectId\": 4, //学科 \"title\": \"<p>什么是快乐星球？</p>\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"照抄即可\", //解析 \"correctArray\": null, //标答 \"correct\": \"什么是快乐星球\", //正确答案 \"score\": \"5\", //题目分数 \"difficult\": 5, //难度 \"itemOrder\": null }}","s":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":277},{"i":362,"t":"接口地址：/api/admin/question/edit 请求参数： { \"id\": 13, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //正确答案 \"score\": 10, //题目分数 \"difficult\": 3, //难度 \"itemOrder\": null} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":277},{"i":364,"t":"接口地址：/api/admin/question/delete/7 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":277},{"i":366,"t":"接口地址：/api/admin/task/page 请求参数： { \"gradeLevel\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, //任务id \"title\": \"中级任务\", //任务标题 \"gradeLevel\": 1, //年级 \"createUserName\": \"admin\", //创建人用户名 \"createTime\": \"2021-01-21 11:50:24\", //创建时间 \"deleted\": false //是否删除 } ] }}","s":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":277},{"i":368,"t":"接口地址：/api/admin/task/select/22 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 12, //年级 \"title\": \"考试\", //任务标题 \"paperItems\": [ { \"id\": 592, //试卷id \"name\": \"考试\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 275, //试卷分数 \"createTime\": \"2021-08-12 15:02:50\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 46, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 2897, //试卷内容 \"allClasses\": null } ] }}","s":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":277},{"i":370,"t":"接口地址：/api/admin/task/edit 请求参数： { \"id\": 13, \"gradeLevel\": 1, \"title\": \"中级任务\", \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ]} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 1, //年级 \"title\": \"中级任务\", //任务标题 \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] }}","s":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":277},{"i":372,"t":"接口地址：/api/admin/task/delete/1 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":277},{"i":374,"t":"接口地址：/api/admin/message/page 请求参数： { \"sendUserName\": null, \"pageIndex\": 4, \"pageSize\": 10} 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 36, \"list\": [ { \"id\": 13, //消息id \"title\": \"你好，同学！\", //消息标题 \"content\": \"考试请不要作弊\", //消息内容 \"sendUserName\": \"admin\", //发送人用户名 \"receives\": \"student\", //接收人用户名 \"receiveUserCount\": 1, //接收人数量 \"readCount\": 1, //已读数量 \"createTime\": \"2020-09-22 11:37:49\" //创建时间 } ] }}","s":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":277},{"i":376,"t":"接口地址：/api/admin/message/send 请求参数： { \"title\": \"全校师生请注意\", //消息标题 \"content\": \"大家好\", //消息内容 \"receiveUserIds\": [ //接收人 1 ]} 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null}","s":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":277},{"i":378,"t":"接口地址：/api/admin/examPaperAnswer/page 请求参数： { \"subjectId\": null, //学科 \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 4, \"list\": [ { \"id\": 13, \"createTime\": \"2021-07-07 14:03:02\", //提交时间 \"userScore\": \"16\", //用户得分 \"subjectName\": \"语文\", //学科名称 \"subjectId\": 1, //学科Id \"questionCount\": 5, //题目数量 \"questionCorrect\": 4, //正确题目数 \"paperScore\": \"18\", //试卷总分 \"doTime\": \"14 秒\", //耗时 \"paperType\": 4, //试卷类型 \"systemScore\": \"2\", //自动批改得分 \"status\": 2, //答卷状态 \"paperName\": \"限时考试二\", //试卷名称 \"userName\": \"student\" //用户名 } ] }}","s":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":277},{"i":380,"t":"接口地址：/api/admin/user/event/page/list 请求参数： { \"userId\": null, \"userName\": null, \"pageIndex\": 1, \"pageSize\": 10} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 68, \"list\": [ { \"id\": 13, //日志id \"userId\": 2, //用户id \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"content\": \"admin 登录了学之思开源考试系统\", //日志内容 \"createTime\": \"2021-08-24 20:05:02\" //创建时间 } ] }}","s":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":277},{"i":382,"t":"接口地址：/api/admin/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //用户年级 \"imagePath\": null //头像 }}","s":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":277},{"i":384,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, //用户id \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户标识 \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //生日 \"phone\": \"11\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-17 11:28:52\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":277},{"i":386,"t":"接口地址：/api/admin/user/selectByUserName 请求参数： student //用户名 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"name\": \"student\", //用户名 \"value\": 1 //用户id } ]}","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":277},{"i":388,"t":"接口地址：/api/admin/upload/configAndUpload 请求参数：无 返回参数： { \"original\": \"头像.jpg\", \"name\": \"头像.jpg\", \"url\": \"http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_\", \"size\": 19665, \"type\": \".jpg\", \"state\": \"SUCCESS\"}","s":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":277},{"i":390,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2021-09-07 18:56:07\", //出生日期 \"phone\": \"2112112\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-31 10:08:03\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像} 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null}","s":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":277},{"i":393,"t":"tip Collect the technical stack required for backend development. 一个简单的后端菜汪，总得写点什么来记录下自己学了什么对吧。","s":"1-持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":391},{"i":397,"t":"依据个人理解就是，当服务器突然发生问题的时候，正在处理的数据和已经存储好的数据不会被损坏，当服务器启动的时候，通过持久化工具进行数据恢复，避免了数据的丢失和系统的开销。Redis中由两种持久化：RDB和AOF： RDB：类似快照技术，将当前的数据快照存留成rdb文件 AOF：将数据操作指令打入队列中","s":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":394},{"i":399,"t":"指定时间间隔内，执行数据集的时间点快照 实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。Redis的数据都是在内存中，RDB保存备份的是后，执行的是全量快照，把内存的数据记录到磁盘中去。","s":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":402,"t":"Redis7以前的配置情况： Redis7的配置","s":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":394},{"i":405,"t":"修改redis.conf配置中的save《seconds》《changes》项目 修改dump文件保存路径 修改dump文件名称 触发备份 恢复 修改redis.conf配置 修改文件路径 修改文件名称：修改为xxxxx.rdb即可，我修改为dbfiename dump6379.rdb 恢复：将备份文件移动到redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb文件的，但是这个文件是空的，没有什么意义。","s":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":394},{"i":407,"t":"分为两种：save和bgsave，其中默认使用bgsave。 save：在程序执行构成会阻塞当前的redis服务器，直到持久化工作完成，也就是过程不可被其他命令终端，线上禁止使用 bgsave：Redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork一个子进程，由该进程进行复制持久化过程。","s":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":394},{"i":410,"t":"以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 默认不开启，一旦开启就是使用aof，命令为：appendonly yes。其保存的是appendonly.aof文件。工作流程如下： 1 Client作为命令的来源，会有多个源头以及源源不断的请求命令。 2 在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。 3 AOF缓冲会根据AOF缓冲区同步文件的三种写回策略将命令写入磁盘上的AOF文件。 4 随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称AOF重写)，从而起到AOF文件压缩的目的。 5 当Redis Server 服务器重启的时候会从AOF文件载入数据。","s":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":394},{"i":412,"t":"Always：同步写回，每个写命令执行完立刻同步写到磁盘 everysec：每秒写回 No：操作系统决定何时xiehui","s":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":394},{"i":415,"t":"开启AOF： 配置appendfsync为自己要的时间，一般就是everysec 配置保存路径与RDB差不多： aof文件有三种： 在redis7对应配置好:","s":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":394},{"i":417,"t":"启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集 重写原理: 1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。 2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。 3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中 4：当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中 5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似","s":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":394},{"i":419,"t":"在同时开启RDB和AOF时，重启时只会加在AOF不会加在RDB。 RDB能够在指定时间间隔内对数据进行快照。 AOF对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以Reids协议追加保存每次写的操作到文件末尾。 推荐使用RDB和AOF混合方式 1 开启混合方式设置 设置aof-use-rdb-preamble的值为 yes yes表示开启，设置为no表示禁用 2 RDB+AOF的混合方式---------> 结论：RDB镜像做全量持久化，AOF做增量持久化 先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。----》AOF包括了RDB头部+AOF混写","s":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":394},{"i":423,"t":"在Redis官网中下载Redis7版本压缩包后，使用XFTP软件将本地的Redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar -zxvf redis-7.0.0.tar.gz) 进入redis-7.0.0目录下，执行make && make install命令 默认安装路径在/root/usr/local/bin下，ll列举redis-7.0.0中的文件，有两个为redis-cli和redis-server这两个分别是客户端和服务器启动命令。 需要对redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredis中，同时进行配置","s":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":420},{"i":425,"t":"默认daemonize no 改为daemonize yes 默认protected-mode yes改为protected-mode no 默认bind 127.0.0.1改为 直接注释掉(默认bind 127.0.0.1只能本机访问)或改成本机IP地址，否则影响远程IP连接 添加redis密码改为 requirepass 你自己设置的密码 记得重启才会有效","s":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":420},{"i":427,"t":"cd 进入/myredis目录下 redis-server /myredis/redis.conf redis-cli 即可进入 也可以redis-cli -a password进入","s":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":420},{"i":429,"t":"单实例关闭：redis-cli -a password shutdown 多实例关闭：指定端口关闭：redis-cli -p 6379 shutdown","s":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":420},{"i":432,"t":"string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M","s":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":420},{"i":435,"t":"EX：Key在多少秒之后过期 PX：Key在多少毫秒后过期 NX：当Key不存在的时候，才创建Key，等效于setnx XX：当Key存在的时候，覆盖Key","s":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":420},{"i":437,"t":"只有是数字才能进行加减 INCR key：递增 INCRBY key increment：增加指定的整数 DECR key：递减数值 DECRBY key decrement：减少指定的整数","s":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":420},{"i":439,"t":"List（列表），Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)","s":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":420},{"i":441,"t":"一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加；如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。 它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。","s":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":420},{"i":443,"t":"Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）","s":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":420},{"i":445,"t":"KV模式不变，但是V是一个键值对，Map<String,Map<Object,Object>>","s":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":420},{"i":447,"t":"Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)","s":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":420},{"i":450,"t":"Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232−12^{32} - 1232−1","s":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":420},{"i":452,"t":"在Set的基础上，每个Value的值前加一个Score分数值，之前Set是K1,V1,Zset会变成K1,V1,Score1","s":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":420},{"i":455,"t":"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括添加地理位置的坐标。获取地理位置的坐标。计算两个位置之间的距离。根据用户给定的经纬度坐标来获取指定范围内的地理位置集合","s":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":420},{"i":457,"t":"移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？ 地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆 使用如下SQL即可：select taxi from position where x0-r < x < x0 + r and y0-r < y < y0+r、 但是会有如下问题： 查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的 这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。 精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差、","s":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":420},{"i":459,"t":"GEOADD：多个经度、维度、位置名称添加到Key中 GEOPOS：从键里面返回所有给定位置元素的位置 GEODIST：返回两个给定位置之间的距离 GEORADIUS：以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素 GEORAIUSBYMEMBER，跟上条类似 GEOHASH：返回一个或者多个位置元素的GeoHash","s":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":420},{"i":461,"t":"HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。","s":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":420},{"i":463,"t":"Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。 简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。 而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。","s":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":420},{"i":465,"t":"一句话总结就是Redis版本的MQ消息中间件+阻塞队列。 实现消息队列，支持消息的持久化，支持自动生成全局唯一 ID，支持ACK确认消息模式，支持消费组模式，让消息队列更加稳定和可靠。 看起来就是一个消息链表，将所有的消息都串起来，每个消息都有一个唯一的ID和对应的内容 1 Message Content 消息内容 2 Consumer group 消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者 3 Last_delivered_id 游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。 4 Consumer 消费者，消费组中的消费者 5 Pending_ids 消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢","s":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":420},{"i":467,"t":"队列相关指令 消费组相关指令 具体实例参见脑图","s":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":420}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/4",[0,1.152]],["t/6",[1,0.237,2,6.086,3,6.086,4,6.086,5,6.086]],["t/8",[1,0.232,2,5.951,3,5.951,4,5.951,5,5.951,6,7.195]],["t/11",[1,0.327,7,4.621,8,5.586,9,3.753,10,5.586]],["t/13",[0,0.904,1,0.305,2,5.253,3,5.253,4,5.253,5,5.253,11,6.351,12,1.903]],["t/16",[0,1.213,1,0.227,7,5.822,13,7.039,14,7.039,15,2.172]],["t/21",[1,0.248,15,2.378,16,5.402]],["t/23",[0,1.002,1,0.307,17,5.822,18,6.305]],["t/25",[0,1.192,1,0.27,17,6.23,18,5.183,19,5.785,20,5.785,21,5.785,22,5.183,23,5.785,24,5.785,25,5.785,26,5.785]],["t/28",[1,0.307,17,5.822,27,7.039,28,7.039]],["t/30",[1,0.237,29,7.358,30,6.591,31,7.358,32,7.358]],["t/36",[0,0.968,1,0.311,33,3.907,34,3.559,35,3.907,36,2.436,37,4.745,38,3.707,39,3.907,40,5.622,41,3.907,42,3.5,43,6.195,44,3.907,45,5.736,46,3.907,47,3.032,48,2.872]],["t/39",[0,1.002,1,0.274,12,2.552,49,7.039,50,7.039]],["t/41",[1,0.254,51,7.894]],["t/43",[0,1.263,12,2.255,52,7.528]],["t/46",[1,0.261]],["t/48",[0,0.632,1,0.307,9,2.983,12,1.33,37,3.674,53,4.441,54,4.441,55,4.441,56,4.441,57,4.441,58,4.441,59,4.441,60,4.441,61,4.441,62,4.441,63,4.441,64,4.441,65,4.441,66,1.875,67,4.441,68,4.441,69,4.441,70,2.269,71,4.441]],["t/50",[1,0.248,72,7.707,73,7.707]],["t/55",[1,0.286,74,3.756,75,7.528]],["t/57",[0,1.162,1,0.177,9,5.483,12,2.18,76,4.543,77,5.492,78,5.492,79,4.889,80,5.492,81,5.492,82,5.492,83,4.92,84,5.492,85,5.492]],["t/59",[0,1.048,9,5.878,12,1.674,76,4.621,79,5.53,83,6.594,86,5.586,87,5.586,88,5.586,89,5.586,90,5.586,91,5.586]],["t/61",[1,0.261]],["t/63",[1,0.254,92,7.894]],["t/66",[0,1.125,1,0.318,74,4.326]],["t/68",[74,4.036]],["t/72",[1,0.311,76,6.086]],["t/74",[93,7.528,94,7.528,95,7.528,96,7.528]],["t/76",[0,1.098,1,0.274,12,1.797,66,2.532,97,5.999,98,5.999,99,5.999,100,5.999,101,4.962,102,3.877,103,2.993,104,5.999]],["t/79",[1,0.278,105,7.195,106,7.195,107,7.195,108,5.582]],["t/81",[0,0.922,1,0.261,66,2.734,74,3.232,79,5.437,109,6.477,110,6.477,111,6.477,112,6.477]],["t/83",[1,0.302,70,3.447,113,5.581,114,4.959,115,6.746,116,6.044]],["t/85",[1,0.295,113,5.822,114,5.173,116,6.305,117,7.039]],["t/87",[1,0.278,113,5.951,114,5.288,118,7.195,119,7.195]],["t/90",[1,0.278,120,7.195,121,6.445,122,7.195,123,7.195]],["t/92",[0,1.197,1,0.271,124,6.89,125,6.89,126,6.89,127,6.89]],["t/94",[0,1.192,1,0.309,74,4.589,121,3.543,128,3.955,129,3.955,130,3.955,131,3.955,132,3.955,133,3.955,134,3.955,135,3.955,136,3.543,137,3.955,138,3.955,139,3.955]],["t/98",[1,0.261]],["t/100",[0,0.997,1,0.301,12,1.023,34,1.788,36,2.129,38,2.206,66,1.441,140,3.414,141,6.272,142,3.414,143,3.414,144,3.414,145,3.414,146,3.812,147,3.414,148,1.938,149,3.414,150,3.414,151,2.509,152,3.059,153,3.059,154,3.414,155,4.025,156,3.812,157,2.824,158,3.414,159,4.29,160,2.059,161,5.187,162,3.414,163,3.059,164,3.414,165,3.414]],["t/102",[0,1.056,1,0.317,12,1.368,34,1.517,36,1.806,38,1.872,40,4.677,42,2.595,43,4.677,47,4.387,66,1.223,146,2.129,148,1.644,151,2.129,152,2.595,153,2.595,155,4.387,156,2.129,157,2.396,159,3.778,166,2.897,167,2.897,168,2.897,169,2.897,170,2.897,171,4.091,172,2.595,173,2.03,174,2.396]],["t/104",[0,0.705,1,0.309,7,2.657,12,0.962,34,1.682,36,2.003,38,2.075,148,1.823,151,2.361,155,3.841,156,3.638,157,2.657,159,2.657,173,2.251,175,4.95,176,3.212,177,3.212,178,3.212,179,3.212,180,3.212,181,3.212,182,3.212,183,3.212,184,3.212,185,4.95,186,3.212,187,3.212,188,4.95,189,4.95,190,3.212,191,3.212,192,3.212,193,3.212,194,3.212,195,3.212,196,3.212,197,3.212]],["t/106",[1,0.261]],["t/108",[0,0.497,1,0.311,12,1.045,16,4.454,34,1.826,36,2.175,38,2.254,108,2.706,148,1.979,156,2.563,160,2.103,173,2.445,198,3.488,199,3.488,200,3.488,201,3.488,202,3.488,203,2.706,204,3.488,205,2.254,206,4.09,207,3.124,208,3.124,209,3.488,210,3.488,211,3.488,212,2.563,213,3.488,214,3.488,215,3.488,216,3.488,217,3.488,218,3.488,219,3.488]],["t/110",[0,0.633,1,0.306,12,0.838,34,2.893,36,2.77,40,5.205,47,5.67,48,2.056,66,1.875,148,1.587,160,1.687,172,3.979,220,2.797,221,2.797,222,2.797,223,2.797,224,2.797,225,2.797,226,2.797,227,2.797,228,3.979,229,4.442,230,6.293,231,2.797,232,4.442,233,2.797,234,2.797,235,2.797,236,2.797,237,2.797,238,2.797,239,2.797,240,2.797,241,2.797,242,2.797,243,2.797,244,2.797]],["t/112",[]],["t/114",[0,0.996,1,0.282,12,1.23,34,2.149,36,2.559,38,2.652,108,4.614,148,2.329,160,3.586,173,2.877,206,4.614,207,3.677,208,3.677,245,4.104,246,4.104,247,4.104,248,4.104,249,4.104,250,4.104,251,4.104,252,5.946,253,4.104,254,4.104,255,4.104,256,4.104,257,4.104,258,4.104,259,4.104]],["t/116",[0,0.693,1,0.318,9,2.563,12,0.694,36,3.033,38,3.143,66,0.979,70,1.184,148,2.166,155,2.961,156,1.704,173,1.625,206,3.774,260,2.318,261,2.318,262,2.318,263,2.318,264,2.318,265,2.318,266,2.318,267,2.077,268,2.077,269,2.077,270,2.077,271,2.318,272,2.318,273,2.318,274,2.318,275,2.318,276,2.318,277,2.318,278,2.318,279,2.318,280,4.357,281,2.318,282,2.318,283,2.318,284,2.318,285,2.318,286,1.799,287,1.157,288,2.077,289,2.318,290,2.318,291,2.318,292,2.318,293,2.318,294,1.557,295,2.318]],["t/119",[0,0.385,1,0.307,16,3.031,34,3.233,36,2.696,43,2.237,47,3.355,66,1.141,108,2.098,148,2.454,151,1.987,228,3.873,280,6.047,287,1.349,296,2.704,297,2.704,298,2.704,299,2.704,300,2.704,301,2.704,302,2.704,303,2.704,304,2.704,305,2.704,306,2.704,307,2.704,308,2.704,309,2.704,310,2.704,311,2.704,312,2.704,313,4.324,314,4.324,315,2.704,316,2.704,317,2.704,318,2.704,319,2.704,320,2.704,321,2.704,322,2.704,323,2.704,324,2.704,325,2.704,326,2.704]],["t/121",[0,0.824,1,0.304,9,5.626,12,1.185,66,1.669,70,2.02,74,1.973,160,2.385,327,3.955,328,3.955,329,3.955,330,3.955,331,3.955,332,3.955,333,3.955,334,3.955,335,3.543,336,3.955,337,3.543,338,3.955,339,3.955,340,3.955,341,3.955,342,3.955,343,3.955,344,3.955]],["t/123",[1,0.319,12,0.972,163,5.443,173,5.449,174,7.365,345,8.572,346,3.244,347,6.077,348,3.244]],["t/125",[0,1.072,12,2.255,66,3.178,70,3.846]],["t/127",[1,0.313]],["t/132",[1,0.323]],["t/134",[1,0.328]],["t/138",[1,0.328,349,5.89,350,5.89]],["t/140",[0,0.887,1,0.303,12,1.866,66,2.629,70,3.183,351,6.229,352,6.229,353,6.229,354,6.229]],["t/142",[1,0.286,355,7.528,356,6.227]],["t/144",[0,0.782,1,0.322,12,1.104,34,2.877,48,2.709,74,1.839,160,4.39,357,3.685,358,3.685,359,3.301,360,3.685,361,3.685,362,3.685,363,3.685,364,4.544,365,3.685,366,3.685,367,3.301,368,3.685,369,3.685]],["t/146",[1,0.282,370,7.358,371,7.358,372,7.358]],["t/148",[0,0.87,1,0.251,160,3.686,356,6.454,373,6.112,374,6.112,375,6.112,376,6.112,377,6.112,378,5.475,379,6.112,380,6.112]],["t/150",[0,1.134,1,0.286,12,0.615,160,4.418,286,6.307,378,1.84,381,2.054,382,2.054,383,2.054,384,2.054,385,2.054,386,1.699,387,2.054,388,8.274,389,2.054,390,2.054,391,2.054,392,4.463,393,2.054,394,2.054,395,6.313,396,7.044,397,2.054,398,2.054,399,2.054,400,2.054,401,2.054,402,2.054,403,5.229,404,2.054,405,2.054,406,1.84,407,2.054,408,2.054,409,2.054,410,2.054,411,1.84,412,2.054,413,2.054]],["t/152",[0,0.689,1,0.312,34,3.105,48,3.557,74,2.958,148,1.77,160,3.576,171,2.794,286,3.755,356,2.58,359,2.794,364,2.58,386,4.003,406,4.335,411,2.794,414,3.119,415,3.119,416,4.335,417,2.794,418,3.119,419,3.119,420,3.119,421,4.335,422,2.794,423,3.119,424,3.119,425,3.119,426,3.119,427,3.119,428,3.119,429,3.119]],["t/154",[1,0.314,34,2.022,74,3.368,148,2.191,160,3.429,286,5.237,364,3.193,367,3.458,416,3.458,417,3.458,421,3.458,422,5.094,430,3.861,431,3.861,432,3.861,433,3.861,434,3.861,435,3.861,436,3.861,437,5.686,438,5.686]],["t/159",[0,0.887,1,0.303,146,4.578,439,6.229,440,6.229,441,6.229,442,6.229,443,6.229,444,6.229]],["t/161",[445,7.894,446,7.894]],["t/163",[1,0.294]],["t/165",[0,1.152]],["t/167",[0,0.824,1,0.291,34,3.341,38,1.565,48,4.254,74,3.415,79,4.852,148,2.245,203,1.879,206,1.879,447,1.879,448,1.879,449,2.003,450,2.003,451,2.422,452,2.422,453,2.422,454,2.422,455,2.422,456,2.422,457,2.422,458,2.422,459,2.422,460,2.169,461,2.422,462,5.014,463,5.014,464,4.491,465,2.422,466,3.955,467,5.788,468,2.422,469,3.955,470,3.955,471,2.422,472,2.422,473,3.543,474,2.422,475,2.422,476,2.422,477,2.422,478,3.955]],["t/169",[0,1.064,1,0.307,9,4.353,267,4.148,268,4.148,269,4.148,270,4.148,287,2.31,479,4.631,480,4.631,481,4.631,482,4.631,483,4.631,484,4.631,485,4.631,486,4.631,487,4.148,488,4.631,489,4.631]],["t/172",[1,0.294]],["t/174",[1,0.313]],["t/176",[1,0.326]],["t/178",[0,0.803,1,0.275,12,1.143,34,3.877,66,1.61,447,5.201,448,6.416,449,6.534,450,6.125,490,3.815,491,3.815,492,3.815,493,3.815,494,3.815,495,3.815,496,3.815,497,5.637,498,3.815,499,3.815,500,3.815,501,3.815]],["t/181",[1,0.301,79,4.942,502,5.408]],["t/183",[0,1.097,1,0.248,503,6.904]],["t/185",[12,2.155,503,6.445,504,7.195,505,7.195,506,7.195,507,7.195]],["t/189",[0,0.887,1,0.321,508,6.229,509,6.229,510,6.229]],["t/191",[1,0.294]],["t/193",[1,0.323,487,5.475,511,5.475,512,6.112,513,6.112]],["t/195",[0,0.961,1,0.31,136,6.044,511,6.044,514,6.746]],["t/198",[0,1.068,1,0.31,34,2.695,74,4.605,174,2.795,447,2.622,448,2.622,515,3.379,516,3.379,517,3.379,518,3.379,519,3.379,520,3.379,521,3.379,522,3.379,523,3.379,524,3.027,525,3.027,526,3.379,527,3.379,528,3.027,529,3.379,530,3.379]],["t/200",[1,0.259,34,3.884,386,3.777,447,4.978,448,6.243,450,3.777,524,4.09,525,4.09,528,4.09,531,4.566,532,8.046,533,4.566,534,4.566,535,6.416,536,4.566,537,4.566,538,6.416,539,4.566]],["t/203",[0,0.502,1,0.31,12,1.592,148,2.001,151,3.906,203,2.735,212,3.906,460,3.158,540,3.525,541,3.158,542,3.525,543,4.76,544,3.525,545,3.525,546,3.525,547,3.525,548,3.525,549,3.525,550,3.525,551,3.158,552,3.158,553,5.314,554,3.525,555,3.525,556,3.158,557,3.158,558,3.158,559,3.158,560,3.525,561,3.525,562,3.158,563,3.525]],["t/205",[1,0.283,203,3.543,205,2.95,212,3.356,541,4.09,543,4.09,551,4.09,552,5.747,556,4.09,557,4.09,558,4.09,559,5.747,562,4.09,564,4.566,565,4.566,566,6.416,567,6.416,568,4.566,569,4.566,570,4.566,571,4.09,572,4.566,573,4.566]],["t/207",[0,0.961,1,0.29,571,6.044,574,6.746,575,6.746,576,6.746,577,6.746]],["t/209",[578,7.894,579,6.53]],["t/211",[579,6.53,580,7.894]],["t/213",[0,0.513,1,0.323,12,1.388,16,1.517,66,1.521,70,2.367,74,1.079,146,1.59,287,3.429,294,2.421,579,1.79,581,2.164,582,2.164,583,2.164,584,2.164,585,2.164,586,2.164,587,2.164,588,4.469,589,2.164,590,3.604,591,2.521,592,5.403,593,3.604,594,4.633,595,1.59,596,2.164,597,2.164,598,2.164,599,2.164,600,2.164,601,2.164,602,2.164]],["t/216",[603,8.09]],["t/218",[1,0.323,288,5.475,604,6.112,605,6.112,606,6.112]],["t/220",[1,0.302,607,5.227,608,5.227,609,5.227,610,5.227,611,5.227,612,5.227,613,5.227,614,5.227,615,5.227,616,5.227,617,5.227,618,5.227,619,5.227,620,5.227,621,5.227,622,5.227]],["t/222",[623,8.09]],["t/224",[1,0.248,502,5.664,624,7.707]],["t/227",[1,0.237,502,5.408,625,7.358,626,7.358,627,7.358]],["t/231",[1,0.321,628,8.094,629,6.477]],["t/233",[1,0.306]],["t/235",[1,0.282,15,1.96,630,6.351,631,6.351,632,6.351,633,6.351,634,6.351,635,6.351,636,6.351,637,6.351]],["t/238",[1,0.319,15,1.316,638,3.529,639,6.114,640,4.266,641,4.266,642,4.266,643,4.266,644,4.266,645,4.266,646,4.266,647,6.114,648,5.057,649,6.114,650,4.266,651,4.266,652,4.266]],["t/240",[1,0.309,16,1.911,473,3.899,653,6.473,654,2.727,655,2.727,656,3.601,657,2.727,658,4.353,659,2.727,660,2.727,661,2.727,662,2.727,663,2.727,664,2.727,665,3.388,666,4.353,667,4.353,668,2.727,669,2.727,670,2.727,671,2.727,672,2.727,673,4.353,674,2.727,675,2.727,676,2.443,677,2.727,678,2.727,679,2.727,680,2.727,681,2.727,682,2.727,683,2.727,684,2.443,685,2.255,686,2.727,687,2.727,688,2.727,689,2.727,690,3.899,691,2.727,692,2.004]],["t/242",[1,0.177,638,4.543,653,6.52,656,4.543,665,3.424,676,4.92,690,4.92,693,8.692,694,5.492,695,5.492,696,5.492,697,5.492,698,5.492,699,5.492,700,5.492,701,5.492]],["t/245",[1,0.193,702,5.999,703,5.999,704,8.992,705,5.999,706,6.907,707,5.999,708,5.999,709,5.999,710,5.999,711,5.999]],["t/247",[1,0.248,712,7.707,713,7.707]],["t/249",[1,0.227,714,7.039,715,7.039,716,6.305,717,7.039,718,7.039,719,7.039]],["t/251",[1,0.292,716,6.172,720,6.89,721,6.89,722,6.89,723,6.89]],["t/253",[724,7.894,725,7.894]],["t/255",[1,0.248,726,7.707,727,7.707]],["t/257",[728,7.894,729,7.894]],["t/260",[1,0.292,502,5.064,730,6.89,731,6.89,732,6.89,733,6.89]],["t/265",[1,0.298,734,5.401,735,8.285,736,7.734,737,5.401,738,4.191,739,5.401,740,5.401]],["t/267",[741,8.09]],["t/269",[1,0.245,648,6.303,738,6.554,742,5.89,743,5.89,744,6.303,745,5.277,746,5.89,747,4.872,748,5.89,749,4.872]],["t/271",[1,0.248,16,2.914,22,3.724,146,3.055,648,3.439,735,3.724,736,6.309,738,4.656,744,3.439,745,3.724,747,3.439,750,4.157,751,3.724,752,4.157,753,3.724,754,3.724,755,6.001,756,4.157,757,6.001,758,4.157,759,4.157,760,3.724,761,4.157,762,4.157,763,3.724,764,4.157,765,4.157,766,4.157,767,4.157,768,4.157,769,4.157]],["t/274",[1,0.29,79,2.136,464,2.849,749,4.063,770,4.912,771,3.18,772,3.18,773,3.18,774,3.18,775,3.18,776,3.18,777,3.18,778,3.18,779,2.338,780,4.912,781,4.912,782,3.18,783,3.18,784,3.18,785,3.18,786,3.18,787,3.18,788,3.18,789,3.18,790,4.912,791,4.912,792,3.18,793,3.18,794,4.912,795,2.849,796,3.18,797,3.18,798,3.18,799,2.849,800,3.18,801,3.18,802,3.18,803,3.18,804,1.709,805,3.18,806,3.18,807,3.18,808,3.18,809,3.18,810,3.18]],["t/276",[1,0.277,114,1.955,449,2.2,684,2.383,738,2.064,747,2.2,749,2.2,753,3.823,754,5.478,760,5.997,763,5.478,779,3.136,795,2.383,811,2.66,812,3.264,813,6.695,814,2.66,815,2.66,816,2.66,817,2.66,818,2.66,819,5.478,820,2.66,821,2.66,822,4.267,823,2.66,824,2.66,825,2.66,826,4.787,827,2.383,828,4.267,829,4.267,830,2.66,831,2.66,832,2.66,833,1.359,834,2.66,835,1.787,836,2.66,837,4.267,838,2.66,839,2.66,840,2.66]],["t/278",[1,0.289,841,7.707]],["t/281",[1,0.319,205,3.549,665,4.538,833,3.719,835,3.689,842,4.92,843,4.92,844,3.312]],["t/283",[0,1.036,1,0.31,15,1.695,833,2.806,835,3.689,845,5.492,846,5.492,847,4.92,848,3.312,849,1.553,850,1.531,851,1.553]],["t/285",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,852,5.921]],["t/287",[1,0.32,15,2.127,812,2.469,853,5.064,854,5.064,855,2.225,856,5.064,857,5.064,858,5.064,859,5.064,860,5.064]],["t/289",[1,0.317,12,1.368,804,2.453,855,2.597,861,4.566,862,3.067,863,2.453,864,2.086,865,4.566,866,4.566,867,3.777,868,4.566,869,4.566,870,4.566,871,4.566,872,4.566]],["t/291",[0,0.795,1,0.318,812,2.724,849,1.58,850,1.557,851,1.58,855,2.376,873,5.586,874,3.916]],["t/293",[0,1.094,1,0.317,12,0.944,103,1.571,812,1.536,849,0.891,850,0.878,851,0.891,855,1.925,864,1.439,875,3.15,876,2.85,877,2.553,878,4.875,879,1.692,880,1.692,881,1.738,882,1.692,883,3.15,884,2.035,885,1.692,886,2.444,887,1.382,888,3.15,889,2.821,890,3.15,891,2.208,892,2.444,893,2.315,894,3.15]],["t/295",[0,1.059,1,0.322,15,1.291,66,1.096,103,2.088,287,1.295,812,2.04,849,0.734,850,0.724,851,0.734,855,1.946,862,2.811,863,1.395,876,1.517,877,2.191,885,2.248,895,2.596,896,1.517,897,2.014,898,2.014,899,2.014,900,2.014,901,2.014,902,1.619,903,1.566,904,1.744,905,1.744,906,1.744,907,1.677,908,1.677,909,1.566]],["t/297",[0,0.975,1,0.317,12,1.185,15,1.786,70,2.957,212,2.907,595,2.907,849,1.118,850,1.102,851,1.118,855,2.209,909,2.385,910,3.955,911,4.49,912,2.907,913,3.271,914,2.312,915,3.068,916,3.955]],["t/299",[0,0.931,1,0.323,12,1.313,15,0.849,70,2.792,74,0.786,595,1.158,812,1.341,849,0.446,850,0.439,851,0.446,855,2.111,862,2.944,863,0.847,864,1.257,874,1.105,876,0.921,877,1.44,885,2.936,886,1.223,896,0.921,897,1.223,898,1.223,899,1.223,900,1.223,901,1.223,902,0.983,903,0.95,904,1.059,905,1.059,906,1.059,907,1.018,908,1.018,909,1.659,911,1.223,912,1.158,913,1.304,914,2.139,915,1.223,917,1.576,918,1.576,919,1.715,920,2.275,921,1.059,922,2.275,923,1.576,924,1.304,925,1.304]],["t/301",[0,0.911,1,0.316,12,1.056,15,1.64,70,3.268,595,2.591,849,0.997,850,0.983,851,0.997,855,2.466,862,3.57,885,2.855,909,2.126,911,2.735,912,2.591,913,2.916,914,2.061,915,2.735,924,2.916,925,2.916,926,3.525,927,3.158]],["t/303",[0,0.81,1,0.317,12,0.876,15,0.902,66,1.234,70,1.493,74,2.837,102,1.889,103,1.458,588,2.418,804,1.57,833,1.493,849,0.826,850,0.815,851,0.826,855,1.836,864,1.336,876,1.709,877,1.531,879,1.57,880,1.57,881,1.613,882,1.57,884,1.889,887,1.282,892,2.268,912,2.148,919,1.822,928,2.923,929,2.923,930,2.923,931,2.923,932,2.618,933,2.923,934,2.618,935,2.618,936,2.618,937,2.618,938,2.923]],["t/305",[0,0.975,1,0.317,103,1.973,849,1.118,850,1.102,851,1.118,855,1.868,864,1.807,879,2.125,880,2.125,881,2.182,882,2.125,887,1.735,892,3.068,902,2.466,919,2.466,939,3.955,940,3.955,941,3.955,942,3.543,943,3.955,944,3.543,945,3.955]],["t/307",[0,0.721,1,0.318,12,1.518,15,1.802,66,1.038,74,1.227,103,1.227,205,1.589,337,3.587,849,0.695,850,0.685,851,0.695,855,2.076,863,1.321,877,1.287,879,1.321,880,1.321,885,2.722,902,1.533,903,1.483,904,1.651,905,1.651,906,1.651,907,1.589,908,1.589,909,2.415,911,1.908,914,2.341,915,1.908,922,2.034,924,2.034,925,2.034,946,2.458,947,2.458,948,4.004,949,2.202,950,2.458,951,1.908,952,2.458,953,2.458]],["t/309",[0,0.896,1,0.313,665,3.923,833,2.269,849,1.256,850,1.238,851,1.256,855,2.031,864,2.029,887,1.949,914,2.596,919,2.769,921,2.983,954,4.441,955,4.441,956,3.978,957,2.596,958,3.674,959,4.441]],["t/311",[0,1.081,1,0.307,102,1.978,665,1.908,804,1.644,833,1.564,844,1.846,848,1.846,849,0.865,850,0.853,851,0.865,855,0.988,862,2.056,864,1.398,874,2.145,887,1.343,919,1.908,920,2.532,957,1.789,958,2.532,960,3.06,961,1.908,962,2.742,963,2.742,964,2.742,965,2.742,966,2.742,967,1.908,968,1.908,969,1.908,970,1.908,971,3.505,972,4.106,973,1.908,974,2.742,975,1.908,976,2.145,977,2.742,978,1.908,979,2.742,980,2.742]],["t/313",[0,1.081,1,0.305,15,0.944,102,1.978,665,1.908,804,1.644,833,1.564,844,1.846,848,1.846,849,0.865,850,0.853,851,0.865,855,0.988,862,2.056,864,1.398,874,2.145,887,1.343,919,1.908,920,2.532,957,1.789,958,2.532,961,1.908,962,2.742,963,2.742,964,2.742,965,2.742,966,2.742,967,1.908,968,1.908,969,1.908,970,1.908,971,3.505,972,4.106,973,1.908,974,2.742,975,1.908,976,2.145,977,2.742,978,1.908,979,2.742,980,2.742,981,3.06]],["t/315",[0,0.796,1,0.315,101,3.119,103,2.788,212,2.772,287,1.881,849,1.066,850,1.051,851,1.066,855,1.217,862,2.533,863,2.026,864,1.723,879,2.026,880,2.026,881,2.081,882,2.026,887,1.655,914,2.204,919,2.351,982,3.771,983,3.771,984,3.771,985,3.771,986,3.771,987,3.771,988,3.378,989,2.437]],["t/317",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,990,6.609]],["t/319",[0,0.922,1,0.307,74,3.232,849,1.832,850,1.806,851,1.832,991,6.477]],["t/322",[0,0.476,1,0.293,15,2.943,205,2.161,692,2.458,804,1.797,833,2.608,835,3.429,842,2.996,843,2.996,844,2.017,848,2.017,849,0.946,850,0.932,851,0.946,855,1.079,887,1.467,957,1.955,961,2.085,967,2.085,968,2.085,969,2.085,970,2.085,973,2.085,975,2.085,978,2.085,989,3.299,992,2.996]],["t/324",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,852,5.921]],["t/326",[0,0.659,1,0.321,884,2.993,898,3.593,993,4.631,994,4.631,995,4.631,996,4.631,997,4.631,998,4.631,999,4.631,1000,4.631,1001,4.631,1002,4.631,1003,4.631,1004,4.631]],["t/328",[0,0.992,1,0.315,15,2.008,103,1.255,804,1.351,833,2.084,844,1.517,848,1.517,849,0.711,850,0.701,851,0.711,855,1.317,864,2.351,879,1.351,880,1.351,881,1.388,882,1.351,887,1.104,919,3.209,957,1.47,961,1.568,967,1.568,968,2.544,969,1.568,970,1.568,973,1.568,975,1.568,978,1.568,1005,2.515,1006,2.515,1007,2.253,1008,2.253,1009,2.253,1010,2.253,1011,2.253,1012,2.253,1013,1.952,1014,3.607,1015,3.655,1016,2.253]],["t/330",[0,0.932,1,0.309,15,2.192,804,1.614,833,1.535,844,1.812,848,1.812,849,0.849,850,0.837,851,0.849,855,1.517,864,2.645,887,1.318,919,3.609,957,1.756,961,1.873,967,1.873,968,1.873,969,1.873,970,1.873,973,1.873,975,1.873,978,1.873,1007,2.691,1008,2.691,1009,2.691,1010,2.691,1011,2.691,1012,2.691,1013,2.331,1014,4.057,1015,4.21,1016,2.691,1017,3.004]],["t/332",[0,1.009,1,0.314,15,2.438,205,1.498,692,1.704,804,2.05,833,1.95,835,2.563,844,1.398,847,2.077,848,2.301,849,0.655,850,0.646,851,0.655,855,1.57,887,1.017,957,2.231,961,1.445,967,2.379,968,2.379,969,2.379,970,2.379,973,2.379,975,1.445,978,1.445,992,2.077,1018,2.318,1019,3.816,1020,3.816,1021,2.318,1022,2.318,1023,2.318,1024,2.318,1025,2.318,1026,2.318,1027,3.816,1028,2.318]],["t/334",[0,0.904,1,0.311,15,1.96,849,1.796,850,1.77,851,1.796,1029,6.351]],["t/336",[0,0.941,1,0.3,12,1.98,849,1.869,850,1.842,851,1.869,1030,6.609]],["t/338",[0,0.923,1,0.319,15,1.429,205,2.993,591,2.161,692,3.404,812,2.258,849,1.309,850,1.291,851,1.309,855,2.092,896,2.707,909,2.793,1031,4.631,1032,3.593]],["t/340",[0,1.017,1,0.319,12,1.278,15,1.316,103,2.128,591,1.991,812,2.08,849,1.206,850,1.189,851,1.206,855,1.377,879,2.292,880,2.292,881,2.354,882,2.292,896,3.574,1032,3.31,1033,4.266]],["t/342",[0,1.014,1,0.318,591,2.479,812,2.59,849,1.502,850,1.481,851,1.502,855,1.715,896,3.105,1032,4.122,1034,5.312]],["t/344",[0,0.756,1,0.315,12,1.592,15,1.639,591,2.479,812,2.59,849,1.502,850,1.481,851,1.502,855,1.715,896,3.105,1032,4.122,1035,5.312]],["t/346",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,1036,6.609]],["t/348",[0,0.855,1,0.316,12,0.953,15,1.852,30,2.849,102,2.055,103,1.587,287,1.587,294,2.136,591,2.292,812,1.551,849,0.899,850,0.887,851,0.899,855,1.937,864,1.453,876,1.859,877,2.572,879,1.709,880,1.709,881,1.755,882,1.709,884,2.055,885,1.709,887,1.395,891,2.229,893,2.338,896,1.859,1014,2.229,1037,3.18,1038,2.631,1039,3.18]],["t/350",[0,1.055,1,0.323,15,1.283,66,1.087,103,2.074,287,1.285,591,1.94,812,2.027,849,0.728,850,0.718,851,0.728,855,1.937,863,1.384,876,1.505,877,2.177,885,2.234,886,1.998,896,1.505,897,1.998,899,1.998,900,1.998,901,1.998,902,1.606,903,1.553,904,1.73,905,1.73,906,1.73,907,1.664,908,1.664,909,1.553,1040,2.575]],["t/352",[0,0.947,1,0.325,12,0.731,15,1.555,66,1.03,74,1.217,294,1.639,591,1.857,706,2.186,812,1.941,849,0.389,850,0.384,851,0.389,855,1.877,863,1.311,874,1.71,876,1.426,877,2.084,885,2.708,886,1.893,896,1.426,897,1.893,899,1.893,900,1.893,901,1.893,902,1.522,903,1.472,904,1.639,905,1.639,906,1.639,907,1.577,908,1.577,909,1.472,914,1.426,922,2.019,1041,1.376,1042,2.44,1043,2.44]],["t/354",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,1044,6.609]],["t/356",[0,1.039,1,0.317,12,1.472,15,0.981,287,1.587,294,3.3,591,1.484,812,1.551,849,0.899,850,0.887,851,0.899,855,1.027,864,1.453,876,2.871,877,2.572,879,1.709,880,1.709,881,1.755,882,1.709,884,2.055,885,1.709,887,1.395,891,2.229,893,2.338,896,1.859,921,2.136,942,2.849,1045,3.18,1046,3.18,1047,3.18,1048,3.18]],["t/358",[0,0.923,1,0.315,12,0.884,15,2.307,66,1.245,102,1.906,103,2.311,287,1.471,588,2.44,591,1.376,804,1.585,849,0.834,850,0.822,851,0.834,855,1.495,864,1.348,877,2.426,879,1.585,880,1.585,881,1.628,882,1.585,885,1.585,887,1.294,891,2.067,896,1.724,902,2.888,907,1.906,908,1.906,944,2.642,1014,2.067,1049,2.949,1050,2.949,1051,2.949,1052,2.949]],["t/360",[0,0.803,1,0.317,15,1.739,70,1.949,287,3.344,849,1.079,850,1.064,851,1.079,855,1.819,863,2.05,877,1.998,885,2.05,902,2.379,903,2.301,904,2.563,905,2.563,906,2.563,907,2.465,908,2.465,909,2.301,1053,3.815,1054,3.815,1055,3.815]],["t/362",[0,0.935,1,0.319,15,2.027,66,1.556,103,1.839,287,1.839,591,1.72,849,1.042,850,1.027,851,1.042,855,1.773,863,1.98,877,1.93,885,1.98,902,2.298,903,2.223,904,2.476,905,2.476,906,2.476,907,2.382,908,2.382,909,2.223,1056,3.685]],["t/364",[0,0.941,1,0.3,15,2.039,849,1.869,850,1.842,851,1.869,1057,6.609]],["t/366",[0,0.955,1,0.314,12,1.143,15,1.177,102,2.465,103,1.903,205,2.465,591,1.78,692,2.804,849,1.079,850,1.064,851,1.079,855,1.819,863,2.05,864,1.743,879,2.05,880,2.05,881,2.105,882,2.05,887,1.674,903,3.399,989,2.465,1014,2.674,1058,3.815,1059,3.815,1060,3.815]],["t/368",[0,0.481,1,0.316,12,1.012,15,1.043,287,1.686,294,2.27,591,1.577,812,1.647,849,0.955,850,0.942,851,0.955,855,2.249,863,1.815,864,1.544,867,2.795,876,1.975,877,1.769,884,2.183,885,1.815,887,1.483,891,2.368,893,2.483,903,2.038,921,2.27,949,3.027,951,3.993,1061,3.379,1062,3.379,1063,3.379,1064,3.379,1065,3.379,1066,3.379]],["t/370",[0,0.901,1,0.317,12,1.171,102,2.525,287,1.95,294,2.625,591,2.677,812,1.905,849,0.675,850,0.665,851,0.675,855,2.317,863,2.1,864,1.786,867,3.232,876,2.284,877,2.046,884,2.525,885,2.1,887,1.715,891,2.739,893,2.872,903,2.357,951,3.032,1014,2.739,1038,3.232,1067,2.386,1068,3.908]],["t/372",[0,0.904,1,0.311,15,1.96,849,1.796,850,1.77,851,1.796,1069,6.351]],["t/374",[0,0.911,1,0.316,15,1.088,70,1.801,103,1.759,591,1.645,665,2.198,849,0.997,850,0.983,851,0.997,855,1.715,863,1.894,879,1.894,880,1.894,881,1.945,882,1.894,887,1.547,898,2.735,914,2.061,972,2.471,988,4.76,989,2.278,1070,3.525,1071,3.525,1072,3.525,1073,3.525,1074,3.525,1075,3.525,1076,3.525]],["t/376",[0,0.992,1,0.322,15,1.587,849,1.455,850,1.434,851,1.455,863,2.764,914,3.007,1077,5.144,1078,5.144]],["t/378",[0,0.814,1,0.316,12,1.388,15,0.91,70,2.922,103,1.471,287,1.471,591,1.376,595,2.168,665,1.839,804,1.585,833,1.507,849,0.834,850,0.822,851,0.834,855,1.495,864,1.348,874,2.067,876,1.724,877,2.426,879,1.585,880,1.585,881,1.628,882,1.585,884,1.906,887,1.294,892,2.288,912,2.168,927,2.642,932,2.642,934,2.642,935,2.642,936,2.642,937,2.642,976,3.247,1079,2.949,1080,2.949]],["t/380",[0,0.782,1,0.312,12,1.104,15,1.695,103,1.839,591,1.72,833,2.807,849,1.042,850,1.027,851,1.042,855,2.12,864,1.684,879,1.98,880,1.98,881,2.034,882,1.98,887,1.617,914,2.154,921,2.476,956,4.921,957,2.154,989,3.55,1081,3.685,1082,3.685,1083,3.685,1084,3.685]],["t/382",[0,0.844,1,0.312,15,1.829,66,1.317,591,1.456,804,1.676,833,1.594,844,1.881,848,1.881,849,0.882,850,0.87,851,0.882,855,1.007,887,1.369,957,1.823,961,1.945,967,1.945,968,1.945,969,1.945,970,1.945,971,3.557,972,3.392,973,1.945,975,1.945,976,3.392,978,1.945,989,2.016,1013,2.42,1085,3.119,1086,2.58,1087,2.58,1088,2.58,1089,2.58,1090,2.58,1091,2.58,1092,2.58,1093,2.58]],["t/384",[0,0.824,1,0.309,15,1.786,66,1.268,101,2.485,591,1.402,804,1.614,833,1.535,844,1.812,848,1.812,849,0.849,850,0.837,851,0.849,855,1.517,864,1.373,887,1.318,921,2.018,957,1.756,961,1.873,967,1.873,968,1.873,969,1.873,970,1.873,971,3.454,972,3.294,973,1.873,975,1.873,976,3.294,978,1.873,989,1.941,1086,2.485,1087,2.485,1088,2.485,1089,2.485,1090,2.485,1091,2.485,1092,2.485,1093,2.485,1094,2.691,1095,3.004,1096,3.004]],["t/386",[0,1.025,1,0.316,665,4.488,812,2.633,849,1.527,850,1.505,851,1.527,855,1.743,1097,5.401,1098,4.838]],["t/388",[1,0.272,744,4.872,751,5.277,812,2.872,1099,5.89,1100,8.446,1101,5.89,1102,5.89,1103,5.89,1104,5.89,1105,5.89,1106,5.89]],["t/390",[0,0.829,1,0.308,15,1.797,66,1.28,591,1.415,804,1.629,833,1.549,844,1.829,848,1.829,849,0.857,850,0.845,851,0.857,855,0.979,864,2.163,887,1.33,889,2.716,921,2.037,957,1.772,961,1.89,967,1.89,968,1.89,969,1.89,970,1.89,971,2.228,972,3.318,973,1.89,975,1.89,976,3.318,978,1.89,989,1.959,1013,2.353,1086,2.508,1087,2.508,1088,2.508,1089,2.508,1090,2.508,1091,2.508,1092,2.508,1093,2.508,1094,2.716,1107,3.032,1108,3.032]],["t/393",[1,0.222,502,5.064,1109,6.89,1110,6.89,1111,6.89,1112,6.89,1113,6.89,1114,6.89]],["t/397",[1115,7.707,1116,7.707,1117,5.664]],["t/399",[1,0.248,1118,7.707,1119,7.707]],["t/402",[1120,8.166]],["t/405",[1,0.287,1121,6.609,1122,8.196,1123,6.609,1124,6.609,1125,6.609,1126,6.609]],["t/407",[1127,7.707,1128,7.707,1129,7.707]],["t/410",[0,0.824,12,1.733,66,2.442,70,2.956,287,2.886,779,5.535,827,5.183,1117,4.252,1130,5.785,1131,5.785,1132,5.785,1133,4.402,1134,5.785,1135,5.785,1136,5.785]],["t/412",[1137,7.707,1138,7.707,1139,7.707]],["t/415",[1117,6.43,1120,6.591,1140,7.358,1141,6.591]],["t/417",[1,0.227,1117,5.173,1142,7.039,1143,7.039,1144,7.039,1145,7.039,1146,7.039]],["t/419",[0,0.809,1,0.24,12,1.703,819,5.092,1117,4.178,1141,6.669,1147,5.684,1148,5.684,1149,5.684,1150,5.684,1151,5.092,1152,5.684,1153,5.684,1154,5.684,1155,5.684,1156,5.684]],["t/423",[1,0.197,779,4.492,826,5.475,1133,4.561,1157,6.112,1158,6.112,1159,6.112,1160,6.112,1161,6.112,1162,6.112,1163,6.112,1164,6.112,1165,6.112]],["t/425",[1,0.248,1133,3.507,1151,5.374,1166,7.71,1167,5.999,1168,7.71,1169,5.999,1170,7.71,1171,5.999,1172,5.999,1173,5.999]],["t/427",[1,0.209,779,4.761,835,4.351,1133,5.161,1174,6.477,1175,6.477,1176,6.477,1177,7.251]],["t/429",[835,4.532,1133,4.852,1177,7.436,1178,8.301,1179,6.746,1180,6.746]],["t/432",[1181,7.894,1182,7.894]],["t/435",[1183,7.528,1184,7.528,1185,7.528,1186,7.528]],["t/437",[1,0.209,37,7.65,1187,6.477,1188,6.477,1189,6.477,1190,6.477,1191,6.477,1192,6.477]],["t/439",[0,1.024,1,0.232,1193,7.195,1194,5.951,1195,6.445,1196,5.951]],["t/441",[1,0.254,1197,7.894]],["t/443",[0,0.839,1,0.298,1098,5.277,1133,4.454,1194,4.872,1196,4.872,1198,8.446,1199,5.277,1200,5.89]],["t/445",[1201,8.09]],["t/447",[0,0.854,1,0.29,685,6.378,1133,3.507,1194,4.962,1195,5.374,1196,4.962,1199,5.374,1202,5.999,1203,5.999,1204,5.374]],["t/450",[1,0.267,685,5.581,1133,3.944,1204,6.044,1205,6.746,1206,6.746,1207,6.746,1208,6.746]],["t/452",[1209,8.09]],["t/455",[1,0.248,1133,4.505,1210,7.707]],["t/457",[1,0.312,79,3.202,114,3.504,335,7.344,1038,5.469,1211,4.767,1212,4.767,1213,4.767,1214,4.767,1215,4.767,1216,4.767,1217,6.612,1218,4.767,1219,4.767]],["t/459",[1220,7.195,1221,7.195,1222,7.195,1223,7.195,1224,7.195,1225,7.195]],["t/461",[1,0.318,951,4.335,1133,3.266,1226,9.093,1227,5.586,1228,5.586]],["t/463",[1,0.311,799,7.133,1133,5.356,1229,5.227,1230,5.227,1231,5.227,1232,7.042]],["t/465",[0,0.65,1,0.283,12,1.368,66,1.927,70,2.333,287,2.278,638,3.777,656,3.777,850,1.273,855,1.474,882,2.453,914,2.669,1233,4.566,1234,4.566,1235,6.416,1236,4.566,1237,7.418,1238,4.566,1239,4.566,1240,4.566,1241,4.566,1242,4.566,1243,4.566,1244,4.566]],["t/467",[1,0.306]]],"invertedIndex":[["",{"_index":1,"t":{"6":{"position":[[0,21]]},"8":{"position":[[122,45]]},"11":{"position":[[0,61],[62,5],[68,8],[77,5],[83,17],[101,11],[113,37],[151,4],[161,7],[169,3],[173,3],[177,3],[181,5],[187,21],[273,10]]},"13":{"position":[[0,12],[13,10],[24,13],[103,43],[154,28]]},"16":{"position":[[35,9]]},"21":{"position":[[8,9]]},"23":{"position":[[34,12],[47,32],[80,9],[90,5]]},"25":{"position":[[64,25],[90,24],[466,14]]},"28":{"position":[[67,15],[83,37],[121,34],[156,21]]},"30":{"position":[[184,26]]},"36":{"position":[[84,6],[135,1],[153,1],[162,1],[195,1],[202,1],[220,2],[246,1],[259,1],[270,1],[282,1],[288,1],[293,1],[295,1],[304,1]]},"39":{"position":[[6,14],[127,39]]},"41":{"position":[[84,5]]},"46":{"position":[[0,33]]},"48":{"position":[[23,1],[116,1],[122,2],[171,53],[225,6],[265,1],[347,1],[512,1],[537,2],[598,4],[603,5]]},"50":{"position":[[0,39]]},"55":{"position":[[0,12],[79,12]]},"57":{"position":[[73,2]]},"61":{"position":[[0,40]]},"63":{"position":[[76,9]]},"66":{"position":[[0,2],[3,2],[6,2],[9,5],[17,2],[20,1],[24,1],[32,1]]},"72":{"position":[[0,72],[73,11],[85,27],[113,29]]},"76":{"position":[[8,30],[59,1],[151,27]]},"79":{"position":[[0,22],[111,5]]},"81":{"position":[[111,3],[206,3]]},"83":{"position":[[0,7],[29,8],[38,5],[104,4]]},"85":{"position":[[0,22],[23,7],[52,14]]},"87":{"position":[[0,7],[29,36]]},"90":{"position":[[18,2],[26,1]]},"92":{"position":[[73,3],[77,12]]},"94":{"position":[[0,4],[194,2],[197,2],[200,2],[203,1],[231,3],[242,3],[246,9],[256,18],[275,32],[308,21],[392,4],[397,8],[486,7]]},"98":{"position":[[0,117]]},"100":{"position":[[215,21],[315,4],[504,1],[510,2],[545,1],[559,1],[572,1],[592,1],[600,1],[609,1],[617,1],[619,2],[797,2],[881,85]]},"102":{"position":[[0,104],[282,14],[297,4],[302,7],[381,1],[387,2],[405,1],[417,1],[426,1],[457,1],[464,1],[472,1],[487,1],[499,1],[505,1],[520,1],[531,1],[539,1],[549,2],[557,1],[564,2],[571,1],[576,1],[584,1],[593,1],[598,1],[606,2],[617,12],[678,58]]},"104":{"position":[[172,11],[258,15],[282,1],[301,1],[311,6],[324,1],[443,1],[456,10],[472,1],[480,4],[491,1],[503,2],[519,1],[535,1],[552,1],[560,1],[562,1],[564,2],[892,12]]},"106":{"position":[[0,57]]},"108":{"position":[[0,7],[8,13],[62,1],[69,1],[76,1],[123,1],[130,1],[149,1],[175,1],[188,2],[199,1],[207,14],[243,1],[251,1],[269,1],[271,2],[404,1],[490,2]]},"110":{"position":[[449,14],[464,8],[524,1],[544,1],[568,2],[595,10],[613,1],[639,2],[664,10],[683,1],[693,1],[702,1],[724,3],[777,1],[799,1],[867,5],[894,1],[905,5],[911,2],[1151,3],[1155,13]]},"114":{"position":[[309,1],[333,1],[348,1],[384,1],[389,1],[421,2],[571,3]]},"116":{"position":[[4,100],[113,21],[135,16],[152,18],[182,44],[279,7],[287,11],[392,18],[497,1],[526,2],[529,1],[558,2],[561,1],[584,2],[587,1],[614,2],[742,3],[782,20],[803,39],[889,1],[1000,1],[1008,24],[1043,1],[1099,2],[1156,12],[1180,1],[1188,12],[1203,1],[1208,32],[1241,1],[1243,1],[1250,1],[1257,1],[1265,8],[1274,31],[1306,5],[1381,1],[1394,2],[1435,2],[1560,3]]},"119":{"position":[[0,37],[228,3],[232,7],[240,15],[256,19],[290,1],[326,2],[438,1],[457,6],[469,1],[483,1],[491,1],[501,1],[512,2],[565,1],[585,1],[595,1],[597,11],[630,1],[662,1],[796,1],[882,2],[1008,2]]},"121":{"position":[[81,13],[95,13],[214,22],[237,23],[261,21],[283,13],[304,28],[648,14],[727,32],[804,18],[938,2],[946,37]]},"123":{"position":[[0,2],[3,5],[9,5],[15,3],[19,2],[22,2],[25,2],[28,4],[93,1],[95,4],[179,1],[181,2],[184,1],[186,1],[218,2],[221,2],[284,1],[286,2],[399,2],[402,4],[471,2],[474,1],[585,2],[702,1],[704,2],[804,1]]},"127":{"position":[[0,5],[6,31],[38,4],[43,46]]},"132":{"position":[[0,44],[45,38],[84,2],[87,4],[92,6],[99,20],[120,33]]},"134":{"position":[[0,17],[18,4],[23,40],[64,4],[69,24],[94,12],[107,17],[125,39],[165,14],[180,4],[185,11]]},"138":{"position":[[0,74],[75,5],[81,1],[83,4],[88,1],[90,2],[93,16],[110,16],[127,20],[148,4],[153,2],[156,2],[159,5],[196,21]]},"140":{"position":[[135,11],[147,7],[166,9],[176,10],[383,10]]},"142":{"position":[[11,4],[16,2]]},"144":{"position":[[0,43],[44,4],[118,5],[124,5],[130,5],[136,5],[142,4],[183,1],[189,1],[202,2],[211,2],[216,2],[238,2],[251,2],[254,9],[274,1],[284,1],[292,1],[297,6],[306,1],[311,1],[313,1],[320,1],[346,13]]},"146":{"position":[[176,14],[201,3]]},"148":{"position":[[411,1],[452,11]]},"150":{"position":[[635,1],[675,12],[903,2],[923,1],[939,2],[959,1],[977,2],[999,1],[1285,6],[1749,2],[1779,2],[1805,1],[1832,1],[1837,2],[1878,1],[1885,1],[1927,1],[2113,1],[2494,1],[2504,1]]},"152":{"position":[[71,4],[82,1],[88,1],[101,1],[140,2],[153,6],[170,1],[189,1],[199,1],[203,1],[213,1],[224,6],[231,1],[233,2],[294,1],[300,1],[319,2],[349,2],[372,1],[382,1],[393,1],[435,2]]},"154":{"position":[[0,73],[333,4],[386,1],[392,1],[408,1],[421,1],[436,2],[441,2],[452,2],[486,2],[509,1],[514,19],[550,1],[564,15],[580,1],[589,1],[602,2]]},"159":{"position":[[2,42],[127,1],[145,1],[155,1],[180,1]]},"163":{"position":[[0,52],[53,49]]},"167":{"position":[[104,1],[133,1],[138,1],[140,1],[177,2],[269,2],[274,1],[300,1],[402,2],[407,1],[433,1],[438,1],[537,2],[542,1],[567,1],[711,1],[782,1],[788,18]]},"169":{"position":[[31,1],[52,3],[183,1],[204,2],[207,1],[228,2],[231,1],[254,2],[257,1],[284,2]]},"172":{"position":[[0,10],[11,87]]},"174":{"position":[[0,8],[9,57],[67,6],[74,54]]},"176":{"position":[[0,1],[2,2],[5,3],[9,2],[12,2],[15,2],[18,2],[21,2],[24,2]]},"178":{"position":[[0,32],[47,19],[142,1],[148,1],[175,1],[189,21],[253,1]]},"181":{"position":[[0,33],[111,27],[143,139]]},"183":{"position":[[0,16]]},"189":{"position":[[0,13],[14,6],[21,14],[36,4],[56,14],[71,12],[84,3],[108,1],[205,14]]},"191":{"position":[[0,20],[21,30]]},"193":{"position":[[0,12],[13,2],[16,3],[20,4],[25,3],[29,1],[31,6],[38,7],[46,20],[96,1]]},"195":{"position":[[0,4],[5,5],[11,3],[15,1],[29,14]]},"198":{"position":[[207,1],[211,2],[225,1],[232,2],[339,7],[383,1],[387,1],[394,2],[399,1],[403,1],[410,2],[415,1],[419,1],[426,2],[431,1],[435,1],[442,2],[828,16]]},"200":{"position":[[0,6],[114,4],[210,5],[316,11]]},"203":{"position":[[7,45],[53,10],[64,25],[163,122],[286,32],[319,6],[326,4],[331,8],[396,1],[428,1],[457,1],[607,1],[635,1],[695,1],[717,1],[719,1],[721,2]]},"205":{"position":[[164,1],[195,1],[210,1],[302,1],[316,1],[344,1]]},"207":{"position":[[54,5],[60,28],[102,1]]},"213":{"position":[[0,26],[282,9],[292,12],[305,1],[309,1],[311,1],[315,1],[317,1],[321,1],[323,1],[327,1],[329,1],[333,1],[335,1],[339,1],[341,1],[345,1],[349,1],[351,1],[353,1],[355,1],[357,1],[359,1],[361,1],[371,3],[375,3],[379,3],[383,3],[387,3],[391,3],[397,1],[399,1],[417,3],[421,3],[425,3],[431,1],[469,3],[473,3],[491,3],[495,3],[499,3],[503,3],[507,3],[531,3],[535,3],[539,3],[543,3],[549,1],[551,1],[553,1],[555,1],[557,1],[570,3]]},"218":{"position":[[0,19],[20,9],[51,5],[80,17],[132,3],[136,48],[275,11],[287,15],[303,37],[341,104]]},"220":{"position":[[0,12],[102,1],[114,1],[173,66],[331,1],[394,65],[492,20]]},"224":{"position":[[4,11]]},"227":{"position":[[4,18]]},"231":{"position":[[0,44],[83,18],[102,8],[111,8],[120,4],[125,12],[246,57],[304,49]]},"233":{"position":[[0,29],[30,29],[60,25]]},"235":{"position":[[103,12],[128,22],[160,18]]},"238":{"position":[[13,5],[19,2],[56,16],[73,16],[119,4],[162,2],[165,3],[169,4],[186,4],[195,2],[198,4],[203,14],[222,2],[230,2],[325,5],[337,2],[340,4]]},"240":{"position":[[0,2],[43,4],[57,4],[69,4],[83,4],[256,12],[314,4],[319,20],[396,1],[549,1],[558,4],[590,4],[635,4],[652,4],[687,4],[707,2],[710,1],[772,1],[795,1],[833,1],[835,4],[840,1],[842,4],[867,8]]},"242":{"position":[[0,80]]},"245":{"position":[[233,23]]},"247":{"position":[[18,8]]},"249":{"position":[[32,1]]},"251":{"position":[[40,1],[64,1],[86,111]]},"255":{"position":[[76,72]]},"260":{"position":[[58,171],[230,34],[265,134]]},"265":{"position":[[67,2],[77,23],[132,18],[157,10],[172,13],[246,41]]},"269":{"position":[[0,20],[111,19]]},"271":{"position":[[92,4],[97,32],[130,2],[341,1]]},"274":{"position":[[175,1],[207,1],[216,1],[225,3],[252,8],[378,2],[398,1],[400,1],[497,1],[499,1],[641,1],[685,1]]},"276":{"position":[[99,1],[106,1],[312,2],[375,2],[467,2],[480,3],[501,2],[504,5],[520,3],[540,2],[543,4],[728,5]]},"278":{"position":[[4,6],[11,4]]},"281":{"position":[[21,5],[27,1],[52,5],[70,3],[74,4],[97,9],[107,5],[113,1],[138,5],[157,3],[161,5]]},"283":{"position":[[32,5],[38,1],[64,5],[92,4],[112,5],[118,5],[124,1],[148,5]]},"285":{"position":[[22,6],[29,5],[35,1],[59,5]]},"287":{"position":[[34,6],[41,5],[47,1],[63,1],[65,6],[72,1],[114,6],[145,8],[175,8],[184,1],[186,2],[207,2],[210,7]]},"289":{"position":[[33,6],[40,5],[46,1],[48,1],[91,6],[112,1],[114,1],[162,8],[171,8],[225,6],[232,1],[234,1],[236,1],[238,1]]},"291":{"position":[[41,6],[48,5],[54,1],[78,5],[96,1],[98,1],[127,4],[132,6],[139,1],[141,2]]},"293":{"position":[[38,5],[44,1],[62,6],[110,4],[130,7],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[239,7],[247,6],[274,5],[293,6],[337,6],[361,5],[385,4],[405,5],[411,4],[432,6],[466,6],[473,1],[475,1],[477,2]]},"295":{"position":[[38,6],[45,5],[51,1],[75,5],[93,1],[123,4],[144,4],[165,6],[180,6],[187,6],[213,6],[243,8],[266,1],[268,1],[278,8],[287,6],[311,1],[313,1],[350,4],[371,4],[385,7],[393,4],[415,4],[429,3],[433,4],[449,10],[460,4],[487,4],[503,5],[509,6],[516,6],[523,8],[532,4],[552,4],[573,4],[593,4],[598,1],[600,1],[602,1],[604,2],[621,2]]},"297":{"position":[[48,5],[54,1],[90,4],[110,1],[112,1],[155,6],[178,1],[180,7],[188,5],[198,2],[220,6],[242,6],[249,1],[251,2],[270,5],[276,1],[300,5],[322,7]]},"299":{"position":[[42,6],[49,5],[55,1],[79,5],[97,1],[108,1],[110,6],[145,4],[166,4],[187,6],[202,8],[211,6],[237,6],[261,1],[263,8],[317,2],[334,1],[336,1],[346,9],[356,4],[378,1],[380,6],[387,1],[424,6],[447,4],[461,13],[475,6],[499,4],[513,1],[515,6],[522,1],[539,6],[557,6],[564,6],[584,6],[591,2],[594,1],[622,8],[644,1],[646,2],[660,5],[666,4],[687,1],[689,4],[694,6],[701,7],[709,2],[723,3],[727,4],[746,6],[769,6],[791,6],[798,1],[800,1],[802,1],[804,2],[821,6],[828,2],[841,1],[843,6],[880,4],[899,4],[919,1],[921,6],[928,1],[987,6],[1011,6],[1034,4],[1055,1],[1057,6],[1064,5],[1074,2],[1091,4],[1117,6],[1124,1],[1126,1],[1128,1],[1130,2]]},"301":{"position":[[40,5],[46,1],[78,4],[97,5],[118,1],[120,1],[179,6],[203,6],[226,6],[249,1],[251,6],[258,5],[268,2],[285,4],[311,6],[318,1],[320,2],[323,5],[329,1],[353,5],[376,7]]},"303":{"position":[[44,5],[50,1],[68,4],[88,7],[96,5],[102,1],[126,5],[144,1],[169,1],[171,1],[229,6],[254,6],[276,5],[282,6],[334,6],[363,7],[390,6],[410,3],[414,4],[435,6],[462,8],[484,6],[504,7],[521,6],[545,5],[551,1],[553,1],[555,2]]},"305":{"position":[[39,5],[45,1],[63,4],[83,7],[91,5],[97,1],[121,5],[139,1],[165,1],[167,1],[208,4],[250,6],[272,5],[278,4],[303,4],[308,1],[310,1],[312,2]]},"307":{"position":[[47,5],[53,1],[71,4],[91,7],[99,5],[105,1],[129,5],[147,1],[163,1],[202,6],[249,4],[272,4],[286,1],[288,4],[293,1],[310,4],[331,6],[352,6],[359,1],[361,2],[380,4],[407,4],[428,4],[447,4],[468,4],[491,4],[496,2],[519,1],[521,6],[585,6],[608,6],[631,4],[658,6],[679,4],[705,6],[712,1],[714,2]]},"309":{"position":[[27,6],[34,5],[40,1],[64,5],[82,1],[84,1],[141,5],[167,8],[196,14],[211,6],[254,6],[261,1],[263,2]]},"311":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[172,5],[198,6],[216,4],[232,4],[247,4],[287,4],[314,5],[338,3],[429,4],[450,4],[472,6],[492,2],[495,6],[502,2]]},"313":{"position":[[30,5],[36,1],[122,5],[148,6],[166,4],[182,4],[197,4],[237,4],[264,5],[288,3],[379,4],[400,4],[422,6],[442,2],[445,7],[453,5],[459,1],[483,5]]},"315":{"position":[[36,5],[42,1],[60,4],[80,7],[88,5],[94,1],[118,5],[136,1],[158,1],[160,1],[189,6],[233,6],[256,6],[300,6],[331,5],[337,1],[339,1],[341,2]]},"317":{"position":[[39,6],[46,5],[52,1],[76,5]]},"319":{"position":[[43,6],[50,5],[56,1],[80,5],[100,9]]},"322":{"position":[[21,5],[27,1],[50,5],[68,3],[72,4],[95,6],[102,5],[108,1],[132,5],[150,1],[203,5],[470,2]]},"324":{"position":[[22,6],[29,5],[35,1],[59,5]]},"326":{"position":[[32,6],[39,5],[45,1],[71,6],[101,6],[134,6],[167,5],[199,1],[201,5],[210,2],[243,1],[245,6],[255,2],[273,1],[275,6],[286,2]]},"328":{"position":[[31,5],[37,1],[51,3],[55,5],[72,4],[93,4],[113,7],[121,5],[127,1],[151,5],[169,1],[184,4],[197,1],[199,1],[292,4],[297,5],[321,6],[341,4],[357,4],[375,4],[392,3],[396,6],[418,5],[465,8],[511,6],[555,6],[575,4],[596,4],[619,4],[624,1],[626,1],[628,2]]},"330":{"position":[[30,6],[37,5],[43,1],[67,5],[85,1],[178,4],[183,5],[207,6],[227,4],[243,4],[261,4],[278,3],[282,6],[304,5],[351,8],[397,6],[441,6],[461,4],[482,4],[505,4],[510,2]]},"332":{"position":[[26,5],[32,1],[68,5],[96,4],[121,6],[139,4],[157,4],[169,3],[173,4],[185,3],[189,4],[212,4],[232,5],[253,5],[259,5],[265,1],[289,5],[307,1],[401,5],[419,2],[422,4],[447,6],[467,4],[485,4],[508,4],[529,4],[549,5],[566,4],[584,4],[608,4],[642,6],[669,6],[709,8],[736,6],[771,2]]},"334":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"336":{"position":[[36,6],[43,5],[49,1],[73,5]]},"338":{"position":[[39,6],[46,5],[52,1],[76,5],[94,1],[96,1],[123,5],[129,6],[148,4],[166,6],[173,6],[199,4],[221,6],[228,1],[230,2]]},"340":{"position":[[39,5],[45,1],[62,4],[99,5],[105,1],[129,5],[147,1],[169,1],[171,1],[191,5],[197,6],[216,4],[234,5],[240,6],[247,1],[249,1],[251,2]]},"342":{"position":[[43,6],[50,5],[56,1],[80,5],[98,1],[118,5],[124,6],[143,4],[161,5],[167,6],[174,2]]},"344":{"position":[[39,5],[45,1],[65,5],[71,6],[90,4],[108,5],[114,7],[122,5],[128,1],[152,5]]},"346":{"position":[[43,6],[50,5],[56,1],[80,5]]},"348":{"position":[[32,5],[38,1],[67,4],[91,4],[112,4],[132,7],[140,5],[146,1],[170,5],[188,1],[210,1],[212,1],[239,8],[248,6],[275,6],[296,6],[340,6],[364,5],[386,4],[407,6],[439,6],[446,1],[448,1],[450,2]]},"350":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[122,4],[143,4],[164,6],[179,7],[187,6],[213,6],[243,6],[264,1],[266,1],[276,8],[285,6],[309,1],[311,1],[349,6],[372,4],[386,7],[394,4],[416,4],[430,3],[434,6],[452,10],[463,4],[490,6],[508,5],[514,6],[521,6],[528,8],[537,4],[557,6],[580,4],[600,4],[605,1],[607,1],[609,1],[611,2],[628,6],[635,2]]},"352":{"position":[[32,5],[38,1],[69,4],[90,4],[111,6],[126,8],[135,6],[161,6],[191,4],[210,1],[212,1],[222,8],[231,4],[253,1],[255,6],[262,1],[300,4],[321,4],[335,15],[351,4],[373,4],[387,1],[389,4],[394,1],[411,6],[429,8],[438,6],[460,6],[484,6],[491,1],[493,2],[507,7],[515,6],[522,6],[529,8],[538,4],[559,1],[561,6],[577,2],[598,6],[619,6],[642,4],[662,4],[667,1],[669,1],[671,1],[673,2],[690,7],[698,5],[704,1],[728,5],[746,1],[777,4],[798,4],[819,6],[834,8],[843,6],[869,6],[899,4],[918,1],[920,1],[930,8],[939,4],[961,1],[963,1],[1001,4],[1022,4],[1036,15],[1052,4],[1074,4],[1088,1],[1090,4],[1095,1],[1112,6],[1130,8],[1139,6],[1161,6],[1185,6],[1192,1],[1194,2],[1208,7],[1216,6],[1223,6],[1230,8],[1239,4],[1260,1],[1262,6],[1278,2],[1299,6],[1320,6],[1343,4],[1363,4],[1368,1],[1370,1],[1372,1],[1374,2],[1391,4],[1396,2]]},"354":{"position":[[36,6],[43,5],[49,1],[73,5]]},"356":{"position":[[40,5],[46,1],[67,4],[84,4],[105,6],[128,4],[147,1],[149,5],[155,1],[179,5],[197,1],[219,1],[221,1],[241,8],[250,6],[277,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,2]]},"358":{"position":[[30,5],[36,1],[138,5],[144,1],[168,5],[186,1],[208,1],[210,1],[241,4],[306,6],[329,4],[351,5],[372,4],[390,4],[406,5],[412,6],[419,6],[426,8],[435,4],[470,4],[491,4],[510,6],[517,4],[522,1],[524,1],[526,2]]},"360":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[130,4],[151,4],[184,4],[206,4],[220,3],[224,4],[240,7],[248,4],[275,4],[291,10],[302,6],[323,6],[346,4],[369,2]]},"362":{"position":[[30,5],[36,1],[74,4],[95,4],[109,7],[117,4],[139,4],[153,3],[157,4],[173,10],[184,4],[211,4],[227,5],[233,6],[240,6],[247,8],[256,6],[276,6],[299,4],[323,5],[329,1],[353,5]]},"364":{"position":[[34,6],[41,5],[47,1],[71,5]]},"366":{"position":[[26,5],[32,1],[86,5],[92,1],[116,5],[134,1],[156,1],[158,1],[186,7],[194,6],[218,4],[250,8],[296,6],[320,6],[327,1],[329,1],[331,2]]},"368":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[123,4],[137,5],[143,6],[164,1],[166,1],[194,5],[200,6],[227,6],[248,6],[292,6],[316,5],[339,4],[360,6],[395,6],[421,1],[423,1],[425,2]]},"370":{"position":[[26,5],[32,1],[70,7],[92,1],[94,1],[121,8],[130,6],[157,6],[178,6],[222,6],[246,5],[268,4],[289,6],[321,6],[328,1],[330,2],[333,5],[339,1],[363,5],[381,1],[417,4],[431,7],[439,6],[460,1],[462,1],[489,8],[498,6],[525,6],[546,6],[590,6],[614,5],[636,4],[657,6],[689,6],[696,1],[698,1],[700,2]]},"372":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6]]},"374":{"position":[[29,5],[35,1],[91,6],[98,5],[104,1],[128,5],[146,1],[169,1],[171,1],[199,9],[209,6],[227,10],[238,6],[270,8],[302,8],[334,7],[358,6],[401,6],[408,1],[410,1],[412,2]]},"376":{"position":[[29,5],[35,1],[46,10],[57,6],[75,6],[82,6],[107,1],[109,5],[117,2],[120,5],[126,1],[139,6],[157,5],[163,6]]},"378":{"position":[[37,5],[43,1],[64,4],[101,5],[107,1],[131,5],[149,1],[171,1],[173,1],[222,6],[248,6],[270,5],[276,6],[326,6],[355,7],[383,6],[404,3],[408,4],[429,6],[456,8],[478,6],[498,8],[507,6],[536,5],[542,1],[544,1],[546,2]]},"380":{"position":[[37,5],[43,1],[111,5],[117,1],[141,5],[159,1],[182,1],[184,1],[244,5],[262,6],[269,6],[294,14],[309,6],[352,6],[359,1],[361,1],[363,2]]},"382":{"position":[[29,6],[36,5],[42,1],[66,5],[84,1],[178,5],[196,6],[203,6],[221,4],[237,4],[252,4],[292,6],[314,5],[338,3],[342,8],[388,6],[409,3],[413,6],[433,4],[457,6],[482,4],[487,2]]},"384":{"position":[[28,5],[34,1],[105,6],[133,5],[151,6],[158,6],[176,4],[192,4],[207,4],[247,4],[267,5],[291,3],[295,8],[341,6],[385,6],[405,4],[429,4],[452,5],[458,5],[464,1],[488,5]]},"386":{"position":[[38,5],[52,5],[58,5],[64,1],[88,5],[106,1],[108,1],[129,5],[153,1],[155,2]]},"388":{"position":[[39,6],[46,5],[52,1]]},"390":{"position":[[28,5],[34,1],[128,5],[146,6],[153,6],[171,4],[187,4],[202,4],[242,6],[269,5],[293,3],[297,8],[343,6],[387,6],[407,4],[431,4],[454,5],[460,5],[466,1],[490,5]]},"393":{"position":[[66,29]]},"399":{"position":[[0,19]]},"405":{"position":[[65,4],[70,2],[88,6]]},"417":{"position":[[29,5]]},"419":{"position":[[138,8],[218,1]]},"423":{"position":[[140,2]]},"425":{"position":[[164,8],[173,8]]},"427":{"position":[[60,4]]},"437":{"position":[[0,11]]},"439":{"position":[[92,3]]},"441":{"position":[[126,44]]},"443":{"position":[[11,3],[22,3],[36,1],[74,3],[83,4]]},"447":{"position":[[6,1],[12,1],[21,45],[74,2]]},"450":{"position":[[11,1],[167,10]]},"455":{"position":[[10,86]]},"457":{"position":[[86,24],[111,1],[128,1],[283,1],[287,1],[292,1],[305,1],[309,1],[317,9],[327,29],[391,48]]},"461":{"position":[[36,43],[80,1],[88,5],[106,6],[119,10],[135,7],[143,31],[175,5],[193,28],[234,18]]},"463":{"position":[[13,1],[25,11],[83,6],[96,4],[153,12],[166,8],[185,17],[203,1],[218,62]]},"465":{"position":[[29,26],[154,4],[196,19],[236,13],[304,5],[321,12]]},"467":{"position":[[0,6],[7,7],[15,8]]}}}],["0",{"_index":74,"t":{"55":{"position":[[13,65]]},"66":{"position":[[15,1],[22,1],[29,2]]},"68":{"position":[[0,3]]},"81":{"position":[[0,42]]},"94":{"position":[[205,2],[208,1],[210,1],[212,1],[214,2],[219,1],[222,1],[227,1],[229,1],[240,1]]},"121":{"position":[[519,2]]},"144":{"position":[[367,3]]},"152":{"position":[[90,2],[103,2],[432,2]]},"154":{"position":[[394,2],[410,2],[439,1]]},"167":{"position":[[285,2],[332,2],[418,2],[468,2],[553,2],[597,2]]},"198":{"position":[[227,4],[381,1],[392,1],[397,1],[401,1],[405,1],[407,2],[413,1],[417,1],[421,1],[433,1],[437,1],[439,2]]},"213":{"position":[[347,1]]},"299":{"position":[[1086,4]]},"303":{"position":[[249,4],[360,2],[457,4]]},"307":{"position":[[674,4]]},"319":{"position":[[98,1]]},"352":{"position":[[614,4],[1315,4]]}}}],["0,1,2...di​=0,1,2",{"_index":59,"t":{"48":{"position":[[267,24]]}}}],["0.000",{"_index":91,"t":{"59":{"position":[[224,14]]}}}],["0.1xxxxx",{"_index":124,"t":{"92":{"position":[[0,11]]}}}],["0.1xxx，负数1.1xxx",{"_index":138,"t":{"94":{"position":[[330,44]]}}}],["00",{"_index":100,"t":{"76":{"position":[[179,2]]}}}],["00:00:00",{"_index":920,"t":{"299":{"position":[[284,10],[307,9]]},"311":{"position":[[276,10]]},"313":{"position":[[226,10]]}}}],["01",{"_index":102,"t":{"76":{"position":[[185,5]]},"303":{"position":[[215,2]]},"311":{"position":[[273,2]]},"313":{"position":[[223,2]]},"348":{"position":[[323,2]]},"358":{"position":[[289,2]]},"366":{"position":[[279,2]]},"370":{"position":[[205,2],[573,2]]}}}],["0110000000011000]\\begin{bmatrix",{"_index":521,"t":{"198":{"position":[[347,33]]}}}],["02",{"_index":942,"t":{"305":{"position":[[236,2]]},"356":{"position":[[327,2]]}}}],["04",{"_index":865,"t":{"289":{"position":[[81,2]]}}}],["05",{"_index":888,"t":{"293":{"position":[[320,2]]}}}],["06",{"_index":919,"t":{"299":{"position":[[278,2],[304,2]]},"303":{"position":[[212,2]]},"305":{"position":[[233,2]]},"309":{"position":[[238,2]]},"311":{"position":[[399,2]]},"313":{"position":[[349,2]]},"315":{"position":[[283,2]]},"328":{"position":[[448,2],[494,2],[538,2]]},"330":{"position":[[334,2],[380,2],[424,2]]}}}],["0656",{"_index":1023,"t":{"332":{"position":[[342,4]]}}}],["07",{"_index":976,"t":{"311":{"position":[[365,2]]},"313":{"position":[[315,2]]},"378":{"position":[[205,2],[208,2]]},"382":{"position":[[278,2],[374,2]]},"384":{"position":[[233,2],[327,2]]},"390":{"position":[[228,2],[329,2]]}}}],["08",{"_index":921,"t":{"299":{"position":[[301,2]]},"309":{"position":[[241,2]]},"356":{"position":[[324,2]]},"368":{"position":[[275,2]]},"380":{"position":[[336,2]]},"384":{"position":[[368,2]]},"390":{"position":[[370,2]]}}}],["09",{"_index":972,"t":{"311":{"position":[[270,2],[362,2],[402,2]]},"313":{"position":[[220,2],[312,2],[352,2]]},"374":{"position":[[385,2]]},"382":{"position":[[275,2],[371,2]]},"384":{"position":[[230,2],[324,2]]},"390":{"position":[[225,2],[326,2]]}}}],["0;high",{"_index":41,"t":{"36":{"position":[[155,6]]}}}],["0;i",{"_index":492,"t":{"178":{"position":[[144,3]]}}}],["0;i<g.vexnum;i",{"_index":547,"t":{"203":{"position":[[459,18]]}}}],["0;i<g.vexnuml;i",{"_index":544,"t":{"203":{"position":[[398,18]]}}}],["0;i<len;i",{"_index":454,"t":{"167":{"position":[[106,13]]}}}],["0;i<n",{"_index":207,"t":{"108":{"position":[[151,5]]},"114":{"position":[[311,5]]}}}],["0;v<g.vexnum;++v",{"_index":567,"t":{"205":{"position":[[166,17],[212,17]]}}}],["0^2,1^2",{"_index":61,"t":{"48":{"position":[[349,8]]}}}],["0~999",{"_index":327,"t":{"121":{"position":[[0,80]]}}}],["0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0",{"_index":333,"t":{"121":{"position":[[470,28]]}}}],["0和全1",{"_index":137,"t":{"94":{"position":[[184,9]]}}}],["0有两种表示：10000和00000",{"_index":85,"t":{"57":{"position":[[179,24]]}}}],["0舍1入、末位恒置1",{"_index":139,"t":{"94":{"position":[[375,16]]}}}],["0，余数左移并且加上除数；余数为正，商1",{"_index":117,"t":{"85":{"position":[[67,37]]}}}],["0，并且加上除数的补码，余数为正商0",{"_index":115,"t":{"83":{"position":[[44,32]]}}}],["1",{"_index":0,"t":{"4":{"position":[[0,30]]},"13":{"position":[[96,6]]},"16":{"position":[[29,5],[91,5]]},"23":{"position":[[31,2]]},"25":{"position":[[61,2],[321,12],[334,48]]},"36":{"position":[[170,2],[267,2],[290,2]]},"39":{"position":[[0,5]]},"43":{"position":[[0,4],[42,62]]},"48":{"position":[[232,7]]},"57":{"position":[[68,2],[89,1],[144,2]]},"59":{"position":[[144,1],[156,1]]},"66":{"position":[[26,2],[34,1]]},"76":{"position":[[0,7],[131,12]]},"81":{"position":[[138,3]]},"92":{"position":[[90,1],[92,12]]},"94":{"position":[[217,1],[224,2],[235,2],[238,1],[406,58],[465,20]]},"100":{"position":[[12,2],[320,129],[450,4],[535,4]]},"102":{"position":[[310,4],[432,2],[507,2],[528,2],[573,2],[595,2]]},"104":{"position":[[0,137],[207,4]]},"108":{"position":[[22,4]]},"110":{"position":[[0,6],[863,3]]},"114":{"position":[[187,4],[260,4],[489,5]]},"116":{"position":[[0,3],[227,51],[1431,3]]},"119":{"position":[[104,4]]},"121":{"position":[[109,7],[517,1]]},"125":{"position":[[0,4]]},"140":{"position":[[0,5]]},"144":{"position":[[191,2],[308,2]]},"148":{"position":[[408,2]]},"150":{"position":[[193,10],[632,2],[920,2],[936,2],[956,2],[974,2],[996,2],[1012,2],[1802,2],[1820,2],[1875,2],[1900,2]]},"152":{"position":[[201,1],[302,2]]},"159":{"position":[[151,3]]},"165":{"position":[[0,25]]},"167":{"position":[[0,6],[135,2],[440,2],[784,3]]},"169":{"position":[[33,1],[50,1],[73,4]]},"178":{"position":[[33,13],[178,2]]},"183":{"position":[[24,35]]},"189":{"position":[[41,14]]},"195":{"position":[[52,2]]},"198":{"position":[[209,1],[385,1],[389,2],[423,2],[429,1]]},"203":{"position":[[0,6]]},"207":{"position":[[29,24]]},"213":{"position":[[307,1],[578,3]]},"283":{"position":[[110,1],[134,2]]},"285":{"position":[[45,2]]},"291":{"position":[[64,2]]},"293":{"position":[[59,2],[107,2],[154,2],[197,2],[271,2],[429,2]]},"295":{"position":[[61,2],[120,2],[141,2],[162,2],[368,2],[412,2],[591,1]]},"297":{"position":[[194,3],[240,1],[286,2]]},"299":{"position":[[65,2],[142,2],[163,2],[444,2],[496,2],[534,4],[789,1],[1031,2],[1070,3]]},"301":{"position":[[223,2],[264,3],[339,2]]},"303":{"position":[[65,2],[112,2],[331,2]]},"305":{"position":[[60,2],[107,2],[205,2]]},"307":{"position":[[68,2],[115,2],[199,2]]},"309":{"position":[[50,2],[108,2]]},"311":{"position":[[54,2],[229,2],[244,2],[426,2],[447,2],[466,5]]},"313":{"position":[[179,2],[194,2],[376,2],[397,2],[416,5],[469,2]]},"315":{"position":[[57,2],[104,2]]},"317":{"position":[[62,2]]},"319":{"position":[[66,2]]},"322":{"position":[[118,2]]},"324":{"position":[[45,2]]},"326":{"position":[[282,3]]},"328":{"position":[[69,2],[90,2],[137,2],[354,2],[572,2],[593,2]]},"330":{"position":[[53,2],[240,2],[458,2],[479,2]]},"332":{"position":[[136,2],[154,2],[251,1],[275,2],[526,2],[563,2],[581,2]]},"334":{"position":[[53,2]]},"336":{"position":[[59,2]]},"338":{"position":[[62,2],[145,2]]},"340":{"position":[[80,2],[115,2],[213,2]]},"342":{"position":[[66,2],[140,2]]},"344":{"position":[[138,2]]},"346":{"position":[[66,2]]},"348":{"position":[[109,2],[156,2],[383,2]]},"350":{"position":[[59,2],[119,2],[140,2],[161,2],[369,2],[413,2],[598,1]]},"352":{"position":[[66,2],[87,2],[318,2],[370,2],[660,1],[714,2],[774,2],[795,2],[1019,2],[1071,2],[1361,1]]},"354":{"position":[[59,2]]},"356":{"position":[[81,2],[125,2],[165,2],[208,2],[384,2]]},"358":{"position":[[119,2],[154,2],[326,2],[387,2]]},"360":{"position":[[59,2],[203,2]]},"362":{"position":[[92,2],[136,2],[339,2]]},"364":{"position":[[57,2]]},"366":{"position":[[67,2],[102,2],[215,2]]},"368":{"position":[[54,2]]},"370":{"position":[[58,2],[265,2],[349,2],[414,2],[633,2]]},"372":{"position":[[53,2]]},"374":{"position":[[114,2],[331,2],[355,2]]},"376":{"position":[[115,1],[136,2]]},"378":{"position":[[82,2],[117,2],[296,2]]},"380":{"position":[[92,2],[127,2]]},"382":{"position":[[52,2],[249,2],[430,2]]},"384":{"position":[[204,2],[402,2],[474,2]]},"386":{"position":[[74,2],[144,1]]},"390":{"position":[[199,2],[404,2],[476,2]]},"410":{"position":[[192,1]]},"419":{"position":[[136,1]]},"439":{"position":[[90,1]]},"443":{"position":[[95,1]]},"447":{"position":[[149,1]]},"465":{"position":[[136,1]]}}}],["1)/2",{"_index":487,"t":{"169":{"position":[[223,4]]},"193":{"position":[[75,4]]}}}],["1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r",{"_index":338,"t":{"121":{"position":[[548,33]]}}}],["1)^",{"_index":121,"t":{"90":{"position":[[21,4]]},"94":{"position":[[133,4]]}}}],["1)return",{"_index":463,"t":{"167":{"position":[[276,8],[409,8],[544,8]]}}}],["1)}{2",{"_index":266,"t":{"116":{"position":[[551,6]]}}}],["1)}{2}2n(n−1)​，故时间复杂度为o(n2)o(n^2)o(n2",{"_index":259,"t":{"114":{"position":[[532,38]]}}}],["1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为o(n2)o(n^2)o(n2",{"_index":219,"t":{"108":{"position":[[416,73]]}}}],["1)红叔叔（2",{"_index":11,"t":{"13":{"position":[[38,57]]}}}],["1+8+23组合。ieee754标准表示成浮点数真值为：(−1)s∗1.m∗2e−127",{"_index":133,"t":{"94":{"position":[[87,45]]}}}],["1,2,5",{"_index":597,"t":{"213":{"position":[[585,7]]}}}],["1,2,5,6",{"_index":598,"t":{"213":{"position":[[593,9]]}}}],["1,2,5,6,3",{"_index":599,"t":{"213":{"position":[[603,11]]}}}],["1,2,5,6,3,4",{"_index":600,"t":{"213":{"position":[[615,13]]}}}],["1,2,5,6,3,4,7",{"_index":601,"t":{"213":{"position":[[629,15]]}}}],["1,2,5,6,3,4,7,0",{"_index":602,"t":{"213":{"position":[[645,17]]}}}],["1,high",{"_index":241,"t":{"110":{"position":[[896,8]]}}}],["1,j",{"_index":361,"t":{"144":{"position":[[185,3]]}}}],["1,k",{"_index":417,"t":{"152":{"position":[[84,3]]},"154":{"position":[[388,3]]}}}],["1.000",{"_index":75,"t":{"55":{"position":[[92,55]]}}}],["1.1xxxxx",{"_index":125,"t":{"92":{"position":[[12,11]]}}}],["1.m*2^{e",{"_index":134,"t":{"94":{"position":[[138,9]]}}}],["1.已知树高求结点总数：sum",{"_index":440,"t":{"159":{"position":[[129,15]]}}}],["1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\begin{align",{"_index":439,"t":{"159":{"position":[[45,81]]}}}],["1.若i为偶数则双亲为\\frac{i}{2",{"_index":264,"t":{"116":{"position":[[499,26]]}}}],["1.若i为偶数则双亲为i/2",{"_index":485,"t":{"169":{"position":[[185,18]]}}}],["1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":484,"t":{"169":{"position":[[95,87]]}}}],["1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":263,"t":{"116":{"position":[[411,85]]}}}],["1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m",{"_index":504,"t":{"185":{"position":[[0,32]]}}}],["1.，所以尾数的精度是24，能表示24",{"_index":129,"t":{"94":{"position":[[22,35]]}}}],["10",{"_index":103,"t":{"76":{"position":[[191,5]]},"293":{"position":[[127,2]]},"295":{"position":[[546,5],[616,4]]},"303":{"position":[[85,2]]},"305":{"position":[[80,2]]},"307":{"position":[[88,2]]},"315":{"position":[[77,2],[209,3]]},"328":{"position":[[110,2]]},"340":{"position":[[95,3]]},"348":{"position":[[129,2]]},"350":{"position":[[551,5],[623,4]]},"358":{"position":[[134,3],[366,5]]},"362":{"position":[[272,3]]},"366":{"position":[[82,3]]},"374":{"position":[[87,3]]},"378":{"position":[[97,3]]},"380":{"position":[[107,3]]}}}],["100",{"_index":1007,"t":{"328":{"position":[[207,4]]},"330":{"position":[[93,4]]}}}],["1024;}http",{"_index":778,"t":{"274":{"position":[[196,10]]}}}],["1025",{"_index":996,"t":{"326":{"position":[[95,5]]}}}],["109",{"_index":1021,"t":{"332":{"position":[[315,4]]}}}],["10:08:03",{"_index":1108,"t":{"390":{"position":[[376,10]]}}}],["11",{"_index":101,"t":{"76":{"position":[[182,2]]},"315":{"position":[[286,2]]},"384":{"position":[[261,5]]}}}],["111",{"_index":950,"t":{"307":{"position":[[242,6]]}}}],["11:28:52",{"_index":1096,"t":{"384":{"position":[[374,10]]}}}],["11:37:49",{"_index":1076,"t":{"374":{"position":[[391,9]]}}}],["11:45:57",{"_index":1051,"t":{"358":{"position":[[295,10]]}}}],["11:49:11",{"_index":1068,"t":{"370":{"position":[[211,10],[579,10]]}}}],["11:49:31",{"_index":1039,"t":{"348":{"position":[[329,10]]}}}],["11:50:24",{"_index":1060,"t":{"366":{"position":[[285,10]]}}}],["12",{"_index":951,"t":{"307":{"position":[[268,3]]},"368":{"position":[[119,3],[278,2]]},"370":{"position":[[318,2],[686,2]]},"461":{"position":[[113,2]]}}}],["1232−1",{"_index":1208,"t":{"450":{"position":[[192,6]]}}}],["123456",{"_index":847,"t":{"283":{"position":[[82,9]]},"332":{"position":[[86,9]]}}}],["127.0.0.1",{"_index":1171,"t":{"425":{"position":[[78,11]]}}}],["127.0.0.1只能本机访问)或改成本机ip地址，否则影响远程ip",{"_index":1172,"t":{"425":{"position":[[103,36]]}}}],["127}(−1)s∗1.m∗2e−127",{"_index":135,"t":{"94":{"position":[[148,20]]}}}],["129",{"_index":933,"t":{"303":{"position":[[302,4]]}}}],["13",{"_index":591,"t":{"213":{"position":[[433,2],[442,2],[451,2],[460,2]]},"338":{"position":[[104,3]]},"340":{"position":[[179,3]]},"342":{"position":[[106,3]]},"344":{"position":[[53,3]]},"348":{"position":[[220,3],[436,2]]},"350":{"position":[[99,3],[319,3]]},"352":{"position":[[46,3],[270,3],[754,3],[971,3]]},"356":{"position":[[229,3]]},"358":{"position":[[218,3]]},"362":{"position":[[44,3]]},"366":{"position":[[166,3]]},"368":{"position":[[94,3]]},"370":{"position":[[40,3],[102,3],[389,3],[470,3]]},"374":{"position":[[179,3]]},"378":{"position":[[181,3]]},"380":{"position":[[192,3]]},"382":{"position":[[92,3]]},"384":{"position":[[42,3]]},"390":{"position":[[42,3]]}}}],["13:34:49",{"_index":890,"t":{"293":{"position":[[326,10]]}}}],["14",{"_index":595,"t":{"213":{"position":[[559,2]]},"297":{"position":[[86,3]]},"299":{"position":[[876,3]]},"301":{"position":[[74,3]]},"378":{"position":[[400,3]]}}}],["14:03:02",{"_index":1080,"t":{"378":{"position":[[211,10]]}}}],["14:36:26",{"_index":1047,"t":{"356":{"position":[[330,10]]}}}],["158",{"_index":878,"t":{"293":{"position":[[82,4],[380,4]]}}}],["158800882",{"_index":974,"t":{"311":{"position":[[301,12]]},"313":{"position":[[251,12]]}}}],["15:02:50",{"_index":1064,"t":{"368":{"position":[[281,10]]}}}],["15的子节点，然后进入9的子节点，对比了6",{"_index":31,"t":{"30":{"position":[[124,39]]}}}],["16",{"_index":927,"t":{"301":{"position":[[371,4]]},"378":{"position":[[242,5]]}}}],["16.x",{"_index":822,"t":{"276":{"position":[[200,4],[253,6]]}}}],["1624538837259",{"_index":1027,"t":{"332":{"position":[[627,14],[694,14]]}}}],["16:07:11",{"_index":943,"t":{"305":{"position":[[239,10]]}}}],["16:32:40",{"_index":987,"t":{"315":{"position":[[289,10]]}}}],["17",{"_index":1095,"t":{"384":{"position":[[371,2]]}}}],["17002",{"_index":940,"t":{"305":{"position":[[150,6]]}}}],["17:04:31",{"_index":979,"t":{"311":{"position":[[405,10]]},"313":{"position":[[355,10]]}}}],["17:12:50",{"_index":959,"t":{"309":{"position":[[244,9]]}}}],["17:56:38",{"_index":931,"t":{"303":{"position":[[218,10]]}}}],["18",{"_index":874,"t":{"291":{"position":[[106,5]]},"299":{"position":[[816,4]]},"311":{"position":[[212,3]]},"313":{"position":[[162,3]]},"352":{"position":[[685,4],[1386,4]]},"378":{"position":[[377,5]]}}}],["180",{"_index":1038,"t":{"348":{"position":[[291,4]]},"370":{"position":[[173,4],[541,4]]},"457":{"position":[[113,4],[118,9]]}}}],["181",{"_index":869,"t":{"289":{"position":[[131,4]]}}}],["1812",{"_index":955,"t":{"309":{"position":[[92,5]]}}}],["1845",{"_index":938,"t":{"303":{"position":[[514,6]]}}}],["18:55:02",{"_index":977,"t":{"311":{"position":[[368,10]]},"313":{"position":[[318,10]]}}}],["18:56:07",{"_index":1092,"t":{"382":{"position":[[281,10]]},"384":{"position":[[236,10]]},"390":{"position":[[231,10]]}}}],["18:56:21",{"_index":1093,"t":{"382":{"position":[[377,10]]},"384":{"position":[[330,10]]},"390":{"position":[[332,10]]}}}],["19665",{"_index":1103,"t":{"388":{"position":[[170,6]]}}}],["1;a[0",{"_index":158,"t":{"100":{"position":[[565,6]]}}}],["1;high",{"_index":169,"t":{"102":{"position":[[419,6]]}}}],["1;i",{"_index":208,"t":{"108":{"position":[[157,7]]},"114":{"position":[[317,7]]}}}],["1;j",{"_index":171,"t":{"102":{"position":[[545,3],[559,3]]},"152":{"position":[[296,3]]}}}],["1;j>i;j",{"_index":209,"t":{"108":{"position":[[179,7]]}}}],["1]+1",{"_index":405,"t":{"150":{"position":[[1774,4]]}}}],["1][0,p−1",{"_index":57,"t":{"48":{"position":[[161,9]]}}}],["1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p",{"_index":73,"t":{"50":{"position":[[82,45]]}}}],["1]ch[0...k−1]=ch[j−k...j−1",{"_index":380,"t":{"148":{"position":[[424,27]]}}}],["1]ch[0∼k−1]=ch[j−k∼j−1",{"_index":389,"t":{"150":{"position":[[651,23]]}}}],["1]中寻找最小的元素a[k",{"_index":248,"t":{"114":{"position":[[213,14]]}}}],["1]和l[k+1...n]，其中l[k]为pivot，使得左边表的值都小于pivot",{"_index":221,"t":{"110":{"position":[[76,80]]}}}],["1]，所以删除后节点的关键字个数不能小于（m/2",{"_index":19,"t":{"25":{"position":[[31,29]]}}}],["1^2,2^2",{"_index":62,"t":{"48":{"position":[[358,8]]}}}],["1n−1",{"_index":579,"t":{"209":{"position":[[122,14]]},"211":{"position":[[87,8]]},"213":{"position":[[210,29]]}}}],["1union|intersect|except（并、交、差）查询语句2",{"_index":680,"t":{"240":{"position":[[595,39]]}}}],["1}(n",{"_index":217,"t":{"108":{"position":[[396,4]]}}}],["1},k_j^{d",{"_index":330,"t":{"121":{"position":[[399,9]]}}}],["1}.......q_0qr​,qr−1​.......q0",{"_index":341,"t":{"121":{"position":[[695,31]]}}}],["1~n",{"_index":445,"t":{"161":{"position":[[0,71]]}}}],["1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3",{"_index":446,"t":{"161":{"position":[[72,84]]}}}],["1→2",{"_index":589,"t":{"213":{"position":[[367,3]]}}}],["1→2→4",{"_index":592,"t":{"213":{"position":[[436,5],[445,5],[454,5],[463,5]]}}}],["1→2→4→7",{"_index":596,"t":{"213":{"position":[[562,7]]}}}],["1→5",{"_index":593,"t":{"213":{"position":[[481,3],[487,3]]}}}],["1→5→3",{"_index":590,"t":{"213":{"position":[[403,5],[411,5]]}}}],["1→6",{"_index":594,"t":{"213":{"position":[[515,3],[521,3],[527,3]]}}}],["1−(2n−1)≤x≤2n−1",{"_index":84,"t":{"57":{"position":[[162,16]]}}}],["1−2n≤x≤2n−1",{"_index":90,"t":{"59":{"position":[[212,11]]}}}],["1−2−n)≤x≤1−2−n",{"_index":77,"t":{"57":{"position":[[43,24]]}}}],["1∣e∣=∣v∣−1",{"_index":576,"t":{"207":{"position":[[109,10]]}}}],["1≤x≤1−2−n",{"_index":87,"t":{"59":{"position":[[126,17]]}}}],["1、非空二叉树的叶结点等于度为2的结点数加1，即n0",{"_index":479,"t":{"169":{"position":[[0,27]]}}}],["1个字符串有关。我们看前部分字符串，发现共同前后缀是ab，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是c这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是abc？长度为2，那么next[j+1]就是在next[j]的基础上加1",{"_index":401,"t":{"150":{"position":[[1345,231]]}}}],["1中找到适合l[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i",{"_index":145,"t":{"100":{"position":[[104,108]]}}}],["1变为0",{"_index":24,"t":{"25":{"position":[[383,36]]}}}],["1和2",{"_index":288,"t":{"116":{"position":[[1312,5]]},"218":{"position":[[98,33]]}}}],["1开始的，如果是0",{"_index":475,"t":{"167":{"position":[[618,36]]}}}],["1次递归调用，所以栈为o(n)n−1次递归调用，所以栈为o(n)，平均是o(log2n)o(log_{2}n)o(log2​n",{"_index":243,"t":{"110":{"position":[[1016,64]]}}}],["1躺排序，第i躺排序要进行n",{"_index":215,"t":{"108":{"position":[[336,14]]}}}],["1躺，一共移动3(n",{"_index":257,"t":{"114":{"position":[[478,10]]}}}],["1项是已经排序好的子序列，后面的i~n是待排序的，是可以很容易想到解决方法就是在1~i",{"_index":144,"t":{"100":{"position":[[60,43]]}}}],["1（从右到左找到第一个1，前面的数取反即可）。如果是从x",{"_index":86,"t":{"59":{"position":[[0,88]]}}}],["1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k",{"_index":607,"t":{"220":{"position":[[13,34]]}}}],["1，m",{"_index":18,"t":{"23":{"position":[[27,3]]},"25":{"position":[[27,3]]}}}],["1，且其左（右）兄弟的关键字数目大于（m/2",{"_index":20,"t":{"25":{"position":[[143,77]]}}}],["1，二叉树的非终端结点数为：n",{"_index":505,"t":{"185":{"position":[[40,112]]}}}],["1，余数左移减去除数；异号商0",{"_index":118,"t":{"87":{"position":[[66,39]]}}}],["1，列2",{"_index":682,"t":{"240":{"position":[[657,10]]}}}],["1，则加上被乘数，为0则加0",{"_index":106,"t":{"79":{"position":[[50,20]]}}}],["1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0",{"_index":384,"t":{"150":{"position":[[401,62]]}}}],["1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0",{"_index":412,"t":{"150":{"position":[[2506,38]]}}}],["1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的aof",{"_index":1142,"t":{"417":{"position":[[35,70]]}}}],["1；阶码：8；尾数：23",{"_index":128,"t":{"94":{"position":[[5,16]]}}}],["2",{"_index":12,"t":{"13":{"position":[[147,6]]},"39":{"position":[[90,5],[96,30]]},"43":{"position":[[37,4]]},"48":{"position":[[292,14]]},"57":{"position":[[71,1],[91,3]]},"59":{"position":[[158,3]]},"76":{"position":[[144,6]]},"100":{"position":[[622,9]]},"102":{"position":[[474,2],[609,7]]},"104":{"position":[[769,11]]},"108":{"position":[[274,11]]},"110":{"position":[[157,4]]},"114":{"position":[[424,9]]},"116":{"position":[[105,7]]},"121":{"position":[[297,6]]},"123":{"position":[[588,4]]},"125":{"position":[[5,4]]},"140":{"position":[[63,5]]},"144":{"position":[[294,2]]},"150":{"position":[[533,11]]},"178":{"position":[[181,7]]},"185":{"position":[[166,38]]},"203":{"position":[[90,11],[156,6]]},"213":{"position":[[313,1],[363,1],[582,2]]},"289":{"position":[[223,1]]},"293":{"position":[[358,2]]},"297":{"position":[[318,3]]},"299":{"position":[[580,3],[606,4],[640,3],[894,4]]},"301":{"position":[[92,4]]},"303":{"position":[[481,2]]},"307":{"position":[[442,4],[628,2],[701,3]]},"336":{"position":[[91,2]]},"340":{"position":[[158,2]]},"344":{"position":[[87,2]]},"348":{"position":[[361,2]]},"352":{"position":[[297,2],[998,2]]},"356":{"position":[[274,2],[362,2]]},"358":{"position":[[348,2]]},"366":{"position":[[145,2]]},"368":{"position":[[313,2]]},"370":{"position":[[243,2],[611,2]]},"378":{"position":[[451,4],[475,2]]},"380":{"position":[[213,2]]},"410":{"position":[[227,1]]},"419":{"position":[[195,1]]},"465":{"position":[[159,1]]}}}],["2(key1",{"_index":646,"t":{"238":{"position":[[153,8]]}}}],["2*log_{2}{(n+1)}h≤2∗log2​(n+1",{"_index":10,"t":{"11":{"position":[[242,30]]}}}],["2.已知编号i求双亲：(i/2",{"_index":442,"t":{"159":{"position":[[157,22]]}}}],["2.若i为奇数则双亲为(i",{"_index":486,"t":{"169":{"position":[[209,13]]}}}],["2.若i为奇数则双亲为\\frac{(i",{"_index":265,"t":{"116":{"position":[[531,19]]}}}],["20",{"_index":886,"t":{"293":{"position":[[289,3]]},"299":{"position":[[233,3]]},"350":{"position":[[209,3]]},"352":{"position":[[157,3],[865,3]]}}}],["2019",{"_index":971,"t":{"311":{"position":[[264,5],[356,5]]},"313":{"position":[[214,5],[306,5]]},"382":{"position":[[269,5],[365,5]]},"384":{"position":[[224,5],[318,5]]},"390":{"position":[[320,5]]}}}],["2020",{"_index":1075,"t":{"374":{"position":[[379,5]]}}}],["2021",{"_index":864,"t":{"289":{"position":[[75,5]]},"293":{"position":[[314,5]]},"299":{"position":[[272,5],[295,5]]},"303":{"position":[[206,5]]},"305":{"position":[[227,5]]},"309":{"position":[[232,5]]},"311":{"position":[[393,5]]},"313":{"position":[[343,5]]},"315":{"position":[[277,5]]},"328":{"position":[[442,5],[488,5],[532,5]]},"330":{"position":[[328,5],[374,5],[418,5]]},"348":{"position":[[317,5]]},"356":{"position":[[318,5]]},"358":{"position":[[283,5]]},"366":{"position":[[273,5]]},"368":{"position":[[269,5]]},"370":{"position":[[199,5],[567,5]]},"378":{"position":[[199,5]]},"380":{"position":[[330,5]]},"384":{"position":[[362,5]]},"390":{"position":[[219,5],[364,5]]}}}],["20:01:26",{"_index":1015,"t":{"328":{"position":[[454,10],[500,10]]},"330":{"position":[[340,10],[386,10]]}}}],["20:01:35",{"_index":1016,"t":{"328":{"position":[[544,10]]},"330":{"position":[[430,10]]}}}],["20:05:02",{"_index":1084,"t":{"380":{"position":[[342,9]]}}}],["21",{"_index":1014,"t":{"328":{"position":[[451,2],[497,2],[541,2]]},"330":{"position":[[337,2],[383,2],[427,2]]},"348":{"position":[[326,2]]},"358":{"position":[[292,2]]},"366":{"position":[[282,2]]},"370":{"position":[[208,2],[576,2]]}}}],["2112112",{"_index":1107,"t":{"390":{"position":[[258,10]]}}}],["22",{"_index":898,"t":{"295":{"position":[[209,3]]},"299":{"position":[[281,2]]},"326":{"position":[[252,2]]},"374":{"position":[[388,2]]}}}],["232−12^{32",{"_index":1207,"t":{"450":{"position":[[178,11]]}}}],["23945",{"_index":1000,"t":{"326":{"position":[[160,6]]}}}],["2399",{"_index":856,"t":{"287":{"position":[[80,5]]}}}],["24",{"_index":1083,"t":{"380":{"position":[[339,2]]}}}],["2413",{"_index":995,"t":{"326":{"position":[[65,5]]}}}],["24928",{"_index":941,"t":{"305":{"position":[[175,6]]}}}],["25",{"_index":866,"t":{"289":{"position":[[84,6]]}}}],["25067",{"_index":953,"t":{"307":{"position":[[534,6]]}}}],["2520",{"_index":883,"t":{"293":{"position":[[218,5]]}}}],["26",{"_index":1048,"t":{"356":{"position":[[437,2]]}}}],["27",{"_index":190,"t":{"104":{"position":[[634,2]]}}}],["275",{"_index":1063,"t":{"368":{"position":[[243,4]]}}}],["2897",{"_index":1065,"t":{"368":{"position":[[389,5]]}}}],["2;i",{"_index":152,"t":{"100":{"position":[[506,3]]},"102":{"position":[[383,3]]}}}],["2^2.........k^2",{"_index":63,"t":{"48":{"position":[[367,16]]}}}],["2^32",{"_index":1194,"t":{"439":{"position":[[83,4]]},"443":{"position":[[88,4]]},"447":{"position":[[142,4]]}}}],["2^64",{"_index":1228,"t":{"461":{"position":[[130,4]]}}}],["2^h",{"_index":441,"t":{"159":{"position":[[147,3]]}}}],["2^n",{"_index":83,"t":{"57":{"position":[[157,3]]},"59":{"position":[[193,3],[207,3]]}}}],["2^{n",{"_index":82,"t":{"57":{"position":[[137,6]]}}}],["2e",{"_index":513,"t":{"193":{"position":[[98,2]]}}}],["2n2^n2n，相当于x",{"_index":92,"t":{"63":{"position":[[0,75]]}}}],["2n−1)≤x≤2n−1",{"_index":81,"t":{"57":{"position":[[115,21]]}}}],["2n≤x≤2n−1",{"_index":89,"t":{"59":{"position":[[175,17]]}}}],["2x",{"_index":470,"t":{"167":{"position":[[435,2],[569,3]]}}}],["2},k_j^{d",{"_index":331,"t":{"121":{"position":[[409,9]]}}}],["2、二叉树第k层上最多有2k",{"_index":481,"t":{"169":{"position":[[35,14]]}}}],["2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right",{"_index":1197,"t":{"441":{"position":[[0,125]]}}}],["2的，要求小数点后一位不全为0，也就是要为1",{"_index":126,"t":{"92":{"position":[[24,27]]}}}],["2路归并，基于分治思想，将n个元素分解成n/2",{"_index":318,"t":{"119":{"position":[[682,49]]}}}],["2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k",{"_index":612,"t":{"220":{"position":[[240,34]]}}}],["2，o",{"_index":383,"t":{"150":{"position":[[388,12]]}}}],["2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m",{"_index":23,"t":{"25":{"position":[[284,36]]}}}],["2，知道增量变成1",{"_index":176,"t":{"104":{"position":[[193,13]]}}}],["2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的aof文件中，这样做是保证原有的aof",{"_index":1143,"t":{"417":{"position":[[106,81]]}}}],["3",{"_index":66,"t":{"48":{"position":[[469,5]]},"76":{"position":[[197,7]]},"81":{"position":[[147,15]]},"100":{"position":[[759,7]]},"102":{"position":[[672,5]]},"110":{"position":[[444,4],[914,11]]},"116":{"position":[[171,10]]},"119":{"position":[[276,6]]},"121":{"position":[[823,11]]},"125":{"position":[[10,6]]},"140":{"position":[[155,10]]},"178":{"position":[[360,9]]},"213":{"position":[[319,1],[395,1]]},"295":{"position":[[570,2]]},"303":{"position":[[385,4]]},"307":{"position":[[465,2]]},"350":{"position":[[577,2]]},"352":{"position":[[639,2],[1340,2]]},"358":{"position":[[488,2]]},"362":{"position":[[296,2]]},"382":{"position":[[234,2]]},"384":{"position":[[189,2]]},"390":{"position":[[184,2]]},"410":{"position":[[344,1]]},"465":{"position":[[216,1]]}}}],["3.2i",{"_index":267,"t":{"116":{"position":[[563,4]]},"169":{"position":[[233,4]]}}}],["3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":443,"t":{"159":{"position":[[182,28]]}}}],["30",{"_index":1091,"t":{"382":{"position":[[217,3]]},"384":{"position":[[172,3]]},"390":{"position":[[167,3]]}}}],["31",{"_index":889,"t":{"293":{"position":[[323,2]]},"390":{"position":[[373,2]]}}}],["321dec89",{"_index":1022,"t":{"332":{"position":[[332,9]]}}}],["36",{"_index":1071,"t":{"374":{"position":[[157,3]]}}}],["38和27进行交换（因为27",{"_index":246,"t":{"114":{"position":[[159,19]]}}}],["3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0",{"_index":332,"t":{"121":{"position":[[419,50]]}}}],["3、高度为k的二叉树最多有2k",{"_index":482,"t":{"169":{"position":[[56,15]]}}}],["3后，整体带上acc",{"_index":107,"t":{"79":{"position":[[71,25]]}}}],["3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n",{"_index":112,"t":{"81":{"position":[[163,42]]}}}],["3）活动aia_iai​的最早开始事件e(i)e(i)e(i",{"_index":617,"t":{"220":{"position":[[460,31]]}}}],["3，9，15",{"_index":28,"t":{"28":{"position":[[178,45]]}}}],["3，执行n−1n",{"_index":586,"t":{"213":{"position":[[198,11]]}}}],["3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新aof",{"_index":1144,"t":{"417":{"position":[[188,60]]}}}],["4",{"_index":70,"t":{"48":{"position":[[570,8]]},"83":{"position":[[77,14]]},"116":{"position":[[384,7]]},"121":{"position":[[941,4]]},"125":{"position":[[17,3]]},"140":{"position":[[187,8]]},"213":{"position":[[325,1],[365,1],[429,1]]},"297":{"position":[[128,2],[260,1]]},"299":{"position":[[184,2],[421,2],[741,4],[766,2],[960,2],[1113,3]]},"301":{"position":[[152,2],[280,4],[307,3]]},"303":{"position":[[407,2]]},"360":{"position":[[148,2]]},"374":{"position":[[72,2]]},"378":{"position":[[160,2],[352,2],[426,2]]},"410":{"position":[[387,1]]},"465":{"position":[[310,1]]}}}],["4.2i+1",{"_index":269,"t":{"116":{"position":[[589,6]]},"169":{"position":[[259,6]]}}}],["40",{"_index":1196,"t":{"439":{"position":[[109,13]]},"443":{"position":[[97,9]]},"447":{"position":[[164,15]]}}}],["4013",{"_index":964,"t":{"311":{"position":[[124,4]]},"313":{"position":[[74,4]]}}}],["4294967295",{"_index":1195,"t":{"439":{"position":[[96,12]]},"447":{"position":[[151,12]]}}}],["433c",{"_index":1010,"t":{"328":{"position":[[246,4]]},"330":{"position":[[132,4]]}}}],["46",{"_index":949,"t":{"307":{"position":[[222,3]]},"368":{"position":[[335,3]]}}}],["4736",{"_index":1024,"t":{"332":{"position":[[347,4]]}}}],["49",{"_index":189,"t":{"104":{"position":[[626,7],[741,2]]}}}],["49，这次变成了27",{"_index":195,"t":{"104":{"position":[[730,10]]}}}],["4ccc",{"_index":1088,"t":{"382":{"position":[[123,4]]},"384":{"position":[[80,4]]},"390":{"position":[[73,4]]}}}],["4、对于结点i(i>1",{"_index":483,"t":{"169":{"position":[[78,16]]}}}],["4操作n次，最后一步恒置1，“末位恒置1",{"_index":119,"t":{"87":{"position":[[106,23]]}}}],["4的，要求小数点后两位不全为0",{"_index":127,"t":{"92":{"position":[[52,20]]}}}],["4）n",{"_index":317,"t":{"119":{"position":[[673,8]]}}}],["4）活动aia_iai​的最迟开始事件l(i)l(i)l(i",{"_index":619,"t":{"220":{"position":[[538,31]]}}}],["4：当追加结束后，redis就会用新aof文件来代替旧aof文件，之后再有新的写指令，就都会追加到新的aof",{"_index":1145,"t":{"417":{"position":[[249,57]]}}}],["5",{"_index":287,"t":{"116":{"position":[[1259,5]]},"119":{"position":[[885,11]]},"169":{"position":[[375,5]]},"213":{"position":[[331,1],[477,1],[479,1],[485,1],[513,1],[519,1],[525,1]]},"295":{"position":[[347,2]]},"315":{"position":[[147,2]]},"348":{"position":[[272,2]]},"350":{"position":[[346,2]]},"356":{"position":[[145,1]]},"358":{"position":[[238,2]]},"360":{"position":[[127,2],[318,4],[343,2]]},"362":{"position":[[71,2]]},"368":{"position":[[224,2]]},"370":{"position":[[154,2],[522,2]]},"378":{"position":[[323,2]]},"410":{"position":[[447,1]]},"465":{"position":[[334,1]]}}}],["5.0",{"_index":1229,"t":{"463":{"position":[[21,3]]}}}],["507",{"_index":948,"t":{"307":{"position":[[171,4],[555,4]]}}}],["508",{"_index":1054,"t":{"360":{"position":[[99,4]]}}}],["52045f5f",{"_index":1086,"t":{"382":{"position":[[108,9]]},"384":{"position":[[65,9]]},"390":{"position":[[58,9]]}}}],["520，211，438,888,007,111,985,666,996，233,168。每个位置都是0~9的数，我们说其基数r=10。每个数的范围在0~999",{"_index":328,"t":{"121":{"position":[[117,96]]}}}],["53",{"_index":262,"t":{"116":{"position":[[364,19]]}}}],["53下坠到原87",{"_index":261,"t":{"116":{"position":[[334,29]]}}}],["53＜87",{"_index":260,"t":{"116":{"position":[[299,34]]}}}],["579",{"_index":872,"t":{"289":{"position":[[201,4]]}}}],["592",{"_index":1062,"t":{"368":{"position":[[174,4]]}}}],["5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8",{"_index":166,"t":{"102":{"position":[[105,174]]}}}],["5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof",{"_index":1146,"t":{"417":{"position":[[307,68]]}}}],["6",{"_index":294,"t":{"116":{"position":[[1438,11]]},"213":{"position":[[337,1],[511,1]]},"348":{"position":[[404,2]]},"352":{"position":[[108,2],[816,2]]},"356":{"position":[[102,2],[405,2]]},"368":{"position":[[357,2]]},"370":{"position":[[286,2],[654,2]]}}}],["60",{"_index":1046,"t":{"356":{"position":[[293,3]]}}}],["6148",{"_index":998,"t":{"326":{"position":[[128,5]]}}}],["6204",{"_index":929,"t":{"303":{"position":[[155,5]]}}}],["6379",{"_index":1180,"t":{"429":{"position":[[63,4]]}}}],["6534",{"_index":930,"t":{"303":{"position":[[179,5]]}}}],["65是一组的，此时i=3，j=1",{"_index":192,"t":{"104":{"position":[[640,27]]}}}],["666",{"_index":945,"t":{"305":{"position":[[297,5]]}}}],["68",{"_index":1082,"t":{"380":{"position":[[170,3]]}}}],["7",{"_index":588,"t":{"213":{"position":[[343,1],[401,1],[409,1],[547,1]]},"303":{"position":[[432,2]]},"358":{"position":[[197,2]]}}}],["7.0.0.tar.gz",{"_index":1159,"t":{"423":{"position":[[102,13]]}}}],["7.0.0中的文件，有两个为redi",{"_index":1163,"t":{"423":{"position":[[196,19]]}}}],["7.0.0目录下，执行make",{"_index":1160,"t":{"423":{"position":[[124,15]]}}}],["70",{"_index":25,"t":{"25":{"position":[[420,17]]}}}],["727626236f47",{"_index":966,"t":{"311":{"position":[[134,14]]},"313":{"position":[[84,14]]}}}],["73处不满足，同时左兄弟不够借，则82",{"_index":26,"t":{"25":{"position":[[438,27]]}}}],["76",{"_index":191,"t":{"104":{"position":[[637,2]]}}}],["76，依次类推，当i为7",{"_index":196,"t":{"104":{"position":[[744,24]]}}}],["8",{"_index":862,"t":{"289":{"position":[[56,2]]},"295":{"position":[[101,2],[321,2]]},"299":{"position":[[123,2],[395,2],[856,2],[936,2]]},"301":{"position":[[54,2],[128,2]]},"311":{"position":[[94,2]]},"313":{"position":[[44,2]]},"315":{"position":[[168,2]]}}}],["81",{"_index":1006,"t":{"328":{"position":[[180,3]]}}}],["85",{"_index":1002,"t":{"326":{"position":[[207,2]]}}}],["8dc4",{"_index":1011,"t":{"328":{"position":[[251,4]]},"330":{"position":[[137,4]]}}}],["8，发现8已经大于7",{"_index":32,"t":{"30":{"position":[[164,19]]}}}],["9",{"_index":30,"t":{"30":{"position":[[95,28]]},"348":{"position":[[199,2]]}}}],["90",{"_index":1212,"t":{"457":{"position":[[130,3]]}}}],["9016",{"_index":894,"t":{"293":{"position":[[461,4]]}}}],["90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r",{"_index":1213,"t":{"457":{"position":[[134,101]]}}}],["92",{"_index":21,"t":{"25":{"position":[[221,31]]}}}],["93dd",{"_index":1089,"t":{"382":{"position":[[128,4]]},"384":{"position":[[85,4]]},"390":{"position":[[78,4]]}}}],["a,b",{"_index":704,"t":{"245":{"position":[[68,22],[106,5],[115,12],[144,10]]}}}],["a,b,c",{"_index":654,"t":{"240":{"position":[[10,5]]}}}],["a,c",{"_index":1043,"t":{"352":{"position":[[591,6],[1292,6]]}}}],["a,cours",{"_index":670,"t":{"240":{"position":[[372,8]]}}}],["a,int",{"_index":199,"t":{"108":{"position":[[41,6]]}}}],["a.cno,b.cpno",{"_index":669,"t":{"240":{"position":[[347,12]]}}}],["a.cpno",{"_index":671,"t":{"240":{"position":[[389,6]]}}}],["a13f",{"_index":1087,"t":{"382":{"position":[[118,4]]},"384":{"position":[[75,4]]},"390":{"position":[[68,4]]}}}],["a[0",{"_index":155,"t":{"100":{"position":[[540,4],[611,5]]},"102":{"position":[[400,4],[489,5],[600,5]]},"104":{"position":[[467,4],[554,5]]},"116":{"position":[[995,4],[1252,4]]}}}],["a[0]<a[j];j",{"_index":187,"t":{"104":{"position":[[506,11]]}}}],["a[0]当哨兵作为辅助，故空间复杂度上为o(1)o(1)o(1",{"_index":162,"t":{"100":{"position":[[632,39]]}}}],["a[],int",{"_index":36,"t":{"36":{"position":[[113,7]]},"100":{"position":[[475,7]]},"102":{"position":[[339,7]]},"104":{"position":[[231,7]]},"108":{"position":[[104,7]]},"110":{"position":[[491,7],[747,7]]},"114":{"position":[[285,7]]},"116":{"position":[[865,7],[975,7],[1336,7]]},"119":{"position":[[348,7],[751,7]]}}}],["a[high",{"_index":172,"t":{"102":{"position":[[586,6]]},"110":{"position":[[615,8],[675,7]]}}}],["a[high]>=pivot",{"_index":233,"t":{"110":{"position":[[571,15]]}}}],["a[i",{"_index":156,"t":{"100":{"position":[[547,5],[769,27]]},"102":{"position":[[407,5]]},"104":{"position":[[445,3],[474,5]]},"108":{"position":[[201,5]]},"116":{"position":[[1182,5]]}}}],["a[i]<a[i+1",{"_index":284,"t":{"116":{"position":[[1102,12]]}}}],["a[i][j",{"_index":518,"t":{"198":{"position":[[214,10]]}}}],["a[i]，则从a[i.....n",{"_index":247,"t":{"114":{"position":[[192,20]]}}}],["a[j",{"_index":159,"t":{"100":{"position":[[574,5],[594,5]]},"102":{"position":[[567,3],[578,5]]},"104":{"position":[[537,5]]}}}],["a[j+1",{"_index":161,"t":{"100":{"position":[[585,6],[602,6]]}}}],["a[j+gap",{"_index":188,"t":{"104":{"position":[[526,8],[543,8]]}}}],["a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j",{"_index":165,"t":{"100":{"position":[[800,80]]}}}],["a[k",{"_index":280,"t":{"116":{"position":[[1002,5],[1175,4],[1245,4]]},"119":{"position":[[471,5],[560,4],[580,4],[623,6],[655,6]]}}}],["a[k]和a[i",{"_index":249,"t":{"114":{"position":[[228,11]]}}}],["a[low",{"_index":230,"t":{"110":{"position":[[526,7],[606,6],[685,7],[695,6]]}}}],["a[low]<=pivot",{"_index":234,"t":{"110":{"position":[[642,14]]}}}],["a_sb_",{"_index":98,"t":{"76":{"position":[[61,6]]}}}],["aba",{"_index":375,"t":{"148":{"position":[[268,24]]}}}],["accaccacc的计算公式为：tp+tntp+fn+fp+tn\\frac",{"_index":726,"t":{"255":{"position":[[0,37]]}}}],["access_log",{"_index":809,"t":{"274":{"position":[[733,10]]}}}],["acc和recallacc和recallacc和recall也是非常相似的两个指标，同时也有着区别，recallrecallrecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是recallrecallrecall关注的是正向的像素点。而accaccacc",{"_index":729,"t":{"257":{"position":[[177,164]]}}}],["acc设置00.0000，mq中为乘数，乘数后添加一个辅助位（辅助位就是mq",{"_index":110,"t":{"81":{"position":[[66,44]]}}}],["acc里面设置为00.0000（00",{"_index":105,"t":{"79":{"position":[[23,26]]}}}],["ack",{"_index":1242,"t":{"465":{"position":[[505,3]]}}}],["acknowledg",{"_index":1243,"t":{"465":{"position":[[509,12]]}}}],["ack的消息id，如果客户端没有ack，这个变量里面的消息id会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在redi",{"_index":1239,"t":{"465":{"position":[[348,107]]}}}],["action",{"_index":840,"t":{"276":{"position":[[766,56]]}}}],["action@4.0.0",{"_index":832,"t":{"276":{"position":[[440,12]]}}}],["actions/checkout@v2",{"_index":820,"t":{"276":{"position":[[160,19]]}}}],["actions/setup",{"_index":823,"t":{"276":{"position":[[211,13]]}}}],["add",{"_index":648,"t":{"238":{"position":[[191,3],[218,3]]},"269":{"position":[[40,3],[63,3]]},"271":{"position":[[209,3]]}}}],["addr=h(key)addr",{"_index":53,"t":{"48":{"position":[[0,22]]}}}],["admin",{"_index":989,"t":{"315":{"position":[[323,7]]},"322":{"position":[[41,8],[194,8]]},"366":{"position":[[241,8]]},"374":{"position":[[261,8]]},"380":{"position":[[235,8],[287,6]]},"382":{"position":[[169,8]]},"384":{"position":[[124,8]]},"390":{"position":[[119,8]]}}}],["ae4c",{"_index":1025,"t":{"332":{"position":[[352,4]]}}}],["ag",{"_index":967,"t":{"311":{"position":[[205,6]]},"313":{"position":[[155,6]]},"322":{"position":[[245,6]]},"328":{"position":[[328,6]]},"330":{"position":[[214,6]]},"332":{"position":[[162,6],[454,6]]},"382":{"position":[[210,6]]},"384":{"position":[[165,6]]},"390":{"position":[[160,6]]}}}],["algraph",{"_index":538,"t":{"200":{"position":[[328,8],[337,20]]}}}],["allclass",{"_index":1066,"t":{"368":{"position":[[402,13]]}}}],["alter",{"_index":647,"t":{"238":{"position":[[174,5],[331,5]]}}}],["alway",{"_index":1137,"t":{"412":{"position":[[0,28]]}}}],["ana^nan的元素an[i][j]a^n[i][j]an[i][j]表示的是由顶点i到j长度为n",{"_index":530,"t":{"198":{"position":[[761,66]]}}}],["analyz",{"_index":905,"t":{"295":{"position":[[438,10]]},"299":{"position":[[649,10]]},"307":{"position":[[364,10]]},"350":{"position":[[441,10]]},"352":{"position":[[496,10],[1197,10]]},"360":{"position":[[229,10]]},"362":{"position":[[162,10]]}}}],["analyzetextcontentid",{"_index":1052,"t":{"358":{"position":[[440,23]]}}}],["answer",{"_index":923,"t":{"299":{"position":[[831,9]]}}}],["answeritem",{"_index":913,"t":{"297":{"position":[[95,14]]},"299":{"position":[[904,14]]},"301":{"position":[[103,14]]}}}],["aof",{"_index":1117,"t":{"397":{"position":[[134,16]]},"410":{"position":[[463,20]]},"415":{"position":[[0,6],[56,9]]},"417":{"position":[[0,28]]},"419":{"position":[[147,5]]}}}],["aof内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称aof重写)，从而起到aof",{"_index":1136,"t":{"410":{"position":[[389,57]]}}}],["aof包括了rdb头部+aof",{"_index":1156,"t":{"419":{"position":[[404,18]]}}}],["aof对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以reid",{"_index":1148,"t":{"419":{"position":[[55,64]]}}}],["aof文件，会将其这些命令先放入aof缓存中进行保存。这里的aof缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘io",{"_index":1134,"t":{"410":{"position":[[249,94]]}}}],["aof缓冲会根据aof缓冲区同步文件的三种写回策略将命令写入磁盘上的aof",{"_index":1135,"t":{"410":{"position":[[346,40]]}}}],["aof，命令为：appendonli",{"_index":1131,"t":{"410":{"position":[[125,32]]}}}],["aov",{"_index":606,"t":{"218":{"position":[[185,89]]}}}],["aov网中选择一个没有前驱的节点(入度为0",{"_index":605,"t":{"218":{"position":[[57,22]]}}}],["api/admin/dashboard/index",{"_index":993,"t":{"326":{"position":[[0,31]]}}}],["api/admin/education/subject/delete/3",{"_index":1036,"t":{"346":{"position":[[0,42]]}}}],["api/admin/education/subject/edit",{"_index":1035,"t":{"344":{"position":[[0,38]]}}}],["api/admin/education/subject/list",{"_index":1031,"t":{"338":{"position":[[0,38]]}}}],["api/admin/education/subject/pag",{"_index":1033,"t":{"340":{"position":[[0,38]]}}}],["api/admin/education/subject/select/2",{"_index":1034,"t":{"342":{"position":[[0,42]]}}}],["api/admin/exam/paper/delete/9",{"_index":1044,"t":{"354":{"position":[[0,35]]}}}],["api/admin/exam/paper/edit",{"_index":1041,"t":{"352":{"position":[[0,31]]}}}],["api/admin/exam/paper/pag",{"_index":1037,"t":{"348":{"position":[[0,31]]}}}],["api/admin/exam/paper/select/9",{"_index":1040,"t":{"350":{"position":[[0,35]]}}}],["api/admin/exam/paper/taskexampag",{"_index":1045,"t":{"356":{"position":[[0,39]]}}}],["api/admin/exampaperanswer/pag",{"_index":1079,"t":{"378":{"position":[[0,36]]}}}],["api/admin/message/pag",{"_index":1070,"t":{"374":{"position":[[0,28]]}}}],["api/admin/message/send",{"_index":1077,"t":{"376":{"position":[[0,28]]}}}],["api/admin/question/delete/7",{"_index":1057,"t":{"364":{"position":[[0,33]]}}}],["api/admin/question/edit",{"_index":1056,"t":{"362":{"position":[[0,29]]}}}],["api/admin/question/pag",{"_index":1049,"t":{"358":{"position":[[0,29]]}}}],["api/admin/question/select/508",{"_index":1053,"t":{"360":{"position":[[0,35]]}}}],["api/admin/task/delete/1",{"_index":1069,"t":{"372":{"position":[[0,29]]}}}],["api/admin/task/edit",{"_index":1067,"t":{"370":{"position":[[0,25]]}}}],["api/admin/task/pag",{"_index":1058,"t":{"366":{"position":[[0,25]]}}}],["api/admin/task/select/22",{"_index":1061,"t":{"368":{"position":[[0,30]]}}}],["api/admin/upload/configandupload",{"_index":1099,"t":{"388":{"position":[[0,38]]}}}],["api/admin/user/changestatus/1",{"_index":1030,"t":{"336":{"position":[[0,35]]}}}],["api/admin/user/curr",{"_index":1085,"t":{"382":{"position":[[0,28]]}}}],["api/admin/user/delete/3",{"_index":1029,"t":{"334":{"position":[[0,29]]}}}],["api/admin/user/edit",{"_index":1018,"t":{"332":{"position":[[0,25]]}}}],["api/admin/user/event/page/list",{"_index":1081,"t":{"380":{"position":[[0,36]]}}}],["api/admin/user/page/list",{"_index":1005,"t":{"328":{"position":[[0,30]]}}}],["api/admin/user/select/1",{"_index":1017,"t":{"330":{"position":[[0,29]]}}}],["api/admin/user/selectbyusernam",{"_index":1097,"t":{"386":{"position":[[0,37]]}}}],["api/admin/user/upd",{"_index":1094,"t":{"384":{"position":[[0,27]]},"390":{"position":[[0,27]]}}}],["api/student/dashboard/index",{"_index":853,"t":{"287":{"position":[[0,33]]}}}],["api/student/dashboard/task",{"_index":861,"t":{"289":{"position":[[0,32]]}}}],["api/student/education/subject/list",{"_index":873,"t":{"291":{"position":[[0,40]]}}}],["api/student/exam/paper/pagelist",{"_index":875,"t":{"293":{"position":[[0,37]]}}}],["api/student/exam/paper/select/9",{"_index":895,"t":{"295":{"position":[[0,37]]}}}],["api/student/exampaper/answer/answersubmit",{"_index":910,"t":{"297":{"position":[[0,47]]}}}],["api/student/exampaper/answer/edit",{"_index":926,"t":{"301":{"position":[[0,39]]}}}],["api/student/exampaper/answer/pagelist",{"_index":928,"t":{"303":{"position":[[0,43]]}}}],["api/student/exampaper/answer/read/4",{"_index":917,"t":{"299":{"position":[[0,41]]}}}],["api/student/question/answer/pag",{"_index":939,"t":{"305":{"position":[[0,38]]}}}],["api/student/question/answer/select/25067",{"_index":946,"t":{"307":{"position":[[0,46]]}}}],["api/student/user/curr",{"_index":960,"t":{"311":{"position":[[0,30]]}}}],["api/student/user/log",{"_index":954,"t":{"309":{"position":[[0,26]]}}}],["api/student/user/message/pag",{"_index":982,"t":{"315":{"position":[[0,35]]}}}],["api/student/user/message/read/14",{"_index":990,"t":{"317":{"position":[[0,38]]}}}],["api/student/user/message/unreadcount",{"_index":991,"t":{"319":{"position":[[0,42]]}}}],["api/student/user/regist",{"_index":845,"t":{"283":{"position":[[0,31]]}}}],["api/student/user/upd",{"_index":981,"t":{"313":{"position":[[0,29]]}}}],["api/user/login",{"_index":842,"t":{"281":{"position":[[0,20]]},"322":{"position":[[0,20]]}}}],["api/user/logout",{"_index":852,"t":{"285":{"position":[[0,21]]},"324":{"position":[[0,21]]}}}],["appendfsync为自己要的时间，一般就是everysec",{"_index":1140,"t":{"415":{"position":[[7,33]]}}}],["application/octet",{"_index":798,"t":{"274":{"position":[[545,17]]}}}],["apt",{"_index":829,"t":{"276":{"position":[[297,3],[320,3]]}}}],["arcnod",{"_index":532,"t":{"200":{"position":[[105,8],[152,7],[167,20],[227,7]]}}}],["as<查询语句>[with",{"_index":694,"t":{"242":{"position":[[93,18]]}}}],["asl为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4",{"_index":49,"t":{"39":{"position":[[21,68]]}}}],["asl为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12",{"_index":50,"t":{"39":{"position":[[167,60]]}}}],["auto;error_log",{"_index":774,"t":{"274":{"position":[[109,14]]}}}],["a|b|a,b",{"_index":705,"t":{"245":{"position":[[91,14]]}}}],["a在b前面，则图中不存在b到a",{"_index":604,"t":{"218":{"position":[[30,20]]}}}],["a是从0开始存储还是1",{"_index":272,"t":{"116":{"position":[[705,36]]}}}],["a是关系r的主属性，a不能为nul",{"_index":630,"t":{"235":{"position":[[0,28]]}}}],["b",{"_index":16,"t":{"21":{"position":[[0,7]]},"108":{"position":[[48,4],[71,2],[74,1]]},"119":{"position":[[127,14],[287,2]]},"213":{"position":[[175,2]]},"240":{"position":[[381,1]]},"271":{"position":[[160,1]]}}}],["b,b",{"_index":709,"t":{"245":{"position":[[176,4]]}}}],["b.cno",{"_index":672,"t":{"240":{"position":[[398,5]]}}}],["b874",{"_index":965,"t":{"311":{"position":[[129,4]]},"313":{"position":[[79,4]]}}}],["b[i",{"_index":313,"t":{"119":{"position":[[567,7],[632,7]]}}}],["b[j",{"_index":314,"t":{"119":{"position":[[587,7],[664,8]]}}}],["b[k",{"_index":306,"t":{"119":{"position":[[464,4]]}}}],["b[p1]和b[p2]，较小者放入a",{"_index":298,"t":{"119":{"position":[[166,28]]}}}],["backend",{"_index":1113,"t":{"393":{"position":[[45,7]]}}}],["bar{s_s}+\\bar{a_{s}}\\bar{b_{s}}s_sv=as​bs​ss​ˉ​+as​ˉ​bs​ˉ​ss",{"_index":99,"t":{"76":{"position":[[68,62]]}}}],["between",{"_index":660,"t":{"240":{"position":[[110,7]]}}}],["bf",{"_index":540,"t":{"203":{"position":[[102,53]]}}}],["bfs(g,i",{"_index":549,"t":{"203":{"position":[[494,9]]}}}],["bfs(graph",{"_index":550,"t":{"203":{"position":[[511,9]]}}}],["bfstraverse(graph",{"_index":542,"t":{"203":{"position":[[368,17]]}}}],["bgsave：redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork",{"_index":1129,"t":{"407":{"position":[[90,70]]}}}],["binary_search(int",{"_index":35,"t":{"36":{"position":[[95,17]]}}}],["bind",{"_index":1170,"t":{"425":{"position":[[71,6],[90,12]]}}}],["birthday",{"_index":970,"t":{"311":{"position":[[252,11]]},"313":{"position":[[202,11]]},"322":{"position":[[271,11]]},"328":{"position":[[380,11]]},"330":{"position":[[266,11]]},"332":{"position":[[194,11],[490,11]]},"382":{"position":[[257,11]]},"384":{"position":[[212,11]]},"390":{"position":[[207,11]]}}}],["body_bytes_s",{"_index":805,"t":{"274":{"position":[[652,16]]}}}],["bool",{"_index":203,"t":{"108":{"position":[[118,4]]},"167":{"position":[[142,4]]},"203":{"position":[[340,4]]},"205":{"position":[[107,4]]}}}],["branch",{"_index":814,"t":{"276":{"position":[[89,9]]}}}],["branch设置为gh",{"_index":767,"t":{"271":{"position":[[349,12]]}}}],["bubblesort(int",{"_index":202,"t":{"108":{"position":[[89,14]]}}}],["build",{"_index":760,"t":{"271":{"position":[[181,5]]},"276":{"position":[[352,5],[386,5],[577,6],[734,7],[742,23]]}}}],["buildgit",{"_index":755,"t":{"271":{"position":[[141,8],[200,8]]}}}],["buildmaxheap(a,len",{"_index":290,"t":{"116":{"position":[[1350,20]]}}}],["buildmaxheap(int",{"_index":274,"t":{"116":{"position":[[848,16]]}}}],["build后的代码上传到gh",{"_index":765,"t":{"271":{"position":[[289,23]]}}}],["b|}iou=∣a+b∣2∣a∩b",{"_index":723,"t":{"251":{"position":[[66,19]]}}}],["b|}{a",{"_index":717,"t":{"249":{"position":[[48,5]]}}}],["b|}{|a",{"_index":722,"t":{"251":{"position":[[57,6]]}}}],["b}iou=a∪b∣a∩b",{"_index":719,"t":{"249":{"position":[[59,164]]}}}],["b树的一个地方，b",{"_index":29,"t":{"30":{"position":[[0,94]]}}}],["c",{"_index":706,"t":{"245":{"position":[[112,2],[164,2]]},"352":{"position":[[573,3],[1274,3]]}}}],["c07e653d390a",{"_index":1012,"t":{"328":{"position":[[256,14]]},"330":{"position":[[142,14]]}}}],["c32f",{"_index":1009,"t":{"328":{"position":[[241,4]]},"330":{"position":[[127,4]]}}}],["cap",{"_index":716,"t":{"249":{"position":[[43,4]]},"251":{"position":[[52,4]]}}}],["cascade|restrict",{"_index":650,"t":{"238":{"position":[[233,19]]}}}],["cascade就是删除引用该列的其他对象，例如视图）（restrict",{"_index":651,"t":{"238":{"position":[[253,55]]}}}],["cd",{"_index":1174,"t":{"427":{"position":[[0,2]]}}}],["cf",{"_index":96,"t":{"74":{"position":[[57,25]]}}}],["cf和最高位数位的进位c1",{"_index":104,"t":{"76":{"position":[[205,51]]}}}],["ch[0...k−1]=ch[j−k...j−1]ch[0...k",{"_index":377,"t":{"148":{"position":[[374,33]]}}}],["ch[0∼k−1]=ch[j−k∼j−1]ch[0",{"_index":387,"t":{"150":{"position":[[599,25]]}}}],["ch[j",{"_index":378,"t":{"148":{"position":[[413,4]]},"150":{"position":[[637,4]]}}}],["char",{"_index":524,"t":{"198":{"position":[[624,4]]},"200":{"position":[[216,4]]}}}],["charact",{"_index":1244,"t":{"465":{"position":[[522,46]]}}}],["check",{"_index":695,"t":{"242":{"position":[[112,5]]}}}],["checkout",{"_index":756,"t":{"271":{"position":[[150,8]]}}}],["child",{"_index":499,"t":{"178":{"position":[[325,5]]}}}],["class",{"_index":980,"t":{"311":{"position":[[455,10]]},"313":{"position":[[405,10]]}}}],["cli",{"_index":1177,"t":{"427":{"position":[[56,3],[74,3]]},"429":{"position":[[12,3],[56,3]]}}}],["client",{"_index":827,"t":{"276":{"position":[[280,6]]},"410":{"position":[[194,32]]}}}],["cli和redi",{"_index":1164,"t":{"423":{"position":[[216,9]]}}}],["cnblogs.com",{"_index":372,"t":{"146":{"position":[[205,13]]}}}],["code",{"_index":849,"t":{"283":{"position":[[126,7]]},"285":{"position":[[37,7]]},"291":{"position":[[56,7]]},"293":{"position":[[146,7]]},"295":{"position":[[53,7]]},"297":{"position":[[278,7]]},"299":{"position":[[57,7]]},"301":{"position":[[331,7]]},"303":{"position":[[104,7]]},"305":{"position":[[99,7]]},"307":{"position":[[107,7]]},"309":{"position":[[42,7]]},"311":{"position":[[46,7]]},"313":{"position":[[461,7]]},"315":{"position":[[96,7]]},"317":{"position":[[54,7]]},"319":{"position":[[58,7]]},"322":{"position":[[110,7]]},"324":{"position":[[37,7]]},"328":{"position":[[129,7]]},"330":{"position":[[45,7]]},"332":{"position":[[267,7]]},"334":{"position":[[45,7]]},"336":{"position":[[51,7]]},"338":{"position":[[54,7]]},"340":{"position":[[107,7]]},"342":{"position":[[58,7]]},"344":{"position":[[130,7]]},"346":{"position":[[58,7]]},"348":{"position":[[148,7]]},"350":{"position":[[51,7]]},"352":{"position":[[706,7]]},"354":{"position":[[51,7]]},"356":{"position":[[157,7]]},"358":{"position":[[146,7]]},"360":{"position":[[51,7]]},"362":{"position":[[331,7]]},"364":{"position":[[49,7]]},"366":{"position":[[94,7]]},"368":{"position":[[46,7]]},"370":{"position":[[341,7]]},"372":{"position":[[45,7]]},"374":{"position":[[106,7]]},"376":{"position":[[128,7]]},"378":{"position":[[109,7]]},"380":{"position":[[119,7]]},"382":{"position":[[44,7]]},"384":{"position":[[466,7]]},"386":{"position":[[66,7]]},"390":{"position":[[468,7]]}}}],["collect",{"_index":1109,"t":{"393":{"position":[[4,7]]}}}],["commit",{"_index":745,"t":{"269":{"position":[[72,6]]},"271":{"position":[[218,6]]}}}],["complet",{"_index":916,"t":{"297":{"position":[[201,12]]}}}],["constraint",{"_index":652,"t":{"238":{"position":[[314,10]]}}}],["consum",{"_index":1235,"t":{"465":{"position":[[161,8],[312,8]]}}}],["content",{"_index":914,"t":{"297":{"position":[[138,10]]},"299":{"position":[[546,10],[611,10],[994,10]]},"301":{"position":[[186,10]]},"307":{"position":[[315,10],[592,10]]},"309":{"position":[[176,10]]},"315":{"position":[[213,10]]},"352":{"position":[[418,10],[1119,10]]},"374":{"position":[[216,10]]},"376":{"position":[[64,10]]},"380":{"position":[[276,10]]},"465":{"position":[[146,7]]}}}],["contentarray",{"_index":915,"t":{"297":{"position":[[162,15]]},"299":{"position":[[1039,15]]},"301":{"position":[[233,15]]},"307":{"position":[[636,15]]}}}],["core>=30",{"_index":668,"t":{"240":{"position":[[232,8]]}}}],["correct",{"_index":907,"t":{"295":{"position":[[492,10]]},"299":{"position":[[712,10]]},"307":{"position":[[412,10]]},"350":{"position":[[497,10]]},"352":{"position":[[580,10],[1281,10]]},"358":{"position":[[395,10]]},"360":{"position":[[280,10]]},"362":{"position":[[216,10]]}}}],["correctarray",{"_index":906,"t":{"295":{"position":[[465,15]]},"299":{"position":[[671,15]]},"307":{"position":[[385,15]]},"350":{"position":[[468,15]]},"352":{"position":[[543,15],[1244,15]]},"360":{"position":[[253,15]]},"362":{"position":[[189,15]]}}}],["count(*)avg(*)max(*)min",{"_index":679,"t":{"240":{"position":[[563,26]]}}}],["cours",{"_index":667,"t":{"240":{"position":[[219,6],[365,6]]}}}],["creat",{"_index":638,"t":{"238":{"position":[[0,6]]},"242":{"position":[[81,6]]},"465":{"position":[[189,6]]}}}],["createtim",{"_index":887,"t":{"293":{"position":[[300,13]]},"303":{"position":[[192,13]]},"305":{"position":[[213,13]]},"309":{"position":[[218,13]]},"311":{"position":[[342,13]]},"313":{"position":[[292,13]]},"315":{"position":[[263,13]]},"322":{"position":[[372,13]]},"328":{"position":[[474,13]]},"330":{"position":[[360,13]]},"332":{"position":[[613,13]]},"348":{"position":[[303,13]]},"356":{"position":[[304,13]]},"358":{"position":[[269,13]]},"366":{"position":[[259,13]]},"368":{"position":[[255,13]]},"370":{"position":[[185,13],[553,13]]},"374":{"position":[[365,13]]},"378":{"position":[[185,13]]},"380":{"position":[[316,13]]},"382":{"position":[[351,13]]},"384":{"position":[[304,13]]},"390":{"position":[[306,13]]}}}],["createus",{"_index":891,"t":{"293":{"position":[[344,13]]},"348":{"position":[[347,13]]},"356":{"position":[[348,13]]},"358":{"position":[[334,13]]},"368":{"position":[[299,13]]},"370":{"position":[[229,13],[597,13]]}}}],["createusernam",{"_index":1059,"t":{"366":{"position":[[223,17]]}}}],["cup",{"_index":718,"t":{"249":{"position":[[54,4]]}}}],["c中的属性t，t和s的组合要全部出现在r",{"_index":637,"t":{"235":{"position":[[277,24]]}}}],["c和b时候会发现不匹配，此时的next会跳转到2，从ab再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟ab中的b进行匹配成功的，此时产生了一次无效匹配，然后next到1",{"_index":430,"t":{"154":{"position":[[74,103]]}}}],["c和d时，不匹配，肉眼观察，可以直接将j",{"_index":374,"t":{"148":{"position":[[229,38]]}}}],["c，且b推不出a，则c对于a",{"_index":710,"t":{"245":{"position":[[181,21]]}}}],["c，同时a|b",{"_index":708,"t":{"245":{"position":[[155,8]]}}}],["c，少了a或者b都推不出来c",{"_index":707,"t":{"245":{"position":[[128,15]]}}}],["d",{"_index":337,"t":{"121":{"position":[[546,1]]},"307":{"position":[[375,4],[423,4]]}}}],["d.e.knuth、j.h.morris和v.r.prat一起发明了kmp算法，致力于解决这个主串指针回溯的问题来降低时间开销。kmp算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。kmp",{"_index":370,"t":{"146":{"position":[[0,175]]}}}],["d2d29da2",{"_index":962,"t":{"311":{"position":[[109,9]]},"313":{"position":[[59,9]]}}}],["daemon",{"_index":1166,"t":{"425":{"position":[[0,11],[15,11]]}}}],["danger",{"_index":503,"t":{"183":{"position":[[17,6]]},"185":{"position":[[33,6]]}}}],["data",{"_index":450,"t":{"167":{"position":[[32,5]]},"178":{"position":[[92,5],[235,5],[319,5],[395,5]]},"200":{"position":[[221,5]]}}}],["database的缩写。redis的数据都是在内存中，rdb",{"_index":1119,"t":{"399":{"position":[[139,61]]}}}],["data，边表头指针first",{"_index":531,"t":{"200":{"position":[[7,82]]}}}],["db",{"_index":628,"t":{"231":{"position":[[45,37],[181,64]]}}}],["dbm",{"_index":629,"t":{"231":{"position":[[138,42]]}}}],["dcb3",{"_index":963,"t":{"311":{"position":[[119,4]]},"313":{"position":[[69,4]]}}}],["decr",{"_index":1190,"t":{"437":{"position":[[53,4]]}}}],["decrbi",{"_index":1191,"t":{"437":{"position":[[67,6]]}}}],["decrement",{"_index":1192,"t":{"437":{"position":[[78,17]]}}}],["deeplearn",{"_index":713,"t":{"247":{"position":[[5,12]]}}}],["default_serv",{"_index":781,"t":{"274":{"position":[[229,15],[261,15]]}}}],["default_typ",{"_index":797,"t":{"274":{"position":[[532,12]]}}}],["delet",{"_index":692,"t":{"240":{"position":[[847,6]]},"322":{"position":[[436,10]]},"332":{"position":[[718,10]]},"338":{"position":[[204,10]]},"366":{"position":[[303,10]]}}}],["deploy",{"_index":763,"t":{"271":{"position":[[228,7]]},"276":{"position":[[72,6],[114,7],[404,6],[433,6]]}}}],["dequeue(q,v",{"_index":555,"t":{"203":{"position":[[587,13]]}}}],["desc|asc",{"_index":659,"t":{"240":{"position":[[88,8]]}}}],["destralverse(graph",{"_index":565,"t":{"205":{"position":[[135,18]]}}}],["develop",{"_index":1114,"t":{"393":{"position":[[53,12]]}}}],["dfs(g,v",{"_index":572,"t":{"205":{"position":[[381,10]]}}}],["dfs(g,v);}void",{"_index":568,"t":{"205":{"position":[[246,14]]}}}],["dfs(graph",{"_index":569,"t":{"205":{"position":[[261,9]]}}}],["dfs就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟bf",{"_index":564,"t":{"205":{"position":[[0,106]]}}}],["dfs算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为o(1)o(1)o(1)，平均的为o(∣v∣)o(|v|)o(∣v",{"_index":573,"t":{"205":{"position":[[593,82]]}}}],["di=0,1,2...d_i",{"_index":58,"t":{"48":{"position":[[240,24]]}}}],["di=02,12,−12,22,−22.........k2,−k2d_i",{"_index":60,"t":{"48":{"position":[[307,39]]}}}],["dicedicedice系数的计算公式为：iou=2∣a∩b∣∣a+b∣i",{"_index":720,"t":{"251":{"position":[[0,39]]}}}],["dice和ioudice和ioudice和iou是非常相似的两个指标，但是又有着区别，iouiouiou更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。dicedicedice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是dicedicedice检验识别肿瘤的大致形状，iouioui",{"_index":728,"t":{"257":{"position":[[0,176]]}}}],["did_idi",{"_index":71,"t":{"48":{"position":[[579,18]]}}}],["difficult",{"_index":908,"t":{"295":{"position":[[557,12]]},"299":{"position":[[753,12]]},"307":{"position":[[452,12]]},"350":{"position":[[564,12]]},"352":{"position":[[626,12],[1327,12]]},"358":{"position":[[475,12]]},"360":{"position":[[330,12]]},"362":{"position":[[283,12]]}}}],["dir",{"_index":837,"t":{"276":{"position":[[555,4],[572,4]]}}}],["disciplin",{"_index":733,"t":{"260":{"position":[[46,11]]}}}],["docsaururs配置文件进行修改，将config",{"_index":750,"t":{"271":{"position":[[0,48]]}}}],["docusauru",{"_index":764,"t":{"271":{"position":[[236,10]]}}}],["doexampapercount",{"_index":997,"t":{"326":{"position":[[108,19]]}}}],["doquestioncount",{"_index":999,"t":{"326":{"position":[[141,18]]}}}],["doright",{"_index":924,"t":{"299":{"position":[[970,10]]},"301":{"position":[[162,10]]},"307":{"position":[[567,10]]}}}],["dotim",{"_index":912,"t":{"297":{"position":[[76,9]]},"299":{"position":[[866,9]]},"301":{"position":[[64,9]]},"303":{"position":[[397,9]]},"378":{"position":[[390,9]]}}}],["drop",{"_index":649,"t":{"238":{"position":[[225,4],[309,4]]}}}],["dump",{"_index":1122,"t":{"405":{"position":[[41,12],[54,10]]}}}],["dump6379.rdb",{"_index":1125,"t":{"405":{"position":[[131,12]]}}}],["d的距离是5",{"_index":585,"t":{"213":{"position":[[178,19]]}}}],["d躺排序，一次分配要q(n)q(n)q(n)，一次收集要q(r)q(r)q(r)，所以时间复杂度为o(d(n+1))o(d(n+1))o(d(n+1",{"_index":344,"t":{"121":{"position":[[857,80]]}}}],["e",{"_index":136,"t":{"94":{"position":[[169,14]]},"195":{"position":[[55,7]]}}}],["e/i",{"_index":759,"t":{"271":{"position":[[176,4]]}}}],["e2b07f4fcc67",{"_index":1026,"t":{"332":{"position":[[357,14]]}}}],["elmenttyp",{"_index":498,"t":{"178":{"position":[[308,10]]}}}],["end",{"_index":731,"t":{"260":{"position":[[23,3]]}}}],["end{aligned}​1.已知树高求结点总数：sum=2h−12.已知编号i求双亲：(i/2)向下取整3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":444,"t":{"159":{"position":[[211,81]]}}}],["end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":271,"t":{"116":{"position":[[617,87]]}}}],["end{aligned}​1.若i为偶数则双亲为i/2向下取整2.若i为奇数则双亲为(i−1)/23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":488,"t":{"169":{"position":[[287,87]]}}}],["end{aligned}​当(vi​,vj​)是g的边，则a[i][j]=1否则a[i][j]=0",{"_index":519,"t":{"198":{"position":[[235,54]]}}}],["end{aligned}​当出现s[i]=t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1",{"_index":397,"t":{"150":{"position":[[1015,89]]}}}],["end{aligned}​当有t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j",{"_index":407,"t":{"150":{"position":[[1943,157]]}}}],["end{bmatrix}⎣⎡​0001​1000​1000​0010",{"_index":522,"t":{"198":{"position":[[445,39]]}}}],["enqueue(q,v",{"_index":553,"t":{"203":{"position":[[553,13],[703,13]]}}}],["entri",{"_index":1241,"t":{"465":{"position":[[468,7]]}}}],["esl",{"_index":467,"t":{"167":{"position":[[335,4],[471,4],[600,4],[713,5]]}}}],["etc/nginx/mime.typ",{"_index":796,"t":{"274":{"position":[[509,22]]}}}],["everysec",{"_index":1138,"t":{"412":{"position":[[29,13]]}}}],["exampaperanswerid",{"_index":871,"t":{"289":{"position":[[180,20]]}}}],["exampapercount",{"_index":994,"t":{"326":{"position":[[47,17]]}}}],["exampaperid",{"_index":868,"t":{"289":{"position":[[116,14]]}}}],["exampapernam",{"_index":870,"t":{"289":{"position":[[145,16]]}}}],["ex：key",{"_index":1183,"t":{"435":{"position":[[0,14]]}}}],["e∣=∣v∣−1|",{"_index":575,"t":{"207":{"position":[[89,12]]}}}],["e（23~30",{"_index":131,"t":{"94":{"position":[[66,10]]}}}],["f7ee8270ad4c",{"_index":1090,"t":{"382":{"position":[[133,14]]},"384":{"position":[[90,14]]},"390":{"position":[[83,14]]}}}],["fals",{"_index":205,"t":{"108":{"position":[[132,6]]},"205":{"position":[[197,6]]},"281":{"position":[[91,5]]},"307":{"position":[[578,6]]},"322":{"position":[[89,5]]},"332":{"position":[[729,6]]},"338":{"position":[[215,5]]},"366":{"position":[[314,5]]}}}],["fasl",{"_index":460,"t":{"167":{"position":[[212,6]]},"203":{"position":[[430,6]]}}}],["fd31ab62",{"_index":1008,"t":{"328":{"position":[[231,9]]},"330":{"position":[[117,9]]}}}],["field",{"_index":1200,"t":{"443":{"position":[[26,9]]}}}],["findleft(t[],int",{"_index":472,"t":{"167":{"position":[[502,16]]}}}],["findparent(t[],int",{"_index":461,"t":{"167":{"position":[[232,18]]}}}],["findright(t[],int",{"_index":468,"t":{"167":{"position":[[366,17]]}}}],["first",{"_index":536,"t":{"200":{"position":[[235,7]]}}}],["firstchild;}*treelist",{"_index":500,"t":{"178":{"position":[[331,28]]}}}],["firstneighbor(g,v);w>=0;w",{"_index":557,"t":{"203":{"position":[[609,25]]},"205":{"position":[[318,25]]}}}],["fixedpap",{"_index":854,"t":{"287":{"position":[[49,13]]}}}],["flag",{"_index":204,"t":{"108":{"position":[[125,4]]}}}],["for(gap",{"_index":179,"t":{"104":{"position":[[274,7]]}}}],["for(i",{"_index":151,"t":{"100":{"position":[[498,5]]},"102":{"position":[[375,5]]},"104":{"position":[[318,5]]},"119":{"position":[[477,5]]},"203":{"position":[[390,5],[451,5]]}}}],["for(int",{"_index":206,"t":{"108":{"position":[[139,7],[165,7]]},"114":{"position":[[299,7],[338,7]]},"116":{"position":[[879,7],[1033,7],[1371,7]]},"167":{"position":[[94,7]]}}}],["for(j",{"_index":157,"t":{"100":{"position":[[553,5]]},"102":{"position":[[533,5]]},"104":{"position":[[485,5]]}}}],["for(k",{"_index":304,"t":{"119":{"position":[[432,5]]}}}],["for(v",{"_index":566,"t":{"205":{"position":[[158,5],[204,5]]}}}],["for(w",{"_index":556,"t":{"203":{"position":[[601,5]]},"205":{"position":[[310,5]]}}}],["foreign",{"_index":643,"t":{"238":{"position":[[124,7]]}}}],["for循环，时间复杂度为o(n2)o(n^2)o(n2",{"_index":164,"t":{"100":{"position":[[713,45]]}}}],["foundat",{"_index":355,"t":{"142":{"position":[[0,10]]}}}],["frac{2|a",{"_index":721,"t":{"251":{"position":[[42,9]]}}}],["frac{n(n",{"_index":218,"t":{"108":{"position":[[406,9]]}}}],["frac{|a",{"_index":715,"t":{"249":{"position":[[34,8]]}}}],["frametextcontentid",{"_index":893,"t":{"293":{"position":[[439,21]]},"348":{"position":[[414,21]]},"356":{"position":[[415,21]]},"368":{"position":[[367,21]]},"370":{"position":[[296,21],[664,21]]}}}],["ftp",{"_index":813,"t":{"276":{"position":[[68,3],[276,3],[400,3],[560,5],[714,3]]}}}],["fundament",{"_index":732,"t":{"260":{"position":[[34,11]]}}}],["g",{"_index":543,"t":{"203":{"position":[[386,3],[521,3]]},"205":{"position":[[154,3]]}}}],["g,int",{"_index":570,"t":{"205":{"position":[[271,5]]}}}],["g=(v,e)和g′=(v′,e′)g",{"_index":508,"t":{"189":{"position":[[88,19]]}}}],["gap",{"_index":185,"t":{"104":{"position":[[449,6],[521,4]]}}}],["gap+1;i<=n;i",{"_index":182,"t":{"104":{"position":[[326,16]]}}}],["gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的p",{"_index":183,"t":{"104":{"position":[[343,91]]}}}],["gap,i,j",{"_index":178,"t":{"104":{"position":[[249,8]]}}}],["gap/2",{"_index":181,"t":{"104":{"position":[[303,7]]}}}],["gap;j>0",{"_index":186,"t":{"104":{"position":[[495,7]]}}}],["geo",{"_index":1210,"t":{"455":{"position":[[6,3]]}}}],["geoadd：多个经度、维度、位置名称添加到key",{"_index":1220,"t":{"459":{"position":[[0,26]]}}}],["geodist",{"_index":1222,"t":{"459":{"position":[[52,21]]}}}],["geohash：返回一个或者多个位置元素的geohash",{"_index":1225,"t":{"459":{"position":[[141,28]]}}}],["geopo",{"_index":1221,"t":{"459":{"position":[[27,24]]}}}],["georadiu",{"_index":1223,"t":{"459":{"position":[[74,43]]}}}],["georaiusbymemb",{"_index":1224,"t":{"459":{"position":[[118,22]]}}}],["get_next(str",{"_index":415,"t":{"152":{"position":[[44,15]]}}}],["get_nextval(str",{"_index":432,"t":{"154":{"position":[[343,18]]}}}],["gh",{"_index":757,"t":{"271":{"position":[[162,2],[280,2]]}}}],["git",{"_index":738,"t":{"265":{"position":[[168,3]]},"269":{"position":[[21,3],[51,11],[67,4]]},"271":{"position":[[213,4],[264,3]]},"276":{"position":[[699,14]]}}}],["github",{"_index":735,"t":{"265":{"position":[[54,6],[70,6],[101,6],[108,17],[208,6],[221,18]]},"271":{"position":[[250,6]]}}}],["github/workflows，并且在里面创建nodejs.yml",{"_index":811,"t":{"276":{"position":[[0,61]]}}}],["githubpag",{"_index":740,"t":{"265":{"position":[[288,47]]}}}],["github提供的托管工具githubpag",{"_index":734,"t":{"265":{"position":[[0,53]]}}}],["grade",{"_index":688,"t":{"240":{"position":[[766,5]]}}}],["grade+10wher",{"_index":689,"t":{"240":{"position":[[774,13]]}}}],["gradelevel",{"_index":903,"t":{"295":{"position":[[398,13]]},"299":{"position":[[482,13]]},"307":{"position":[[254,13]]},"350":{"position":[[399,13]]},"352":{"position":[[356,13],[1057,13]]},"360":{"position":[[189,13]]},"362":{"position":[[122,13]]},"366":{"position":[[34,13],[201,13]]},"368":{"position":[[105,13]]},"370":{"position":[[44,13],[400,13]]}}}],["group",{"_index":656,"t":{"240":{"position":[[48,5],[269,5]]},"242":{"position":[[324,5]]},"465":{"position":[[170,5]]}}}],["h(key)+i*hash_2(key",{"_index":68,"t":{"48":{"position":[[514,22]]}}}],["h(key)addr=h(key)建立起关键字和散列地址的映射关系，408",{"_index":54,"t":{"48":{"position":[[25,47]]}}}],["hash",{"_index":1198,"t":{"443":{"position":[[6,4],[47,9],[78,4]]}}}],["hashtable。redi",{"_index":1203,"t":{"447":{"position":[[77,15]]}}}],["have",{"_index":657,"t":{"240":{"position":[[62,6]]}}}],["headadjust(a,1,i",{"_index":293,"t":{"116":{"position":[[1414,16]]}}}],["headadjust(a,i,len);}void",{"_index":277,"t":{"116":{"position":[[934,25]]}}}],["headadjust(int",{"_index":278,"t":{"116":{"position":[[960,14]]}}}],["heapsort(int",{"_index":289,"t":{"116":{"position":[[1323,12]]}}}],["hi=(h(key)+i∗hash2(key))%mh_i",{"_index":67,"t":{"48":{"position":[[475,36]]}}}],["high",{"_index":47,"t":{"36":{"position":[[254,4]]},"102":{"position":[[466,5],[515,4],[552,4]]},"110":{"position":[[435,6],[507,6],[546,6],[589,5],[763,6],[779,6]]},"119":{"position":[[372,6],[767,6]]}}}],["high)/2",{"_index":44,"t":{"36":{"position":[[204,8]]}}}],["high位置的元素拿走（挖坑），去填low",{"_index":224,"t":{"110":{"position":[[347,22]]}}}],["high向前移动，直到遇到第一个比pivot",{"_index":223,"t":{"110":{"position":[[320,26]]}}}],["host",{"_index":791,"t":{"274":{"position":[[444,4],[449,6]]}}}],["http",{"_index":737,"t":{"265":{"position":[[151,5]]}}}],["http://xzs.file.mindskip.net/fi4vlef1ri4vmgsonwn2ch0o8ed_",{"_index":1101,"t":{"388":{"position":[[101,60]]}}}],["http://服务器ip",{"_index":789,"t":{"274":{"position":[[413,13]]}}}],["http_refer",{"_index":806,"t":{"274":{"position":[[669,15]]}}}],["http_user_ag",{"_index":807,"t":{"274":{"position":[[687,19]]}}}],["http_x_forwarded_for",{"_index":808,"t":{"274":{"position":[[707,25]]}}}],["https://username.github.io",{"_index":769,"t":{"271":{"position":[[392,52]]}}}],["https://username.github.io',baseurl",{"_index":752,"t":{"271":{"position":[[54,37]]}}}],["hyperloglog",{"_index":1226,"t":{"461":{"position":[[0,11],[12,23],[94,11],[181,11],[222,11]]}}}],["i++后指向5，对前一个组进行排序，只不过前一个表是27",{"_index":194,"t":{"104":{"position":[[689,40]]}}}],["i+1;j<n;j",{"_index":253,"t":{"114":{"position":[[350,13]]}}}],["i,j",{"_index":150,"t":{"100":{"position":[[493,4]]}}}],["i,j,k",{"_index":303,"t":{"119":{"position":[[425,6]]}}}],["i,j,low,high,mid",{"_index":168,"t":{"102":{"position":[[357,17]]}}}],["i;i<=mid",{"_index":309,"t":{"119":{"position":[[503,8]]}}}],["id",{"_index":855,"t":{"287":{"position":[[74,5],[86,6]]},"289":{"position":[[50,5],[59,6],[136,8],[206,6]]},"291":{"position":[[100,5],[112,6]]},"293":{"position":[[87,6],[212,5],[224,6]]},"295":{"position":[[95,5],[104,6],[315,5],[324,6]]},"297":{"position":[[131,6],[254,5],[262,7]]},"299":{"position":[[117,5],[126,6],[389,5],[398,6],[850,5],[859,6],[930,5],[939,6],[963,6]]},"301":{"position":[[48,5],[57,6],[122,5],[131,6],[155,6]]},"303":{"position":[[173,5],[185,6],[307,6]]},"305":{"position":[[169,5],[182,6]]},"307":{"position":[[165,5],[176,6],[226,6],[528,5],[560,6]]},"309":{"position":[[86,5],[111,6]]},"311":{"position":[[88,5]]},"313":{"position":[[38,5]]},"315":{"position":[[162,5]]},"322":{"position":[[152,5]]},"328":{"position":[[201,5],[212,6]]},"330":{"position":[[87,5],[98,6]]},"332":{"position":[[34,5],[309,5],[372,6]]},"338":{"position":[[98,5],[108,6]]},"340":{"position":[[173,5]]},"342":{"position":[[100,5]]},"344":{"position":[[47,5]]},"348":{"position":[[40,5],[214,5],[224,6]]},"350":{"position":[[93,5],[103,6],[313,5],[323,6]]},"352":{"position":[[40,5],[50,6],[264,5],[274,6],[748,5],[758,6],[965,5],[975,6]]},"356":{"position":[[223,5]]},"358":{"position":[[38,5],[212,5]]},"360":{"position":[[93,5],[104,6]]},"362":{"position":[[38,5],[48,6]]},"366":{"position":[[160,5],[170,6]]},"368":{"position":[[88,5],[98,6],[168,5],[179,6]]},"370":{"position":[[34,5],[96,5],[106,6],[383,5],[393,6],[464,5],[474,6]]},"374":{"position":[[173,5],[183,6]]},"378":{"position":[[175,5],[299,6]]},"380":{"position":[[186,5],[196,6],[216,6]]},"382":{"position":[[86,5]]},"384":{"position":[[36,5],[46,6]]},"386":{"position":[[146,6]]},"390":{"position":[[36,5]]},"465":{"position":[[93,42]]}}}],["id，支持ack",{"_index":1234,"t":{"465":{"position":[[56,36]]}}}],["if(!flag)return",{"_index":213,"t":{"108":{"position":[[253,15]]}}}],["if(!visited[i",{"_index":548,"t":{"203":{"position":[[478,15]]}}}],["if(!visited[w",{"_index":559,"t":{"203":{"position":[[657,16]]},"205":{"position":[[230,15],[365,15]]}}}],["if(a[0]>a[i])break",{"_index":285,"t":{"116":{"position":[[1136,19]]}}}],["if(a[i",{"_index":184,"t":{"104":{"position":[[435,7]]}}}],["if(a[i]<a[i",{"_index":154,"t":{"100":{"position":[[523,11]]}}}],["if(a[j",{"_index":210,"t":{"108":{"position":[[191,7]]}}}],["if(a[j]<a[min",{"_index":254,"t":{"114":{"position":[[364,15]]}}}],["if(a[mid",{"_index":170,"t":{"102":{"position":[[477,9]]}}}],["if(b[i]<=b[j",{"_index":312,"t":{"119":{"position":[[545,14]]}}}],["if(i!=min",{"_index":255,"t":{"114":{"position":[[391,10]]}}}],["if(i<len",{"_index":283,"t":{"116":{"position":[[1090,8]]}}}],["if(isempty(index))return",{"_index":466,"t":{"167":{"position":[[307,24],[686,24]]}}}],["if(isempty(left))return",{"_index":474,"t":{"167":{"position":[[573,23]]}}}],["if(isempty(right))return",{"_index":471,"t":{"167":{"position":[[443,24]]}}}],["if(isempty(x",{"_index":462,"t":{"167":{"position":[[255,13],[388,13],[523,13]]}}}],["if(j",{"_index":367,"t":{"144":{"position":[[315,4]]},"154":{"position":[[431,4]]}}}],["if(j==0||s.ch[i",{"_index":428,"t":{"152":{"position":[[332,16]]}}}],["if(j>t.len",{"_index":429,"t":{"152":{"position":[[395,11]]}}}],["if(k==0",{"_index":420,"t":{"152":{"position":[[122,7]]}}}],["if(low",{"_index":236,"t":{"110":{"position":[[770,6]]}}}],["if(low<high",{"_index":320,"t":{"119":{"position":[[774,13]]}}}],["if(mid",{"_index":45,"t":{"36":{"position":[[213,6],[239,6]]}}}],["if(s.ch[i",{"_index":365,"t":{"144":{"position":[[227,10]]}}}],["if(t.ch[j",{"_index":436,"t":{"154":{"position":[[475,10]]}}}],["if(x>=len",{"_index":457,"t":{"167":{"position":[[167,9]]}}}],["imagepath",{"_index":844,"t":{"281":{"position":[[144,12]]},"311":{"position":[[479,12]]},"313":{"position":[[429,12]]},"322":{"position":[[353,12]]},"328":{"position":[[601,12]]},"330":{"position":[[487,12]]},"332":{"position":[[589,12]]},"382":{"position":[[464,12]]},"384":{"position":[[434,12]]},"390":{"position":[[436,12]]}}}],["includ",{"_index":795,"t":{"274":{"position":[[501,7]]},"276":{"position":[[718,9]]}}}],["incr",{"_index":1187,"t":{"437":{"position":[[12,4]]}}}],["incrbi",{"_index":1188,"t":{"437":{"position":[[24,6]]}}}],["increment",{"_index":1189,"t":{"437":{"position":[[35,17]]}}}],["index",{"_index":464,"t":{"167":{"position":[[294,5],[347,6],[678,7]]},"274":{"position":[[348,5]]}}}],["index(str",{"_index":358,"t":{"144":{"position":[[151,12]]}}}],["index.html",{"_index":784,"t":{"274":{"position":[[354,11]]}}}],["index_kmp(str",{"_index":425,"t":{"152":{"position":[[247,16]]}}}],["info",{"_index":7,"t":{"11":{"position":[[156,4]]},"16":{"position":[[0,4]]},"104":{"position":[[138,4]]}}}],["init(treenod",{"_index":452,"t":{"167":{"position":[[66,13]]}}}],["initgit",{"_index":742,"t":{"269":{"position":[[25,7]]}}}],["initqueue(q",{"_index":546,"t":{"203":{"position":[[437,13]]}}}],["insert",{"_index":681,"t":{"240":{"position":[[640,6]]}}}],["insertsort(int",{"_index":149,"t":{"100":{"position":[[460,14]]}}}],["insertsortplus(int",{"_index":167,"t":{"102":{"position":[[320,18]]}}}],["instal",{"_index":826,"t":{"276":{"position":[[268,7],[328,7],[367,7]]},"423":{"position":[[148,9]]}}}],["int",{"_index":34,"t":{"36":{"position":[[91,3],[127,3],[145,3]]},"100":{"position":[[489,3]]},"102":{"position":[[353,3]]},"104":{"position":[[245,3]]},"108":{"position":[[53,3]]},"110":{"position":[[473,3],[514,3],[786,3]]},"114":{"position":[[325,3]]},"119":{"position":[[283,3],[292,4],[421,3],[788,3]]},"144":{"position":[[147,3],[177,3]]},"152":{"position":[[76,3],[243,3],[288,3]]},"154":{"position":[[380,3]]},"167":{"position":[[28,3],[38,3],[219,12],[354,11],[490,11]]},"178":{"position":[[88,3],[98,3],[231,3],[391,3]]},"198":{"position":[[637,3],[680,3]]},"200":{"position":[[119,3],[133,3],[297,3]]}}}],["integer、varchar、等等）not",{"_index":640,"t":{"238":{"position":[[22,27]]}}}],["intro",{"_index":623,"t":{"222":{"position":[[0,5]]}}}],["intset",{"_index":1202,"t":{"447":{"position":[[67,6]]}}}],["in配合select查询）例：upd",{"_index":686,"t":{"240":{"position":[[729,30]]}}}],["iouiouiou的计算公式为：iou=∣a∩b∣a∪bi",{"_index":714,"t":{"249":{"position":[[0,31]]}}}],["ip",{"_index":793,"t":{"274":{"position":[[480,2]]}}}],["is_studenta",{"_index":697,"t":{"242":{"position":[[168,12]]}}}],["isempty(t[],int",{"_index":456,"t":{"167":{"position":[[147,15]]}}}],["isempty;}treenod",{"_index":451,"t":{"167":{"position":[[42,18]]}}}],["item",{"_index":904,"t":{"295":{"position":[[420,8]]},"299":{"position":[[504,8]]},"307":{"position":[[277,8]]},"350":{"position":[[421,8]]},"352":{"position":[[378,8],[1079,8]]},"360":{"position":[[211,8]]},"362":{"position":[[144,8]]}}}],["itemord",{"_index":909,"t":{"295":{"position":[[578,12]]},"297":{"position":[[227,12]]},"299":{"position":[[776,12],[1018,12]]},"301":{"position":[[210,12]]},"307":{"position":[[473,12],[615,12]]},"338":{"position":[[180,12]]},"350":{"position":[[585,12]]},"352":{"position":[[647,12],[1348,12]]},"360":{"position":[[351,12]]},"362":{"position":[[304,12]]}}}],["itemuuid",{"_index":1042,"t":{"352":{"position":[[467,11],[1168,11]]}}}],["i做前段指针，j",{"_index":311,"t":{"119":{"position":[[529,15]]}}}],["i前移（i",{"_index":250,"t":{"114":{"position":[[240,19]]}}}],["i向前走到4",{"_index":193,"t":{"104":{"position":[[668,20]]}}}],["i和j",{"_index":357,"t":{"144":{"position":[[49,68]]}}}],["i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i",{"_index":245,"t":{"114":{"position":[[0,158]]}}}],["i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n",{"_index":216,"t":{"108":{"position":[[351,44]]}}}],["i，前面i",{"_index":143,"t":{"100":{"position":[[34,25]]}}}],["j",{"_index":160,"t":{"100":{"position":[[581,3]]},"108":{"position":[[173,1]]},"110":{"position":[[378,12]]},"114":{"position":[[346,1],[386,2]]},"121":{"position":[[526,1]]},"144":{"position":[[214,1],[269,4],[290,1],[304,1]]},"148":{"position":[[464,93]]},"150":{"position":[[352,35],[545,53],[649,1],[911,1],[934,1],[972,1],[1818,1],[1898,1],[1940,2]]},"152":{"position":[[80,1],[367,4],[380,1]]},"154":{"position":[[384,1],[465,4]]}}}],["j<=high;k",{"_index":310,"t":{"119":{"position":[[515,13]]}}}],["j<t.len",{"_index":427,"t":{"152":{"position":[[322,9]]}}}],["jekyl",{"_index":739,"t":{"265":{"position":[[186,21]]}}}],["job",{"_index":815,"t":{"276":{"position":[[108,5]]}}}],["join",{"_index":673,"t":{"240":{"position":[[436,4],[526,4]]}}}],["jpg",{"_index":1100,"t":{"388":{"position":[[66,9],[84,9],[185,7]]}}}],["j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j",{"_index":400,"t":{"150":{"position":[[1292,52]]}}}],["j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的ab相等呀，而主串中指针扫过的位置，必有ab匹配，那么我们可以直接跳过前部的ab",{"_index":390,"t":{"150":{"position":[[688,106]]}}}],["j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k",{"_index":376,"t":{"148":{"position":[[293,80]]}}}],["j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next",{"_index":381,"t":{"150":{"position":[[0,192]]}}}],["k",{"_index":286,"t":{"116":{"position":[[1201,1]]},"150":{"position":[[630,1],[642,1],[954,1],[965,1],[987,1],[1010,1],[1800,1],[1811,1],[1834,2],[1873,1],[1891,1],[1924,2],[1933,1]]},"152":{"position":[[172,4],[211,1]]},"154":{"position":[[470,4],[511,2],[587,1]]}}}],["k*2",{"_index":282,"t":{"116":{"position":[[1062,27]]}}}],["k*2;i<len;i*=2",{"_index":281,"t":{"116":{"position":[[1045,16]]}}}],["k,int",{"_index":279,"t":{"116":{"position":[[983,5]]}}}],["k...j",{"_index":379,"t":{"148":{"position":[[418,5]]}}}],["k=next[k]k=next[k]k=next[k",{"_index":408,"t":{"150":{"position":[[2145,52]]}}}],["k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k",{"_index":64,"t":{"48":{"position":[[384,47]]}}}],["k_j^{i",{"_index":334,"t":{"121":{"position":[[503,7]]}}}],["kb",{"_index":1227,"t":{"461":{"position":[[116,2]]}}}],["key",{"_index":37,"t":{"36":{"position":[[121,5],[248,5]]},"48":{"position":[[118,3]]},"437":{"position":[[17,6],[31,3],[58,8],[74,3]]}}}],["key(key1",{"_index":644,"t":{"238":{"position":[[132,9]]}}}],["key(key1,key2",{"_index":642,"t":{"238":{"position":[[99,19]]}}}],["key)reutrn",{"_index":46,"t":{"36":{"position":[[223,10]]}}}],["key。查找的时候先找最值key",{"_index":51,"t":{"41":{"position":[[0,83]]}}}],["key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high",{"_index":33,"t":{"36":{"position":[[0,83]]}}}],["key节点，计数一次，然后去块间顺序查找，依次+1",{"_index":52,"t":{"43":{"position":[[5,31]]}}}],["kmp",{"_index":356,"t":{"142":{"position":[[19,7]]},"148":{"position":[[0,54],[211,17]]},"152":{"position":[[236,6]]}}}],["kv模式不变，但是v是一个键值对，map<string,map<object,object",{"_index":1201,"t":{"445":{"position":[[0,47]]}}}],["k能够完全函数依赖整个关系集r，k的闭包完整退出r",{"_index":711,"t":{"245":{"position":[[203,29]]}}}],["l[1.......i",{"_index":140,"t":{"100":{"position":[[0,11]]}}}],["l[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得l分为两块：l[1....k",{"_index":220,"t":{"110":{"position":[[7,68]]}}}],["l[i",{"_index":141,"t":{"100":{"position":[[15,4],[287,14],[302,12]]}}}],["l[i+1......n",{"_index":142,"t":{"100":{"position":[[20,13]]}}}],["l[i]，然后将子序列中大于l[i",{"_index":147,"t":{"100":{"position":[[237,49]]}}}],["last_delivered_id",{"_index":1237,"t":{"465":{"position":[[218,17],[250,35],[286,17]]}}}],["lastactivetim",{"_index":975,"t":{"311":{"position":[[320,17]]},"313":{"position":[[270,17]]},"322":{"position":[[412,17]]},"328":{"position":[[424,17]]},"330":{"position":[[310,17]]},"332":{"position":[[676,17]]},"382":{"position":[[320,17]]},"384":{"position":[[273,17]]},"390":{"position":[[275,17]]}}}],["latest",{"_index":817,"t":{"276":{"position":[[138,6]]}}}],["lbs应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的xxx",{"_index":1211,"t":{"457":{"position":[[0,85]]}}}],["le",{"_index":9,"t":{"11":{"position":[[238,3]]},"48":{"position":[[432,3]]},"57":{"position":[[85,3],[147,3],[153,3]]},"59":{"position":[[146,3],[152,3],[197,3],[203,3]]},"116":{"position":[[568,3],[596,3]]},"121":{"position":[[499,3],[511,3],[522,3],[528,3],[536,3],[542,3]]},"169":{"position":[[238,3],[266,3]]}}}],["left",{"_index":473,"t":{"167":{"position":[[562,4],[612,5]]},"240":{"position":[[404,31],[521,4]]}}}],["leftchild,nexts",{"_index":501,"t":{"178":{"position":[[414,22]]}}}],["len",{"_index":38,"t":{"36":{"position":[[131,3],[164,3]]},"100":{"position":[[483,5]]},"102":{"position":[[347,5]]},"104":{"position":[[239,5]]},"108":{"position":[[112,5]]},"114":{"position":[[293,5]]},"116":{"position":[[873,5],[989,5],[1344,5]]},"167":{"position":[[88,5]]}}}],["len(a",{"_index":39,"t":{"36":{"position":[[137,7]]}}}],["len/2",{"_index":276,"t":{"116":{"position":[[906,27]]}}}],["len/2;gap>=1;gap",{"_index":180,"t":{"104":{"position":[[284,16]]}}}],["len/2;i>0;i",{"_index":275,"t":{"116":{"position":[[891,14]]}}}],["len;i",{"_index":153,"t":{"100":{"position":[[513,9]]},"102":{"position":[[390,9]]}}}],["len;i>n;i",{"_index":291,"t":{"116":{"position":[[1383,9]]}}}],["len，那么第一棵子树的根节点下表为len/2",{"_index":273,"t":{"116":{"position":[[746,35]]}}}],["level",{"_index":896,"t":{"295":{"position":[[111,8]]},"299":{"position":[[133,8]]},"338":{"position":[[136,8]]},"340":{"position":[[47,8],[204,8]]},"342":{"position":[[131,8]]},"344":{"position":[[78,8]]},"348":{"position":[[52,8]]},"350":{"position":[[110,8]]},"352":{"position":[[57,8],[765,8]]},"356":{"position":[[72,8]]},"358":{"position":[[72,8]]}}}],["levelnam",{"_index":1032,"t":{"338":{"position":[[153,12]]},"340":{"position":[[221,12]]},"342":{"position":[[148,12]]},"344":{"position":[[95,12]]}}}],["lftp",{"_index":830,"t":{"276":{"position":[[339,4]]}}}],["limitdatetim",{"_index":899,"t":{"295":{"position":[[220,16]]},"299":{"position":[[244,16]]},"350":{"position":[[220,16]]},"352":{"position":[[168,16],[876,16]]}}}],["limitendtim",{"_index":859,"t":{"287":{"position":[[154,15]]}}}],["limitstarttim",{"_index":858,"t":{"287":{"position":[[121,17]]}}}],["list",{"_index":882,"t":{"293":{"position":[[200,7]]},"303":{"position":[[161,7]]},"305":{"position":[[157,7]]},"315":{"position":[[150,7]]},"328":{"position":[[189,7]]},"340":{"position":[[161,7]]},"348":{"position":[[202,7]]},"356":{"position":[[211,7]]},"358":{"position":[[200,7]]},"366":{"position":[[148,7]]},"374":{"position":[[161,7]]},"378":{"position":[[163,7]]},"380":{"position":[[174,7]]},"465":{"position":[[476,28]]}}}],["listen",{"_index":780,"t":{"274":{"position":[[218,6],[245,6]]}}}],["list（列表），redi",{"_index":1193,"t":{"439":{"position":[[0,82]]}}}],["ll",{"_index":2,"t":{"6":{"position":[[22,5]]},"8":{"position":[[94,5]]},"13":{"position":[[183,21]]}}}],["local",{"_index":838,"t":{"276":{"position":[[566,5]]}}}],["locat",{"_index":787,"t":{"274":{"position":[[389,8]]}}}],["log2(n+1)向上取整，或者是log2(n)向上取整+1log_2(n+1)向上取整，或者是log_2(n)向上取整+1log2​(n+1)向上取整，或者是log2​(n)向上取整+1",{"_index":489,"t":{"169":{"position":[[381,94]]}}}],["log_format",{"_index":800,"t":{"274":{"position":[[571,10]]}}}],["low",{"_index":40,"t":{"36":{"position":[[149,3],[197,4],[278,3]]},"102":{"position":[[413,3],[459,4],[495,3]]},"110":{"position":[[305,14],[370,7],[657,6],[718,5]]}}}],["low+high)/2",{"_index":321,"t":{"119":{"position":[[798,13]]}}}],["low,int",{"_index":228,"t":{"110":{"position":[[499,7],[755,7]]},"119":{"position":[[356,7],[759,7]]}}}],["low,j",{"_index":307,"t":{"119":{"position":[[485,5]]}}}],["low;k<=high;k",{"_index":305,"t":{"119":{"position":[[440,16]]}}}],["low位置的元素拿走，填high",{"_index":226,"t":{"110":{"position":[[417,17]]}}}],["low向后移动，直到遇到第一个比pivot",{"_index":225,"t":{"110":{"position":[[391,25]]}}}],["low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j",{"_index":222,"t":{"110":{"position":[[162,142]]}}}],["lr",{"_index":4,"t":{"6":{"position":[[34,7]]},"8":{"position":[[106,7]]},"13":{"position":[[227,29]]}}}],["m",{"_index":22,"t":{"25":{"position":[[253,30]]},"271":{"position":[[226,1]]}}}],["m\"提交信息\"git",{"_index":746,"t":{"269":{"position":[[80,10]]}}}],["m*r^en=(−1)s∗m∗r",{"_index":122,"t":{"90":{"position":[[28,17]]}}}],["m+1",{"_index":507,"t":{"185":{"position":[[162,3]]}}}],["m/2",{"_index":17,"t":{"23":{"position":[[0,26]]},"25":{"position":[[0,26],[115,27]]},"28":{"position":[[29,37]]}}}],["m/2]（向上取整）棵子树，即至少有[m/2",{"_index":14,"t":{"16":{"position":[[45,45]]}}}],["m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3",{"_index":65,"t":{"48":{"position":[[436,32]]}}}],["main",{"_index":749,"t":{"269":{"position":[[106,4]]},"274":{"position":[[582,4],[770,6]]},"276":{"position":[[101,4]]}}}],["make",{"_index":1161,"t":{"423":{"position":[[143,4]]}}}],["malloc(sizeof(int)*(n+1",{"_index":299,"t":{"119":{"position":[[297,28]]}}}],["math",{"_index":712,"t":{"247":{"position":[[0,4]]}}}],["mathemat",{"_index":730,"t":{"260":{"position":[[4,11]]}}}],["max[ve(j",{"_index":610,"t":{"220":{"position":[[104,9]]}}}],["maxsize;i",{"_index":493,"t":{"178":{"position":[[150,12]]}}}],["merge(a,low,mid,high",{"_index":324,"t":{"119":{"position":[[859,22]]}}}],["merge(int",{"_index":300,"t":{"119":{"position":[[338,9]]}}}],["mergesort(a,low,mid",{"_index":322,"t":{"119":{"position":[[812,21]]}}}],["mergesort(a,mid+1,high",{"_index":323,"t":{"119":{"position":[[834,24]]}}}],["mergesort(int",{"_index":319,"t":{"119":{"position":[[737,13]]}}}],["messag",{"_index":850,"t":{"283":{"position":[[137,10]]},"285":{"position":[[48,10]]},"291":{"position":[[67,10]]},"293":{"position":[[157,10]]},"295":{"position":[[64,10]]},"297":{"position":[[289,10]]},"299":{"position":[[68,10]]},"301":{"position":[[342,10]]},"303":{"position":[[115,10]]},"305":{"position":[[110,10]]},"307":{"position":[[118,10]]},"309":{"position":[[53,10]]},"311":{"position":[[57,10]]},"313":{"position":[[472,10]]},"315":{"position":[[107,10]]},"317":{"position":[[65,10]]},"319":{"position":[[69,10]]},"322":{"position":[[121,10]]},"324":{"position":[[48,10]]},"328":{"position":[[140,10]]},"330":{"position":[[56,10]]},"332":{"position":[[278,10]]},"334":{"position":[[63,10]]},"336":{"position":[[62,10]]},"338":{"position":[[65,10]]},"340":{"position":[[118,10]]},"342":{"position":[[69,10]]},"344":{"position":[[141,10]]},"346":{"position":[[69,10]]},"348":{"position":[[159,10]]},"350":{"position":[[62,10]]},"352":{"position":[[717,10]]},"354":{"position":[[62,10]]},"356":{"position":[[168,10]]},"358":{"position":[[157,10]]},"360":{"position":[[62,10]]},"362":{"position":[[342,10]]},"364":{"position":[[60,10]]},"366":{"position":[[105,10]]},"368":{"position":[[57,10]]},"370":{"position":[[352,10]]},"372":{"position":[[63,10]]},"374":{"position":[[117,10]]},"376":{"position":[[146,10]]},"378":{"position":[[120,10]]},"380":{"position":[[130,10]]},"382":{"position":[[55,10]]},"384":{"position":[[477,10]]},"386":{"position":[[77,10]]},"390":{"position":[[479,10]]},"465":{"position":[[138,7]]}}}],["messageid",{"_index":984,"t":{"315":{"position":[[196,12]]}}}],["mgraph",{"_index":529,"t":{"198":{"position":[[699,20]]}}}],["mhi​=(h(key)+i∗hash2​(key))%m",{"_index":69,"t":{"48":{"position":[[540,29]]}}}],["mid",{"_index":43,"t":{"36":{"position":[[191,3],[234,4],[261,3],[284,3]]},"102":{"position":[[453,3],[501,3],[522,3]]},"119":{"position":[[792,3]]}}}],["mid+1,k",{"_index":308,"t":{"119":{"position":[[493,7]]}}}],["mid,int",{"_index":301,"t":{"119":{"position":[[364,7]]}}}],["mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high",{"_index":302,"t":{"119":{"position":[[379,41]]}}}],["min",{"_index":252,"t":{"114":{"position":[[329,3],[380,3]]}}}],["min[vl(j",{"_index":615,"t":{"220":{"position":[[333,9]]}}}],["mode",{"_index":1168,"t":{"425":{"position":[[43,4],[63,4]]}}}],["modifytim",{"_index":978,"t":{"311":{"position":[[379,13]]},"313":{"position":[[329,13]]},"322":{"position":[[392,13]]},"328":{"position":[[518,13]]},"330":{"position":[[404,13]]},"332":{"position":[[649,13]]},"382":{"position":[[395,13]]},"384":{"position":[[348,13]]},"390":{"position":[[350,13]]}}}],["mothdaydoexamquestionvalu",{"_index":1003,"t":{"326":{"position":[[213,29]]}}}],["mothdaytext",{"_index":1004,"t":{"326":{"position":[[258,14]]}}}],["mothdayuseractionvalu",{"_index":1001,"t":{"326":{"position":[[173,25]]}}}],["mq最低位：为1则加x的补码，为0则加0",{"_index":111,"t":{"81":{"position":[[115,22]]}}}],["mq，messag",{"_index":1230,"t":{"463":{"position":[[50,19]]}}}],["myredi",{"_index":1175,"t":{"427":{"position":[[3,13]]}}}],["myredis/redis.conf",{"_index":1176,"t":{"427":{"position":[[30,19]]}}}],["m个子树，即一个节点中至多m",{"_index":13,"t":{"16":{"position":[[5,23]]}}}],["m阶b+树每个结点最多m棵子树（也就是最多m",{"_index":27,"t":{"28":{"position":[[0,28]]}}}],["m（0~22",{"_index":132,"t":{"94":{"position":[[77,9]]}}}],["m，取不大于m的最大质数p，构建函数h(key)=key%ph(key",{"_index":55,"t":{"48":{"position":[[73,42]]}}}],["m，所以总数为n",{"_index":506,"t":{"185":{"position":[[153,8]]}}}],["n",{"_index":108,"t":{"79":{"position":[[97,13]]},"108":{"position":[[177,1]]},"114":{"position":[[179,7],[462,15]]},"119":{"position":[[38,65]]}}}],["n(n",{"_index":511,"t":{"193":{"position":[[67,7]]},"195":{"position":[[44,7]]}}}],["n(n−1)2\\frac{n(n",{"_index":258,"t":{"114":{"position":[[495,36]]}}}],["n)<)(n)<o(nlong_2n)<o(n^2)<o(n^3)<o(2^n)<o(n!)<o(n^n)o(1)<o(log2​n)<)(n)<o(nlong2​n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":354,"t":{"140":{"position":[[268,114]]}}}],["n*n邻接矩阵，每条边的权值用int",{"_index":527,"t":{"198":{"position":[[655,24]]}}}],["n+1",{"_index":76,"t":{"57":{"position":[[0,42]]},"59":{"position":[[116,9]]},"72":{"position":[[143,27]]}}}],["n+1次，左移n",{"_index":116,"t":{"83":{"position":[[92,11]]},"85":{"position":[[105,10]]}}}],["n,0",{"_index":336,"t":{"121":{"position":[[532,3]]}}}],["n/2",{"_index":175,"t":{"104":{"position":[[143,28],[184,8]]}}}],["n2",{"_index":480,"t":{"169":{"position":[[28,2]]}}}],["n=(−1)s∗m∗ren",{"_index":120,"t":{"90":{"position":[[0,17]]}}}],["n[i].par",{"_index":494,"t":{"178":{"position":[[163,11]]}}}],["n[maxsize]；for(int",{"_index":491,"t":{"178":{"position":[[121,18]]}}}],["name",{"_index":812,"t":{"276":{"position":[[62,5],[182,5],[262,5],[346,5],[394,5]]},"287":{"position":[[93,7]]},"291":{"position":[[119,7]]},"293":{"position":[[231,7]]},"295":{"position":[[172,7],[270,7]]},"299":{"position":[[194,7],[338,7]]},"338":{"position":[[115,7]]},"340":{"position":[[183,7]]},"342":{"position":[[110,7]]},"344":{"position":[[57,7]]},"348":{"position":[[231,7]]},"350":{"position":[[171,7],[268,7]]},"352":{"position":[[118,7],[214,7],[826,7],[922,7]]},"356":{"position":[[233,7]]},"368":{"position":[[186,7]]},"370":{"position":[[113,7],[481,7]]},"386":{"position":[[110,7]]},"388":{"position":[[76,7]]}}}],["neq",{"_index":393,"t":{"150":{"position":[[893,4]]}}}],["next",{"_index":386,"t":{"150":{"position":[[508,24]]},"152":{"position":[[66,4],[279,8]]},"200":{"position":[[160,6]]}}}],["next[++j",{"_index":423,"t":{"152":{"position":[[160,9]]}}}],["next[1",{"_index":418,"t":{"152":{"position":[[93,7]]}}}],["next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1",{"_index":385,"t":{"150":{"position":[[464,43]]}}}],["next[j",{"_index":406,"t":{"150":{"position":[[1823,8]]},"152":{"position":[[191,7],[384,8]]}}}],["next[j+1",{"_index":424,"t":{"152":{"position":[[177,11]]}}}],["next[j]=next[j",{"_index":404,"t":{"150":{"position":[[1752,21]]}}}],["next[k",{"_index":411,"t":{"150":{"position":[[2496,7]]},"152":{"position":[[215,8]]}}}],["nextneighbor(g,v",{"_index":558,"t":{"203":{"position":[[637,19]]},"205":{"position":[[346,18]]}}}],["nextval",{"_index":433,"t":{"154":{"position":[[368,11]]}}}],["nextval[1",{"_index":434,"t":{"154":{"position":[[397,10]]}}}],["nextval[j",{"_index":437,"t":{"154":{"position":[[498,10],[539,10]]}}}],["nextval[k",{"_index":438,"t":{"154":{"position":[[552,11],[591,10]]}}}],["next}child",{"_index":496,"t":{"178":{"position":[[255,11]]}}}],["next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba",{"_index":398,"t":{"150":{"position":[[1105,134]]}}}],["next数组的求解就算结束了。我们来看下next",{"_index":414,"t":{"152":{"position":[[0,38]]}}}],["next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果t[next[j]]等于t[k]，那么直接跳过这一层匹配，改为t[next[next[j]]即可。也就是跳过了中间无效的t[next[j]]和t[k",{"_index":431,"t":{"154":{"position":[[178,154]]}}}],["next数组，next数组的1和2无脑填0和1",{"_index":382,"t":{"150":{"position":[[204,147]]}}}],["next的1和2还是直接填0和1",{"_index":399,"t":{"150":{"position":[[1240,44]]}}}],["nginx",{"_index":770,"t":{"274":{"position":[[0,43],[777,15]]}}}],["nginx;worker_process",{"_index":773,"t":{"274":{"position":[[86,22]]}}}],["nginx配置文件nginx.conf",{"_index":771,"t":{"274":{"position":[[44,36]]}}}],["node",{"_index":449,"t":{"167":{"position":[[22,5]]},"178":{"position":[[82,5],[225,5],[248,4],[385,5],[408,5]]},"276":{"position":[[239,4]]}}}],["node.j",{"_index":821,"t":{"276":{"position":[[192,7]]}}}],["node@v2",{"_index":824,"t":{"276":{"position":[[225,7]]}}}],["notebook",{"_index":627,"t":{"227":{"position":[[41,9]]}}}],["no：操作系统决定何时xiehui",{"_index":1139,"t":{"412":{"position":[[43,17]]}}}],["npm",{"_index":753,"t":{"271":{"position":[[133,3]]},"276":{"position":[[363,3],[378,3]]}}}],["null",{"_index":15,"t":{"16":{"position":[[97,22]]},"21":{"position":[[18,84]]},"235":{"position":[[82,8]]},"238":{"position":[[50,5]]},"283":{"position":[[166,5]]},"285":{"position":[[77,5]]},"287":{"position":[[139,5],[170,4]]},"295":{"position":[[237,5],[481,5]]},"297":{"position":[[70,5],[149,5]]},"299":{"position":[[981,5],[1005,5]]},"301":{"position":[[173,5],[197,5]]},"303":{"position":[[540,4]]},"307":{"position":[[347,4],[401,5],[486,4],[652,5]]},"313":{"position":[[501,5]]},"317":{"position":[[94,5]]},"322":{"position":[[158,5],[176,5],[221,5],[239,5],[252,5],[265,5],[283,5],[302,5],[317,5],[331,5],[347,5],[366,5],[386,5],[406,5],[430,5],[447,5],[465,4]]},"324":{"position":[[77,5]]},"328":{"position":[[315,5],[335,5],[369,5],[412,5],[614,4]]},"330":{"position":[[201,5],[221,5],[255,5],[298,5],[500,4]]},"332":{"position":[[40,5],[206,5],[226,5],[461,5],[479,5],[502,5],[543,5],[602,5],[663,5],[755,4]]},"334":{"position":[[99,5]]},"338":{"position":[[193,5]]},"340":{"position":[[56,5]]},"344":{"position":[[170,5]]},"346":{"position":[[98,5]]},"348":{"position":[[46,5],[61,5],[85,5]]},"350":{"position":[[237,5],[484,5]]},"352":{"position":[[185,5],[454,5],[479,4],[893,5],[1155,5],[1180,4]]},"354":{"position":[[91,5]]},"356":{"position":[[61,5]]},"358":{"position":[[44,5],[66,5],[81,5],[100,5],[263,5],[464,5]]},"360":{"position":[[269,5],[364,4]]},"362":{"position":[[205,5],[317,5],[371,5]]},"364":{"position":[[89,5]]},"366":{"position":[[48,5]]},"368":{"position":[[416,4]]},"372":{"position":[[99,5]]},"374":{"position":[[53,5]]},"376":{"position":[[182,5]]},"378":{"position":[[58,5]]},"380":{"position":[[55,5],[73,5]]},"382":{"position":[[308,5],[451,5],[477,4]]},"384":{"position":[[423,5],[447,4],[506,5]]},"390":{"position":[[425,5],[449,4],[508,5]]}}}],["nx：当key不存在的时候，才创建key，等效于setnx",{"_index":1185,"t":{"435":{"position":[[30,29]]}}}],["n})\\le",{"_index":78,"t":{"57":{"position":[[76,6]]}}}],["n}−(1−2−n)≤x≤1−2−n",{"_index":80,"t":{"57":{"position":[[95,19]]}}}],["n}−1≤x≤1−2−n",{"_index":88,"t":{"59":{"position":[[162,12]]}}}],["n个内部红节点的红黑树高度h≤2∗log2(n+1)h",{"_index":8,"t":{"11":{"position":[[209,28]]}}}],["n个辅助单元，空间复杂度o(n)o(n)o(n",{"_index":325,"t":{"119":{"position":[[897,26]]}}}],["n和m",{"_index":296,"t":{"119":{"position":[[109,17]]}}}],["n在某个范围的时候，时间复杂度为o(n1.3)o(n^{1.3})o(n1.3)，最坏情况是o(n2)o(n^2)o(n2",{"_index":197,"t":{"104":{"position":[[805,86]]}}}],["n就挂到队列n的队尾中，比如520的个位是0，就挂0",{"_index":342,"t":{"121":{"position":[[760,43]]}}}],["n时，i的右孩子是2i+1",{"_index":270,"t":{"116":{"position":[[600,13]]},"169":{"position":[[270,13]]}}}],["n时，i的左孩子是2i",{"_index":268,"t":{"116":{"position":[[572,11]]},"169":{"position":[[242,11]]}}}],["n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d",{"_index":329,"t":{"121":{"position":[[333,65]]}}}],["n足够大的时候去分析执行时间。采用大o",{"_index":352,"t":{"140":{"position":[[69,65]]}}}],["n，边数为n",{"_index":574,"t":{"207":{"position":[[0,28]]}}}],["o(1",{"_index":1204,"t":{"447":{"position":[[126,15]]},"450":{"position":[[161,5]]}}}],["o(1)<o(log2n)<)(n)<o(nlong2n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn)o(1)<o(log_2",{"_index":353,"t":{"140":{"position":[[196,71]]}}}],["o(1)o(1)o(1",{"_index":173,"t":{"102":{"position":[[630,18]]},"104":{"position":[[781,23]]},"108":{"position":[[286,18]]},"114":{"position":[[434,27]]},"116":{"position":[[1450,24]]},"123":{"position":[[80,12],[166,12],[205,12],[271,12],[458,12],[572,12]]}}}],["o(d(r+1))o(d(r+1))o(d(r+1",{"_index":347,"t":{"123":{"position":[[707,27],[735,27],[763,27]]}}}],["o(log2n)o(log_{2}n)o(log2​n",{"_index":346,"t":{"123":{"position":[[370,28]]}}}],["o(log2n)o(log_{2}n)o(log2​n)，最坏需要n−1次递归调用，所以栈为o(n)n",{"_index":242,"t":{"110":{"position":[[926,89]]}}}],["o(n)o(n)o(n",{"_index":163,"t":{"100":{"position":[[672,40]]},"123":{"position":[[33,12],[224,12],[689,12]]}}}],["o(n)o(n)o(n)调整时间为o(h)o(h)o(h)，最好、最坏、平均情况下的时间复杂度都是o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":295,"t":{"116":{"position":[[1475,84]]}}}],["o(n)o(n)o(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":326,"t":{"119":{"position":[[924,83]]}}}],["o(n)o(n)o(n)，否则则进行n",{"_index":214,"t":{"108":{"position":[[305,30]]}}}],["o(n2)o(n^2)o(n2",{"_index":174,"t":{"102":{"position":[[649,22]]},"123":{"position":[[46,16],[63,16],[132,16],[149,16],[188,16],[237,16],[254,16],[353,16],[407,16],[424,16],[441,16]]},"198":{"position":[[720,40]]}}}],["o(n2)o(n^2)o(n2)，理想情况是o(nlong2n)o(nlong_{2}n)o(nlong2​n",{"_index":244,"t":{"110":{"position":[[1081,69]]}}}],["o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":345,"t":{"123":{"position":[[100,31],[289,31],[321,31],[476,31],[508,31],[540,31],[593,31],[625,31],[657,31]]}}}],["o(r)o(r)o(r",{"_index":348,"t":{"123":{"position":[[791,12]]}}}],["o(∣v∣)o(|v|)o(∣v",{"_index":563,"t":{"203":{"position":[[925,45]]}}}],["o(∣v∣)o(|v|)o(∣v∣)次，搜索邻接边需要o(∣e∣)o(|e|)o(∣e∣)，故为o(∣v∣+∣e)o(|v|+|e)o(∣v∣+∣e)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":562,"t":{"203":{"position":[[724,200]]},"205":{"position":[[392,200]]}}}],["o(∣v∣+∣e∣)o(|v|+|e|)o(∣v∣+∣e∣)若为无向图则o(∣v∣+2∣e∣)o(|v|+2|e|)o(∣v∣+2∣",{"_index":539,"t":{"200":{"position":[[358,98]]}}}],["o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":587,"t":{"213":{"position":[[240,41]]}}}],["of，为1",{"_index":94,"t":{"74":{"position":[[15,26]]}}}],["ok",{"_index":520,"t":{"198":{"position":[[290,48]]}}}],["on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为nul",{"_index":674,"t":{"240":{"position":[[441,36]]}}}],["openid",{"_index":1028,"t":{"332":{"position":[[760,10]]}}}],["option]加入这个语句的话，进行uid的时候，需要满足子查询中的条件例：cr",{"_index":696,"t":{"242":{"position":[[118,44]]}}}],["order",{"_index":658,"t":{"240":{"position":[[74,5],[293,5]]}}}],["origin",{"_index":744,"t":{"269":{"position":[[44,6],[99,6]]},"271":{"position":[[273,6]]},"388":{"position":[[54,11]]}}}],["p",{"_index":1179,"t":{"429":{"position":[[61,1]]}}}],["p1和p2",{"_index":297,"t":{"119":{"position":[[142,23]]}}}],["p>什么是快乐星球？</p",{"_index":1055,"t":{"360":{"position":[[165,18]]}}}],["page",{"_index":736,"t":{"265":{"position":[[61,5],[126,5],[215,5],[240,5]]},"271":{"position":[[257,6],[283,5],[343,5]]}}}],["pageindex",{"_index":879,"t":{"293":{"position":[[94,12]]},"303":{"position":[[52,12]]},"305":{"position":[[47,12]]},"307":{"position":[[55,12]]},"315":{"position":[[44,12]]},"328":{"position":[[77,12]]},"340":{"position":[[67,12]]},"348":{"position":[[96,12]]},"356":{"position":[[112,12]]},"358":{"position":[[106,12]]},"366":{"position":[[54,12]]},"374":{"position":[[59,12]]},"378":{"position":[[69,12]]},"380":{"position":[[79,12]]}}}],["pages",{"_index":880,"t":{"293":{"position":[[115,11]]},"303":{"position":[[73,11]]},"305":{"position":[[68,11]]},"307":{"position":[[76,11]]},"315":{"position":[[65,11]]},"328":{"position":[[98,11]]},"340":{"position":[[83,11]]},"348":{"position":[[117,11]]},"356":{"position":[[133,11]]},"358":{"position":[[122,11]]},"366":{"position":[[70,11]]},"374":{"position":[[75,11]]},"378":{"position":[[85,11]]},"380":{"position":[[95,11]]}}}],["pagesxcopi",{"_index":758,"t":{"271":{"position":[[165,10]]}}}],["pages分支上，接下来你只需要在仓库的set",{"_index":766,"t":{"271":{"position":[[313,27]]}}}],["pages分支来作为你的pag",{"_index":768,"t":{"271":{"position":[[362,29]]}}}],["paper",{"_index":918,"t":{"299":{"position":[[99,8]]}}}],["paperitem",{"_index":867,"t":{"289":{"position":[[98,13]]},"368":{"position":[[150,13]]},"370":{"position":[[78,13],[446,13]]}}}],["papernam",{"_index":937,"t":{"303":{"position":[[491,12]]},"378":{"position":[[485,12]]}}}],["paperscor",{"_index":935,"t":{"303":{"position":[[371,13]]},"378":{"position":[[363,13]]}}}],["papertyp",{"_index":876,"t":{"293":{"position":[[46,12],[416,12]]},"295":{"position":[[149,12]]},"299":{"position":[[171,12]]},"303":{"position":[[419,12]]},"348":{"position":[[391,12]]},"350":{"position":[[148,12]]},"352":{"position":[[95,12],[803,12]]},"356":{"position":[[89,12],[392,12]]},"368":{"position":[[344,12]]},"370":{"position":[[273,12],[641,12]]},"378":{"position":[[413,12]]}}}],["parent;}node*;nod",{"_index":490,"t":{"178":{"position":[[102,18]]}}}],["partition(a,low,high",{"_index":238,"t":{"110":{"position":[[801,34]]}}}],["partition(int",{"_index":227,"t":{"110":{"position":[[477,13]]}}}],["password",{"_index":835,"t":{"276":{"position":[[510,9]]},"281":{"position":[[58,11]]},"283":{"position":[[70,11]]},"322":{"position":[[56,11],[209,11]]},"332":{"position":[[74,11],[407,11]]},"427":{"position":[[81,10]]},"429":{"position":[[19,8]]}}}],["pel(pend",{"_index":1240,"t":{"465":{"position":[[456,11]]}}}],["pending_id",{"_index":1238,"t":{"465":{"position":[[336,11]]}}}],["ph(key)=key%p，则产生的地址落在区间[0,p−1][0,p",{"_index":56,"t":{"48":{"position":[[125,35]]}}}],["phone",{"_index":973,"t":{"311":{"position":[[292,8]]},"313":{"position":[[242,8]]},"322":{"position":[[308,8]]},"328":{"position":[[403,8]]},"330":{"position":[[289,8]]},"332":{"position":[[217,8],[534,8]]},"382":{"position":[[299,8]]},"384":{"position":[[252,8]]},"390":{"position":[[249,8]]}}}],["pi",{"_index":634,"t":{"235":{"position":[[151,8]]}}}],["pivot",{"_index":229,"t":{"110":{"position":[[518,5],[704,6]]}}}],["pivotpo",{"_index":237,"t":{"110":{"position":[[790,8]]}}}],["posit",{"_index":1216,"t":{"457":{"position":[[263,8]]}}}],["preambl",{"_index":1150,"t":{"419":{"position":[[161,11]]}}}],["prefix",{"_index":922,"t":{"299":{"position":[[524,9],[596,9]]},"307":{"position":[[295,9]]},"352":{"position":[[396,9],[1097,9]]}}}],["presearch(t[],2*index",{"_index":478,"t":{"167":{"position":[[736,23],[760,21]]}}}],["presearch(t[],int",{"_index":476,"t":{"167":{"position":[[660,17]]}}}],["prim)和克鲁斯卡尔(krusk",{"_index":577,"t":{"207":{"position":[[120,37]]}}}],["primarri",{"_index":641,"t":{"238":{"position":[[90,8]]}}}],["prim是选点，而kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n",{"_index":580,"t":{"211":{"position":[[0,86]]}}}],["protect",{"_index":1167,"t":{"425":{"position":[[31,11]]}}}],["proxy_pass",{"_index":788,"t":{"274":{"position":[[402,10]]}}}],["proxy_set_head",{"_index":790,"t":{"274":{"position":[[427,16],[456,16]]}}}],["pub/sub",{"_index":1232,"t":{"463":{"position":[[101,9],[175,9]]}}}],["push",{"_index":747,"t":{"269":{"position":[[91,4]]},"271":{"position":[[268,4]]},"276":{"position":[[83,5]]}}}],["px：key",{"_index":1184,"t":{"435":{"position":[[15,14]]}}}],["p可知:散列地址在[0,p−1][0,p",{"_index":72,"t":{"50":{"position":[[40,41]]}}}],["q",{"_index":762,"t":{"271":{"position":[[197,2]]}}}],["questionanswervm",{"_index":952,"t":{"307":{"position":[[499,19]]}}}],["questioncorrect",{"_index":934,"t":{"303":{"position":[[341,18]]},"378":{"position":[[333,18]]}}}],["questioncount",{"_index":884,"t":{"293":{"position":[[254,16]]},"303":{"position":[[314,16]]},"326":{"position":[[78,16]]},"348":{"position":[[255,16]]},"356":{"position":[[257,16]]},"368":{"position":[[207,16]]},"370":{"position":[[137,16],[505,16]]},"378":{"position":[[306,16]]}}}],["questionid",{"_index":911,"t":{"297":{"position":[[56,13],[114,13]]},"299":{"position":[[946,13]]},"301":{"position":[[138,13]]},"307":{"position":[[541,13]]}}}],["questionitem",{"_index":901,"t":{"295":{"position":[[294,16]]},"299":{"position":[[361,16]]},"350":{"position":[[292,16]]},"352":{"position":[[236,16],[944,16]]}}}],["questionscor",{"_index":925,"t":{"299":{"position":[[1096,16]]},"301":{"position":[[290,16]]},"307":{"position":[[684,16]]}}}],["questiontyp",{"_index":902,"t":{"295":{"position":[[331,15]]},"299":{"position":[[405,15]]},"305":{"position":[[189,15]]},"307":{"position":[[183,15]]},"350":{"position":[[330,15]]},"352":{"position":[[281,15],[982,15]]},"358":{"position":[[50,15],[222,15]]},"360":{"position":[[111,15]]},"362":{"position":[[55,15]]}}}],["questionvm",{"_index":947,"t":{"307":{"position":[[149,13]]}}}],["queue），redi",{"_index":1231,"t":{"463":{"position":[[70,12]]}}}],["quicksort(a,low,pivotpo",{"_index":239,"t":{"110":{"position":[[836,24]]}}}],["quicksort(a,pivotpo",{"_index":240,"t":{"110":{"position":[[873,20]]}}}],["quicksort(int",{"_index":235,"t":{"110":{"position":[[733,13]]}}}],["r",{"_index":335,"t":{"121":{"position":[[515,1]]},"457":{"position":[[281,1],[294,1],[303,1],[357,33]]}}}],["rachel",{"_index":626,"t":{"227":{"position":[[34,6]]}}}],["rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天rachel",{"_index":624,"t":{"224":{"position":[[16,119]]}}}],["rdb",{"_index":1141,"t":{"415":{"position":[[41,14]]},"419":{"position":[[33,21],[157,3]]}}}],["rdb+aof",{"_index":1153,"t":{"419":{"position":[[197,12]]}}}],["rdb和aof",{"_index":1149,"t":{"419":{"position":[[120,15]]}}}],["rdb和aof时，重启时只会加在aof不会加在rdb",{"_index":1147,"t":{"419":{"position":[[0,32]]}}}],["rdb文件(dump.rdb)，其中，rdb就是redi",{"_index":1118,"t":{"399":{"position":[[20,118]]}}}],["rdb进行快照存储，然后使用aof持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的rdb记录。这样的话，重启服务的时候会从rdb和aof两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是rdb格式，一部分是aof",{"_index":1155,"t":{"419":{"position":[[245,155]]}}}],["rdb镜像做全量持久化，aof",{"_index":1154,"t":{"419":{"position":[[220,24]]}}}],["rdb：类似快照技术，将当前的数据快照存留成rdb",{"_index":1116,"t":{"397":{"position":[[106,27]]}}}],["read",{"_index":986,"t":{"315":{"position":[[240,9]]}}}],["readcount",{"_index":1074,"t":{"374":{"position":[[342,12]]}}}],["real",{"_index":792,"t":{"274":{"position":[[475,4]]}}}],["realnam",{"_index":957,"t":{"309":{"position":[[147,11]]},"311":{"position":[[178,11]]},"313":{"position":[[128,11]]},"322":{"position":[[227,11]]},"328":{"position":[[303,11]]},"330":{"position":[[189,11]]},"332":{"position":[[101,11],[427,11]]},"380":{"position":[[250,11]]},"382":{"position":[[184,11]]},"384":{"position":[[139,11]]},"390":{"position":[[134,11]]}}}],["recallrecallrecall系数计算公式为：tp(tp+fp)\\frac{tp}{(tp+fp)}(tp+fp)tp",{"_index":724,"t":{"253":{"position":[[0,63]]}}}],["receiv",{"_index":1072,"t":{"374":{"position":[[279,11]]}}}],["receiveusercount",{"_index":1073,"t":{"374":{"position":[[311,19]]}}}],["receiveuserid",{"_index":1078,"t":{"376":{"position":[[89,17]]}}}],["redi",{"_index":1133,"t":{"410":{"position":[[229,12],[449,6]]},"423":{"position":[[96,5],[116,7]]},"425":{"position":[[140,11]]},"427":{"position":[[17,5],[50,5],[65,8]]},"429":{"position":[[0,11],[37,18]]},"443":{"position":[[0,5],[57,16]]},"447":{"position":[[0,5]]},"450":{"position":[[0,5]]},"455":{"position":[[0,5]]},"461":{"position":[[82,5]]},"463":{"position":[[0,5],[15,5],[37,5],[90,5],[111,41],[205,5]]}}}],["redis.conf",{"_index":1123,"t":{"405":{"position":[[73,14]]}}}],["redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredi",{"_index":1165,"t":{"423":{"position":[[251,90]]}}}],["redis.conf配置中的save《seconds》《chang",{"_index":1121,"t":{"405":{"position":[[0,40]]}}}],["redis7",{"_index":1120,"t":{"402":{"position":[[0,14],[15,9]]},"415":{"position":[[66,13]]}}}],["redis中由两种持久化：rdb和aof",{"_index":1115,"t":{"397":{"position":[[0,105]]}}}],["redis官网中下载redis7版本压缩包后，使用xftp软件将本地的redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar",{"_index":1157,"t":{"423":{"position":[[0,89]]}}}],["redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi",{"_index":1130,"t":{"410":{"position":[[0,124]]}}}],["redis版本的mq",{"_index":1233,"t":{"465":{"position":[[0,28]]}}}],["redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb",{"_index":1126,"t":{"405":{"position":[[144,89]]}}}],["refer",{"_index":645,"t":{"238":{"position":[[142,10]]}}}],["rememb",{"_index":843,"t":{"281":{"position":[[79,11]]},"322":{"position":[[77,11]]}}}],["remot",{"_index":743,"t":{"269":{"position":[[33,6]]}}}],["remote_addr",{"_index":794,"t":{"274":{"position":[[483,13],[587,13]]}}}],["remote_us",{"_index":801,"t":{"274":{"position":[[603,12]]}}}],["request",{"_index":803,"t":{"274":{"position":[[630,10]]}}}],["requir",{"_index":1112,"t":{"393":{"position":[[32,8]]}}}],["requirepass",{"_index":1173,"t":{"425":{"position":[[152,11]]}}}],["respons",{"_index":851,"t":{"283":{"position":[[154,11]]},"285":{"position":[[65,11]]},"291":{"position":[[84,11]]},"293":{"position":[[174,11]]},"295":{"position":[[81,11]]},"297":{"position":[[306,11]]},"299":{"position":[[85,11]]},"301":{"position":[[359,11]]},"303":{"position":[[132,11]]},"305":{"position":[[127,11]]},"307":{"position":[[135,11]]},"309":{"position":[[70,11]]},"311":{"position":[[74,11]]},"313":{"position":[[489,11]]},"315":{"position":[[124,11]]},"317":{"position":[[82,11]]},"319":{"position":[[86,11]]},"322":{"position":[[138,11]]},"324":{"position":[[65,11]]},"328":{"position":[[157,11]]},"330":{"position":[[73,11]]},"332":{"position":[[295,11]]},"334":{"position":[[87,11]]},"336":{"position":[[79,11]]},"338":{"position":[[82,11]]},"340":{"position":[[135,11]]},"342":{"position":[[86,11]]},"344":{"position":[[158,11]]},"346":{"position":[[86,11]]},"348":{"position":[[176,11]]},"350":{"position":[[79,11]]},"352":{"position":[[734,11]]},"354":{"position":[[79,11]]},"356":{"position":[[185,11]]},"358":{"position":[[174,11]]},"360":{"position":[[79,11]]},"362":{"position":[[359,11]]},"364":{"position":[[77,11]]},"366":{"position":[[122,11]]},"368":{"position":[[74,11]]},"370":{"position":[[369,11]]},"372":{"position":[[87,11]]},"374":{"position":[[134,11]]},"376":{"position":[[170,11]]},"378":{"position":[[137,11]]},"380":{"position":[[147,11]]},"382":{"position":[[72,11]]},"384":{"position":[[494,11]]},"386":{"position":[[94,11]]},"390":{"position":[[496,11]]}}}],["return",{"_index":48,"t":{"36":{"position":[[297,6]]},"110":{"position":[[711,6]]},"144":{"position":[[360,6]]},"152":{"position":[[407,6],[425,6]]},"167":{"position":[[205,6],[340,6],[476,6],[605,6]]}}}],["right",{"_index":469,"t":{"167":{"position":[[427,5],[483,6]]}}}],["rl",{"_index":5,"t":{"6":{"position":[[42,7]]},"8":{"position":[[114,7]]},"13":{"position":[[257,29]]}}}],["rmdir",{"_index":761,"t":{"271":{"position":[[187,6]]}}}],["role",{"_index":968,"t":{"311":{"position":[[221,7]]},"313":{"position":[[171,7]]},"322":{"position":[[323,7]]},"328":{"position":[[61,7],[346,7]]},"330":{"position":[[232,7]]},"332":{"position":[[128,7],[555,7]]},"382":{"position":[[226,7]]},"384":{"position":[[181,7]]},"390":{"position":[[176,7]]}}}],["root",{"_index":782,"t":{"274":{"position":[[277,4]]}}}],["root/usr/local/bin下，ll列举redi",{"_index":1162,"t":{"423":{"position":[[158,37]]}}}],["rr",{"_index":3,"t":{"6":{"position":[[28,5]]},"8":{"position":[[100,5]]},"13":{"position":[[205,21]]}}}],["run",{"_index":754,"t":{"271":{"position":[[137,3]]},"276":{"position":[[122,4],[287,4],[358,4],[382,3]]}}}],["run/nginx.pid;ev",{"_index":776,"t":{"274":{"position":[[153,21]]}}}],["rwerw",{"_index":983,"t":{"315":{"position":[[180,8]]}}}],["r。上述的520",{"_index":339,"t":{"121":{"position":[[582,65]]}}}],["r个空队列qr,qr−1.......q0q_r,q_{r",{"_index":340,"t":{"121":{"position":[[663,31]]}}}],["r个队列，q(r)q(r)q(r",{"_index":343,"t":{"121":{"position":[[835,21]]}}}],["r中主键a",{"_index":632,"t":{"235":{"position":[[91,11]]}}}],["r和关系s，r÷s=t，首先找到r和s共同的属性c，然后在r",{"_index":636,"t":{"235":{"position":[[222,54]]}}}],["r和关系s，若r中的主键a与s中的b对应，则称b为关系s中的外码，对于s中元组中b",{"_index":631,"t":{"235":{"position":[[29,52]]}}}],["s",{"_index":146,"t":{"100":{"position":[[213,1],[767,1]]},"102":{"position":[[280,1]]},"159":{"position":[[0,1]]},"213":{"position":[[574,3]]},"271":{"position":[[194,2]]}}}],["s,string",{"_index":359,"t":{"144":{"position":[[164,8]]},"152":{"position":[[264,8]]}}}],["s.len",{"_index":363,"t":{"144":{"position":[[205,5]]}}}],["s[i",{"_index":392,"t":{"150":{"position":[[884,8],[906,4],[980,6]]}}}],["s[i]≠t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1]\\begin{align",{"_index":391,"t":{"150":{"position":[[795,88]]}}}],["s_ga",{"_index":700,"t":{"242":{"position":[[288,5]]}}}],["samkirkland/ftp",{"_index":831,"t":{"276":{"position":[[417,15]]}}}],["save和bgsave，其中默认使用bgsav",{"_index":1127,"t":{"407":{"position":[[0,30]]}}}],["save：在程序执行构成会阻塞当前的redi",{"_index":1128,"t":{"407":{"position":[[31,58]]}}}],["sc",{"_index":676,"t":{"240":{"position":[[531,2]]},"242":{"position":[[321,2]]}}}],["sc.sno",{"_index":678,"t":{"240":{"position":[[551,6]]}}}],["score",{"_index":885,"t":{"293":{"position":[[280,8]]},"295":{"position":[[537,8],[607,8]]},"299":{"position":[[571,8],[631,8],[732,8],[807,8],[885,8],[1077,8]]},"301":{"position":[[83,8],[271,8]]},"307":{"position":[[338,8],[433,8],[665,8]]},"348":{"position":[[282,8]]},"350":{"position":[[542,8],[614,8]]},"352":{"position":[[445,8],[605,8],[676,8],[1146,8],[1306,8],[1377,8]]},"356":{"position":[[284,8]]},"358":{"position":[[357,8]]},"360":{"position":[[309,8]]},"362":{"position":[[263,8]]},"368":{"position":[[234,8]]},"370":{"position":[[164,8],[532,8]]}}}],["scset",{"_index":687,"t":{"240":{"position":[[760,5]]}}}],["sdept",{"_index":666,"t":{"240":{"position":[[191,5],[208,5]]}}}],["sdept=‘is’例：将学生的学号及平均成绩定义为一个视图cr",{"_index":699,"t":{"242":{"position":[[246,36]]}}}],["secrets.ftp_pwd",{"_index":836,"t":{"276":{"position":[[524,15]]}}}],["secrets.ftp_us",{"_index":834,"t":{"276":{"position":[[484,16]]}}}],["secrets.ftp_user要在github设置中进行配置，添加action的变量，然后设置好你的ftp的用户名和密码即可。同时要在ftp服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到ftp",{"_index":839,"t":{"276":{"position":[[584,114]]}}}],["select",{"_index":653,"t":{"240":{"position":[[3,6],[140,20],[201,6],[340,6],[478,6],[797,6]]},"242":{"position":[[181,6],[294,6]]}}}],["selectsort(int",{"_index":251,"t":{"114":{"position":[[270,14]]}}}],["sendusernam",{"_index":988,"t":{"315":{"position":[[307,15]]},"374":{"position":[[37,15],[245,15]]}}}],["server",{"_index":779,"t":{"274":{"position":[[209,6]]},"276":{"position":[[459,7],[548,6]]},"410":{"position":[[242,6],[456,6]]},"423":{"position":[[226,24]]},"427":{"position":[[23,6]]}}}],["server_nam",{"_index":785,"t":{"274":{"position":[[366,11]]}}}],["set",{"_index":685,"t":{"240":{"position":[[699,7]]},"447":{"position":[[8,3],[93,32]]},"450":{"position":[[13,3]]}}}],["set的基础上，每个value的值前加一个score分数值，之前set是k1,v1,zset会变成k1,v1,score1",{"_index":1209,"t":{"452":{"position":[[0,62]]}}}],["sex",{"_index":969,"t":{"311":{"position":[[237,6]]},"313":{"position":[[187,6]]},"322":{"position":[[258,6]]},"328":{"position":[[362,6]]},"330":{"position":[[248,6]]},"332":{"position":[[178,6],[472,6]]},"382":{"position":[[242,6]]},"384":{"position":[[197,6]]},"390":{"position":[[192,6]]}}}],["sf",{"_index":95,"t":{"74":{"position":[[42,14]]}}}],["sfsdf",{"_index":985,"t":{"315":{"position":[[224,8]]}}}],["shellsort(int",{"_index":177,"t":{"104":{"position":[[217,13]]}}}],["shorttitl",{"_index":944,"t":{"305":{"position":[[283,13]]},"358":{"position":[[496,13]]}}}],["shutdown",{"_index":1178,"t":{"429":{"position":[[28,8],[68,8]]}}}],["sigma",{"_index":633,"t":{"235":{"position":[[116,11]]}}}],["sim",{"_index":388,"t":{"150":{"position":[[625,4],[644,4],[913,4],[929,4],[949,4],[967,4],[989,4],[1005,4],[1795,4],[1813,4],[1868,4],[1893,4],[1919,4],[1935,4]]}}}],["size",{"_index":1102,"t":{"388":{"position":[[162,7]]}}}],["sname",{"_index":691,"t":{"240":{"position":[[827,5]]}}}],["sname,ssex",{"_index":664,"t":{"240":{"position":[[161,10]]}}}],["sno",{"_index":690,"t":{"240":{"position":[[788,3],[804,3]]},"242":{"position":[[333,3]]}}}],["sno,avg(grad",{"_index":701,"t":{"242":{"position":[[301,14]]}}}],["sno,sname,sag",{"_index":698,"t":{"242":{"position":[[188,14]]}}}],["sofu6",{"_index":371,"t":{"146":{"position":[[193,5]]}}}],["sql",{"_index":635,"t":{"235":{"position":[[179,42]]}}}],["sql即可：select",{"_index":1214,"t":{"457":{"position":[[236,16]]}}}],["sss和vvv",{"_index":581,"t":{"213":{"position":[[27,26]]}}}],["sss，此时树中只有一个顶点，然后从剩余顶点集合ttt中选取相距树中顶点集合最近的点，并且将该边加入集合sss中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n",{"_index":578,"t":{"209":{"position":[[0,121]]}}}],["stack",{"_index":1111,"t":{"393":{"position":[[26,5]]}}}],["state",{"_index":1105,"t":{"388":{"position":[[193,8]]}}}],["statu",{"_index":804,"t":{"274":{"position":[[643,8]]},"289":{"position":[[213,9]]},"303":{"position":[[471,9]]},"311":{"position":[[416,9]]},"313":{"position":[[366,9]]},"322":{"position":[[337,9]]},"328":{"position":[[562,9]]},"330":{"position":[[448,9]]},"332":{"position":[[144,9],[571,9]]},"358":{"position":[[377,9]]},"378":{"position":[[465,9]]},"382":{"position":[[420,9]]},"384":{"position":[[392,9]]},"390":{"position":[[394,9]]}}}],["step",{"_index":818,"t":{"276":{"position":[[145,6]]}}}],["step1",{"_index":349,"t":{"138":{"position":[[165,13]]}}}],["step2",{"_index":350,"t":{"138":{"position":[[179,16]]}}}],["stream",{"_index":799,"t":{"274":{"position":[[563,7]]},"463":{"position":[[6,6],[43,6],[211,6]]}}}],["string",{"_index":1199,"t":{"443":{"position":[[15,6]]},"447":{"position":[[14,6]]}}}],["string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg",{"_index":1181,"t":{"432":{"position":[[0,89]]}}}],["string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset",{"_index":1206,"t":{"450":{"position":[[17,143]]}}}],["string类型是redis最基本的数据类型，一个redis中字符串value最多可以是512m",{"_index":1182,"t":{"432":{"position":[[90,49]]}}}],["struct",{"_index":448,"t":{"167":{"position":[[15,6]]},"178":{"position":[[75,6],[218,6],[241,6],[295,6],[378,6],[401,6]]},"198":{"position":[[616,7]]},"200":{"position":[[98,6],[145,6],[196,6],[275,7]]}}}],["student",{"_index":665,"t":{"240":{"position":[[177,7],[513,7],[813,7]]},"242":{"position":[[232,7]]},"281":{"position":[[41,10],[127,10]]},"309":{"position":[[130,10],[187,8]]},"311":{"position":[[161,10]]},"313":{"position":[[111,10]]},"374":{"position":[[291,10]]},"378":{"position":[[526,9]]},"386":{"position":[[44,7],[118,10]]}}}],["student.sno",{"_index":677,"t":{"240":{"position":[[537,11]]}}}],["student.sno,sname,ssex",{"_index":675,"t":{"240":{"position":[[485,22]]}}}],["student5",{"_index":846,"t":{"283":{"position":[[52,11]]}}}],["subjectid",{"_index":877,"t":{"293":{"position":[[69,12],[367,12]]},"295":{"position":[[128,12],[355,12]]},"299":{"position":[[150,12],[431,12]]},"303":{"position":[[289,12]]},"307":{"position":[[209,12]]},"348":{"position":[[72,12],[370,12]]},"350":{"position":[[127,12],[356,12]]},"352":{"position":[[74,12],[305,12],[782,12],[1006,12]]},"356":{"position":[[48,12],[371,12]]},"358":{"position":[[87,12],[313,12]]},"360":{"position":[[135,12]]},"362":{"position":[[79,12]]},"368":{"position":[[322,12]]},"370":{"position":[[252,12],[620,12]]},"378":{"position":[[45,12],[283,12]]}}}],["subjectnam",{"_index":892,"t":{"293":{"position":[[390,14]]},"303":{"position":[[261,14]]},"305":{"position":[[257,14]]},"378":{"position":[[255,14]]}}}],["success",{"_index":1106,"t":{"388":{"position":[[202,10]]}}}],["sudo",{"_index":828,"t":{"276":{"position":[[292,4],[315,4]]}}}],["suggesttim",{"_index":897,"t":{"295":{"position":[[194,14]]},"299":{"position":[[218,14]]},"350":{"position":[[194,14]]},"352":{"position":[[142,14],[850,14]]}}}],["sumn",{"_index":512,"t":{"193":{"position":[[80,15]]}}}],["swap(a[i],a[1",{"_index":292,"t":{"116":{"position":[[1397,16]]}}}],["swap(a[i],a[min",{"_index":256,"t":{"114":{"position":[[402,18]]}}}],["swap(a[j],a[i]);flag",{"_index":211,"t":{"108":{"position":[[222,20]]}}}],["swap(int",{"_index":198,"t":{"108":{"position":[[32,8]]}}}],["systemscor",{"_index":936,"t":{"303":{"position":[[442,14]]},"378":{"position":[[436,14]]}}}],["s和t",{"_index":373,"t":{"148":{"position":[[55,155]]}}}],["s和模式串t的长度n和m。时间复杂度为o(nm)o(nm)o(nm",{"_index":369,"t":{"144":{"position":[[371,109]]}}}],["s的取值决定正负；m表示尾数，r是基数（2,4,8...），e是阶码，表示2e2^e2",{"_index":123,"t":{"90":{"position":[[46,44]]}}}],["s（31",{"_index":130,"t":{"94":{"position":[[58,7]]}}}],["t",{"_index":360,"t":{"144":{"position":[[173,3]]}}}],["t,int",{"_index":416,"t":{"152":{"position":[[60,5],[273,5]]},"154":{"position":[[362,5]]}}}],["t.ch[i",{"_index":366,"t":{"144":{"position":[[241,9]]}}}],["t.ch[j",{"_index":421,"t":{"152":{"position":[[130,9],[352,9]]},"154":{"position":[[444,7]]}}}],["t.ch[k",{"_index":422,"t":{"152":{"position":[[143,9]]},"154":{"position":[[455,9],[489,8]]}}}],["t.len",{"_index":364,"t":{"144":{"position":[[219,7],[339,6]]},"152":{"position":[[418,6]]},"154":{"position":[[423,7]]}}}],["t.len)return",{"_index":368,"t":{"144":{"position":[[322,12]]}}}],["t[0",{"_index":395,"t":{"150":{"position":[[925,3],[942,6],[1001,3],[1782,12],[1857,10],[1911,7]]}}}],["t[],int",{"_index":453,"t":{"167":{"position":[[80,7]]}}}],["t[i",{"_index":394,"t":{"150":{"position":[[898,4]]}}}],["t[i].isempti",{"_index":455,"t":{"167":{"position":[[120,12]]}}}],["t[j",{"_index":396,"t":{"150":{"position":[[961,3],[1743,5],[1807,3],[1851,5],[1887,3],[1903,7],[1929,3],[2101,11]]}}}],["t[j]t[k]=t[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是b的位置，此时执行判定t[k]=t[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k",{"_index":410,"t":{"150":{"position":[[2219,274]]}}}],["t[k",{"_index":403,"t":{"150":{"position":[[1735,7],[1840,10],[1880,4],[2115,29]]}}}],["t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j]\\begin{align",{"_index":402,"t":{"150":{"position":[[1577,157]]}}}],["t[k]≠t[j]t[k]\\neq",{"_index":409,"t":{"150":{"position":[[2198,20]]}}}],["tabl",{"_index":639,"t":{"238":{"position":[[7,5],[180,5]]}}}],["table_1,table_2",{"_index":655,"t":{"240":{"position":[[21,15]]}}}],["taxi",{"_index":1215,"t":{"457":{"position":[[253,4]]}}}],["technic",{"_index":1110,"t":{"393":{"position":[[16,9]]}}}],["temp",{"_index":200,"t":{"108":{"position":[[57,4]]}}}],["temp;}void",{"_index":201,"t":{"108":{"position":[[78,10]]}}}],["test",{"_index":958,"t":{"309":{"position":[[159,7]]},"311":{"position":[[190,7]]},"313":{"position":[[140,7]]}}}],["test33333",{"_index":857,"t":{"287":{"position":[[101,12]]}}}],["testzz",{"_index":1019,"t":{"332":{"position":[[58,9],[391,9]]}}}],["tesx",{"_index":1020,"t":{"332":{"position":[[113,7],[439,7]]}}}],["textcontentid",{"_index":1050,"t":{"358":{"position":[[246,16]]}}}],["time_loc",{"_index":802,"t":{"274":{"position":[[616,13]]}}}],["timelimitpap",{"_index":860,"t":{"287":{"position":[[189,17]]}}}],["tip",{"_index":502,"t":{"181":{"position":[[139,3]]},"224":{"position":[[0,3]]},"227":{"position":[[0,3]]},"260":{"position":[[0,3]]},"393":{"position":[[0,3]]}}}],["titl",{"_index":863,"t":{"289":{"position":[[66,8]]},"295":{"position":[[376,8]]},"299":{"position":[[452,8]]},"307":{"position":[[233,8]]},"315":{"position":[[171,8]]},"350":{"position":[[377,8]]},"352":{"position":[[326,8],[1027,8]]},"360":{"position":[[156,8]]},"362":{"position":[[100,8]]},"366":{"position":[[177,8]]},"368":{"position":[[128,8]]},"370":{"position":[[61,8],[422,8]]},"374":{"position":[[190,8]]},"376":{"position":[[37,8]]}}}],["titleitem",{"_index":900,"t":{"295":{"position":[[252,13]]},"299":{"position":[[320,13]]},"350":{"position":[[250,13]]},"352":{"position":[[196,13],[904,13]]}}}],["total",{"_index":881,"t":{"293":{"position":[[188,8]]},"303":{"position":[[146,8]]},"305":{"position":[[141,8]]},"315":{"position":[[138,8]]},"328":{"position":[[171,8]]},"340":{"position":[[149,8]]},"348":{"position":[[190,8]]},"356":{"position":[[199,8]]},"358":{"position":[[188,8]]},"366":{"position":[[136,8]]},"374":{"position":[[148,8]]},"378":{"position":[[151,8]]},"380":{"position":[[161,8]]}}}],["tp+tn}{tp+fn+fp+tn}tp+fn+fp+tntp+tn",{"_index":727,"t":{"255":{"position":[[38,37]]}}}],["tptptp代表的是模型正确预测的样本数，fnfnfn是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80",{"_index":725,"t":{"253":{"position":[[64,124]]}}}],["tree",{"_index":497,"t":{"178":{"position":[[302,5],[437,27]]}}}],["true",{"_index":212,"t":{"108":{"position":[[245,5]]},"203":{"position":[[546,6],[697,5]]},"205":{"position":[[304,5]]},"297":{"position":[[214,5]]},"315":{"position":[[250,5]]}}}],["ture",{"_index":459,"t":{"167":{"position":[[192,6]]}}}],["typdef",{"_index":495,"t":{"178":{"position":[[211,6]]}}}],["type",{"_index":1104,"t":{"388":{"position":[[177,7]]}}}],["typedef",{"_index":447,"t":{"167":{"position":[[7,7]]},"178":{"position":[[67,7],[267,27],[370,7]]},"198":{"position":[[608,7]]},"200":{"position":[[90,7],[188,7]]}}}],["t）与问题规模（n）的关系，t就是时间。说白了就是分析代码，算一下n",{"_index":351,"t":{"140":{"position":[[6,56]]}}}],["u",{"_index":748,"t":{"269":{"position":[[97,1]]}}}],["ubuntu",{"_index":816,"t":{"276":{"position":[[131,6]]}}}],["updat",{"_index":684,"t":{"240":{"position":[[692,6]]},"276":{"position":[[305,6]]}}}],["up主的讲解视频kmp算法之求next数组代码讲解_哔哩哔哩_bilibili",{"_index":413,"t":{"150":{"position":[[2545,55]]}}}],["url",{"_index":751,"t":{"271":{"position":[[49,4]]},"388":{"position":[[94,6]]}}}],["us",{"_index":819,"t":{"276":{"position":[[154,5],[188,3],[205,5],[411,5]]},"419":{"position":[[153,3]]}}}],["user",{"_index":772,"t":{"274":{"position":[[81,4]]}}}],["userid",{"_index":956,"t":{"309":{"position":[[98,9]]},"380":{"position":[[45,9],[203,9]]}}}],["userlevel",{"_index":848,"t":{"283":{"position":[[97,12]]},"311":{"position":[[434,12]]},"313":{"position":[[384,12]]},"322":{"position":[[289,12]]},"328":{"position":[[580,12]]},"330":{"position":[[466,12]]},"332":{"position":[[238,12],[513,12]]},"382":{"position":[[438,12]]},"384":{"position":[[410,12]]},"390":{"position":[[412,12]]}}}],["usernam",{"_index":833,"t":{"276":{"position":[[470,9]]},"281":{"position":[[29,11],[115,11]]},"283":{"position":[[40,11]]},"303":{"position":[[528,11]]},"309":{"position":[[118,11]]},"311":{"position":[[149,11]]},"313":{"position":[[99,11]]},"322":{"position":[[29,11],[182,11]]},"328":{"position":[[39,11],[280,11]]},"330":{"position":[[166,11]]},"332":{"position":[[46,11],[379,11]]},"378":{"position":[[514,11]]},"380":{"position":[[61,11],[223,11]]},"382":{"position":[[157,11]]},"384":{"position":[[112,11]]},"390":{"position":[[107,11]]}}}],["username.github.io",{"_index":741,"t":{"267":{"position":[[0,50]]}}}],["userscor",{"_index":932,"t":{"303":{"position":[[236,12]]},"378":{"position":[[229,12]]}}}],["useruuid",{"_index":961,"t":{"311":{"position":[[97,11]]},"313":{"position":[[47,11]]},"322":{"position":[[164,11]]},"328":{"position":[[219,11]]},"330":{"position":[[105,11]]},"332":{"position":[[320,11]]},"382":{"position":[[96,11]]},"384":{"position":[[53,11]]},"390":{"position":[[46,11]]}}}],["usr/workspace/rachelnootebook/usr/workspace/rachelnootebook/web",{"_index":783,"t":{"274":{"position":[[282,65]]}}}],["uuid",{"_index":1013,"t":{"328":{"position":[[271,8]]},"330":{"position":[[157,8]]},"382":{"position":[[148,8]]},"390":{"position":[[98,8]]}}}],["v",{"_index":571,"t":{"205":{"position":[[277,3]]},"207":{"position":[[104,3]]}}}],["v,e)和g^{'}=(v^{'},e^{'})g=(v,e)和g′=(v′,",{"_index":509,"t":{"189":{"position":[[110,43]]}}}],["v0v_0v0​加入sss，计算出v0v_0v0",{"_index":582,"t":{"213":{"position":[[54,40]]}}}],["v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1",{"_index":523,"t":{"198":{"position":[[485,122]]}}}],["v=asbsssˉ+asˉbsˉssv",{"_index":97,"t":{"76":{"position":[[39,19]]}}}],["v_i,v_j)是g的边，则a[i][j",{"_index":517,"t":{"198":{"position":[[182,24]]}}}],["valu",{"_index":1098,"t":{"386":{"position":[[135,8]]},"443":{"position":[[38,8]]}}}],["values(值1，值2",{"_index":683,"t":{"240":{"position":[[668,18]]}}}],["var/log/nginx/access.log",{"_index":810,"t":{"274":{"position":[[744,25]]}}}],["var/log/nginx/error.log;pid",{"_index":775,"t":{"274":{"position":[[124,28]]}}}],["ve(0)ve(0)ve(0",{"_index":613,"t":{"220":{"position":[[275,19]]}}}],["ve(0)ve(0)ve(0)为0",{"_index":608,"t":{"220":{"position":[[48,17]]}}}],["ve(i)ve(i)ve(i",{"_index":618,"t":{"220":{"position":[[513,24]]}}}],["ve(k)=max[ve(j)+weight(vj,vk)]ve(k",{"_index":609,"t":{"220":{"position":[[66,35]]}}}],["version",{"_index":825,"t":{"276":{"position":[[244,8]]}}}],["vex[n",{"_index":525,"t":{"198":{"position":[[629,7]]},"200":{"position":[[289,7]]}}}],["vexindex",{"_index":533,"t":{"200":{"position":[[123,9]]}}}],["vexnum,arcnum",{"_index":528,"t":{"198":{"position":[[684,14]]},"200":{"position":[[301,14]]}}}],["vi,vj)是g的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{align",{"_index":516,"t":{"198":{"position":[[129,52]]}}}],["view",{"_index":693,"t":{"242":{"position":[[88,4],[163,4],[203,23],[283,4]]}}}],["visit(t[index",{"_index":477,"t":{"167":{"position":[[719,16]]}}}],["visit(v",{"_index":551,"t":{"203":{"position":[[525,9]]},"205":{"position":[[281,9]]}}}],["visit(w",{"_index":560,"t":{"203":{"position":[[674,9]]}}}],["visited[i",{"_index":545,"t":{"203":{"position":[[417,10]]}}}],["visited[max_size];void",{"_index":541,"t":{"203":{"position":[[345,22]]},"205":{"position":[[112,22]]}}}],["visited[v",{"_index":552,"t":{"203":{"position":[[535,10]]},"205":{"position":[[184,10],[291,10]]}}}],["visited[w",{"_index":561,"t":{"203":{"position":[[684,10]]}}}],["vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i",{"_index":620,"t":{"220":{"position":[[570,73]]}}}],["vl(k)=min[vl(j)−weight(vk,vj)]vl(k",{"_index":614,"t":{"220":{"position":[[295,35]]}}}],["vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i",{"_index":622,"t":{"220":{"position":[[686,54]]}}}],["vnode",{"_index":535,"t":{"200":{"position":[[203,6],[283,5]]}}}],["vnode;typedef",{"_index":537,"t":{"200":{"position":[[243,31]]}}}],["void",{"_index":148,"t":{"100":{"position":[[455,4]]},"102":{"position":[[315,4]]},"104":{"position":[[212,4]]},"108":{"position":[[27,4]]},"110":{"position":[[728,4]]},"114":{"position":[[265,4]]},"116":{"position":[[843,4],[1318,4]]},"119":{"position":[[329,8],[732,4]]},"152":{"position":[[39,4]]},"154":{"position":[[338,4]]},"167":{"position":[[61,4],[655,4]]},"203":{"position":[[504,6]]}}}],["vsv_svs​加入sss",{"_index":583,"t":{"213":{"position":[[95,22]]}}}],["vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来a到d距离是10，但是加入了b后，通过a",{"_index":584,"t":{"213":{"position":[[118,56]]}}}],["vvv表示事件，<vi,vj><v_i,v_j><vi​,vj​>的这样一条边表示活动vjv_jvj​必须要viv_ivi",{"_index":603,"t":{"216":{"position":[[0,83]]}}}],["v′是v的子集e′是e的子集v^{'}是v的子集e^{'}是e的子集v′是v的子集e′是",{"_index":510,"t":{"189":{"position":[[154,50]]}}}],["v到w和w到v",{"_index":514,"t":{"195":{"position":[[17,11]]}}}],["v行v列的矩阵，其中若vi到vj有路径，则a[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则a[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则a[i][j]为1",{"_index":515,"t":{"198":{"position":[[0,128]]}}}],["web",{"_index":841,"t":{"278":{"position":[[0,3]]}}}],["weight",{"_index":534,"t":{"200":{"position":[[137,7]]}}}],["weight(v_j,v_k)]ve(k)=max[ve(j)+weight(vj​,vk​)]其中k是j",{"_index":611,"t":{"220":{"position":[[116,56]]}}}],["weight(v_k,v_j)]vl(k)=min[vl(j)−weight(vk​,vj",{"_index":616,"t":{"220":{"position":[[345,48]]}}}],["weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj",{"_index":621,"t":{"220":{"position":[[644,41]]}}}],["weight[n][n",{"_index":526,"t":{"198":{"position":[[641,13]]}}}],["welcom",{"_index":625,"t":{"227":{"position":[[23,7]]}}}],["while(!isempty(q",{"_index":554,"t":{"203":{"position":[[567,19]]}}}],["while(i",{"_index":362,"t":{"144":{"position":[[194,7]]}}}],["while(i<=mid",{"_index":315,"t":{"119":{"position":[[609,13]]}}}],["while(i<s.len",{"_index":426,"t":{"152":{"position":[[305,13]]}}}],["while(j",{"_index":435,"t":{"154":{"position":[[413,7]]}}}],["while(j<=high",{"_index":316,"t":{"119":{"position":[[640,14]]}}}],["while(k<t.len",{"_index":419,"t":{"152":{"position":[[106,15]]}}}],["while(low",{"_index":231,"t":{"110":{"position":[[534,9]]}}}],["while(low<=high",{"_index":42,"t":{"36":{"position":[[173,17]]},"102":{"position":[[435,17]]}}}],["while(low<high",{"_index":232,"t":{"110":{"position":[[553,14],[624,14]]}}}],["worker_connect",{"_index":777,"t":{"274":{"position":[[177,18]]}}}],["www",{"_index":786,"t":{"274":{"position":[[381,7]]}}}],["wxopenid",{"_index":992,"t":{"322":{"position":[[453,11]]},"332":{"position":[[743,11]]}}}],["w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z",{"_index":6,"t":{"8":{"position":[[0,93]]}}}],["x",{"_index":79,"t":{"57":{"position":[[83,1],[151,1]]},"59":{"position":[[89,26],[150,1],[201,1]]},"81":{"position":[[61,4],[142,4]]},"167":{"position":[[163,3],[251,3],[272,1],[384,3],[405,1],[519,3],[540,1]]},"181":{"position":[[34,76]]},"274":{"position":[[473,1]]},"457":{"position":[[285,1]]}}}],["x/2",{"_index":465,"t":{"167":{"position":[[302,4]]}}}],["x0",{"_index":1217,"t":{"457":{"position":[[278,2],[289,2]]}}}],["x1",{"_index":661,"t":{"240":{"position":[[118,2]]}}}],["x1~x2",{"_index":663,"t":{"240":{"position":[[128,8]]}}}],["x2",{"_index":662,"t":{"240":{"position":[[125,2]]}}}],["x<1){return",{"_index":458,"t":{"167":{"position":[[180,11]]}}}],["xgroup",{"_index":1236,"t":{"465":{"position":[[176,12]]}}}],["xxxxx.rdb即可，我修改为dbfienam",{"_index":1124,"t":{"405":{"position":[[95,35]]}}}],["xx：当key存在的时候，覆盖key",{"_index":1186,"t":{"435":{"position":[[60,18]]}}}],["x、y的绝对值，i",{"_index":113,"t":{"83":{"position":[[8,15]]},"85":{"position":[[31,15]]},"87":{"position":[[8,15]]}}}],["x和y计算出对应的x和i",{"_index":109,"t":{"81":{"position":[[43,17]]}}}],["x，唯一确定一个y，则x函数确定y或者y函数依赖于x，x",{"_index":702,"t":{"245":{"position":[[0,44]]}}}],["y",{"_index":114,"t":{"83":{"position":[[24,4]]},"85":{"position":[[47,4]]},"87":{"position":[[24,4]]},"276":{"position":[[337,1]]},"457":{"position":[[307,1]]}}}],["y0",{"_index":1218,"t":{"457":{"position":[[300,2]]}}}],["y0+r",{"_index":1219,"t":{"457":{"position":[[311,5]]}}}],["ye",{"_index":1151,"t":{"419":{"position":[[173,3]]},"425":{"position":[[27,3]]}}}],["yes。其保存的是appendonly.aof",{"_index":1132,"t":{"410":{"position":[[158,33]]}}}],["yes改为protect",{"_index":1169,"t":{"425":{"position":[[48,14]]}}}],["yes表示开启，设置为no",{"_index":1152,"t":{"419":{"position":[[177,17]]}}}],["y。也就是对于一个函数f，给定f(x)=i",{"_index":703,"t":{"245":{"position":[[45,22]]}}}],["zf，zf为1代表全0",{"_index":93,"t":{"74":{"position":[[0,14]]}}}],["zset",{"_index":1205,"t":{"450":{"position":[[6,4]]}}}],["zxvf",{"_index":1158,"t":{"423":{"position":[[91,4]]}}}]],"pipeline":["stemmer"]}}]