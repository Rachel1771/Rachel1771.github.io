[{"documents":[{"i":1,"t":"8-几种奇怪恶心的树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","b":["学科基础","Foundation","数据结构"]},{"i":31,"t":"9-查找","u":"/docs/Foundation/数据结构/查找","b":["学科基础","Foundation","数据结构"]},{"i":49,"t":"2-数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","b":["学科基础","Foundation","计算机组成原理"]},{"i":92,"t":"KMP定位子串","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","b":["学科基础","Foundation","数据结构","2.1-算法"]},{"i":106,"t":"5-树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","b":["学科基础","Foundation","数据结构"]},{"i":110,"t":"6-图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","b":["学科基础","Foundation","数据结构"]},{"i":144,"t":"0-数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","b":["学科基础","Foundation","数据结构"]},{"i":156,"t":"intro","u":"/docs/intro","b":[]},{"i":159,"t":"1-数据库系统概论复试","u":"/docs/Foundation/数据库/数据库系统概论复试","b":["学科基础","Foundation","数据库"]},{"i":176,"t":"Foundation of road","u":"/docs/Foundation/intro","b":["学科基础","Foundation"]},{"i":178,"t":"7-内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","b":["学科基础","Foundation","数据结构"]},{"i":210,"t":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","b":["数学基础","Math","DeepLearning"]},{"i":222,"t":"数学是最后的归宿","u":"/docs/Math/intro","b":["数学基础","Math"]},{"i":224,"t":"2-NoteBook的图片托管","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","b":["Web开发","Web","部署Docaururs"]},{"i":230,"t":"1-部署Docsaururs","u":"/docs/Web/部署Docaururs/部署Docsaururs","b":["Web开发","Web","部署Docaururs"]},{"i":245,"t":"持续学习，永葆青春","u":"/docs/Web/intro","b":["Web开发","Web"]},{"i":247,"t":"1-Docker入门","u":"/docs/Web/Docker/Docker入门","b":["Web开发","Web","Docker"]},{"i":257,"t":"1-SpringBoot的国际化","u":"/docs/Web/JavaStudy/Web国际化","b":["Web开发","Web","JavaStudy"]},{"i":286,"t":"1-接口文档","u":"/docs/Web/软件工程课设/接口文档","b":["Web开发","Web","软件工程课设"]},{"i":399,"t":"1.持久化","u":"/docs/Web/Redis/Redis 持久化","b":["Web开发","Web","Redis"]},{"i":424,"t":"6-电控栈位表&&钢刀","u":"/docs/Work/电控栈位表&&钢刀","b":["Work"]},{"i":444,"t":"1.Linux中的安装和启动","u":"/docs/Web/Redis/Redis安装&&十大数据","b":["Web开发","Web","Redis"]},{"i":491,"t":"3-拼板分板配置","u":"/docs/Work/拼板分板配置","b":["Work"]},{"i":509,"t":"7-拼板过站接口修改","u":"/docs/Work/拼板过站接口修改","b":["Work"]},{"i":527,"t":"4-研控报表组装","u":"/docs/Work/研控报表组装","b":["Work"]},{"i":537,"t":"2-看板重构","u":"/docs/Work/重构看板","b":["Work"]},{"i":561,"t":"5-清洗板","u":"/docs/Work/清洗板","b":["Work"]},{"i":593,"t":"1-PDF解析","u":"/docs/Work/PDF解析","b":["Work"]},{"i":606,"t":"8-锡膏管理(前后端)","u":"/docs/Work/锡膏后端","b":["Work"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[0,2.353,1,0.408]],["t/31",[1,0.408,2,2.836]],["t/49",[1,0.408,3,2.034]],["t/92",[4,3.638]],["t/106",[1,0.408,5,2.353]],["t/110",[1,0.408,6,2.353]],["t/144",[1,0.408,7,2.836]],["t/156",[8,3.638]],["t/159",[1,0.408,9,1.313]],["t/176",[10,2.836,11,2.836]],["t/178",[1,0.408,12,2.353]],["t/210",[1,0.523]],["t/222",[1,0.523]],["t/224",[3,2.034,13,2.836]],["t/230",[9,1.313,14,2.836]],["t/245",[1,0.523]],["t/247",[9,1.313,15,2.836]],["t/257",[9,1.313,16,2.836]],["t/286",[1,0.408,9,1.313]],["t/399",[9,1.683]],["t/424",[1,0.408,6,2.353]],["t/444",[17,3.638]],["t/491",[1,0.408,18,2.836]],["t/509",[1,0.408,12,2.353]],["t/527",[1,0.408,19,2.836]],["t/537",[1,0.408,3,2.034]],["t/561",[1,0.408,5,2.353]],["t/593",[9,1.313,20,2.836]],["t/606",[0,2.353,1,0.408]]],"invertedIndex":[["",{"_index":1,"t":{"1":{"position":[[2,8]]},"31":{"position":[[2,2]]},"49":{"position":[[2,7]]},"106":{"position":[[2,9]]},"110":{"position":[[2,6]]},"144":{"position":[[2,8]]},"159":{"position":[[2,9]]},"178":{"position":[[2,6]]},"210":{"position":[[0,8]]},"222":{"position":[[0,8]]},"245":{"position":[[0,9]]},"286":{"position":[[2,4]]},"424":{"position":[[2,9]]},"491":{"position":[[2,6]]},"509":{"position":[[2,8]]},"527":{"position":[[2,6]]},"537":{"position":[[2,4]]},"561":{"position":[[2,3]]},"606":{"position":[[2,9]]}}}],["0",{"_index":7,"t":{"144":{"position":[[0,1]]}}}],["1",{"_index":9,"t":{"159":{"position":[[0,1]]},"230":{"position":[[0,1]]},"247":{"position":[[0,1]]},"257":{"position":[[0,1]]},"286":{"position":[[0,1]]},"399":{"position":[[0,5]]},"593":{"position":[[0,1]]}}}],["1.linux",{"_index":17,"t":{"444":{"position":[[0,14]]}}}],["2",{"_index":3,"t":{"49":{"position":[[0,1]]},"224":{"position":[[0,1]]},"537":{"position":[[0,1]]}}}],["3",{"_index":18,"t":{"491":{"position":[[0,1]]}}}],["4",{"_index":19,"t":{"527":{"position":[[0,1]]}}}],["5",{"_index":5,"t":{"106":{"position":[[0,1]]},"561":{"position":[[0,1]]}}}],["6",{"_index":6,"t":{"110":{"position":[[0,1]]},"424":{"position":[[0,1]]}}}],["7",{"_index":12,"t":{"178":{"position":[[0,1]]},"509":{"position":[[0,1]]}}}],["8",{"_index":0,"t":{"1":{"position":[[0,1]]},"606":{"position":[[0,1]]}}}],["9",{"_index":2,"t":{"31":{"position":[[0,1]]}}}],["docker",{"_index":15,"t":{"247":{"position":[[2,8]]}}}],["docsaurur",{"_index":14,"t":{"230":{"position":[[2,12]]}}}],["foundat",{"_index":10,"t":{"176":{"position":[[0,10]]}}}],["intro",{"_index":8,"t":{"156":{"position":[[0,5]]}}}],["kmp",{"_index":4,"t":{"92":{"position":[[0,7]]}}}],["notebook",{"_index":13,"t":{"224":{"position":[[2,13]]}}}],["pdf",{"_index":20,"t":{"593":{"position":[[2,5]]}}}],["road",{"_index":11,"t":{"176":{"position":[[14,4]]}}}],["springboot",{"_index":16,"t":{"257":{"position":[[2,14]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":2,"t":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":4,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":6,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":8,"t":"红黑树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":9,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":11,"t":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":13,"t":"B树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":14,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":16,"t":"B树高（磁盘存取次数）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b树高磁盘存取次数","p":1},{"i":17,"t":"最矮","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最矮","p":1},{"i":18,"t":"最高","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#最高","p":1},{"i":19,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":21,"t":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":23,"t":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":25,"t":"B+树（常用于关系型数据库的存储）","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":26,"t":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":28,"t":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":30,"t":"B和B+的类比","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#b和b的类比","p":1},{"i":32,"t":"折半查找","u":"/docs/Foundation/数据结构/查找","h":"#折半查找","p":31},{"i":33,"t":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":31},{"i":35,"t":"构造二叉树","u":"/docs/Foundation/数据结构/查找","h":"#构造二叉树","p":31},{"i":36,"t":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":31},{"i":38,"t":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":31},{"i":40,"t":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":31},{"i":42,"t":"散列查找","u":"/docs/Foundation/数据结构/查找","h":"#散列查找","p":31},{"i":43,"t":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":31},{"i":45,"t":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":31},{"i":47,"t":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":31},{"i":50,"t":"码制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#码制","p":49},{"i":51,"t":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":49},{"i":53,"t":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":49},{"i":55,"t":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":49},{"i":57,"t":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":49},{"i":59,"t":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":49},{"i":61,"t":"移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移位","p":49},{"i":62,"t":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":49},{"i":64,"t":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":49},{"i":66,"t":"循环移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#循环移位","p":49},{"i":67,"t":"定点数加减","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数加减","p":49},{"i":68,"t":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":49},{"i":70,"t":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":49},{"i":72,"t":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":49},{"i":74,"t":"定点数乘除","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#定点数乘除","p":49},{"i":75,"t":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":49},{"i":77,"t":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":49},{"i":79,"t":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":49},{"i":81,"t":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":49},{"i":83,"t":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":49},{"i":85,"t":"浮点数","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数","p":49},{"i":86,"t":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":49},{"i":88,"t":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":49},{"i":90,"t":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":49},{"i":94,"t":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":92},{"i":96,"t":"2.KMP","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#2kmp","p":92},{"i":98,"t":"2.1 算法思想","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#21-算法思想","p":92},{"i":100,"t":"2.2 next数组","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#22-next数组","p":92},{"i":102,"t":"2.3 求解代码","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#23-求解代码","p":92},{"i":104,"t":"2.4 next数组优化","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#24-next数组优化","p":92},{"i":107,"t":"几种常考的二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#几种常考的二叉树","p":106},{"i":108,"t":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":106},{"i":111,"t":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":110},{"i":113,"t":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":110},{"i":115,"t":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":110},{"i":117,"t":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":110},{"i":119,"t":"两种存储结构：矩阵和链表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#两种存储结构矩阵和链表","p":110},{"i":120,"t":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":110},{"i":122,"t":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":110},{"i":124,"t":"BFS和DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs和dfs","p":110},{"i":125,"t":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":110},{"i":127,"t":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":110},{"i":129,"t":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":110},{"i":131,"t":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":110},{"i":133,"t":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":110},{"i":135,"t":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":110},{"i":137,"t":"拓扑","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑","p":110},{"i":138,"t":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":110},{"i":140,"t":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":110},{"i":142,"t":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":110},{"i":145,"t":"1.1基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#11基本概念","p":144},{"i":146,"t":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":144},{"i":148,"t":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":144},{"i":150,"t":"2.算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#2算法","p":144},{"i":151,"t":"2.1算法","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#21算法","p":144},{"i":152,"t":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":144},{"i":154,"t":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":144},{"i":157,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":156},{"i":160,"t":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":159},{"i":162,"t":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":159},{"i":164,"t":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":159},{"i":166,"t":"3.SQL","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#3sql","p":159},{"i":167,"t":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":159},{"i":169,"t":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":159},{"i":171,"t":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":159},{"i":173,"t":"4.关系数据理论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#4关系数据理论","p":159},{"i":174,"t":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":159},{"i":179,"t":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":178},{"i":181,"t":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":178},{"i":183,"t":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":178},{"i":185,"t":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":178},{"i":187,"t":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":178},{"i":189,"t":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":178},{"i":191,"t":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":178},{"i":193,"t":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":178},{"i":195,"t":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":178},{"i":197,"t":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":178},{"i":199,"t":"归并排序和基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序和基数排序","p":178},{"i":200,"t":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":178},{"i":202,"t":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":178},{"i":204,"t":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":178},{"i":206,"t":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":178},{"i":208,"t":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":178},{"i":212,"t":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":210},{"i":214,"t":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":210},{"i":216,"t":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":210},{"i":218,"t":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":210},{"i":220,"t":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":210},{"i":226,"t":"2.1 配置PicX","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","h":"#21-配置picx","p":224},{"i":228,"t":"2.2 图片上传和获取","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","h":"#22-图片上传和获取","p":224},{"i":231,"t":"两种方式部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"","p":230},{"i":232,"t":"一、GitHubPages","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#一githubpages","p":230},{"i":234,"t":"1.远程创建仓库","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1远程创建仓库","p":230},{"i":236,"t":"2.本地连接","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2本地连接","p":230},{"i":238,"t":"3.打包部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#3打包部署","p":230},{"i":240,"t":"二、GitHubAction+云服务器部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#二githubaction云服务器部署","p":230},{"i":241,"t":"1.云服务","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1云服务","p":230},{"i":243,"t":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2项目配置action自动化脚本","p":230},{"i":248,"t":"1.容器&镜像&仓库","u":"/docs/Web/Docker/Docker入门","h":"#1容器镜像仓库","p":247},{"i":249,"t":"1.1 镜像","u":"/docs/Web/Docker/Docker入门","h":"#11-镜像","p":247},{"i":251,"t":"1.2 容器","u":"/docs/Web/Docker/Docker入门","h":"#12-容器","p":247},{"i":253,"t":"1.3 仓库","u":"/docs/Web/Docker/Docker入门","h":"#13-仓库","p":247},{"i":255,"t":"2.常用指令","u":"/docs/Web/Docker/Docker入门","h":"#2常用指令","p":247},{"i":258,"t":"1.1 i18n","u":"/docs/Web/JavaStudy/Web国际化","h":"#11-i18n","p":257},{"i":260,"t":"1.2 SpringBoot国际化配置","u":"/docs/Web/JavaStudy/Web国际化","h":"#12-springboot国际化配置","p":257},{"i":262,"t":"1.3 MessageSourceAutoConfiguration","u":"/docs/Web/JavaStudy/Web国际化","h":"#13-messagesourceautoconfiguration","p":257},{"i":264,"t":"1.4 Locale","u":"/docs/Web/JavaStudy/Web国际化","h":"#14-locale","p":257},{"i":266,"t":"2. 后端重写国际化","u":"/docs/Web/JavaStudy/Web国际化","h":"","p":257},{"i":267,"t":"2.1 自定义Locale解析","u":"/docs/Web/JavaStudy/Web国际化","h":"#21-自定义locale解析","p":257},{"i":269,"t":"2.2 封装一个i18n类","u":"/docs/Web/JavaStudy/Web国际化","h":"#22-封装一个i18n类","p":257},{"i":271,"t":"3. Vue国际化","u":"/docs/Web/JavaStudy/Web国际化","h":"","p":257},{"i":273,"t":"3.1 注入到Vue实例中(main.js文件中)","u":"/docs/Web/JavaStudy/Web国际化","h":"#31-注入到vue实例中mainjs文件中","p":257},{"i":275,"t":"3.2 国际化数据按照Json格式编写：","u":"/docs/Web/JavaStudy/Web国际化","h":"#32-国际化数据按照json格式编写","p":257},{"i":277,"t":"3.3 使用方式：","u":"/docs/Web/JavaStudy/Web国际化","h":"#33-使用方式","p":257},{"i":279,"t":"3.4 vant组件国际化：","u":"/docs/Web/JavaStudy/Web国际化","h":"#34-vant组件国际化","p":257},{"i":281,"t":"4.JQuery国际化","u":"/docs/Web/JavaStudy/Web国际化","h":"","p":257},{"i":282,"t":"4.1 引入jquery.js和jquery.i18n.properties.js","u":"/docs/Web/JavaStudy/Web国际化","h":"#41-引入jqueryjs和jqueryi18npropertiesjs","p":257},{"i":284,"t":"4.2 按照后端的样式声明properties文件，并且自定义i18n.config.js","u":"/docs/Web/JavaStudy/Web国际化","h":"#42-按照后端的样式声明properties文件并且自定义i18nconfigjs","p":257},{"i":287,"t":"4.1 学生端","u":"/docs/Web/软件工程课设/接口文档","h":"#41-学生端","p":286},{"i":288,"t":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":286},{"i":290,"t":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":286},{"i":292,"t":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":286},{"i":294,"t":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":286},{"i":296,"t":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":286},{"i":298,"t":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":286},{"i":300,"t":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":286},{"i":302,"t":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":286},{"i":304,"t":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":286},{"i":306,"t":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":286},{"i":308,"t":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":286},{"i":310,"t":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":286},{"i":312,"t":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":286},{"i":314,"t":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":286},{"i":316,"t":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":286},{"i":318,"t":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":286},{"i":320,"t":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":286},{"i":322,"t":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":286},{"i":324,"t":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":286},{"i":326,"t":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":286},{"i":328,"t":"4.3 管理端","u":"/docs/Web/软件工程课设/接口文档","h":"#43-管理端","p":286},{"i":329,"t":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":286},{"i":331,"t":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":286},{"i":333,"t":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":286},{"i":335,"t":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":286},{"i":337,"t":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":286},{"i":339,"t":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":286},{"i":341,"t":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":286},{"i":343,"t":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修�改","p":286},{"i":345,"t":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":286},{"i":347,"t":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":286},{"i":349,"t":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":286},{"i":351,"t":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":286},{"i":353,"t":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":286},{"i":355,"t":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":286},{"i":357,"t":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":286},{"i":359,"t":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":286},{"i":361,"t":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":286},{"i":363,"t":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":286},{"i":365,"t":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":286},{"i":367,"t":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":286},{"i":369,"t":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":286},{"i":371,"t":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":286},{"i":373,"t":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":286},{"i":375,"t":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":286},{"i":377,"t":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":286},{"i":379,"t":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":286},{"i":381,"t":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":286},{"i":383,"t":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":286},{"i":385,"t":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":286},{"i":387,"t":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":286},{"i":389,"t":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":286},{"i":391,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":286},{"i":393,"t":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":286},{"i":395,"t":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":286},{"i":397,"t":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":286},{"i":400,"t":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":399},{"i":402,"t":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":399},{"i":404,"t":"2.1 配置文件和操作","u":"/docs/Web/Redis/Redis 持久化","h":"#21-配置文件和操作","p":399},{"i":405,"t":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":399},{"i":407,"t":"2.2操作","u":"/docs/Web/Redis/Redis 持久化","h":"#22操作","p":399},{"i":408,"t":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":399},{"i":410,"t":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":399},{"i":412,"t":"3.AOF","u":"/docs/Web/Redis/Redis 持久化","h":"","p":399},{"i":413,"t":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":399},{"i":415,"t":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":399},{"i":417,"t":"3.3操作","u":"/docs/Web/Redis/Redis 持久化","h":"#33操作","p":399},{"i":418,"t":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":399},{"i":420,"t":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":399},{"i":422,"t":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":399},{"i":425,"t":"1.新增校验位","u":"/docs/Work/电控栈位表&&钢刀","h":"#1新增校验位","p":424},{"i":427,"t":"1.1 刮刀类型","u":"/docs/Work/电控栈位表&&钢刀","h":"#11-刮刀类型","p":424},{"i":429,"t":"1.2 M1","u":"/docs/Work/电控栈位表&&钢刀","h":"#12-m1","p":424},{"i":431,"t":"1.3 安装面","u":"/docs/Work/电控栈位表&&钢刀","h":"#13-安装面","p":424},{"i":433,"t":"1.4 默认安装点","u":"/docs/Work/电控栈位表&&钢刀","h":"#14-默认安装点","p":424},{"i":435,"t":"2.刮刀生产工艺和刮刀材质需求","u":"/docs/Work/电控栈位表&&钢刀","h":"#2刮刀生产工艺和刮刀材质需求","p":424},{"i":437,"t":"3.SMT栈位表批量变更操作","u":"/docs/Work/电控栈位表&&钢刀","h":"#3smt栈位表批量变更操作","p":424},{"i":439,"t":"4.开发手记","u":"/docs/Work/电控栈位表&&钢刀","h":"#4开发手记","p":424},{"i":440,"t":"4.1 Java的Stream","u":"/docs/Work/电控栈位表&&钢刀","h":"#41-java的stream","p":424},{"i":442,"t":"4.2 VO，DTO","u":"/docs/Work/电控栈位表&&钢刀","h":"#42-vodto","p":424},{"i":445,"t":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":444},{"i":447,"t":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":444},{"i":449,"t":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":444},{"i":451,"t":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":444},{"i":453,"t":"2.十大数据类型","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"","p":444},{"i":454,"t":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":444},{"i":456,"t":"2.1.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#211常用指令","p":444},{"i":457,"t":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":444},{"i":459,"t":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":444},{"i":461,"t":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":444},{"i":463,"t":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":444},{"i":465,"t":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":444},{"i":467,"t":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":444},{"i":469,"t":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":444},{"i":471,"t":"2.4.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#241常用指令","p":444},{"i":472,"t":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":444},{"i":474,"t":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":444},{"i":476,"t":"2.5.2常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#252常用指令","p":444},{"i":477,"t":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":444},{"i":479,"t":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":444},{"i":481,"t":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":444},{"i":483,"t":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":444},{"i":485,"t":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":444},{"i":487,"t":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":444},{"i":489,"t":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":444},{"i":493,"t":"1. 业务背景","u":"/docs/Work/拼板分板配置","h":"#1-业务背景","p":491},{"i":495,"t":"1.1 任务","u":"/docs/Work/拼板分板配置","h":"#11-任务","p":491},{"i":497,"t":"2.数据库设计","u":"/docs/Work/拼板分板配置","h":"#2数据库设计","p":491},{"i":499,"t":"3.JPA工具 && SQL执行","u":"/docs/Work/拼板分板配置","h":"#3jpa工具--sql执行","p":491},{"i":500,"t":"3.1 JPA","u":"/docs/Work/拼板分板配置","h":"#31-jpa","p":491},{"i":502,"t":"3.2 SQL执行","u":"/docs/Work/拼板分板配置","h":"#32-sql执行","p":491},{"i":504,"t":"4.服务和接口手记","u":"/docs/Work/拼板分板配置","h":"#4服务和接口手记","p":491},{"i":505,"t":"4.1 服务编写","u":"/docs/Work/拼板分板配置","h":"#41-服务编写","p":491},{"i":507,"t":"4.2 接口编写","u":"/docs/Work/拼板分板配置","h":"#42-接口编写","p":491},{"i":511,"t":"1.业务逻辑","u":"/docs/Work/拼板过站接口修改","h":"#1业务逻辑","p":509},{"i":513,"t":"2.拼板校验","u":"/docs/Work/拼板过站接口修改","h":"#2拼板校验","p":509},{"i":515,"t":"3.条码保存","u":"/docs/Work/拼板过站接口修改","h":"#3条码保存","p":509},{"i":517,"t":"4.拼板过站","u":"/docs/Work/拼板过站接口修改","h":"#4拼板过站","p":509},{"i":519,"t":"5.2024/10/31新增日志功能","u":"/docs/Work/拼板过站接口修改","h":"#520241031新增日志功能","p":509},{"i":521,"t":"6.2024/11/07报错记录","u":"/docs/Work/拼板过站接口修改","h":"#620241107报错记录","p":509},{"i":523,"t":"6.1 使用synchronized关键字","u":"/docs/Work/拼板过站接口修改","h":"#61-使用synchronized关键字","p":509},{"i":525,"t":"6.2 使用ReentrantLock","u":"/docs/Work/拼板过站接口修改","h":"#62-使用reentrantlock","p":509},{"i":528,"t":"1.产能报表需求","u":"/docs/Work/研控报表组装","h":"#1产能报表需求","p":527},{"i":530,"t":"2.接口设计","u":"/docs/Work/研控报表组装","h":"#2接口设计","p":527},{"i":531,"t":"2.1 处理工序为空","u":"/docs/Work/研控报表组装","h":"#21-处理工序为空","p":527},{"i":533,"t":"2.2 实体设计","u":"/docs/Work/研控报表组装","h":"#22-实体设计","p":527},{"i":535,"t":"2.3 数据导出","u":"/docs/Work/研控报表组装","h":"#23-数据导出","p":527},{"i":539,"t":"1.本次SQL学习","u":"/docs/Work/重构看板","h":"#1本次sql学习","p":537},{"i":540,"t":"1.1 case字句","u":"/docs/Work/重构看板","h":"#11-case字句","p":537},{"i":542,"t":"1.2 with as字句","u":"/docs/Work/重构看板","h":"#12-with-as字句","p":537},{"i":544,"t":"1.3 Group by","u":"/docs/Work/重构看板","h":"#13-group-by","p":537},{"i":546,"t":"1.4 ROW_NUMBER（）","u":"/docs/Work/重构看板","h":"#14-row_number","p":537},{"i":548,"t":"1.5 连接","u":"/docs/Work/重构看板","h":"#15-连接","p":537},{"i":550,"t":"1.6 按行分组求和","u":"/docs/Work/重构看板","h":"#16-按行分组求和","p":537},{"i":552,"t":"1.7 字符串拼接","u":"/docs/Work/重构看板","h":"#17-字符串拼接","p":537},{"i":554,"t":"2.优化后的SQL","u":"/docs/Work/重构看板","h":"#2优化后的sql","p":537},{"i":556,"t":"3.接口设计","u":"/docs/Work/重构看板","h":"#3接口设计","p":537},{"i":557,"t":"3.1数据类型设计","u":"/docs/Work/重构看板","h":"#31数据类型设计","p":537},{"i":559,"t":"4.上线测试手记","u":"/docs/Work/重构看板","h":"#4上线测试手记","p":537},{"i":563,"t":"1.SQL记录","u":"/docs/Work/清洗板","h":"#1sql记录","p":561},{"i":565,"t":"2.设计思路","u":"/docs/Work/清洗板","h":"#2设计思路","p":561},{"i":566,"t":"2.1 清洗模块","u":"/docs/Work/清洗板","h":"#21-清洗模块","p":561},{"i":568,"t":"2.2 审核模块","u":"/docs/Work/清洗板","h":"#22-审核模块","p":561},{"i":570,"t":"3.后端开发手记","u":"/docs/Work/清洗板","h":"#3后端开发手记","p":561},{"i":572,"t":"4.前端开发手记","u":"/docs/Work/清洗板","h":"#4前端开发手记","p":561},{"i":574,"t":"4.1 引入后端接口","u":"/docs/Work/清洗板","h":"#41-引入后端接口","p":561},{"i":576,"t":"4.2 注册vue的路径","u":"/docs/Work/清洗板","h":"#42-注册vue的路径","p":561},{"i":578,"t":"4.3 Vue页面","u":"/docs/Work/清洗板","h":"#43-vue页面","p":561},{"i":580,"t":"5.总结","u":"/docs/Work/清洗板","h":"#5总结","p":561},{"i":582,"t":"5.1 Git学习新纪录","u":"/docs/Work/清洗板","h":"#51-git学习新纪录","p":561},{"i":584,"t":"5.2 冲突解决","u":"/docs/Work/清洗板","h":"#52-冲突解决","p":561},{"i":586,"t":"6.修复手记","u":"/docs/Work/清洗板","h":"#6修复手记","p":561},{"i":587,"t":"6.1 界面按钮确认","u":"/docs/Work/清洗板","h":"#61-界面按钮确认","p":561},{"i":589,"t":"6.2 自动生成条码并带出","u":"/docs/Work/清洗板","h":"#62-自动生成条码并带出","p":561},{"i":591,"t":"6.3 删除IPQC，改用消息推送","u":"/docs/Work/清洗板","h":"#63-删除ipqc改用消息推送","p":561},{"i":594,"t":"1.PDF读取解析","u":"/docs/Work/PDF解析","h":"#1pdf读取解析","p":593},{"i":596,"t":"2.解析策略","u":"/docs/Work/PDF解析","h":"#2解析策略","p":593},{"i":598,"t":"3.总结","u":"/docs/Work/PDF解析","h":"#3总结","p":593},{"i":600,"t":"3.1数据库连接","u":"/docs/Work/PDF解析","h":"#31数据库连接","p":593},{"i":602,"t":"3.2Git工具使用","u":"/docs/Work/PDF解析","h":"#32git工具使用","p":593},{"i":604,"t":"3.3 8月23日~25日BUG排查日志","u":"/docs/Work/PDF解析","h":"#33-8月23日25日bug排查日志","p":593},{"i":607,"t":"1.数据库设计","u":"/docs/Work/锡膏后端","h":"#1数据库设计","p":606},{"i":609,"t":"2.锡膏红胶标贴打印","u":"/docs/Work/锡膏后端","h":"#2锡膏红胶标贴打印","p":606},{"i":610,"t":"2.1 操作流程","u":"/docs/Work/锡膏后端","h":"#21-操作流程","p":606},{"i":612,"t":"2.2 调用打印服务","u":"/docs/Work/锡膏后端","h":"#22-调用打印服务","p":606},{"i":614,"t":"2.3 前端","u":"/docs/Work/锡膏后端","h":"#23-前端","p":606},{"i":616,"t":"3.锡膏红胶质检","u":"/docs/Work/锡膏后端","h":"#3锡膏红胶质检","p":606},{"i":617,"t":"3.1 操作流程","u":"/docs/Work/锡膏后端","h":"#31-操作流程","p":606},{"i":619,"t":"3.2 后端逻辑参考","u":"/docs/Work/锡膏后端","h":"#32-后端逻辑参考","p":606},{"i":621,"t":"3.3 前端","u":"/docs/Work/锡膏后端","h":"#33-前端","p":606},{"i":623,"t":"4.锡膏红胶入库","u":"/docs/Work/锡膏后端","h":"#4锡膏红胶入库","p":606},{"i":625,"t":"5.锡膏红胶移库","u":"/docs/Work/锡膏后端","h":"#5锡膏红胶移库","p":606},{"i":627,"t":"5.1 校验是否最早","u":"/docs/Work/锡膏后端","h":"#51-校验是否最早","p":606},{"i":629,"t":"5.2 移库和取消移库","u":"/docs/Work/锡膏后端","h":"#52-移库和取消移库","p":606},{"i":631,"t":"6.库存主数据","u":"/docs/Work/锡膏后端","h":"#6库存主数据","p":606},{"i":633,"t":"6.1 锡膏报废","u":"/docs/Work/锡膏后端","h":"#61-锡膏报废","p":606},{"i":635,"t":"6.2 审核","u":"/docs/Work/锡膏后端","h":"#62-审核","p":606},{"i":637,"t":"6.3 库存数据盘点","u":"/docs/Work/锡膏后端","h":"#63-库存数据盘点","p":606},{"i":639,"t":"7.状态表","u":"/docs/Work/锡膏后端","h":"#7状态表","p":606}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/2",[0,0.646]],["t/4",[0,0.646]],["t/6",[0,0.646]],["t/8",[0,0.646]],["t/9",[0,0.646]],["t/11",[0,0.646]],["t/13",[1,5.169]],["t/14",[0,0.646]],["t/16",[1,5.169]],["t/17",[0,0.646]],["t/18",[0,0.646]],["t/19",[0,0.646]],["t/21",[0,0.646]],["t/23",[0,0.646]],["t/25",[1,5.169]],["t/26",[0,0.646]],["t/28",[0,0.646]],["t/30",[2,6.135]],["t/32",[0,0.646]],["t/33",[0,0.646]],["t/35",[0,0.646]],["t/36",[3,6.135]],["t/38",[0,0.646]],["t/40",[4,6.135]],["t/42",[0,0.646]],["t/43",[0,0.646]],["t/45",[0,0.646]],["t/47",[0,0.646]],["t/50",[0,0.646]],["t/51",[0,0.646]],["t/53",[0,0.646]],["t/55",[0,0.646]],["t/57",[0,0.646]],["t/59",[0,0.646]],["t/61",[0,0.646]],["t/62",[0,0.646]],["t/64",[0,0.646]],["t/66",[0,0.646]],["t/67",[0,0.646]],["t/68",[0,0.646]],["t/70",[0,0.646]],["t/72",[0,0.646]],["t/74",[0,0.646]],["t/75",[0,0.646]],["t/77",[5,6.135]],["t/79",[0,0.646]],["t/81",[0,0.646]],["t/83",[0,0.646]],["t/85",[0,0.646]],["t/86",[0,0.646]],["t/88",[0,0.646]],["t/90",[6,6.135]],["t/94",[7,3.918]],["t/96",[8,6.135]],["t/98",[0,0.487,9,3.039]],["t/100",[10,3.039,11,4.185]],["t/102",[0,0.487,12,3.68]],["t/104",[11,4.185,13,4.185]],["t/107",[0,0.646]],["t/108",[0,0.646]],["t/111",[0,0.646]],["t/113",[0,0.646]],["t/115",[0,0.646]],["t/117",[0,0.646]],["t/119",[0,0.646]],["t/120",[0,0.646]],["t/122",[0,0.646]],["t/124",[14,6.135]],["t/125",[15,6.135]],["t/127",[16,6.135]],["t/129",[0,0.646]],["t/131",[17,6.135]],["t/133",[18,6.135]],["t/135",[0,0.646]],["t/137",[0,0.646]],["t/138",[19,6.135]],["t/140",[0,0.646]],["t/142",[0,0.646]],["t/145",[20,4.158]],["t/146",[0,0.646]],["t/148",[21,4.464]],["t/150",[22,3.631]],["t/151",[9,4.032]],["t/152",[0,0.646]],["t/154",[10,4.032]],["t/157",[0,0.646]],["t/160",[7,3.918]],["t/162",[22,3.631]],["t/164",[0,0.487,9,3.039]],["t/166",[23,6.135]],["t/167",[0,0.487,24,3.242]],["t/169",[25,3.508,26,4.624]],["t/171",[0,0.487,27,3.508]],["t/173",[28,4.158]],["t/174",[0,0.487,29,3.365]],["t/179",[0,0.646]],["t/181",[0,0.646]],["t/183",[0,0.646]],["t/185",[0,0.646]],["t/187",[0,0.646]],["t/189",[0,0.646]],["t/191",[0,0.646]],["t/193",[0,0.646]],["t/195",[0,0.646]],["t/197",[0,0.646]],["t/199",[0,0.646]],["t/200",[0,0.646]],["t/202",[0,0.646]],["t/204",[0,0.646]],["t/206",[0,0.646]],["t/208",[0,0.646]],["t/212",[30,6.135]],["t/214",[31,6.135]],["t/216",[32,6.135]],["t/218",[33,6.135]],["t/220",[34,5.169]],["t/226",[9,3.039,35,4.624]],["t/228",[0,0.487,10,3.039]],["t/231",[0,0.646]],["t/232",[36,6.135]],["t/234",[7,3.918]],["t/236",[22,3.631]],["t/238",[37,4.301]],["t/240",[38,6.135]],["t/241",[7,3.918]],["t/243",[39,6.135]],["t/248",[7,3.918]],["t/249",[0,0.487,20,3.134]],["t/251",[0,0.487,21,3.365]],["t/253",[0,0.487,40,3.508]],["t/255",[22,3.631]],["t/258",[20,3.134,41,4.185]],["t/260",[21,3.365,42,4.624]],["t/262",[40,3.508,43,4.624]],["t/264",[44,3.68,45,4.185]],["t/266",[0,0.487,22,2.737]],["t/267",[9,3.039,45,4.185]],["t/269",[10,3.039,41,4.185]],["t/271",[37,3.242,46,3.896]],["t/273",[24,3.242,47,4.624]],["t/275",[25,3.508,48,4.624]],["t/277",[0,0.487,27,3.508]],["t/279",[49,4.624,50,4.624]],["t/281",[51,6.135]],["t/282",[29,3.365,52,4.624]],["t/284",[53,3.68,54,4.624]],["t/287",[0,0.487,29,3.365]],["t/288",[0,0.487,55,4.624]],["t/290",[0,0.487,56,4.624]],["t/292",[0,0.487,57,4.624]],["t/294",[0,0.487,58,4.624]],["t/296",[0,0.487,59,4.624]],["t/298",[0,0.487,60,4.624]],["t/300",[0,0.487,61,4.624]],["t/302",[0,0.487,62,4.624]],["t/304",[0,0.487,63,4.624]],["t/306",[0,0.487,64,4.624]],["t/308",[0,0.487,65,4.624]],["t/310",[0,0.487,66,4.624]],["t/312",[0,0.487,67,4.624]],["t/314",[0,0.487,68,4.624]],["t/316",[0,0.487,69,4.624]],["t/318",[0,0.487,70,4.624]],["t/320",[0,0.487,71,4.624]],["t/322",[0,0.487,72,4.624]],["t/324",[0,0.487,73,4.624]],["t/326",[0,0.487,74,4.624]],["t/328",[0,0.487,75,4.185]],["t/329",[0,0.487,76,4.624]],["t/331",[0,0.487,77,4.624]],["t/333",[0,0.487,78,4.624]],["t/335",[0,0.487,79,4.624]],["t/337",[0,0.487,80,4.624]],["t/339",[0,0.487,81,4.624]],["t/341",[0,0.487,82,4.624]],["t/343",[0,0.487,83,4.624]],["t/345",[0,0.487,84,4.624]],["t/347",[0,0.487,85,4.624]],["t/349",[0,0.487,86,4.624]],["t/351",[0,0.487,87,4.624]],["t/353",[0,0.487,88,4.624]],["t/355",[0,0.487,89,4.624]],["t/357",[0,0.487,90,4.624]],["t/359",[0,0.487,91,4.624]],["t/361",[0,0.487,92,4.624]],["t/363",[0,0.487,93,4.624]],["t/365",[0,0.487,94,4.624]],["t/367",[0,0.487,95,4.624]],["t/369",[0,0.487,96,4.624]],["t/371",[0,0.487,97,4.624]],["t/373",[0,0.487,98,4.624]],["t/375",[0,0.487,99,4.624]],["t/377",[0,0.487,100,4.624]],["t/379",[0,0.487,101,4.624]],["t/381",[0,0.487,102,4.624]],["t/383",[0,0.487,103,4.624]],["t/385",[0,0.487,104,4.624]],["t/387",[0,0.487,105,4.624]],["t/389",[0,0.487,106,4.624]],["t/391",[0,0.487,107,4.185]],["t/393",[0,0.487,107,4.185]],["t/395",[0,0.487,108,4.624]],["t/397",[0,0.487,109,4.624]],["t/400",[0,0.487,20,3.134]],["t/402",[110,6.135]],["t/404",[0,0.487,9,3.039]],["t/405",[111,5.553]],["t/407",[10,4.032]],["t/408",[112,5.553]],["t/410",[113,6.135]],["t/412",[114,6.135]],["t/413",[0,0.487,24,3.242]],["t/415",[0,0.487,25,3.508]],["t/417",[27,4.654]],["t/418",[115,6.135]],["t/420",[116,6.135]],["t/422",[28,4.158]],["t/425",[7,3.918]],["t/427",[0,0.487,20,3.134]],["t/429",[21,3.365,117,4.624]],["t/431",[0,0.487,40,3.508]],["t/433",[0,0.487,44,3.68]],["t/435",[22,3.631]],["t/437",[118,6.135]],["t/439",[28,4.158]],["t/440",[29,3.365,119,4.624]],["t/442",[53,3.68,120,4.624]],["t/445",[0,0.487,20,3.134]],["t/447",[21,4.464]],["t/449",[0,0.487,40,3.508]],["t/451",[44,4.883]],["t/453",[22,3.631]],["t/454",[121,6.135]],["t/456",[111,5.553]],["t/457",[122,6.135]],["t/459",[123,6.135]],["t/461",[0,0.487,10,3.039]],["t/463",[112,5.553]],["t/465",[12,4.883]],["t/467",[124,6.135]],["t/469",[13,5.553]],["t/471",[125,6.135]],["t/472",[126,6.135]],["t/474",[127,6.135]],["t/476",[128,6.135]],["t/477",[129,6.135]],["t/479",[130,6.135]],["t/481",[131,6.135]],["t/483",[132,6.135]],["t/485",[133,6.135]],["t/487",[134,6.135]],["t/489",[135,6.135]],["t/493",[0,0.487,7,2.953]],["t/495",[0,0.487,20,3.134]],["t/497",[22,3.631]],["t/499",[0,0.391,136,3.71,137,3.358]],["t/500",[24,3.242,138,4.624]],["t/502",[25,3.508,137,4.185]],["t/504",[28,4.158]],["t/505",[0,0.487,29,3.365]],["t/507",[0,0.487,53,3.68]],["t/511",[7,3.918]],["t/513",[22,3.631]],["t/515",[37,4.301]],["t/517",[28,4.158]],["t/519",[139,6.135]],["t/521",[140,6.135]],["t/523",[141,3.896,142,4.624]],["t/525",[143,3.896,144,4.624]],["t/528",[7,3.918]],["t/530",[22,3.631]],["t/531",[0,0.487,9,3.039]],["t/533",[0,0.487,10,3.039]],["t/535",[0,0.487,12,3.68]],["t/539",[145,6.135]],["t/540",[20,3.134,146,4.624]],["t/542",[21,4.464]],["t/544",[40,3.508,147,4.624]],["t/546",[44,3.68,148,4.624]],["t/548",[0,0.487,149,4.624]],["t/550",[0,0.487,150,4.624]],["t/552",[0,0.487,151,4.624]],["t/554",[152,6.135]],["t/556",[37,4.301]],["t/557",[24,4.301]],["t/559",[28,4.158]],["t/563",[153,6.135]],["t/565",[22,3.631]],["t/566",[0,0.487,9,3.039]],["t/568",[0,0.487,10,3.039]],["t/570",[37,4.301]],["t/572",[28,4.158]],["t/574",[0,0.487,29,3.365]],["t/576",[46,3.896,53,3.68]],["t/578",[46,3.896,75,4.185]],["t/580",[34,5.169]],["t/582",[154,4.185,155,4.624]],["t/584",[0,0.487,156,4.185]],["t/586",[157,5.553]],["t/587",[0,0.487,141,3.896]],["t/589",[0,0.487,143,3.896]],["t/591",[158,4.185,159,4.624]],["t/594",[160,6.135]],["t/596",[22,3.631]],["t/598",[37,4.301]],["t/600",[24,4.301]],["t/602",[161,6.135]],["t/604",[27,3.508,162,4.624]],["t/607",[7,3.918]],["t/609",[22,3.631]],["t/610",[0,0.487,9,3.039]],["t/612",[0,0.487,10,3.039]],["t/614",[0,0.487,12,3.68]],["t/616",[37,4.301]],["t/617",[0,0.487,24,3.242]],["t/619",[0,0.487,25,3.508]],["t/621",[0,0.487,27,3.508]],["t/623",[28,4.158]],["t/625",[34,5.169]],["t/627",[0,0.487,154,4.185]],["t/629",[0,0.487,156,4.185]],["t/631",[157,5.553]],["t/633",[0,0.487,141,3.896]],["t/635",[0,0.487,143,3.896]],["t/637",[0,0.487,158,4.185]],["t/639",[163,6.135]]],"invertedIndex":[["",{"_index":0,"t":{"2":{"position":[[0,5]]},"4":{"position":[[0,2]]},"6":{"position":[[0,2]]},"8":{"position":[[0,3]]},"9":{"position":[[0,2]]},"11":{"position":[[0,4]]},"14":{"position":[[0,2]]},"17":{"position":[[0,2]]},"18":{"position":[[0,2]]},"19":{"position":[[0,2]]},"21":{"position":[[0,2]]},"23":{"position":[[0,2]]},"26":{"position":[[0,2]]},"28":{"position":[[0,2]]},"32":{"position":[[0,4]]},"33":{"position":[[0,2]]},"35":{"position":[[0,5]]},"38":{"position":[[0,4]]},"42":{"position":[[0,4]]},"43":{"position":[[0,4]]},"45":{"position":[[0,4]]},"47":{"position":[[0,7]]},"50":{"position":[[0,2]]},"51":{"position":[[0,9]]},"53":{"position":[[0,2]]},"55":{"position":[[0,2]]},"57":{"position":[[0,2]]},"59":{"position":[[0,2]]},"61":{"position":[[0,2]]},"62":{"position":[[0,4]]},"64":{"position":[[0,4]]},"66":{"position":[[0,4]]},"67":{"position":[[0,5]]},"68":{"position":[[0,4]]},"70":{"position":[[0,4]]},"72":{"position":[[0,4]]},"74":{"position":[[0,5]]},"75":{"position":[[0,4]]},"79":{"position":[[0,10]]},"81":{"position":[[0,18]]},"83":{"position":[[0,11]]},"85":{"position":[[0,3]]},"86":{"position":[[0,8]]},"88":{"position":[[0,3]]},"98":{"position":[[4,4]]},"102":{"position":[[4,4]]},"107":{"position":[[0,8]]},"108":{"position":[[0,4]]},"111":{"position":[[0,10]]},"113":{"position":[[0,9]]},"115":{"position":[[0,3]]},"117":{"position":[[0,3]]},"119":{"position":[[0,12]]},"120":{"position":[[0,4]]},"122":{"position":[[0,3]]},"129":{"position":[[0,3]]},"135":{"position":[[0,15]]},"137":{"position":[[0,2]]},"140":{"position":[[0,4]]},"142":{"position":[[0,4]]},"146":{"position":[[0,28]]},"152":{"position":[[0,7]]},"157":{"position":[[0,30]]},"164":{"position":[[4,6]]},"167":{"position":[[4,2]]},"171":{"position":[[4,2]]},"174":{"position":[[4,4]]},"179":{"position":[[0,4]]},"181":{"position":[[0,4]]},"183":{"position":[[0,4]]},"185":{"position":[[0,4]]},"187":{"position":[[0,4]]},"189":{"position":[[0,4]]},"191":{"position":[[0,4]]},"193":{"position":[[0,4]]},"195":{"position":[[0,4]]},"197":{"position":[[0,3]]},"199":{"position":[[0,9]]},"200":{"position":[[0,4]]},"202":{"position":[[0,4]]},"204":{"position":[[0,8]]},"206":{"position":[[0,7]]},"208":{"position":[[0,9]]},"228":{"position":[[4,7]]},"231":{"position":[[0,6]]},"249":{"position":[[4,2]]},"251":{"position":[[4,2]]},"253":{"position":[[4,2]]},"266":{"position":[[3,7]]},"277":{"position":[[4,5]]},"287":{"position":[[4,3]]},"288":{"position":[[7,2]]},"290":{"position":[[7,2]]},"292":{"position":[[7,2]]},"294":{"position":[[7,2]]},"296":{"position":[[7,4]]},"298":{"position":[[7,4]]},"300":{"position":[[7,4]]},"302":{"position":[[7,4]]},"304":{"position":[[7,4]]},"306":{"position":[[8,4]]},"308":{"position":[[8,4]]},"310":{"position":[[8,6]]},"312":{"position":[[8,5]]},"314":{"position":[[8,4]]},"316":{"position":[[8,4]]},"318":{"position":[[8,6]]},"320":{"position":[[8,6]]},"322":{"position":[[8,4]]},"324":{"position":[[8,6]]},"326":{"position":[[8,6]]},"328":{"position":[[4,3]]},"329":{"position":[[7,2]]},"331":{"position":[[7,2]]},"333":{"position":[[7,2]]},"335":{"position":[[7,4]]},"337":{"position":[[7,4]]},"339":{"position":[[7,4]]},"341":{"position":[[7,4]]},"343":{"position":[[7,6]]},"345":{"position":[[7,4]]},"347":{"position":[[8,4]]},"349":{"position":[[8,4]]},"351":{"position":[[8,4]]},"353":{"position":[[8,4]]},"355":{"position":[[8,4]]},"357":{"position":[[8,4]]},"359":{"position":[[8,4]]},"361":{"position":[[8,4]]},"363":{"position":[[8,6]]},"365":{"position":[[8,4]]},"367":{"position":[[8,4]]},"369":{"position":[[8,4]]},"371":{"position":[[8,4]]},"373":{"position":[[8,4]]},"375":{"position":[[8,4]]},"377":{"position":[[8,4]]},"379":{"position":[[8,4]]},"381":{"position":[[8,4]]},"383":{"position":[[8,4]]},"385":{"position":[[8,4]]},"387":{"position":[[8,4]]},"389":{"position":[[8,6]]},"391":{"position":[[8,6]]},"393":{"position":[[8,6]]},"395":{"position":[[8,4]]},"397":{"position":[[8,6]]},"400":{"position":[[4,6]]},"404":{"position":[[4,7]]},"413":{"position":[[4,4]]},"415":{"position":[[4,6]]},"427":{"position":[[4,4]]},"431":{"position":[[4,3]]},"433":{"position":[[4,5]]},"445":{"position":[[4,5]]},"449":{"position":[[4,4]]},"461":{"position":[[4,2]]},"493":{"position":[[3,4]]},"495":{"position":[[4,2]]},"499":{"position":[[8,2]]},"505":{"position":[[4,4]]},"507":{"position":[[4,4]]},"531":{"position":[[4,6]]},"533":{"position":[[4,4]]},"535":{"position":[[4,4]]},"548":{"position":[[4,2]]},"550":{"position":[[4,6]]},"552":{"position":[[4,5]]},"566":{"position":[[4,4]]},"568":{"position":[[4,4]]},"574":{"position":[[4,6]]},"584":{"position":[[4,4]]},"587":{"position":[[4,6]]},"589":{"position":[[4,9]]},"610":{"position":[[4,4]]},"612":{"position":[[4,6]]},"614":{"position":[[4,2]]},"617":{"position":[[4,4]]},"619":{"position":[[4,6]]},"621":{"position":[[4,2]]},"627":{"position":[[4,6]]},"629":{"position":[[4,7]]},"633":{"position":[[4,4]]},"635":{"position":[[4,2]]},"637":{"position":[[4,6]]}}}],["1",{"_index":7,"t":{"94":{"position":[[0,11]]},"160":{"position":[[0,4]]},"234":{"position":[[0,8]]},"241":{"position":[[0,5]]},"248":{"position":[[0,10]]},"425":{"position":[[0,7]]},"493":{"position":[[0,2]]},"511":{"position":[[0,6]]},"528":{"position":[[0,8]]},"607":{"position":[[0,7]]}}}],["1.1",{"_index":20,"t":{"145":{"position":[[0,7]]},"249":{"position":[[0,3]]},"258":{"position":[[0,3]]},"400":{"position":[[0,3]]},"427":{"position":[[0,3]]},"445":{"position":[[0,3]]},"495":{"position":[[0,3]]},"540":{"position":[[0,3]]}}}],["1.2",{"_index":21,"t":{"148":{"position":[[0,10]]},"251":{"position":[[0,3]]},"260":{"position":[[0,3]]},"429":{"position":[[0,3]]},"447":{"position":[[0,5]]},"542":{"position":[[0,3]]}}}],["1.3",{"_index":40,"t":{"253":{"position":[[0,3]]},"262":{"position":[[0,3]]},"431":{"position":[[0,3]]},"449":{"position":[[0,3]]},"544":{"position":[[0,3]]}}}],["1.4",{"_index":44,"t":{"264":{"position":[[0,3]]},"433":{"position":[[0,3]]},"451":{"position":[[0,5]]},"546":{"position":[[0,3]]}}}],["1.5",{"_index":149,"t":{"548":{"position":[[0,3]]}}}],["1.6",{"_index":150,"t":{"550":{"position":[[0,3]]}}}],["1.7",{"_index":151,"t":{"552":{"position":[[0,3]]}}}],["1.pdf",{"_index":160,"t":{"594":{"position":[[0,9]]}}}],["1.sql",{"_index":153,"t":{"563":{"position":[[0,7]]}}}],["1.交并比iou交并比iou交并比i",{"_index":30,"t":{"212":{"position":[[0,20]]}}}],["1.本次sql",{"_index":145,"t":{"539":{"position":[[0,9]]}}}],["2",{"_index":22,"t":{"150":{"position":[[0,4]]},"162":{"position":[[0,8]]},"236":{"position":[[0,6]]},"255":{"position":[[0,6]]},"266":{"position":[[0,2]]},"435":{"position":[[0,15]]},"453":{"position":[[0,8]]},"497":{"position":[[0,7]]},"513":{"position":[[0,6]]},"530":{"position":[[0,6]]},"565":{"position":[[0,6]]},"596":{"position":[[0,6]]},"609":{"position":[[0,10]]}}}],["2.1",{"_index":9,"t":{"98":{"position":[[0,3]]},"151":{"position":[[0,5]]},"164":{"position":[[0,3]]},"226":{"position":[[0,3]]},"267":{"position":[[0,3]]},"404":{"position":[[0,3]]},"531":{"position":[[0,3]]},"566":{"position":[[0,3]]},"610":{"position":[[0,3]]}}}],["2.1.1",{"_index":111,"t":{"405":{"position":[[0,7]]},"456":{"position":[[0,9]]}}}],["2.1.2",{"_index":122,"t":{"457":{"position":[[0,9]]}}}],["2.1.3",{"_index":123,"t":{"459":{"position":[[0,9]]}}}],["2.1字符串string",{"_index":121,"t":{"454":{"position":[[0,12]]}}}],["2.2",{"_index":10,"t":{"100":{"position":[[0,3]]},"154":{"position":[[0,8]]},"228":{"position":[[0,3]]},"269":{"position":[[0,3]]},"407":{"position":[[0,5]]},"461":{"position":[[0,3]]},"533":{"position":[[0,3]]},"568":{"position":[[0,3]]},"612":{"position":[[0,3]]}}}],["2.2.1",{"_index":112,"t":{"408":{"position":[[0,9]]},"463":{"position":[[0,9]]}}}],["2.2.2",{"_index":113,"t":{"410":{"position":[[0,9]]}}}],["2.3",{"_index":12,"t":{"102":{"position":[[0,3]]},"465":{"position":[[0,5]]},"535":{"position":[[0,3]]},"614":{"position":[[0,3]]}}}],["2.3.1",{"_index":124,"t":{"467":{"position":[[0,9]]}}}],["2.4",{"_index":13,"t":{"104":{"position":[[0,3]]},"469":{"position":[[0,5]]}}}],["2.4.1",{"_index":125,"t":{"471":{"position":[[0,9]]}}}],["2.5",{"_index":126,"t":{"472":{"position":[[0,7]]}}}],["2.5.1跟set",{"_index":127,"t":{"474":{"position":[[0,12]]}}}],["2.5.2",{"_index":128,"t":{"476":{"position":[[0,9]]}}}],["2.6",{"_index":129,"t":{"477":{"position":[[0,9]]}}}],["2.6.1",{"_index":130,"t":{"479":{"position":[[0,7]]}}}],["2.6.2",{"_index":131,"t":{"481":{"position":[[0,7]]}}}],["2.7hyperloglog",{"_index":132,"t":{"483":{"position":[[0,14]]}}}],["2.8",{"_index":133,"t":{"485":{"position":[[0,4]]}}}],["2.8.1",{"_index":134,"t":{"487":{"position":[[0,8]]}}}],["2.8.2",{"_index":135,"t":{"489":{"position":[[0,9]]}}}],["2.dicedicedic",{"_index":31,"t":{"214":{"position":[[0,16]]}}}],["2.kmp",{"_index":8,"t":{"96":{"position":[[0,5]]}}}],["2.rdb",{"_index":110,"t":{"402":{"position":[[0,5]]}}}],["2.优化后的sql",{"_index":152,"t":{"554":{"position":[[0,9]]}}}],["2.项目配置action",{"_index":39,"t":{"243":{"position":[[0,17]]}}}],["3",{"_index":37,"t":{"238":{"position":[[0,6]]},"271":{"position":[[0,2]]},"515":{"position":[[0,6]]},"556":{"position":[[0,6]]},"570":{"position":[[0,8]]},"598":{"position":[[0,4]]},"616":{"position":[[0,8]]}}}],["3.1",{"_index":24,"t":{"167":{"position":[[0,3]]},"273":{"position":[[0,3]]},"413":{"position":[[0,3]]},"500":{"position":[[0,3]]},"557":{"position":[[0,9]]},"600":{"position":[[0,8]]},"617":{"position":[[0,3]]}}}],["3.2",{"_index":25,"t":{"169":{"position":[[0,3]]},"275":{"position":[[0,3]]},"415":{"position":[[0,3]]},"502":{"position":[[0,3]]},"619":{"position":[[0,3]]}}}],["3.2git",{"_index":161,"t":{"602":{"position":[[0,10]]}}}],["3.3",{"_index":27,"t":{"171":{"position":[[0,3]]},"277":{"position":[[0,3]]},"417":{"position":[[0,5]]},"604":{"position":[[0,3]]},"621":{"position":[[0,3]]}}}],["3.3.1",{"_index":115,"t":{"418":{"position":[[0,7]]}}}],["3.3.2aof",{"_index":116,"t":{"420":{"position":[[0,13]]}}}],["3.4",{"_index":49,"t":{"279":{"position":[[0,3]]}}}],["3.aof",{"_index":114,"t":{"412":{"position":[[0,5]]}}}],["3.jpa",{"_index":136,"t":{"499":{"position":[[0,7]]}}}],["3.smt",{"_index":118,"t":{"437":{"position":[[0,14]]}}}],["3.sql",{"_index":23,"t":{"166":{"position":[[0,5]]}}}],["3.召回率recallrecallrecal",{"_index":32,"t":{"216":{"position":[[0,23]]}}}],["4",{"_index":28,"t":{"173":{"position":[[0,8]]},"422":{"position":[[0,6]]},"439":{"position":[[0,6]]},"504":{"position":[[0,9]]},"517":{"position":[[0,6]]},"559":{"position":[[0,8]]},"572":{"position":[[0,8]]},"623":{"position":[[0,8]]}}}],["4.1",{"_index":29,"t":{"174":{"position":[[0,3]]},"282":{"position":[[0,3]]},"287":{"position":[[0,3]]},"440":{"position":[[0,3]]},"505":{"position":[[0,3]]},"574":{"position":[[0,3]]}}}],["4.1.1",{"_index":55,"t":{"288":{"position":[[0,6]]}}}],["4.1.10",{"_index":64,"t":{"306":{"position":[[0,7]]}}}],["4.1.11",{"_index":65,"t":{"308":{"position":[[0,7]]}}}],["4.1.12",{"_index":66,"t":{"310":{"position":[[0,7]]}}}],["4.1.13",{"_index":67,"t":{"312":{"position":[[0,7]]}}}],["4.1.14",{"_index":68,"t":{"314":{"position":[[0,7]]}}}],["4.1.15",{"_index":69,"t":{"316":{"position":[[0,7]]}}}],["4.1.16",{"_index":70,"t":{"318":{"position":[[0,7]]}}}],["4.1.17",{"_index":71,"t":{"320":{"position":[[0,7]]}}}],["4.1.18",{"_index":72,"t":{"322":{"position":[[0,7]]}}}],["4.1.19",{"_index":73,"t":{"324":{"position":[[0,7]]}}}],["4.1.2",{"_index":56,"t":{"290":{"position":[[0,6]]}}}],["4.1.20",{"_index":74,"t":{"326":{"position":[[0,7]]}}}],["4.1.3",{"_index":57,"t":{"292":{"position":[[0,6]]}}}],["4.1.4",{"_index":58,"t":{"294":{"position":[[0,6]]}}}],["4.1.5",{"_index":59,"t":{"296":{"position":[[0,6]]}}}],["4.1.6",{"_index":60,"t":{"298":{"position":[[0,6]]}}}],["4.1.7",{"_index":61,"t":{"300":{"position":[[0,6]]}}}],["4.1.8",{"_index":62,"t":{"302":{"position":[[0,6]]}}}],["4.1.9",{"_index":63,"t":{"304":{"position":[[0,6]]}}}],["4.2",{"_index":53,"t":{"284":{"position":[[0,3]]},"442":{"position":[[0,3]]},"507":{"position":[[0,3]]},"576":{"position":[[0,3]]}}}],["4.3",{"_index":75,"t":{"328":{"position":[[0,3]]},"578":{"position":[[0,3]]}}}],["4.3.1",{"_index":76,"t":{"329":{"position":[[0,6]]}}}],["4.3.10",{"_index":85,"t":{"347":{"position":[[0,7]]}}}],["4.3.11",{"_index":86,"t":{"349":{"position":[[0,7]]}}}],["4.3.12",{"_index":87,"t":{"351":{"position":[[0,7]]}}}],["4.3.13",{"_index":88,"t":{"353":{"position":[[0,7]]}}}],["4.3.14",{"_index":89,"t":{"355":{"position":[[0,7]]}}}],["4.3.15",{"_index":90,"t":{"357":{"position":[[0,7]]}}}],["4.3.16",{"_index":91,"t":{"359":{"position":[[0,7]]}}}],["4.3.17",{"_index":92,"t":{"361":{"position":[[0,7]]}}}],["4.3.18",{"_index":93,"t":{"363":{"position":[[0,7]]}}}],["4.3.19",{"_index":94,"t":{"365":{"position":[[0,7]]}}}],["4.3.2",{"_index":77,"t":{"331":{"position":[[0,6]]}}}],["4.3.20",{"_index":95,"t":{"367":{"position":[[0,7]]}}}],["4.3.21",{"_index":96,"t":{"369":{"position":[[0,7]]}}}],["4.3.22",{"_index":97,"t":{"371":{"position":[[0,7]]}}}],["4.3.23",{"_index":98,"t":{"373":{"position":[[0,7]]}}}],["4.3.24",{"_index":99,"t":{"375":{"position":[[0,7]]}}}],["4.3.25",{"_index":100,"t":{"377":{"position":[[0,7]]}}}],["4.3.26",{"_index":101,"t":{"379":{"position":[[0,7]]}}}],["4.3.27",{"_index":102,"t":{"381":{"position":[[0,7]]}}}],["4.3.28",{"_index":103,"t":{"383":{"position":[[0,7]]}}}],["4.3.29",{"_index":104,"t":{"385":{"position":[[0,7]]}}}],["4.3.3",{"_index":78,"t":{"333":{"position":[[0,6]]}}}],["4.3.30",{"_index":105,"t":{"387":{"position":[[0,7]]}}}],["4.3.31",{"_index":106,"t":{"389":{"position":[[0,7]]}}}],["4.3.32",{"_index":107,"t":{"391":{"position":[[0,7]]},"393":{"position":[[0,7]]}}}],["4.3.33",{"_index":108,"t":{"395":{"position":[[0,7]]}}}],["4.3.34",{"_index":109,"t":{"397":{"position":[[0,7]]}}}],["4.3.4",{"_index":79,"t":{"335":{"position":[[0,6]]}}}],["4.3.5",{"_index":80,"t":{"337":{"position":[[0,6]]}}}],["4.3.6",{"_index":81,"t":{"339":{"position":[[0,6]]}}}],["4.3.7",{"_index":82,"t":{"341":{"position":[[0,6]]}}}],["4.3.8",{"_index":83,"t":{"343":{"position":[[0,6]]}}}],["4.3.9",{"_index":84,"t":{"345":{"position":[[0,6]]}}}],["4.jqueri",{"_index":51,"t":{"281":{"position":[[0,11]]}}}],["4.准确率accaccacc",{"_index":33,"t":{"218":{"position":[[0,14]]}}}],["5",{"_index":34,"t":{"220":{"position":[[0,4]]},"580":{"position":[[0,4]]},"625":{"position":[[0,8]]}}}],["5.1",{"_index":154,"t":{"582":{"position":[[0,3]]},"627":{"position":[[0,3]]}}}],["5.2",{"_index":156,"t":{"584":{"position":[[0,3]]},"629":{"position":[[0,3]]}}}],["5.2024/10/31",{"_index":139,"t":{"519":{"position":[[0,18]]}}}],["6",{"_index":157,"t":{"586":{"position":[[0,6]]},"631":{"position":[[0,7]]}}}],["6.1",{"_index":141,"t":{"523":{"position":[[0,3]]},"587":{"position":[[0,3]]},"633":{"position":[[0,3]]}}}],["6.2",{"_index":143,"t":{"525":{"position":[[0,3]]},"589":{"position":[[0,3]]},"635":{"position":[[0,3]]}}}],["6.2024/11/07",{"_index":140,"t":{"521":{"position":[[0,16]]}}}],["6.3",{"_index":158,"t":{"591":{"position":[[0,3]]},"637":{"position":[[0,3]]}}}],["7",{"_index":163,"t":{"639":{"position":[[0,5]]}}}],["8月23日~25日bug",{"_index":162,"t":{"604":{"position":[[4,16]]}}}],["aov",{"_index":19,"t":{"138":{"position":[[0,3]]}}}],["asl",{"_index":4,"t":{"40":{"position":[[0,3]]}}}],["asl和失败asl",{"_index":3,"t":{"36":{"position":[[0,13]]}}}],["b",{"_index":1,"t":{"13":{"position":[[0,2]]},"16":{"position":[[0,11]]},"25":{"position":[[0,17]]}}}],["bf",{"_index":15,"t":{"125":{"position":[[0,3]]}}}],["bfs和df",{"_index":14,"t":{"124":{"position":[[0,7]]}}}],["booth",{"_index":5,"t":{"77":{"position":[[0,13]]}}}],["b和b",{"_index":2,"t":{"30":{"position":[[0,7]]}}}],["case",{"_index":146,"t":{"540":{"position":[[4,6]]}}}],["crud",{"_index":26,"t":{"169":{"position":[[4,4]]}}}],["df",{"_index":16,"t":{"127":{"position":[[0,3]]}}}],["git",{"_index":155,"t":{"582":{"position":[[4,8]]}}}],["githubact",{"_index":38,"t":{"240":{"position":[[0,21]]}}}],["githubpag",{"_index":36,"t":{"232":{"position":[[0,13]]}}}],["group",{"_index":147,"t":{"544":{"position":[[4,5]]}}}],["i18n",{"_index":41,"t":{"258":{"position":[[4,4]]},"269":{"position":[[4,9]]}}}],["ieee754",{"_index":6,"t":{"90":{"position":[[0,9]]}}}],["ipqc",{"_index":159,"t":{"591":{"position":[[4,13]]}}}],["java的stream",{"_index":119,"t":{"440":{"position":[[4,11]]}}}],["jpa",{"_index":138,"t":{"500":{"position":[[4,3]]}}}],["jquery.js和jquery.i18n.properties.j",{"_index":52,"t":{"282":{"position":[[4,37]]}}}],["json",{"_index":48,"t":{"275":{"position":[[4,16]]}}}],["kruskal",{"_index":18,"t":{"133":{"position":[[0,14]]}}}],["local",{"_index":45,"t":{"264":{"position":[[4,6]]},"267":{"position":[[4,11]]}}}],["m1",{"_index":117,"t":{"429":{"position":[[4,2]]}}}],["messagesourceautoconfigur",{"_index":43,"t":{"262":{"position":[[4,30]]}}}],["next",{"_index":11,"t":{"100":{"position":[[4,6]]},"104":{"position":[[4,8]]}}}],["picx",{"_index":35,"t":{"226":{"position":[[4,6]]}}}],["prim",{"_index":17,"t":{"131":{"position":[[0,9]]}}}],["properties文件，并且自定义i18n.config.j",{"_index":54,"t":{"284":{"position":[[4,41]]}}}],["reentrantlock",{"_index":144,"t":{"525":{"position":[[4,15]]}}}],["row_numb",{"_index":148,"t":{"546":{"position":[[4,12]]}}}],["springboot",{"_index":42,"t":{"260":{"position":[[4,15]]}}}],["sql",{"_index":137,"t":{"499":{"position":[[11,5]]},"502":{"position":[[4,5]]}}}],["synchron",{"_index":142,"t":{"523":{"position":[[4,17]]}}}],["vant",{"_index":50,"t":{"279":{"position":[[4,10]]}}}],["vo，dto",{"_index":120,"t":{"442":{"position":[[4,6]]}}}],["vue",{"_index":46,"t":{"271":{"position":[[3,6]]},"576":{"position":[[4,8]]},"578":{"position":[[4,5]]}}}],["vue实例中(main.j",{"_index":47,"t":{"273":{"position":[[4,21]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":1,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"8-几种奇怪恶心的树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","p":1},{"i":31,"t":"折半查找","s":"9-查找","u":"/docs/Foundation/数据结构/查找","p":31},{"i":49,"t":"码制","s":"2-数组表示和运算","u":"/docs/Foundation/计算机组成原理/数组表示和运算","p":49},{"i":92,"t":"给定两个字符串S和B，定位B在S中的位置称之为串的模式匹配，其中S称之为主串，T为模式串。","s":"KMP定位子串","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","p":92},{"i":106,"t":"几种常考的二叉树","s":"5-树、森林的性质总结","u":"/docs/Foundation/数据结构/树、森林的性质总结","p":106},{"i":110,"t":"简单图、多重图、子图","s":"6-图的性质总结","u":"/docs/Foundation/数据结构/图的性质总结","p":110},{"i":144,"t":"1.1基本概念","s":"0-数据结构基础知识","u":"/docs/Foundation/数据结构/数据结构基础知识","p":144},{"i":156,"t":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","s":"intro","u":"/docs/intro","p":156},{"i":159,"t":"1.绪论","s":"1-数据库系统概论复试","u":"/docs/Foundation/数据库/数据库系统概论复试","p":159},{"i":176,"t":"总会有那么几门基础学科是要学的对吧。","s":"Foundation of road","u":"/docs/Foundation/intro","p":176},{"i":178,"t":"插入排序","s":"7-内部排序算法","u":"/docs/Foundation/数据结构/内部排序算法","p":178},{"i":210,"t":"这里讲解肝脏肿瘤分割任务中用到的几个评价指标$IoU、Dice、Recall、Acc$。其中$A代表真实标注区域，B代表模型预测区域$。","s":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","p":210},{"i":222,"t":"Mathematics is the end of all fundamental disciplines","s":"数学是最后的归宿","u":"/docs/Math/intro","p":222},{"i":224,"t":"图片托管，是将md笔记中嵌入的本地图片，托管到服务器中，当在浏览html页面的时候，链接到服务器中的图片地址，进行展示，笔记使用的是PicX工具进行托管。感谢https://picx-docs.xpoet.cn/","s":"2-NoteBook的图片托管","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","p":224},{"i":230,"t":"一、GitHubPages","s":"1-部署Docsaururs","u":"/docs/Web/部署Docaururs/部署Docsaururs","p":230},{"i":245,"t":"Collect the technical stack required for backend development.","s":"持续学习，永葆青春","u":"/docs/Web/intro","p":245},{"i":247,"t":"1.容器&镜像&仓库","s":"1-Docker入门","u":"/docs/Web/Docker/Docker入门","p":247},{"i":257,"t":"1.1 i18n","s":"1-SpringBoot的国际化","u":"/docs/Web/JavaStudy/Web国际化","p":257},{"i":286,"t":"4.1 学生端","s":"1-接口文档","u":"/docs/Web/软件工程课设/接口文档","p":286},{"i":399,"t":"1.1 什么是持久化","s":"1.持久化","u":"/docs/Web/Redis/Redis 持久化","p":399},{"i":424,"t":"1.新增校验位","s":"6-电控栈位表&&钢刀","u":"/docs/Work/电控栈位表&&钢刀","p":424},{"i":444,"t":"1.1 安装和解压","s":"1.Linux中的安装和启动","u":"/docs/Web/Redis/Redis安装&&十大数据","p":444},{"i":491,"t":"这算是第一个正式接手的比较大的项目,有点难度,代码不难写,主要是逻辑难以捋顺.","s":"3-拼板分板配置","u":"/docs/Work/拼板分板配置","p":491},{"i":509,"t":"拼板过站是关键的一个接口，多个部门都在使用，且存在多设备使用的情况，即有并发场景","s":"7-拼板过站接口修改","u":"/docs/Work/拼板过站接口修改","p":509},{"i":527,"t":"1.产能报表需求","s":"4-研控报表组装","u":"/docs/Work/研控报表组装","p":527},{"i":537,"t":"需求：","s":"2-看板重构","u":"/docs/Work/重构看板","p":537},{"i":561,"t":"XLD板子过站打码后需要进行清洗和审核。","s":"5-清洗板","u":"/docs/Work/清洗板","p":561},{"i":593,"t":"1.PDF读取解析","s":"1-PDF解析","u":"/docs/Work/PDF解析","p":593},{"i":606,"t":"1.数据库设计","s":"8-锡膏管理(前后端)","u":"/docs/Work/锡膏后端","p":606}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[0,1.751]],["t/31",[1,0.914]],["t/49",[1,0.914]],["t/92",[2,3.43]],["t/106",[1,0.914]],["t/110",[1,0.914]],["t/144",[3,2.172]],["t/156",[1,0.914]],["t/159",[0,1.751]],["t/176",[1,0.914]],["t/178",[1,0.914]],["t/210",[4,3.43]],["t/222",[5,1.741,6,1.741,7,1.741,8,1.741]],["t/224",[9,2.592,10,2.592]],["t/230",[11,3.43]],["t/245",[12,1.311,13,1.311,14,1.311,15,1.311,16,1.311,17,1.311]],["t/247",[0,1.751]],["t/257",[3,1.641,18,2.592]],["t/286",[1,0.691,19,2.592]],["t/399",[1,0.691,3,1.641]],["t/424",[0,1.751]],["t/444",[1,0.691,3,1.641]],["t/491",[1,0.914]],["t/509",[1,0.914]],["t/527",[0,1.751]],["t/537",[1,0.914]],["t/561",[20,3.43]],["t/593",[21,3.43]],["t/606",[0,1.751]]],"invertedIndex":[["",{"_index":1,"t":{"31":{"position":[[0,4]]},"49":{"position":[[0,2]]},"106":{"position":[[0,8]]},"110":{"position":[[0,10]]},"156":{"position":[[0,30]]},"176":{"position":[[0,18]]},"178":{"position":[[0,4]]},"286":{"position":[[4,3]]},"399":{"position":[[4,6]]},"444":{"position":[[4,5]]},"491":{"position":[[0,39]]},"509":{"position":[[0,40]]},"537":{"position":[[0,3]]}}}],["1",{"_index":0,"t":{"1":{"position":[[0,30]]},"159":{"position":[[0,4]]},"247":{"position":[[0,10]]},"424":{"position":[[0,7]]},"527":{"position":[[0,8]]},"606":{"position":[[0,7]]}}}],["1.1",{"_index":3,"t":{"144":{"position":[[0,7]]},"257":{"position":[[0,3]]},"399":{"position":[[0,3]]},"444":{"position":[[0,3]]}}}],["1.pdf",{"_index":21,"t":{"593":{"position":[[0,9]]}}}],["4.1",{"_index":19,"t":{"286":{"position":[[0,3]]}}}],["backend",{"_index":16,"t":{"245":{"position":[[41,7]]}}}],["collect",{"_index":12,"t":{"245":{"position":[[0,7]]}}}],["develop",{"_index":17,"t":{"245":{"position":[[49,12]]}}}],["disciplin",{"_index":8,"t":{"222":{"position":[[42,11]]}}}],["docs.xpoet.cn",{"_index":10,"t":{"224":{"position":[[92,14]]}}}],["end",{"_index":6,"t":{"222":{"position":[[19,3]]}}}],["fundament",{"_index":7,"t":{"222":{"position":[[30,11]]}}}],["githubpag",{"_index":11,"t":{"230":{"position":[[0,13]]}}}],["i18n",{"_index":18,"t":{"257":{"position":[[4,4]]}}}],["iou、dice、recall、acc$。其中$a代表真实标注区域，b",{"_index":4,"t":{"210":{"position":[[0,68]]}}}],["mathemat",{"_index":5,"t":{"222":{"position":[[0,11]]}}}],["md笔记中嵌入的本地图片，托管到服务器中，当在浏览html页面的时候，链接到服务器中的图片地址，进行展示，笔记使用的是picx工具进行托管。感谢https://picx",{"_index":9,"t":{"224":{"position":[[0,91]]}}}],["requir",{"_index":15,"t":{"245":{"position":[[28,8]]}}}],["stack",{"_index":14,"t":{"245":{"position":[[22,5]]}}}],["s和b，定位b在s中的位置称之为串的模式匹配，其中s称之为主串，t",{"_index":2,"t":{"92":{"position":[[0,45]]}}}],["technic",{"_index":13,"t":{"245":{"position":[[12,9]]}}}],["xld",{"_index":20,"t":{"561":{"position":[[0,20]]}}}]],"pipeline":["stemmer"]}},{"documents":[],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[],"invertedIndex":[],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"左右子树高度之差的绝对值不超过1的二叉排序树称为平衡二叉树。","s":"平衡二叉树","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"","p":1},{"i":5,"t":"找到合适的位置插入，然后判断类型进行处理： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入","p":1},{"i":7,"t":"删除一个节点后，会导致一棵子树失衡，假设删除w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z的： LL：右旋 RR：左旋 LR：先左后右 RL：先右后左 删除和插入操作类似，不同之处在于删除的调整，可能会导致另外的不平衡，需要反复多次进行调整。","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除","p":1},{"i":10,"t":"什么是红黑树，红黑树是一种特殊的二叉排序树，考试内容不会很深，简单清楚性质概念和插入操作即可，删除操作很难，考察概率不大。 主要性质： 每个结点或黑或红 根节点必黑 叶节点必黑，这里的叶节点是外部结点 不存在两个相邻的红节点 任意一个节点，该节点到任意一个叶节点的简单路径上，经过的黑节点数目是一样的 顺口溜： info 左根右（排序） 根叶黑 不红红 黑路同 两个结论： 从根出发到叶节点的路径不大于最短路径的一半 有n个内部红节点的红黑树高度h≤2∗log2(n+1)h \\le 2*log_{2}{(n+1)}h≤2∗log2​(n+1) 插入的节点初始化为红","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念","p":1},{"i":12,"t":"第一步先确定要插入的位置 若为根节点，直接染黑 如果不破坏红黑树特征，正常 如果破坏了“不红红”的条件，找到父亲的兄弟结点，也就是叔结点，按照叔结点的两种情况去调整:(1)红叔叔（2）黑叔叔 （1）红叔叔 叔、父、爷结点染色（颜色反转），同时爷结点变成新节点（变黑则无所谓，变红则要再调整）。 （2）黑叔叔 找父节点和爷结点，判断当前节点对于爷结点的位置进行调整： LL：右旋，父节点换爷结点，同时父和爷染色 RR：左旋，父节点换爷结点，同时父和爷染色 LR：先左后右，当前节点先左后右，儿结点换爷结点，同时染色 RL：先右后左，当前节点先右后左，儿结点换爷结点，同时染色","s":"插入操作","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入操作","p":1},{"i":15,"t":"info 树中每个结点至多有m个子树，即一个节点中至多m-1个关键字 根节点至少两棵子树 初根节点外的所有非叶节点，至少[m/2]（向上取整）棵子树，即至少有[m/2]（向上取整）-1个关键字 所有叶节点在最后一层（NULL节点，空指针）","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-1","p":1},{"i":20,"t":"在B树中找节点 在节点中中找关键字 与节点中的关键字进行比对，其中节点的左指针指向的节点集合小于该节点，右指针指向的节点集合大于节点，依据这种特性，一层层进行查找，如果到最后NULL节点，则说明找不到了。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找","p":1},{"i":22,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1] 定位，找到应该插入的位置 插入，如果关键字个数插入后在正确范围内，则直接插入，否则进行处理 多的情况处理如下： 如下处理：","s":"插入","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#插入-1","p":1},{"i":24,"t":"明确一点，一个节点内的关键字个数[（m/2）向上取整-1，m-1]，所以删除后节点的关键字个数不能小于（m/2）向上取整-1。 直接删除，如果删除满足关键字的最低要求，则直接删除 如果在非终端节点，则用直接前驱或者直接后继来代替 如果在兄弟够借，即目前关键字删除前为**（m/2）向上取整-1**，且其左（右）兄弟的关键字数目大于**（m/2）向上取整，**则从兄弟中拿一个节点，放到父节点中，然后从父节点中拿一下下来填充给不满足要求的节点，称为父子换位法 这里的92处已经不满足，但是左兄弟仍然充裕，则进行父子换位法： 兄弟不够借。当兄弟不够借的时候，当前节点+兄弟结点的个数为m-2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m-1，同时父节点关键字数目-1。如果父节点不满足要求，则进行兄弟够借和兄弟不够借两种试探，进行填补跟合并。如果操作使得根节点-1变为0，则直接删除根节点，换成新的根节点。(切记不可进行前驱后继填补) 此时需要父节点落下70，进行合并： 73处不满足，同时左兄弟不够借，则82落下，进行合并： 删除根节点，合并得新根节点：","s":"删除","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#删除-1","p":1},{"i":27,"t":"m阶B+树每个结点最多m棵子树（也就是最多m个孩子节点） 非叶、根节点至少有两棵子树，其他每个分支节点至少有（m/2）向上取整棵子树 节点的子树个树和关键字个数一样 叶节点包含所有关键字，也就是全部关键字都会存储在叶子节点，节点内按大小排序 所有分支节点，中仅仅包含它所指向的子节点中的最大值，及其子节点的指针 叶节点之间会有指针穿在一起（支持顺序查找） 如上：3，9，15中存储的分别是三个子节点中的最大值，最后绿色的叶节点之间有指针连在一起。","s":"概念","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#概念-2","p":1},{"i":29,"t":"从根出发，找到合适的位置（处于哪个子节点），过程中会在非叶节点中遇到关键字，但这并不是查找成功，要一直查到叶节点中才算成功，这是区别于B树的一个地方，B树是能够在非终端节点中就找到结果的。 如下是一个查找成功的例子，查找9，从根出发，直到叶节点。 如下是查找失败的例子：从根出发，进入15的子节点，然后进入9的子节点，对比了6->8，发现8已经大于7，则查找失败了。 总之无论成功与否，最终都一定要走到最下面的一层节点。","s":"查找","u":"/docs/Foundation/数据结构/几种奇怪恶心的树","h":"#查找-1","p":1},{"i":34,"t":"折半查找思想，将给定值key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high的时候会结束查找，最终显示查找失败。折半不适用于链式存储 直接看算法： int Binary_Search(int a[],int key){ int len = len(a); int low = 0;high = len - 1; while(low<=high){ mid = (low + high)/2; if(mid == key)reutrn mid; if(mid < key){ high = mid - 1; } else{ low = mid + 1; } } return }","s":"思想","u":"/docs/Foundation/数据结构/查找","h":"#思想","p":31},{"i":37,"t":"1）成功： 层数乘以结点数求和再除以长度 成功ASL为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4​ 2）失败： 将图中的二叉树补上结点，原来的每个叶子结点都补成度为2的结点 这些失败结点是虚拟的，实际是不存在的，所以计算的时候，层数是按它的父节点来计算 所以图中的失败ASL为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12是失败结点。","s":"计算成功ASL和失败ASL","u":"/docs/Foundation/数据结构/查找","h":"#计算成功asl和失败asl","p":31},{"i":39,"t":"分块查找综合了顺序查找和折半查找的优点，将数据分组，组内可以无序，但是组间必定有序，然后分别记录各组内的最值key。查找的时候先找最值Key，再按分组指针去顺序查找。 下图举例：","s":"分块查找","u":"/docs/Foundation/数据结构/查找","h":"#分块查找","p":31},{"i":41,"t":"1）成功 先找到分块的key节点，计数一次，然后去块间顺序查找，依次+1 2）失败 整体失败的情况无法预估，题目更可能考察某一个点的查找失败，与成功类似，块间顺序查找完全部元素，即为查找失败，其实就是块长+1","s":"ASL","u":"/docs/Foundation/数据结构/查找","h":"#asl","p":31},{"i":44,"t":"一种特殊的数据结构，能够根据元素关键字计算出他在散列表中的存储地址","s":"基本概念","u":"/docs/Foundation/数据结构/查找","h":"#基本概念","p":31},{"i":46,"t":"散列哈希函数：Addr=H(key)Addr = H(key)Addr=H(key)建立起关键字和散列地址的映射关系，408一般考察除留余数法。 散列表表长是m，取不大于m的最大质数p，构建函数H(key)=key%pH(key) = key \\% pH(key)=key%p，则产生的地址落在区间[0,p−1][0,p-1][0,p−1] **处理冲突：**冲突是指经过散列函数映射的地址上已经有关键字，则需要采取一定处理办法解决冲突。如下解决冲突办法： 开放地址法​ 1、线性探测： 一个一个向下探测，按di=0,1,2...d_i = 0,1,2...di​=0,1,2...进行探测 2、平方探测（二次探测法）： 按照di=02,12,−12,22,−22.........k2,−k2d_i = 0^2,1^2,-1^2,2^2,-2^2.........k^2,-k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k \\le m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3的素数 3、双散列 两个散列函数：Hi=(H(key)+i∗Hash2(key))%mH_i = (H(key)+i*Hash_2(key)) \\% mHi​=(H(key)+i∗Hash2​(key))%m 4、伪随机序列法 当did_idi​为伪随机数序列时候 拉链法​ 一张图理解","s":"散列函数","u":"/docs/Foundation/数据结构/查找","h":"#散列函数","p":31},{"i":48,"t":"查找成功是针对关键字的，计算出查找每个关键字查找成功的次数，除以关键字个数即可 查找失败是针对散列函数的，由散列函数的质数p可知:散列地址在[0,p−1][0,p-1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p即可","s":"查找成功和失败","u":"/docs/Foundation/数据结构/查找","h":"#查找成功和失败","p":31},{"i":52,"t":"除基取余法（针对整数）​ 拿十进制的数除以基数（什么进制就是什么基数），留下余数和商，继续执行除基取余，知道商为0，最后将余数从下向上串起来，得到整数部分。 乘基取整法（针对小数）​ 拿小数不断乘以基数，取掉最高位（小数点前一位），知道乘积的结果为1.000....，将结果从下向上串起来即可。","s":"十进制转换任意进制","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#十进制转换任意进制","p":49},{"i":54,"t":"机器数的最高位表示数据的符号，剩下的数据位表示数据的绝对值真值。假设字长为n+1位。 则小数表示范围：−(1−2−n)≤x≤1−2−n-(1-2 ^{-n})\\le x \\le 1-2^{-n}−(1−2−n)≤x≤1−2−n， 整数表示范围：−(2n−1)≤x≤2n−1-(2^{n}-1) \\le x \\le 2^n -1−(2n−1)≤x≤2n−1。 其中原码的0有两种表示：10000和00000。","s":"原码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码","p":49},{"i":56,"t":"基于原码的不方便运算二设计的，模二运算。正数的补码和原码一样，负数的补码是在原码的基础上，除符号位外取反，末位加1（从右到左找到第一个1，前面的数取反即可）。如果是从x的补码求-x的补码，也是上述的步骤，同时将符号位进行变换即可。 对于字长n+1位。 小数表示范围：−1≤x≤1−2−n-1 \\le x \\le 1-2^{-n}−1≤x≤1−2−n 整数表示范围：−2n≤x≤2n−1-2^n \\le x \\le 2^n -1−2n≤x≤2n−1 零的表示唯一，都是0.000","s":"补码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码","p":49},{"i":58,"t":"正数的反码同原码，负数的反码等于原码的数值为全部取反。其中反码的零也有正负之分。","s":"反码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#反码","p":49},{"i":60,"t":"移码常常用来表示浮点数的阶码，理解为在真值上加上一个常数（偏置值），通常是2n2^n2n，相当于x在数轴上正向偏移若干单位，移码等于补码的符号位取反。 移码的零表示唯一。","s":"移码","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#移码","p":49},{"i":63,"t":"码制 添加 正数 原、补、反 0 负数 原 0 补 左1 右0 反 1","s":"算术移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#算术移位","p":49},{"i":65,"t":"无脑0","s":"逻辑移位","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#逻辑移位","p":49},{"i":69,"t":"原码加减计算在计算机中容易失误得不到正确的结果，于是计算机内部的加减运算都是采用补码进行运算的，减法的本质是加法，等于加上一个负数的补码。步骤： 按二进制规则，逢二进一 加法：直接相加；减法：减数转换成负数补码后和被减数相加 符号位和数值位一起参与运算，加减法的符号位在运算中直接得到 最终运算结果的高位丢弃，保留n+1位，运算结果还是补码","s":"运算步骤","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#运算步骤","p":49},{"i":71,"t":"零标志ZF，ZF为1代表全0 溢出标志OF，为1表示溢出，对于无符号数这个标志没用 符号标志SF，表示结果的符号 进/借位标志CF，对无符号有用，有符号数的运算没用","s":"四个标志","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#四个标志","p":49},{"i":73,"t":"1）一位符号位 参加运算的两个数符号相同，结果与原操作数不同的话，表示溢出。 V=AsBsSsˉ+AsˉBsˉSsV = A_sB_s \\bar{S_s}+\\bar{A_{s}}\\bar{B_{s}}S_sV=As​Bs​Ss​ˉ​+As​ˉ​Bs​ˉ​Ss​ 逻辑表达式为1时候为溢出 2）双符号位 模四补码，运算结果两个符号位一样则不溢出，否则是溢出。 00 11 01上溢出 10下溢出 3）一位符号位 采用一位符号位结合仅为情况判断溢出，若符号位进位CF和最高位数位的进位C1一样表示没有溢出，反之溢出。","s":"溢出判别","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#溢出判别","p":49},{"i":76,"t":"符号位单独运算，被乘数和乘数按绝对值进行运算 初始ACC里面设置为00.0000（00符号位隐藏） 乘数最低位为1，则加上被乘数，为0则加0 执行完3后，整体带上ACC的符号位进行右移（逻辑） 重复执行加法和右移n次即可 手算模拟：","s":"原码乘法","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码乘法","p":49},{"i":78,"t":"在乘数后面初始加一个辅助位0，根据辅助位和乘数的最后一位的加减结果判断下一步加什么。 x和y计算出对应的x和y的补码以及-x的补码 初始ACC设置00.0000，MQ中为乘数，乘数后添加一个辅助位（辅助位就是MQ后一位） 辅助位-MQ最低位：为1则加x的补码，为0则加0，为-1则加-x的补码 执行3后，整体右移（逻辑）一位 整体执行3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n次的右移） 比较：","s":"补码乘法（booth算法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码乘法booth算法","p":49},{"i":80,"t":"符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 **第一步是用被除数-除数的补码 ** 判断余数，余数为负商0，并且加上除数的补码，余数为正商0，不恢复 执行完4后，余数进行逻辑左移 加减n+1次，左移n次 流程图：","s":"原码除法（恢复余数）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法恢复余数","p":49},{"i":82,"t":"由余数和除数的符号共同决定，不需要恢复余数。 符号位单独运算 计算x、y的绝对值，y的补码和-y的补码 被除数减去除数，判断余数正负 余数为负，商0，余数左移并且加上除数；余数为正，商1，余数左移并且减去除数 加减n+1次，左移n","s":"原码除法（加减交替发，不恢复余数法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#原码除法加减交替发不恢复余数法","p":49},{"i":84,"t":"符号位参与运算 计算x、y的绝对值，y的补码和-y的补码 第一步：被除数和除数同号，则被除数减去除数，被除数和除数异号，则加上除数 判断除数和余数是否同号，同号商1，余数左移减去除数；异号商0，余数左移加上除数 执行4操作n次，最后一步恒置1，“末位恒置1”","s":"补码除法（加减交替法）","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#补码除法加减交替法","p":49},{"i":87,"t":"表示为：N=(−1)S∗M∗REN =(-1)^S * M*R^EN=(−1)S∗M∗RE S的取值决定正负；M表示尾数，R是基数（2,4,8...），E是阶码，表示2E2^E2E","s":"浮点数的表示格式","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#浮点数的表示格式","p":49},{"i":89,"t":"正数：0.1xxxxx 负数：1.1xxxxx 对于基数为2的，要求小数点后一位不全为0，也就是要为1 对于基数为4的，要求小数点后两位不全为0 策略： 左规：尾数左移，则阶码要-1 右规：尾数右移，阶码+1","s":"规格化","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#规格化","p":49},{"i":91,"t":"小概念​ 符号位：1；阶码：8；尾数：23 其中尾数前面隐含了一个1.，所以尾数的精度是24，能表示24位有效数字 符号S（31） 阶码E（23~30） 尾数M（0~22） 1+8+23组合。IEEE754标准表示成浮点数真值为：(−1)S∗1.M∗2E−127(-1)^S *1.M*2^{E-127}(−1)S∗1.M∗2E−127 其中注意阶码E是移码表示的。 阶码的全0和全1： 阶码 符号 尾数 值 全0 0 0 0 全0 1 0 -0 全1 0 0 正无穷 全1 1 0 负无穷 浮点数的加减运算​ 给定两个数，先转化成二进制表示形式。 对阶，两阶码相减，小的向大的对齐，阶码对齐过程中尾数也会进行移动 尾数加减（符号参与运算，一般都是两位符号） 将尾数规格化：正数0.1xxx，负数1.1xxx，规格化过程左移或者右移要进行阶码的改动 舍入：0舍1入、末位恒置1、截断 溢出判断 溢出的两种情况： 右规和尾数舍入，尾数大的舍入时候，末位加1，可能导致尾数溢出，此时会进行右规调整，但同时会影响到阶码，导致阶码溢出。 左规，进行左规时，阶码减1，可能导致下溢 结合一个例题：","s":"IEEE754标准","u":"/docs/Foundation/计算机组成原理/数组表示和运算","h":"#ieee754标准","p":49},{"i":93,"t":"给定两个字符串S和B，定位B在S中的位置称之为串的模式匹配，其中S称之为主串，T为模式串。","s":"KMP定位子串","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"","p":92},{"i":95,"t":"一种很基础朴素的方法就是暴力匹配，采用定长顺序存储结构，不依赖于串的操作进行暴力匹配。 算法思想 ：采用暴力匹配的方法，对主串和模式串设置i和j两个指针，从左到右一个一个进行匹配，当出现不匹配时，主串指针回溯，模式串从新开始进行匹配。 初始处理： 进行匹配： 指针回溯： 指针回溯： 代码如下 int Index(String S,String T){ int i = 1,j = 1; while(i <= S.len && j <= T.len){ if(S.ch[i] == T.ch[i]){ // 匹配则指针向前移动 ++i; ++j; } else{ i = i - j + 2; //指针回溯 j = 1; } } if(j > T.len)return i - T.len; //匹配成功返回第一个定位 return 0; } 时间复杂度分析：分析最坏时间复杂度，如果主串前部分一直和模式串不能匹配，则指针会一直进行回溯，直到进行到最后的串，成功匹配，此时的时间复杂度取决于主串S和模式串T的长度n和m。时间复杂度为O(nm)O(nm)O(nm)","s":"1.朴素的模式匹配算法","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#1朴素的模式匹配算法","p":92},{"i":97,"t":"很显然如果采用暴力算法，当主串和模式串不长的情况下，时间复杂度还算可行，但是一旦长度很长，时间开销将会很大。于是三位大牛：D.E.Knuth、J.H.Morris和V.R.Prat一起发明了KMP算法，致力于解决这个主串指针回溯的问题来降低时间开销。KMP算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。KMP算法详解-彻底清楚了(转载+部分原创) - sofu6 - 博客园 (cnblogs.com)","s":"2.KMP","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#2kmp","p":92},{"i":99,"t":"算法思想：算法思想是按照我个人理解，KMP的核心就是基于朴素匹配算法，解决其主串指针回溯，从而降低时间开销。 过程描述对于S和T的匹配，当有相同部分，则指针将会向前移动，当出现不匹配时，是否有必要进行回溯呢？答案当然是否，因为对于主串来说，对于匹配的部分是已知信息，能否根据已知信息来判断模式串指针的下一步移动呢，从而达到降低时间复杂度的效果。由此，主串指针是不需要移动的，只需要根据已知信息来判断模式串的指针移动即可。 通过如下图片来感受下KMP的简化： 从上图发现当移动到C和D时，不匹配，肉眼观察，可以直接将j移动成如下的情况： 为什么呢？因为肉眼观察，前面的ABA是匹配的鸭！ 从上述的过程分析，我们可以发现当匹配失败时，j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k个字符是一样的。使用数学公式进行如下描述： ch[0...k−1]=ch[j−k...j−1] ch[0...k-1] = ch[j-k...j-1] ch[0...k−1]=ch[j−k...j−1] 使用如下图片进行理解： 通过上述的分析，我们可以发现，进行匹配的过程中，对于主串的指针，是一往无前，无需回溯的，算法的核心在对于模式串的指针移动，当移动到不匹配的位置时候，需要进行计算，确定指针j的下一步走向。","s":"2.1 算法思想","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#21-算法思想","p":92},{"i":101,"t":"接下来就是重点，我们现在知道了对于算法的核心就是当出现不匹配时候，我们的指针j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next数组的方法。 1.王道老师的方法​ 根据课程的所给方法，我总结一下，该方法的相对直观，在手算中十分方便，目测观察，当主串和模式串出现不匹配时候，观察对于模式串指针，如何移动能使得在下一步匹配前，有较多模式串和主串已经匹配。如下图例，首先要初始化next数组，next数组的1和2无脑填0和1，不要问为什么，很明显，自己推一下即可： 当出现不匹配时候，在不匹配的前段，划一条竖线，观察模式串的指针j移动。 向前移动至2，o不匹配。 再向前移动到1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0的会执行++，所以没有意义) 所以在next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1处。 后面的步骤都是依次类推，该方法适合手算next。 2.重复前后缀计算法​ 当我们匹配模式串和主串到一个不匹配的位置时候，我们要进行指针j的跳转。但是由于前面匹配的信息，我们可以发现 ch[0∼k−1]=ch[j−k∼j−1] ch[0 \\sim k-1] = ch[j-k \\sim j-1] ch[0∼k−1]=ch[j−k∼j−1] 通过下图可以理解更透彻： 根据上图，当匹配到指针j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的AB相等呀，而主串中指针扫过的位置，必有AB匹配，那么我们可以直接跳过前部的AB匹配。我们可以得出公式 当出现S[i]≠T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]\\begin{aligned} &当出现S[i] \\neq T[i] \\\\ &S[i-j \\sim i-1] = T[0 \\sim j-1] \\\\ &其中T[0 \\sim k-1] = T[j-k \\sim j-1] \\\\ &所以S[i-k \\sim i-1] = T[0 \\sim k-1] \\end{aligned}​当出现S[i]=T[i]S[i−j∼i−1]=T[0∼j−1]其中T[0∼k−1]=T[j−k∼j−1]所以S[i−k∼i−1]=T[0∼k−1]​ 上述公式就是我们求解next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba}。 接下来我们来模拟感受一下这个求解过程。首先next的1和2还是直接填0和1，没有为什么。 我们来看下图 当模式串指针走到j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j-1个字符串有关。我们看前部分字符串，发现共同前后缀是AB，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是C这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是ABC？长度为2，那么next[j+1]就是在next[j]的基础上加1即可，这个是可以递推出来的。我们发现如下规律 当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]\\begin{aligned} &当有T[k] =T[j] \\\\ &可以很快得出next[j]=next[j-1]+1 \\\\ &因为我们可以得出T[0 \\sim k-1] = T[j-k \\sim j-1] (next[j] = k) \\\\ &这时候因为T[k] =T[j] 那我们可以得出T[0 \\sim k-1] + T[k] = T[j-k \\sim j-1] +T[j]\\\\ &也就是T[0 \\sim k] = T[j-k \\sim j] \\end{aligned}​当有T[k]=T[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出T[0∼k−1]=T[j−k∼j−1](next[j]=k)这时候因为T[k]=T[j]那我们可以得出T[0∼k−1]+T[k]=T[j−k∼j−1]+T[j]也就是T[0∼k]=T[j−k∼j]​ 上述讨论的是当T[j] = T[k]的情况，那如果出现不相等的情况，如何处理呢？如下图 对于这种情况，我们执行k=next[k]k=next[k]k=next[k]。为什么呢？我们再来看下图： 当到了T[k]≠T[j]T[k]\\neq T[j]T[k]=T[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是B的位置，此时执行判定T[k]=T[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k = next[k] = 1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0。 阅读文字难以理解，可以参考一个up主的讲解视频KMP算法之求next数组代码讲解_哔哩哔哩_bilibili。","s":"2.2 next数组","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#22-next数组","p":92},{"i":103,"t":"阅读到这里，next数组的求解就算结束了。我们来看下next数组的求解代码： void get_next(String T,int next []){ int j = 1,k = 0; next[1] = 0; while(k<T.len){ if(k==0 ||T.ch[j] == T.ch[k]){ //如果相等 next[++j] = ++k; //next[j+1] = next[j] + 1 } else{ k = next[k]; //回头寻找 } } } KMP算法： int Index_KMP(String S,String T,int next[]){ int i = 1;j = 1; while(i<S.len && j<T.len){ if(j==0||S.ch[i] == T.ch[j]){ ++i; ++j; } else{ j = next[j]; } if(j>T.len) return i - T.len; return 0; } }","s":"2.3 求解代码","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#23-求解代码","p":92},{"i":105,"t":"仔细观察前述的图解跟代码，会发现，尽管主串指针不会回溯，但是模式串中的指针跳转重新匹配的过程中，会出现重复匹配失败的问题，从而浪费时间。例如下图： 我们观察可以发现，匹配C和B时候会发现不匹配，此时的next会跳转到2，从AB再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟AB中的B进行匹配成功的，此时产生了一次无效匹配，然后next到1。 针对next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果T[next[j]]等于T[k]，那么直接跳过这一层匹配，改为T[next[next[j]]即可。也就是跳过了中间无效的T[next[j]]和T[k]的比较。 代码实现 void get_nextval(String T,int nextval[]){ int j = 1,k = 0; nextval[1] = 0; while(j < T.len){ if(j == 0 || T.ch[j] == T.ch[k]){ ++j; ++k; if(T.ch[j] != T.ch[k]) nextval[j] = k; //不相等，则保留原有的最长重复前后缀 else nextval[j] = nextval[k]; //相等那就跳转，减少时间开销 } else k = nextval[k] } }","s":"2.4 next数组优化","u":"/docs/Foundation/数据结构/2.1-算法/KMP定位子串","h":"#24-next数组优化","p":92},{"i":109,"t":"就是常见的二叉树，除了叶节点外，每个结点都是有两个分支的，这种二叉树也是最好计算的。 & 1.已知树高求结点总数：sum = 2^h-1\\\\ & 2.已知编号i求双亲：(i/2)向下取整\\\\ & 3.已知编号i求两个儿子：左孩子2i，右孩子2i+1\\\\ \\end{aligned}$$ ### 完全二叉树 > 这种二叉树是少了一些结点的满二叉树，每个几点的编号都都跟1~n一一对应，也就是说，只允许在右屁股部分缺少一些叶子节点，注意，少也是少叶子节点。 ![image.png](https://github.com/Rachel1771/picx-images-hosting/raw/master/20241227/image-(8).969t9t3wv9.webp) 上述就是一个完全二叉树的例子，需要注意，因为是1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3号结点。 ### 二叉排序树 > 以根节点为比较标准，左边的全部结点均小于根节点，右边的全部结点均大于根节点，左右子树又各自为二叉排序树。 可以从性质发现，要找最小的结点，只需去找左子树的最左叶结点即可。同理最大结点在右子树的最右叶结点。 ### 平衡二叉树 > 树中任意一个结点的左子树和右子树的深度之差不超过1 ### 二叉树数据结构代码实现 **1）顺序存储** ```cpp typedef struct Node{ int data; int isEmpty; }TreeNode; void Init(TreeNode T[],int len){ for(int i = 0;i<len;i++){ t[i].isEmpty = 1; } } ``` ```cpp bool isEmpty(T[],int x){ if(x>=len || x<1){return ture}; else{ return fasle; } } //找到父节点 int findparent(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ index = x/2; if(isEmpty(index))return 0; esle return index; } } //找右孩子 int findright(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ right = 2x + 1; if(isEmpty(right))return 0; esle return right; } } //找左孩子 int findleft(T[],int x){ if(isEmpty(x) || x = 1)return 0; else{ left = 2x; if(isEmpty(left))return 0; esle return left; } } //这里的代码都是按照其实结点从1开始的，如果是0开始的还要进行改变 ``` ```cpp void PreSearch(T[],int index){ if(isEmpty(index))return ; esle{ visit(T[index]); PreSearch(T[],2*index); PreSearch(T[],2*index + 1); } } //后序跟中序只需要调换顺序即可 ``` ## 二叉树性质 1、非空二叉树的叶结点等于度为2的结点数加1，即n0= n2 + 1 2、二叉树第k层上最多有2k-1 个结点 3、高度为k的二叉树最多有2k -1个结点 4、对于结点i(i>1)的编码： $$\\begin{aligned} & 1.若i为偶数则双亲为i/2向下取整 \\\\ & 2.若i为奇数则双亲为(i-1)/2 \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}$$ 5、求树高 $log_2(n+1)向上取整，或者是log_2(n)向上取整+1$ ## 树和森林 ### 树和二叉树的转换 **“左指针串糖葫芦法”** 每个结点左指针指向他的第一个孩子，右指针指向它在树中的相邻右兄弟，左孩子右兄弟规则，构造后的整体看起来就是根节点出发将孩子串了起来，由于这个规则，这是一颗没有右子树的二叉树。 ![image.png](https://github.com/Rachel1771/picx-images-hosting/raw/master/20241227/image-(9).83a3yx8fu3.webp) ### 森林转二叉树 **”孩子兄弟表示“** 将森林里面的树都变成二叉树，每个根节点都是兄弟，将第一个根节点作为二叉树的根节点，剩下的二叉树都依次接到右子树中。 ![image.png](https://github.com/Rachel1771/picx-images-hosting/raw/master/20241227/image-(10).7pd1kn253.webp) **森林转二叉树** 摘下第一个右子树，根节点跟左子树就是第一颗树的二叉树，其剩下的右子树又可以依次进行拆解，直到没有右子树为止。 ### 二叉树遍历的对应关系 | **树** | **森林** | **二叉树** | | --- | --- | --- | | 先根 | 先序 | 先序 | | 后根 | 中序 | 中序 | ### 代码实现树、森林 如下是三种实现的数据结构：双亲表示法、孩子表示法、孩子兄弟表示法 ![image.png](https://github.com/Rachel1771/picx-images-hosting/raw/master/20241227/image-(12).2oblghufvq.webp) **1）双亲表示法（顺序存储）** 每个结点都设计一个伪指针指向自己的父亲 ```cpp typedef struct Node{ int data; int parent; }Node*; Node n[maxsize]； for(int i = 0;i < maxsize;i++) n[i].parent = -1; ``` **2)孩子表示法** 如上图所示，每个结点后都会串着一串孩子链表 ```cpp typdef struct Node{ int data; struct Node * next }Child; //对应的是左边的结构，也是一个头的开始 typedef struct Tree{ ElmentType data; Child *firstChild; }*TreeList; //树节点 ``` **3）孩子兄弟表示法** ```cpp typedef struct Node{ int data; struct Node* leftchild,nextsibling; //分别指向左边第一个孩子，和右边的兄弟 }*Tree; ``` ## 考试选择盲猜 ### 完全二叉树求结点 给出完全二叉树的总结点数，求解叶结点数。对于这种问题可以如下求解： > 估计倒数第二层，根据估算求出最后一层有多少个叶结点，反过来求解用了上一层多少个结点，再计算上一层剩下的叶结点数，加上最后一层的结点数即可，数目大设x求解 给完全二叉树的叶结点个数，求解结点数最多的情况，求解： :::success 对于这种问题求解，就要考虑完全二叉树的性质，其缺少，只能是缺少右边屁股的叶结点。估计出合适的层次范围(倒数第二层)，然后裂解到最后一层，根据叶结点个数进行分布，计算。**注意看看能不能多分裂出来一些，但是叶子结点数仍然不变的情况，这里不要直接死算第一步就结束了，要记得画图观察观察。** ::: ### 树高问题 给定结点数求树高最大最小的问题： :::warning 满二叉树的情况下树就是最矮的，反之每一层都有一个度为1的结点时，树最高 ::: ![image.png](https://github.com/Rachel1771/picx-images-hosting/raw/master/20241227/image-(13).1lbw5lyxum.webp) ### 右节点（右指针域）为空问题 1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m，求解 :::warning 首先要搞清楚谁的右节点(右指针域为空)，对于树来说，转换后的二叉树根节点的右指针域肯定是空的，然后是根节点下来每一个分支都会到最右边的指针域为空。所以右节点的右指针域为空的总数为：非终端结点数+1，二叉树的非终端结点数为：n-m，所以总数为n-m+1 ::: 2.对于森林的也是如此，森林先转二叉树然后合并，过程是一样的，求解方法一样。","s":"满二叉树","u":"/docs/Foundation/数据结构/树、森林的性质总结","h":"#满二叉树","p":106},{"i":112,"t":"满足如下条件的就是简单图： 不存在重复边 不存在顶点到自己的表(自环) 多重图： 若图中某两个顶点的边数大于1 允许顶点通过一条边和自身关联 数据结构里面只讨论简单图 子图： G=(V,E)和G′=(V′,E′)G = (V,E)和G^{'}=(V^{'},E^{'})G=(V,E)和G′=(V′,E′) 其中V′是V的子集E′是E的子集V^{'}是V的子集E^{'}是E的子集V′是V的子集E′是E的子集 如果顶点集相同，则是生成子图","s":"简单图、多重图、子图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单图多重图子图","p":110},{"i":114,"t":"一个路径序列中不存在重复节点的是简单路径 除第一个顶点和最后一个顶点外，其余节点不重复出现的是简单回路","s":"简单路径、简单回路","u":"/docs/Foundation/数据结构/图的性质总结","h":"#简单路径简单回路","p":110},{"i":116,"t":"这些术语跟有向图区分开来 连通 连通图 连通分量 完全图 度 两个顶点可达 图任意两点连通 极大连通子图就是连通分量，要求包含所有边 边数为：n(n-1)/2 度数之和等于边的两倍：Sumn = 2e","s":"无向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#无向图","p":110},{"i":118,"t":"强连通图 强连通分量 完全图 度 v到w和w到v都有路径 极大强连通子图就是强连通分量 边数为：n(n-1) 出度=入度=e","s":"有向图","u":"/docs/Foundation/数据结构/图的性质总结","h":"#有向图","p":110},{"i":121,"t":"邻接矩阵是采用二维数组的存储方式来存储图，为v行v列的矩阵，其中若vi到vj有路径，则A[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则A[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则A[i][j]为1，或者是对应的路径权值。 当(vi,vj)是G的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{aligned} &当(v_i,v_j)是G的边，则a[i][j] = 1 \\\\ &否则a[i][j] = 0或无穷 \\\\ \\end{aligned}​当(vi​,vj​)是G的边，则a[i][j]=1否则a[i][j]=0或无穷​ 值可以是权值，有向图和无向图有着一定的区别（无向图对称，可以压缩的），能理解其表达的意思就OK。 随便写个矩阵： [0110000000011000]\\begin{bmatrix} 0 & 1 & 1& 0 \\\\ 0 & 0 & 0 &0 \\\\ 0 & 0 & 0 &1 \\\\ 1 & 0 & 0 &0 \\\\ \\end{bmatrix}​0001​1000​1000​0010​​ 其中当图是无向图的时候，矩阵是对称的。有向图则不一定，有向图中，行代表顶点的出，列代表顶点的入，比如上述矩阵，顶点v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1​的一条边。 typedef struct{ char vex[N]; int weight[N][N]; //N*N邻接矩阵，每条边的权值用int变量表示 int vexnum,arcnum; //图的当前顶点数和弧数 }MGraph; 空间复杂度：显而易见空间复杂度跟顶点个数有关，为O(n2)O(n^2)O(n2) 对于AnA^nAn的元素An[i][j]A^n[i][j]An[i][j]表示的是由顶点i到j长度为n的路径有多少条。该结论了解即可 邻接矩阵适用于存储相对稠密的图。","s":"邻接矩阵","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接矩阵","p":110},{"i":123,"t":"看下图理解： 设计顶点表结点和边表结点来存储。顶点表节点由顶点域和指向第一条邻接边的指针构成，包含(顶点域data，边表头指针first)。边表结点中包含指向下一跳邻接边的指针。 typedef struct ArcNode{ //边表 int vexIndex; int weight; struct ArcNode *next; //指向下一个边表结点 }ArcNode; typedef struct VNode{ //顶点表 char data; ArcNode *first; //指向第一条依附该顶点的弧的指针 }VNode; typedef struct{ VNode vex[N]; int vexnum,arcnum; //图的顶点数和边数 } ALGraph; //ALGraph是以邻接表存储的图类型 空间复杂度：空间复杂度跟顶点个数和边数有关，若为有向图则O(∣V∣+∣E∣)O(|V|+|E|)O(∣V∣+∣E∣)若为无向图则O(∣V∣+2∣E∣)O(|V|+2|E|)O(∣V∣+2∣E∣)。","s":"邻接表","u":"/docs/Foundation/数据结构/图的性质总结","h":"#邻接表","p":110},{"i":126,"t":"1）树的广搜 广度优先搜索遍历是在各种算法中广泛应用的一种优先遍历算法。就是往宽了去搜索，再搜索下一层。 若树非空，根节点入队 若队列非空，队头元素出队并且访问，同时将其孩子入队 重复2直到队列为空为止 树的BFS借助了队列的帮助，与此同时因为树中不存在回路，搜索到相邻节点的时候不可能搜索到已经访问到的节点。 2）图的广搜 在图中，广度优先搜索会面临一个问题就是图若存在回路，会重复访问到已经访问过的结点，从而带来不必要的时间开销，此处需要设计一个辅助数组来标记是否被访问过，其余的思想与树的层次遍历思想大致相同，从一个节点开始，访问其邻接点，依次进行。具体思想如下： 从起始节点开始找到与顶点相邻的所有顶点(过程会有入队和出队操作) 辅助数组标记 循环递归 需要借助辅助队列 bool visited[MAX_SIZE]; void BFSTraverse(Graph G){ for(i = 0;i<G.vexnuml;i++) visited[i] = fasle; InitQueue(Q); for(i = 0;i<G.vexnum;i++){ if(!visited[i]) BFS(G,i); } } void BFS(Graph G){ visit(v); visited[v] =true; EnQueue(Q,v); while(!isEmpty(Q)){ DeQueue(Q,v); for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)){ if(!visited[w]){ visit(w); visited[w] = true; EnQueue(Q,v); } } } } 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：空间开销来源于辅助队列，故空间开销为O(∣V∣)O(|V|)O(∣V∣)。","s":"BFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#bfs","p":110},{"i":128,"t":"图的DFS就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟BFS一样同样需要一个标记数组来标记节点是否被访问过。如下是伪代码： bool visited[MAX_SIZE]; void DESTralverse(Graph G){ for(v = 0;v<G.vexnum;++v) visited[v] = false; for(v = 0;v<G.vexnum;++v) if(!visited[w]) DFS(G,v); } void DFS(Graph G,int v){ visit(v); visited[v] = true; for(w = FirstNeighbor(G,v);w>=0;w = NextNeighbor(G,v)) if(!visited[w]) DFS(G,v); } 时间复杂度分析：时间复杂度取决于具体数据结构的搜索方式，也就是跟存储方式有关：邻接表和邻接矩阵。若采用邻接表，每个顶点都搜索一次，需要O(∣V∣)O(|V|)O(∣V∣)次，搜索邻接边需要O(∣E∣)O(|E|)O(∣E∣)，故为O(∣V∣+∣E)O(|V|+|E)O(∣V∣+∣E)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要O(∣V∣2)O(|V|^2)O(∣V∣2)。 空间复杂度分析：DFS算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为O(1)O(1)O(1)，平均的为O(∣V∣)O(|V|)O(∣V∣)。","s":"DFS","u":"/docs/Foundation/数据结构/图的性质总结","h":"#dfs","p":110},{"i":130,"t":"包含所有顶点的极小连通子图子图，其中结点数为n，边数为n-1，少一条边非连通，多一条边有回路。其具有性质： 不一定唯一 不唯一但是权值之和唯一(存在权值相同的边时会存在不唯一) ∣E∣=∣V∣−1|E| = |V| -1∣E∣=∣V∣−1 最小生成树的两种算法：“普利姆(Prim)和克鲁斯卡尔(Kruskal)”","s":"生成树","u":"/docs/Foundation/数据结构/图的性质总结","h":"#生成树","p":110},{"i":132,"t":"这个算法是选点的算法，一开始选择一个顶点加入集合SSS，此时树中只有一个顶点，然后从剩余顶点集合TTT中选取相距树中顶点集合最近的点，并且将该边加入集合SSS中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n-1n−1次后得到最小生成树。","s":"普利姆(Prim)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#普利姆prim","p":110},{"i":134,"t":"Prim是选点，而Kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n-1n−1次即可。","s":"克鲁斯卡尔(Kruskal)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#克鲁斯卡尔kruskal","p":110},{"i":136,"t":"耳熟能详的算法了，大致了解算法思路，用个人理解简述： 两个集合SSS和VVV分别用来记录已选结点和剩余结点 选定初始结点v0v_0v0​加入SSS，计算出v0v_0v0​到各可达结点的距离 选出距离最短的结点vsv_svs​加入SSS 因为加入了vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来A到D距离是10，但是加入了B后，通过A->B->D的距离是5，距离更短，所以要更新) 跳转到3，执行n−1n-1n−1次即可计算出到每个节点的最短距离(可能存在不可达) 本质是贪心，时间复杂度两种数据结构都是O(∣V∣2)O(|V|^2)O(∣V∣2) 看个例子就明白了： 顶点（这一列不包含起点） 第 1 轮 第 2 轮 第 3 轮 第 4 轮 第 5 轮 第 6 轮 第 7 轮 0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ 2 4 1→2 已完成 已完成 已完成 已完成 已完成 已完成 3 ∞ ∞ 7 1→5→3 7 1→5→3 已完成 已完成 已完成 4 ∞ 13 1→2→4 13 1→2→4 13 1→2→4 13 1→2→4 已完成 已完成 5 5 1→5 5 1→5 已完成 已完成 已完成 已完成 已完成 6 5 1→6 5 1→6 5 1→6 已完成 已完成 已完成 已完成 7 ∞ ∞ ∞ ∞ ∞ 14 1→2→4→7 已完成 集合S {1, 2} {1,2,5} {1,2,5,6} {1,2,5,6,3} {1,2,5,6,3,4} {1,2,5,6,3,4,7} {1,2,5,6,3,4,7,0}","s":"最短路径问题(迪杰斯特拉算法)","u":"/docs/Foundation/数据结构/图的性质总结","h":"#最短路径问题迪杰斯特拉算法","p":110},{"i":139,"t":"顶点VVV表示事件，<Vi,Vj><V_i,V_j><Vi​,Vj​>的这样一条边表示活动VjV_jVj​必须要ViV_iVi​在它之前执行。这两个节点互为前驱后继。","s":"AOV","u":"/docs/Foundation/数据结构/图的性质总结","h":"#aov","p":110},{"i":141,"t":"一个有向无环图的顶点序列满足以下条件： 每个顶点只出现一次 如果A在B前面，则图中不存在B到A的路径 实现步骤： AOV网中选择一个没有前驱的节点(入度为0) 删除该节点和所有以他为起点的有向边 重复1和2，知道网为空或者网中不存在无前驱的顶点位置（此时必有环） 性质： 一个顶点有多个直接后继的话，则可能导致拓扑序列不是唯一的，如果图内的唯一前驱和后继的话，序列唯一 可以对AOV网进行拓扑排序后重新编号，使得新的图用邻接矩阵存储，此时是三角阵，是可以压缩成上（下）三角的(原理？暂不懂)。由此得到一个充分性结论：邻接矩阵是三角阵则存在拓扑排序。 这里用个例子来看一下： 将这个有向无环图进行压缩存储。 有向无环图，一定可以转化为一个上三角或下三角矩阵。但是需要调整顶点的编号。 如果要用上三角矩阵表示有向无环图的邻接矩阵，可以对图进行拓扑排序，按照拓扑排序序列，重新调整各个顶点的编号。这样可以确保，所有的弧都是从小编号顶点指向大编号顶点，从而也就保证了邻接矩阵可以转化为“上三角矩阵”","s":"拓扑排序","u":"/docs/Foundation/数据结构/图的性质总结","h":"#拓扑排序","p":110},{"i":143,"t":"恶心，算四个表，小心计算 1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k) ve(0)ve(0)ve(0)为0 ve(k)=Max[ve(j)+weight(vj,vk)]ve(k) = Max[ve(j) + weight(v_j,v_k)]ve(k)=Max[ve(j)+weight(vj​,vk​)]其中k是j的后继 从头开始顺着算，计算一个事件的最早发生时间就是，找到它的所有前驱，计算其前驱的最早发生时间加上其代价(边权)，存在多个前驱取最大的。 2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k) 终点等于ve(0)ve(0)ve(0) vl(k)=Min[vl(j)−weight(vk,vj)]vl(k) = Min[vl(j) - weight(v_k,v_j)]vl(k)=Min[vl(j)−weight(vk​,vj​)] 从最后开始逆过来算，计算一个事件的最迟发生时间，找到它的所有后继，计算该后继减去代价到该活动点的值，可能有多个后继，取差值最小的。 3）活动aia_iai​的最早开始事件e(i)e(i)e(i) 等于该活动起始点(某事件)的最早发生时间 找边，找起始点，找ve(i)ve(i)ve(i) 4）活动aia_iai​的最迟开始事件l(i)l(i)l(i) <vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i)-weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj​) 找到边，对应的终点，查该事件点的vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i)","s":"关键路径","u":"/docs/Foundation/数据结构/图的性质总结","h":"#关键路径","p":110},{"i":147,"t":"数据就是信息的载体，描述客观事物的数字、字符和所有能输入到计算程序识别和处理符号的集合。 数据元素是数据的基本单位，通常当做一个整体来考虑的。例如一个简单的排队单子： 号码 取号时间 前面排队人数 上述就是数据元素，数据元素内的就是数据项 数据对象是具有相同性质的数据元素的集合，数据对象是数据的一个子集。","s":"数据、数据元素、数据项、数据对象、数据类型、抽象数据类型","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#数据数据元素数据项数据对象数据类型抽象数据类型","p":144},{"i":149,"t":"分为逻辑结构、物理结构、数据的运算 逻辑结构 逻辑结构可以理解为数据之间的逻辑关系，类似于函数之间的关系，一对一或者多对多之类 物理结构 物理结构就是存储结构，就是数据存储的方式，分为： 顺序存储：物理上是连续的 链式存储：不一定连续，采用指针连接 索引存储：有一个索引表，表中每项成为索引项，一般是关键字或者地址，能够快速查找 散列存储：哈希算法，散列存储 数据运算 关注的是数据之间的操作","s":"1.2数据结构三要素","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#12数据结构三要素","p":144},{"i":153,"t":"基础的认知就是，算法是解决一个问题的方式方法，例如解决二元方程组的通用公式，这个方法就是一个算法。在计算机中，算法指的是高效处理数据，解决实际问题。 公式：程序 = 数据结构 + 算法 算法是对特定问题求解的一种描述。 例如：写一个求解最年轻富豪的程序 由公式得：设计数据结构个人信息数据元素： 个人信息 年龄 身家 设计算法： step1：对根据年龄排序 step2：输出对应的数据元素项 评价算法的两个标度：时间复杂度和空间复杂度","s":"算法的基本概念","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#算法的基本概念","p":144},{"i":155,"t":"1.概念​ 事前预估算法的时间开销（T）与问题规模（N）的关系，T就是时间。说白了就是分析代码，算一下N情况下要花多少时间。 2.方法​ 分析代码中的执行情况，一般重点就是在循环次数、循环条件、循环内部的操作。当N足够大的时候去分析执行时间。采用大O表示法。两个结论： 可以只考虑阶数高的部分 常数项可以忽略 3.两个运算规则：​ 多项相加，取最大的 多项相乘，取乘积结果 4.常用比较：​ O(1)<O(log2n)<)(n)<O(nlong2n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) O(1)<O(log_2 n)<)(n)<O(nlong_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)O(1)<O(log2​n)<)(n)<O(nlong2​n)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn) 简单结论：常对幂指阶","s":"2.2时间复杂度","u":"/docs/Foundation/数据结构/数据结构基础知识","h":"#22时间复杂度","p":144},{"i":158,"t":"tip 现在是过去和未来的交点 欢迎来到Rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天Rachel已经老去，但是在一个明媚温暖的午后，他能在开在河边的咖啡店里面，安静地看着自己的历程，感慨过去和未来。","s":"山不在高，有仙则名，水不在深，有龙则灵，斯是陋室，惟吾德馨。","u":"/docs/intro","h":"#山不在高有仙则名水不在深有龙则灵斯是陋室惟吾德馨","p":156},{"i":161,"t":"数据：数据是数据库中存储的基本对象，描述事物的符号记录称为数据，数据的含义称为数据的语义 数据库（DB）：数据库是长期储存在计算机内、有组织的、可共享的大量数据集合 数据按照一定数据模型组织、描述和存储 具有较小的冗余度 较高的数据独立性 易扩展性 永久存储、有组织、可共享 数据库管理系统（DBMS）：数据库管理系统是位于用户与操作系统之间的一层数据管理软件 数据库系统（DBS）：由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统 物理独立性：用户的应用程序与存储在磁盘上的数据库中的数据是相互独立的，数据的物理存储改变了，但是其应用程序不用改变 逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的，数据的逻辑结构变了，但是应用程序可以不变","s":"1.绪论","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#1绪论","p":159},{"i":163,"t":"关系：只包含单一的数据结构，用户视角来看就是一张数据库的表 域、笛卡尔积：数据的取值范围叫做域、笛卡尔积就是配对乘起来 元组和属性：元组就是表中的一行，属性就是表中的一列","s":"2.关系数据结构","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#2关系数据结构","p":159},{"i":165,"t":"实体完整性：如果属性A是关系R的主属性，A不能为NULL 参照完整性：关系R和关系S，若R中的主键A与S中的B对应，则称B为关系S中的外码，对于S中元组中B的值： 为空（NULL） 等于关系R中主键A的值 关系代数：并交差和笛卡尔 选择：σ\\sigmaσ (选择条件)(表名)，选择符合条件的一行元组 投影：π\\piπ (列名)(表名)，选择符合条件的一列 连接：将两个关系的笛卡尔积中选取属性间符合条件的一些元组，理解成SQL语句中的表连接 除：有点抽象，理解成关系里面的差运算，关系R和关系S，R÷S=T，首先找到R和S共同的属性C，然后在R中找到 不属于C中的属性T，T和S的组合要全部出现在R中","s":"2.1 关系的完整性","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#21-关系的完整性","p":159},{"i":168,"t":"create table <表名>( 列名 数据类型（integer、varchar、等等）not null, ..............., ..............., primarry key(key1,key2....), //主键 foreign key(key1) references 表2(key1) // 外键 ) 修改表： alter table <表名> add 列名 数据类型 约束条件（主键、不为空等等） add 约束 drop 列名 [cascade|restrict]（ cascade就是删除引用该列的其他对象，例如视图）（restrict如果该列有其他对象引用，则拒绝删除该列） drop constraint 完整性约束 alter 列名 数据类型","s":"3.1 建表","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#31-建表","p":159},{"i":170,"t":"模板 select a,b,c from table_1,table_2 where 条件语句 group by 分组列名 having 分组条件 order by 排序列名 desc|asc where：添加查询条件 between x1 and x2 x1~x2范围内 in 嵌套语句中使用，可以筛选 例：select Sname,Ssex from Student where Sdept in( select Sdept from Course where core>=30 ) not in 不在 like 用于字符串匹配，基本不用 group by：查询出来的元组按某列进行分组 order by：按某列的属性值进行排序 表连接： 自身连接，两张一样的表，通过条件语句连接 select a.cno,b.cpno from Course a,Course b where a.Cpno = b.Cno 外连接，两张或多张不一样的表通过条件语句连接，一般采用left join on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为NULL select Student.Sno,Sname,Ssex from Student left join SC on Student.Sno = SC.Sno 聚集函数 count(*) avg(*) max(*) min(*) 集合查询 查询语句1 union|intersect|except（并、交、差） 查询语句2 插入数据 insert into <表名> 列1，列2，.... values(值1，值2.....) 更新数据 update <表名> set 列名 = 操作（加减乘除都可以） where 条件（此处可以嵌套in配合select查询） 例： update SC set grade = grade+10 where Sno in ( select Sno from Student where Sname = '牛顿' ) 删除数据 delete from 表名 where 条件 删除一行元组","s":"3.2 CRUD","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#32-crud","p":159},{"i":172,"t":"视图是将几个表导出一些数据的表，是虚表，不是实际存在的。类似一个窗口，透过它可以看到数据库中自己感兴趣的那部分数据的变化，经过定义后，这个虚表也可以查询和删除。 create view <视图名> as<查询语句> [with check option]加入这个语句的话，进行UID的时候，需要满足子查询中的条件 例： create view IS_student as select Sno,Sname,Sage //通过这种方式就不用再view那里写列名式子 from Student where Sdept=‘IS’ 例：将学生的学号及平均成绩定义为一个视图 create view S_G as select Sno,avg(Grade) from SC group by Sno","s":"3.3 视图","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#33-视图","p":159},{"i":175,"t":"函数依赖：数据表中，给定一个属性X，唯一确定一个Y，则X函数确定Y或者Y函数依赖于X，X->Y。也就是对于一个函数F，给定F(X)=Y 非平凡的函数依赖：平凡函数依赖就是(A,B)->A|B|A,B。非平凡就是 (A,B)->C 完全函数依赖：(A,B)->C，少了A或者B都推不出来C 部分依赖：(A,B)->C，同时A|B->C 传递函数依赖：A->B,B->C，且B推不出A，则C对于A传递函数依赖 候选码：K能够完全函数依赖整个关系集R，K的闭包完整退出R 主属性：候选码中的都是主属性，无论是否入选主码","s":"4.1 函数依赖","u":"/docs/Foundation/数据库/数据库系统概论复试","h":"#41-函数依赖","p":159},{"i":177,"t":"tip 总会有那么几门基础学科是要学的对吧。 Welcome to Rachel NoteBook!","s":"Foundation of road","u":"/docs/Foundation/intro","h":"","p":176},{"i":180,"t":"插入排序就是每次都从后面未排序的序列中按照大小插入到前面已经排好的子序列中，这里会产生子序列（已经排好序的）和待排序列，当没有待排序则算法结束，每次从未排序的头部取出一个插入到子序列中合适的位置。包含有：直接插入、折半插入、希尔排序。","s":"插入排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#插入排序","p":178},{"i":182,"t":"L[1.......i-1] L[i] L[i+1......n] 如上模拟插入排序状态，此时待排序指针指向i，前面i-1项是已经排序好的子序列，后面的in是待排序的，是可以很容易想到解决方法就是在1i-1中找到适合L[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i。每次都从未排好序的中取出第一个进行插入，此处需要和后面的选择排序进行区分，当执行所以待插入的都执行完毕则算是排好啦。 初始第一个值默认自成一个已经排好序的子序列 采用哨兵复制L[i]，然后将子序列中大于L[i]的值进行后移，因为已经找到位置，要插入就得有空位嘛 给L[i]找到合适的插入位置 将腾出的空位放入L[i] 继续循环 弄清楚算法思想，代码是比较容易实现的，算法核心在于，从初始子序列为1的数组中，指针依次后移，为当前指向的值，从子序列中找到一个合适的位置，然后插入即可，此处可能会有疑问，插入到前面，那当前的位置呢？因为会要进行移动，所以此处的位置必然也是一个已经排好序的值。 1）代码 void InsertSort(int a[],int len){ int i,j; for(i = 2;i <= len;i++){ if(a[i]<a[i-1]){ a[0] = a[i]; for(j = i - 1;a[0] < a[j];--j){ a[j+1] = a[j]; } a[j+1] = a[0]; } } } 2）时空复杂度分析 空间上只使用了a[0]当哨兵作为辅助，故空间复杂度上为O(1)O(1)O(1) 最优时间复杂度，如果已经有序，一趟循环即可，时间复杂度为O(n)O(n)O(n) 最坏时间复杂度，初始全部乱序，两个for循环，时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性分析 这里第一次提及稳定性，所谓稳定性是指，数组中有a[i] == a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j]前面，假若这里反过来，就是不稳定的。如果值相同的元素在排序后相对位置没有发生改变则认为是稳定的。 据此分析，直接插入排序每次都是从未排序的数组中取出第一个进行插入，循环条件为小于号，故不会出现同值元素出现相对位置改变的情况，由此是稳定的。同时适用于顺序和链式两种结构。","s":"直接插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#直接插入","p":178},{"i":184,"t":"折半插入是对直接插入的一个改进。在直接插入中可以发现，每次都会从子序列开头去查找一个合适插入的位置，这会带来一定的时间消耗，折半插入的改进就在于查找使用了折半查找，二分查找找到合适的位置，然后一次性进行移动。 如下图就是算法模拟步骤。默认第一个元素自成一个子序列，此时待排序指针指向5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8右移一个单位，如下所示，最后将哨兵存储的复制值放到合适的位置即可。 折半查找子序列找到合适的位置 右移元素 将哨兵元素插入 1）代码 void InsertSortPlus(int a[],int len){ int i,j,low,high,mid; for(i = 2;i <= len;i++){ a[0] = a[i]; low = 1;high = i - 1; while(low<=high){ mid = (low + high) / 2; if(a[mid] > a[0]) low = mid + 1; else high = mid - 1; } for(j = i - 1;j >= high + 1;j--){ a[j + 1] = a[j]; } a[high + 1] = a[0]; } } 2）时空复杂度 与直接插入排序是一样的。 空间复杂度上O(1)O(1)O(1) 时间复杂度为O(n2)O(n^2)O(n2) 3）稳定性 这是稳定的排序算法，不会改变同大小元素的相对位置，该算法依赖初始状态，在初始相对有序且数据量不大的情况下，表现不错。","s":"折半插入","u":"/docs/Foundation/数据结构/内部排序算法","h":"#折半插入","p":178},{"i":186,"t":"缩小增量排序，具体思想是按照一个增量将排序表分割成若干小组，小组内部进行直接插入排序。一趟完毕后增量减小，继续分组，然后进行内部的直接插入排序。知道增量为1，最后是一次完整的直接插入排序。这样的好处是，让值更大的更快跑到后面，值更小的更快到前面，在数据量大的时候，较为优秀。 info 确定初始增量，这里随便写n/2，然后对排序表按照增量分组 各组内进行一趟插入排序 增量缩小，n/2 重复步骤2，知道增量变成1 1）代码 void ShellSort(int a[],int len){ int gap,i,j; //分别定义增量和两个循环变量 for(gap = len/2;gap>=1;gap = gap/2){ //增量减小 for(i = gap+1;i<=n;i++){ //gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的pic辅助理解) if(a[i] < a[i-gap]){ //组内前一个元素大 a[0] = a[i]; //哨兵 for(j = i-gap;j>0 && a[0]<a[j];j -= gap) a[j+gap] = a[j]; a[j+gap] = a[0]; } } } } 这里随便拿两个图来看下希尔排序中i指针，在前移的过程都会进行一次组内排序。不是我们手工算的一次就直接把组内给排好的。 这里看出来49-27-76-65是一组的，此时i=3，j=1，所以要进行插入排序。 完了之后指针i向前走到4，切换到另一个组 此时对另一个组进行排序。i++后指向5，对前一个组进行排序，只不过前一个表是27-49，这次变成了27-49-76，依次类推，当i为7的时候，组内元素齐整了。 2）时空复杂度、稳定性 空间只用了一个哨兵，为O(1)O(1)O(1) 时间复杂度在数学上未能解决，分析没有结果，只知道n在某个范围的时候，时间复杂度为O(n1.3)O(n^{1.3})O(n1.3)，最坏情况是O(n2)O(n^2)O(n2) 不稳定，且只适用于顺序表","s":"希尔排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#希尔排序","p":178},{"i":188,"t":"根据序列中两个元素的比较结果来交换两者的位置，所以叫交换排序。两种算法：冒泡和排序，冒泡随便，快排重点，算法题爱考","s":"交换排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#交换排序","p":178},{"i":190,"t":"直接看图理解： 每次都把最小（大）的冒上去 1）代码 void swap(int &a,int &b){ int temp = a; a = b; b = temp; } void BubbleSort(int a[],int len){ bool = flag = false; for(int i = 0;i<n-1;i++){ for(int j = n-1;j>i;j--){ if(a[j] < a[i]) //这里的小于是确保稳定性的 swap(a[j],a[i]);flag = true; } if(!flag)return ; } } 2）时空复杂度、稳定性 空间复杂度为O(1)O(1)O(1) 最好情况下，本来就有序O(n)O(n)O(n)，否则则进行n-1躺排序，第i躺排序要进行n-i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n-1}(n-i) = \\frac{n(n-1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为O(n2)O(n^2)O(n2)，其中每次都要移动元素三次，总移动次数为比较次数的三倍 稳定","s":"冒泡排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#冒泡排序","p":178},{"i":192,"t":"1）分而治之 快排的基本思想是分治，一个待排序表L[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得L分为两块：L[1....k-1]和L[k+1...n]，其中L[k]为pivot，使得左边表的值都小于pivot，右边都大于。然后分别再对这两个表执行上面的操作。直到每个部分只有一个元素。 2）交换 知道了分治排序，那么如何高效的将表一分为二呢？使用两个指针low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j谁有坑，另一个就得去找元素填坑。按照下面的步骤执行交换 若此时指针low的位置有坑： high向前移动，直到遇到第一个比pivot小的元素 将high位置的元素拿走（挖坑），去填low 同时low++ 若此时指针j的位置有坑： low向后移动，直到遇到第一个比pivot大的元素 将low位置的元素拿走，填high 同时high-- 3）代码 理解了分治和交换，代码如下： 先看交换部分的： int Partition(int a[],int low,int high){ int pivot = a[low]; while(low < high){ while(low<high && a[high]>=pivot) --high; //后面找元素填前面 a[low] = a[high]; while(low<high && a[low]<=pivot) ++low; //前面找元素填后面 a[high] = a[low]; } a[low] = pivot; return low; } 快排： void QuickSort(int a[],int low,int high){ if(low < high){ int pivotpos = Partition(a,low,high);//找到第一次的枢轴值点 QuickSort(a,low,pivotpos - 1); //左排序 QuickSort(a,pivotpos + 1,high); //右排序 } } 3）时空复杂度、稳定性 算法是递归的，需要一个递归栈开销，容量和递归调用的最大深度一致。最好情况下位O(log2n)O(log_{2}n)O(log2​n)，最坏需要n−1次递归调用，所以栈为O(n)n-1次递归调用，所以栈为O(n)n−1次递归调用，所以栈为O(n)，平均是O(log2n)O(log_{2}n)O(log2​n) 最坏请跨国下的时间复杂度为O(n2)O(n^2)O(n2)，理想情况是O(nlong2n)O(nlong_{2}n)O(nlong2​n) 不稳定 所有内部排序中平均性能最优","s":"快速排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#快速排序","p":178},{"i":194,"t":"每一趟选择从待排序的元素中选取最小（大）的作为有序序列的第i个元素。分选择排序和堆排序，堆排序是重点。","s":"选择排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#选择排序","p":178},{"i":196,"t":"跟插入排序是挺类似的，都是从待排序的序列中拿一个元素放到前面去。但是要进行区分的是，插入排序是，i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i指向的位置元素进行交换。 此时38和27进行交换（因为27最小） 按照这样执行n-1次即可 当前指向a[i]，则从a[i.....n-1]中寻找最小的元素a[k] 交换a[k]和a[i] 待排指针i前移（i++），重复上述操作 1）代码 void SelectSort(int a[],int len){ for(int i = 0;i<n-1;i++){ int min = i; for(int j = i+1;j<n;j++){ if(a[j]<a[min]) min = j; } if(i!=min) swap(a[i],a[min]); } } 2）时空复杂度分析 没有借助辅助空间，空间复杂度为O(1)O(1)O(1) 每次进行三个元素的移动，一共n-1躺，一共移动3(n-1)次元素 元素的比较次数和初始状态没有关系一共进行n(n−1)2\\frac{n(n-1)}{2}2n(n−1)​，故时间复杂度为O(n2)O(n^2)O(n2) 不稳定","s":"简单选择","u":"/docs/Foundation/数据结构/内部排序算法","h":"#简单选择","p":178},{"i":198,"t":"1）堆 将堆看成一棵完全二叉树，其中二叉树满足性质：任意一个非根节点都小（大）于其根节点。简单来说就是每个根，存放的是该根为根节点的树中最大（小）的值。其中根最大的叫大根堆，最小的叫小根堆。如下是一个大根堆： 2）如何造堆： 这里说的是大根堆的，小根堆跟大根堆差不多。 先将数据表表示成完全二叉树的格式 最树的最后一棵子树开始，从后往前调整 3）处理上升和下坠： 若当前处理的根节点的小于左右孩子中的最大值，那么最大值会替换根节点的值，同时让根节点下坠 根节点下坠的过程，从上往下进行继续进行上述的操作1，如果有比自己还大的孩子，就下坠，直到找到合适的位置 这里贴几个图： 初始处理倒数第一棵子树 处理可能要下坠的情况，这里处理到了最后一棵树，53＜87，所以要下坠 53下坠到原87的位置，发现这棵子树不符合，所以继续下坠。 53放到了合适的位置，大根堆构建结束。 4）造堆的代码 先来看一下树中儿子和父亲的关系函数： 1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{aligned} & 1.若i为偶数则双亲为\\frac{i}{2}向下取整 \\\\ & 2.若i为奇数则双亲为\\frac{(i-1)}{2} \\\\ & 3.2i \\le n时，i的左孩子是2i \\\\ & 4.2i+1 \\le n时，i的右孩子是2i+1 \\\\ \\end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1​ 其中要注意的是数组a是从0开始存储还是1开始存储，对应的表达式会有改变。 要点： 若表长为len，那么第一棵子树的根节点下表为len/2，从这里开始调整 若根节点需要下坠，把最大值放到根节点位置 根节点下坠到缺空处，此时需要调整指针标记值，去判断下坠位置时候符合大根堆的条件 void BuildMaxHeap(int a[],int len){ for(int i = len/2;i>0;i++) //第一棵子树的根节点下表为len/2，从这里开始调整 HeadAdjust(a,i,len); } void HeadAdjust(int a[],int k,int len){ a[0] = a[k]; //复制一份当前处理节点数据，后面交换后会被覆盖 for(int i = k*2;i<len;i*=2){ //k*2直接指向其左孩子，每次循环开始都会向下走一层 if(i<len && a[i]<a[i+1]) i++; //i标记的是左右孩子哪个更大 if(a[0]>a[i])break; //根最大，满足，不处理 else{ a[k] = a[i]; //根小孩子大，孩子上去 k = i; //将根的指针指向这个孩子的，重新循环判断寻找初始根应该放的位置 } } a[k] = a[0] } 5）堆排序 已经造好了大根堆 输出堆顶元素（堆定元素和堆底元素在完全二叉树的逻辑上进行互换） 调整大根堆 循环1和2 void HeapSort(int a[],int len){ BuildMaxHeap(a,len); for(int i = len;i>n;i--){ swap(a[i],a[1]); HeadAdjust(a,1,i-1); } } 6）时空复杂度、稳定性 空间上借助常数个空间单元O(1)O(1)O(1) 建堆时间O(n)O(n)O(n)调整时间为O(h)O(h)O(h)，最好、最坏、平均情况下的时间复杂度都是O(nlog2n)O(nlog_{2}n)O(nlog2​n) 不稳定","s":"堆排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#堆排序","p":178},{"i":201,"t":"将两个（或多个，取决于归并路数）有序表，合并成一个新的有序表，看个图理解： 以上是二路归并，初始每个元素独立为一个有序表，则取两两合并，如有剩下不成组则单独为一组，n路归并同理。直到归并成一个完整的有序表。 1）归并 如何合并两个有序表长度分别问n和m 需要一个辅助数组b存放两个表 两个指针p1和p2分别指向两个有序表的起始位置 比较b[p1]和b[p2]，较小者放入a中，同时指针后移 当出现某一个表已经复制完了，剩下的表直接将剩余元素按序复制到a中 图例： 这是初始状态。 复制元素，指针后移，继续比较。 当一个表复制完了，剩下的直接复制进去。 3）归并代码 int *b = (int *)malloc(sizeof(int)*(n+1)); // 辅助数组 void Merge(int a[],int low,int mid,int high){ //mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high] int i,j,k; for(k = low;k<=high;k++) //复制元素 b[k] = a[k]; for(i = low,j = mid+1,k = i;i<=mid && j<=high;k++){ //i做前段指针，j做后段指针 if(b[i]<=b[j]) a[k] = b[i++]; else a[k] = b[j++]; } //两种情况复制剩下的 while(i<=mid) a[k++] = b[i++]; while(j<=high) a[k++] = b[j++]; } 4）n路归并排序 这里以2路归并，基于分治思想，将n个元素分解成n/2个子表，两两归并。几路就按几个元素一组来划分。 void MergeSort(int a[],int low,int high){ if(low<high){ int mid = (low+high)/2; MergeSort(a,low,mid); MergeSort(a,mid+1,high); Merge(a,low,mid,high); } } 5）时空复杂度、稳定性 需要n个辅助单元，空间复杂度O(n)O(n)O(n) 每趟归并的复杂度为O(n)O(n)O(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为O(nlog2n)O(nlog_{2}n)O(nlog2​n) 稳定","s":"归并排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#归并排序","p":178},{"i":203,"t":"基数排序不基于比较和移动进行排序，按照关键字各个位置的大小进行比较。如果按0999的数来比较，个人理解为，分别按个十百或者百个十进行比较。有两种关键字排序法： **最高位优先：**从高位开始排序 **最低位优先：**从低位开始排序 1）举个🌰： 有520，211，438,888,007,111,985,666,996，233,168。每个位置都是09的数，我们说其基数r=10。每个数的范围在0~999中，个十百各排序一次，需要三次。 基于上述的顺序，进行个位的分配，如下第一趟： 接下来将各个队列的值串起来（收集），从前往后： 接下来，基于这个顺序进行百位的分配和收集： 最后进行百位的分配和收集： 2）具体过程 感觉通过上面的例子都会理解了，这里还是按过程随便写一下。 给定长度n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d-1},k_j^{d-2},k_j^{d-3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0​)组成 其中，0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0 \\le k_j^{i} \\le r-1 (0 \\le j \\le n,0 \\le i \\le d-1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r称为基数 有点难说，简单认为就是，一个关键字有多少位就是几元组，关键字中的任意一位的取值范围最大值就是基数r。上述的520就是三元组，基数。 基数排序得到递减序列的过程： 设置r个空队列Qr,Qr−1.......Q0Q_r,Q_{r-1}.......Q_0Qr​,Qr−1​.......Q0​ 按各个关键字位权重递增次序，就是个十百的顺序，对关键字分配和回收 分配：如果当前处理的关键字位是n就挂到队列n的队尾中，比如520的个位是0，就挂0队列 回收：从前到后将队列元素出队，串起来 3）时空复杂度、稳定性 空间需要r个队列，Q(r)Q(r)Q(r) 需要进行d躺排序，一次分配要Q(n)Q(n)Q(n)，一次收集要Q(r)Q(r)Q(r)，所以时间复杂度为O(d(n+1))O(d(n+1))O(d(n+1)) 稳定 4）应用 基本不考大题，了解手算，一般适用于那种有关键字的比较，年月日、身份证这种。","s":"基数排序","u":"/docs/Foundation/数据结构/内部排序算法","h":"#基数排序","p":178},{"i":205,"t":"算法 时间复杂度 空间复杂度 稳定性 最好 最坏 平均 直接插入 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 折半插入 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 希尔 \\ \\ O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 冒泡 O(n)O(n)O(n) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 稳 快排 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n2)O(n^2)O(n2) O(log2n)O(log_{2}n)O(log2​n) 不稳 简单选择 O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(n2)O(n^2)O(n2) O(1)O(1)O(1) 不稳 堆 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(1)O(1)O(1) 不稳 2路归并 O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(nlog2n)O(nlog_{2}n)O(nlog2​n) O(n)O(n)O(n) 稳 基数 O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(d(r+1))O(d(r+1))O(d(r+1)) O(r)O(r)O(r) 稳","s":"内部排序算法总结","u":"/docs/Foundation/数据结构/内部排序算法","h":"#内部排序算法总结","p":178},{"i":207,"t":"1）希尔 2）快排 3）简单选择 4）堆","s":"四种不稳定情况","u":"/docs/Foundation/数据结构/内部排序算法","h":"#四种不稳定情况","p":178},{"i":209,"t":"顺序表结构 直接插入、折半插入、希尔、冒泡、快排、简单选择、堆、归并、基数 链表结构 直接插入、冒泡、简单选择、基数**（可能降低效率）；（快排、希尔、归并、堆都可以用，但是不推荐）**","s":"与数据结构的适用性","u":"/docs/Foundation/数据结构/内部排序算法","h":"#与数据结构的适用性","p":178},{"i":211,"t":"这里讲解肝脏肿瘤分割任务中用到的几个评价指标IoU、Dice、Recall、AccIoU、Dice、Recall、AccIoU、Dice、Recall、Acc。其中A代表真实标注区域，B代表模型预测区域A代表真实标注区域，B代表模型预测区域A代表真实标注区域，B代表模型预测区域。","s":"图像分割评价指标","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"","p":210},{"i":213,"t":"IoUIoUIoU的计算公式为：IoU=∣A∩B∣A∪BIoU = \\frac{|A \\cap B|}{A \\cup B}IoU=A∪B∣A∩B∣​其中分子代表的是真实标注和模型预测的交集面积，即重叠区域。分母代表真实标注和模型预测的并集面积。具体解释为：衡量标注数据集和模型预测的肿瘤区域之间有多大的重合程度，更关注预测和标注的重叠，注重局部精度，对边缘和细节分割更加敏感，反应分割结果的准确性和覆盖度，也就是衡量模型预测结果“精不精”能力的。","s":"1.交并比IoU交并比IoU交并比IoU","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#1交并比iou","p":210},{"i":215,"t":"DiceDiceDice系数的计算公式为：IoU=2∣A∩B∣∣A+B∣IoU = \\frac{2|A \\cap B|}{|A + B|}IoU=∣A+B∣2∣A∩B∣​ 其中分子代表真实标注和模型预测的交集面积的两倍，也就是重叠区域的两倍。分母代表真实标注和模型预测两者的面积总和。总的来说这个指标是“相似度”的度量，反映的是预测和标注之间的相似程度，也就是衡量模型预测结果“像不像”能力的。","s":"2.DiceDiceDice系数","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#2dice系数","p":210},{"i":217,"t":"RecallRecallRecall系数计算公式为：TP(TP+FP)\\frac{TP}{(TP+FP)}(TP+FP)TP​ 其中TPTPTP代表的是模型正确预测的样本数，FNFNFN是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80%，可以表示模型在某个分类上的识别能力强弱，指标越高表示分类正确的能力越强。","s":"3.召回率RecallRecallRecall","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#3召回率recall","p":210},{"i":219,"t":"AccAccAcc的计算公式为：TP+TNTP+FN+FP+TN\\frac {TP+TN}{TP+FN+FP+TN}TP+FN+FP+TNTP+TN​ 该指标代表的就是模型正确预测的像素点比例，包括肿瘤和非肿瘤的像素比例。综合考虑了识别为肿瘤和非肿瘤的两个能力。简单来说就是模型预测的“准不准”。","s":"4.准确率AccAccAcc","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#4准确率acc","p":210},{"i":221,"t":"可以发现Dice和IoUDice和IoUDice和IoU是非常相似的两个指标，但是又有着区别，IoUIoUIoU更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。DiceDiceDice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是DiceDiceDice检验识别肿瘤的大致形状，IoUIoUIoU识别肿瘤的整体细节。 而Acc和RecallAcc和RecallAcc和Recall也是非常相似的两个指标，同时也有着区别，RecallRecallRecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是RecallRecallRecall关注的是正向的像素点。而AccAccAcc关注的是模型识别肿瘤和非肿瘤的能力。","s":"5.总结","u":"/docs/Math/DeepLearning/图像分割评价指标","h":"#5总结","p":210},{"i":223,"t":"tip Mathematics is the end of all fundamental disciplines 数学是人类对事物的抽象结构与模式进行严格描述、推导的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。 对于我们来说，数学也许繁琐无味，但是确实我们认知世界的一把重要钥匙。 数学的尽头是哲学:数学是一种思维逻辑的集合。它是人类根据观察到的自然现象和自身的体验,用思维来做逻辑的推导和延伸总结出的自然运动规律的抽象结果。而哲学也就是基于人的思维和经验总结自然界和人类社会发展中的规律的学说,即研究该如何去思考和解释所观察和体验到的现象的方法论。","s":"数学是最后的归宿","u":"/docs/Math/intro","h":"","p":222},{"i":225,"t":"图片托管，是将md笔记中嵌入的本地图片，托管到服务器中，当在浏览html页面的时候，链接到服务器中的图片地址，进行展示，笔记使用的是PicX工具进行托管。感谢https://picx-docs.xpoet.cn/ 无需创建仓库 一次安装，永久使用 无需git操作，本地上传即可得到规则的服务器端图片链接","s":"2-NoteBook的图片托管","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","h":"","p":224},{"i":227,"t":"安装PicX后进行GitHub OAuth授权登录，也可以手写Token，个人建议授权登录 可以选择PicX能够查看的Github仓库，在授权登录后，会初始化好一个PicX的仓库，也就是我们本地上传到Github中进行托管的仓库了。 进入图床配置页面，可以理解成管理存图片文件夹的地方。 可以选择日期目录(推荐选择)，这样可以更好的管理图片文件夹。","s":"2.1 配置PicX","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","h":"#21-配置picx","p":224},{"i":229,"t":"配置好图床后，选择好要上传的目录，进入上传图片页面，就可以进行图片上传，本地上传一次，就会在Git仓库中进行push，本地也可以得到一个图片链接。 同时，在远程仓库中也能看到对应的图片数据：","s":"2.2 图片上传和获取","u":"/docs/Web/部署Docaururs/NoteBook的图片托管","h":"#22-图片上传和获取","p":224},{"i":233,"t":"推荐采用这种方式进行部署，较为方便，采用GitHub提供的托管工具Githubpages进行静态页面部署。 GitHub Pages 是由 GitHub 提供的静态网站托管服务。它允许用户直接从他们的 GitHub 存储库托管他们的网站。GitHub Pages 支持多种静态网站生成器，并提供免费的 HTTPS 加密、自定义域和通过 Git 的版本控制。用户还可以使用 Jekyll，一个流行的静态网站生成器，在 GitHub Pages 上构建他们的网站。另外，GitHub Pages 还内置了持续集成和部署支持，使得每次您将更改推送到存储库时都可以轻松更新您的网站。 但是有一个弊端就是，单纯的Githubpages部署，每次添加新的笔记都得重新推送上远程仓库。","s":"一、GitHubPages","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#一githubpages","p":230},{"i":235,"t":"首先就是在远程建立一个仓库，仓库名为username.github.io，其中设置为你个人的用户名。","s":"1.远程创建仓库","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1远程创建仓库","p":230},{"i":237,"t":"打开本地写好的项目终端进行远程连接仓库。 git init git remote add origin \"你的仓库地址\" git add . git commit -m\"提交信息\" git push -u origin main 上述就是将你的代码远程上传到远程仓库了","s":"2.本地连接","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2本地连接","p":230},{"i":239,"t":"本地首先要进行配置，将你的Docsaururs配置文件进行修改，将config配置中的代码段修改 url: 'https://username.github.io', baseUrl: '/', 改为自己的仓库地址所对应的那个名称就好，这也是部署后的访问地址。 执行 npm run build git checkout -b gh-pages xcopy /E/Y build . rmdir /S /Q build git add . git commit -m \"Deploy Docusaurus to GitHub Pages\" git push origin gh-pages 上述代码就是将你的build后的代码上传到gh-pages分支上，接下来你只需要在仓库的setting-> pages->Branch设置为gh-pages分支来作为你的pages读取静态文件的地址即可。 部署成功后，即可通过上述配置文件中的https://username.github.io访问到你的网站。","s":"3.打包部署","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#3打包部署","p":230},{"i":242,"t":"自行购买云服务器和域名，然后对域名进行解析，同时在服务器中下载Nginx并且进行配置。 在Nginx配置文件Nginx.conf中对你的域名和端口进行配置。例如 user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; events { worker_connections 1024; } http { server { listen 端口号 default_server; listen [::]:端口号 default_server; root /usr/workspace/RachelNooteBook/usr/workspace/RachelNooteBook/web; index index.html; server_name 域名 www.域名; location / { proxy_pass http://服务器IP; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; } 通过上述配置好你的Nginx。","s":"1.云服务","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#1云服务","p":230},{"i":244,"t":"在项目根目录下创建文件夹.github/workflows，并且在里面创建nodejs.yml文件，进行自动化部署的配置。 name: FTP Deploy on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: '16.x' - name: Install FTP client run: sudo apt-get update && sudo apt-get install -y lftp - name: Build run: npm install && npm run build - name: FTP Deploy uses: SamKirkland/FTP-Deploy-Action@4.0.0 with: server: 域名 username: ${{ secrets.FTP_USER }} //用户名 password: ${{ secrets.FTP_PWD }} //密码 server-dir: FTP路径 local-dir: build/ 其中的secrets.FTP_USER要在github设置中进行配置，添加action的变量，然后设置好你的FTP的用户名和密码即可。同时要在FTP服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到FTP服务器上。 接下来创建一个简单的.git-ftp-include文件 加入代码： !build/ 这个是默认让其读取build目录下的静态文件。 通过这样配置，推送到远程后，就会自动化的使用action进行部署到你的服务器中，然后通过你的域名就可以正常访问。","s":"2.项目配置Action自动化脚本","u":"/docs/Web/部署Docaururs/部署Docsaururs","h":"#2项目配置action自动化脚本","p":230},{"i":246,"t":"tip Collect the technical stack required for backend development. 一个简单的后端菜汪，总得写点什么来记录下自己学了什么对吧。","s":"持续学习，永葆青春","u":"/docs/Web/intro","h":"","p":245},{"i":250,"t":"镜像就像是一个目标,可以通过这个目标构建很多容器,容器提供服务.镜像是一种轻量级,可以执行的软件包,用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容 包括代码、运行时库、环境变量和配置文件。 操作系统分为内核跟用户空间,Linux启动内核后就会挂在root文件系统提供用户空间支持.镜像就相当于是一个文件系统.","s":"1.1 镜像","u":"/docs/Web/Docker/Docker入门","h":"#11-镜像","p":247},{"i":252,"t":"容器和镜像的关系就类似实例跟类一样,通过镜像构建容器.容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。 容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。","s":"1.2 容器","u":"/docs/Web/Docker/Docker入门","h":"#12-容器","p":247},{"i":254,"t":"镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。 Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。","s":"1.3 仓库","u":"/docs/Web/Docker/Docker入门","h":"#13-仓库","p":247},{"i":256,"t":"目前的学习只需要能够进行一些简单的Docker操作即可 docker ps -a //查询当前运行的docker docker run [镜像ID] //运行某个镜像 docker images ls //列出镜像 docker stop [镜像ID] //停止容器 docker kill [镜像ID] //杀死容器 docker exec -it [容器ID] /bin/bash //进入容器的shell环境 ls //查看容器内的情况 cd /xxxx/xxxx //进入容器的某个文件 cat [文件] //查看代码文件","s":"2.常用指令","u":"/docs/Web/Docker/Docker入门","h":"#2常用指令","p":247},{"i":259,"t":"国际化（internationalization）是设计和制造领域适应不同区域要求的产品的一种方式。它要求从产品中抽离所有地域语言，国家/地区和文化相关的元素。换言之，应用程序的功能和代码设计考虑在不同地区运行的需要，其代码简化了不同本地版本的生产。开发这样的程序的过程，就称为国际化。 类似大公司的国际化一般都是根据不同国家做不同网页，现在采取的处理方案还是一套Web实现国际化，internationalization从i到n中有18个字母，所以称之为i18n","s":"1.1 i18n","u":"/docs/Web/JavaStudy/Web国际化","h":"#11-i18n","p":257},{"i":261,"t":"先说下基础流程 创建i18n文件夹(IDEA会自动识别) i18n下存放.properties文件 .properties命名规则为message_zh_CN.properties(message是basename，zh_CN是locale) .properties文件中按照模块命名规则：模块1.模块2.xxx SpringBoot会将.properties文件作为ResourceBundle来管理(不需要了解这个是啥，知道用它就行了) SpringBoot会根据Locale获取地域信息配置，拼接上basename就可以拿到国际化的数据，所以命名要严格。basename就是去找国际化文件的路径，下面用源码来解释。","s":"1.2 SpringBoot国际化配置","u":"/docs/Web/JavaStudy/Web国际化","h":"#12-springboot国际化配置","p":257},{"i":263,"t":"这是SpringBoot自动配置类，里面配置了MessageSource，SpringBoot基于这个类来获取国际化数据的。 @Bean @ConfigurationProperties( prefix = \"spring.messages\" ) public MessageSourceProperties messageSourceProperties() { return new MessageSourceProperties(); } @Bean public MessageSource messageSource(MessageSourceProperties properties) { ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); if (StringUtils.hasText(properties.getBasename())) { messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename()))); } if (properties.getEncoding() != null) { messageSource.setDefaultEncoding(properties.getEncoding().name()); } messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale()); Duration cacheDuration = properties.getCacheDuration(); if (cacheDuration != null) { messageSource.setCacheMillis(cacheDuration.toMillis()); } messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat()); messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage()); return messageSource; } 首先我们需要先了解ResourceBundleMessageSource这个类，我们导入的.properties文件就是通过这个类来读取的。SpringBoot帮我们自动装配好了，使用自动配置的MessageSource来获取即可。 另外再看里面的设置参数，提供了setBasenames和Encoding的设置，这个都是配置文件的参数，我们只需要在配置文件中配置即可。是让SpringBoot知道去哪里找这个文件，以及编码。 在@ConfigurationProperties( prefix = \"spring.messages\" )这里已经配置了prefix，也就是说默认读取SpringBoot的yml配置中的Spring.messages.*，我们可以修改成任何正确的路径","s":"1.3 MessageSourceAutoConfiguration","u":"/docs/Web/JavaStudy/Web国际化","h":"#13-messagesourceautoconfiguration","p":257},{"i":265,"t":"Locale是Java中用于表示区域设置的类，它由语言代码、国家/地区代码和变体代码组成。Locale类提供了一系列静态方法来获取当前系统的Locale对象，还可以通过构造函数来创建新的Locale对象。网页请求中一般都会附带上Locale信息，所以SpringBoot会自动识别Locale，然后去获取国际化数据，下面看下源码. WebMvcAutoConfiguration的源码(SpringBoot配置的区域信息解析) @Bean @ConditionalOnMissingBean( name = {\"localeResolver\"} ) public LocaleResolver localeResolver() { if (this.webProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.WebProperties.LocaleResolver.FIXED) { return new FixedLocaleResolver(this.webProperties.getLocale()); } else if (this.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) { return new FixedLocaleResolver(this.mvcProperties.getLocale()); } else { AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver(); Locale locale = this.webProperties.getLocale() != null ? this.webProperties.getLocale() : this.mvcProperties.getLocale(); localeResolver.setDefaultLocale(locale); return localeResolver; } } 这会查看我们是否进行了配置，指定区域信息，如果没有则默认使用AcceptHeaderLocaleResolver来获取。AcceptHeaderLocaleResolver是根据请求头来获取区域信息。 public Locale resolveLocale(HttpServletRequest request) { Locale defaultLocale = this.getDefaultLocale(); if (defaultLocale != null && request.getHeader(\"Accept-Language\") == null) { return defaultLocale; } else { Locale requestLocale = request.getLocale(); List<Locale> supportedLocales = this.getSupportedLocales(); if (!supportedLocales.isEmpty() && !supportedLocales.contains(requestLocale)) { Locale supportedLocale = this.findSupportedLocale(request, supportedLocales); if (supportedLocale != null) { return supportedLocale; } else { return defaultLocale != null ? defaultLocale : requestLocale; } } else { return requestLocale; } } } 也就是获取网页请求中的Accept-Language参数，然后根据这个参数来获取区域信息。 搞明白上面两个之后，做下总结：SpringBoot使用Locale来获取区域信息，然后根据区域信息，利用自动配置了ResourceBundleMessageSource的MessageSource去制定路径下获取区域对应的国际化信息。我们只需要重写一下自己的LocaleResolver,提供一下读取的封装函数即可。","s":"1.4 Locale","u":"/docs/Web/JavaStudy/Web国际化","h":"#14-locale","p":257},{"i":268,"t":"我们希望按照自己的标准来解析Locale区域信息，自定义一个类: public class MyLocaleResolverConfig implements LocaleResolver { private static final String PATH_PARAMETER = \"lang\"; private static final String DEFULT_PATH_PARAMETER = \"Accept-Language\"; @Override public Locale resolveLocale(HttpServletRequest request) { String lang = request.getHeader(PATH_PARAMETER); if (StringUtils.isBlank(lang)){ lang = request.getParameter(PATH_PARAMETER); } Locale locale = Locale.CHINA; if (!StringUtils.isEmpty(lang)) { String[] split = lang.split(\"_\"); if (split.length > 1){ locale = new Locale(split[0], split[1]); }else { locale = new Locale(split[0]); } }else{ lang = request.getHeader(DEFULT_PATH_PARAMETER); //没有设置参数的使用浏览器传递参数 示例：Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 if(!StringUtils.isEmpty(lang)){ String[] langStrs = lang.split(\";\"); if(langStrs.length > 0){ //浏览器传过来的首选语言 String firstLang = langStrs[0].split(\",\")[0]; String[] split = firstLang.split(\"-\"); //防止国外用户浏览器选择了除中文英文之外的语言没有对应的语言包报错，不为中文的情况下全部使用英文 if(!StringUtils.equals(\"zh\", split[0])){ locale = Locale.ENGLISH; } } } } return locale; } @Override public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) { }} 继承LocaleResolver基类，重写resolveLocale方法，setLocale可以不管。 初始化Locale.CHINA，使用中国区域 先判断lang，再判断Accept-Language，取到区域信息例如：en_US(先判断参数，无再取浏览器传入) 再将重写后的MyLocaleResolverConfig注册到@Bean中，告诉SpringBoot我们使用自己的配置： @Bean public LocaleResolver localeResolver() { return new MyLocaleResolverConfig(); }","s":"2.1 自定义Locale解析","u":"/docs/Web/JavaStudy/Web国际化","h":"#21-自定义locale解析","p":257},{"i":270,"t":"封装一个类，通过MessageSource来获取到国际化数据文件.properties中的键值 @Component public class I18nUtil { private static final Logger log = LoggerFactory.getLogger(I18nUtil.class); @Autowired private MessageSource messageSource; private static MessageSource staticMessageSource; @PostConstruct public void init() { I18nUtil.staticMessageSource = messageSource; } /** * 通过code 返回对应的提示信息 * @param code * @return */ public static String getMessage(String code) { return getMessage(code, null); } /** * 返回带参数的提示信息 * @param code * @param args * @return */ public static String getMessage(String code, Object[] args) { return getMessage(code, args, \"\"); } /** * 获取单个国际化翻译值 */ public static String getMessage(String code, Object[] args, String defaultMessage) { String content; try { content = staticMessageSource.getMessage(code, args, LocaleContextHolder.getLocale()); } catch (Exception e) { log.error(\"获取提示消息失败： ->\",e); content = defaultMessage; } return content; } } 还是使用MessageSource来获取数据信息 提供有参和无参的获取方法 使用方法: 导入i18n类，调用getMessage即可 I18nUtil.getMessage(\"BadRecordController.shopOrder.noData\") // 无参数 I18nUtil.getMessage(\"SolderPasteManagerService.standardWarmTime.exceedLimit\", new String[]{solderPaste.getModified_date(), String.format(\"%.2f\", useDate), String.valueOf(bzhwdate_max)}) //有参数 对应的国际化信息命名： BadRecordController.shopOrder.noData=无法获取工单信息 SolderPasteManagerService.standardWarmTime.exceedLimit=操作失败:该物料回温开始时间为{0},已经回温{1}小时,必须在{2}小时前才允许绑定<超出规定使用时间>","s":"2.2 封装一个i18n类","u":"/docs/Web/JavaStudy/Web国际化","h":"#22-封装一个i18n类","p":257},{"i":272,"t":"首先引入Vue-i18n，声明i18n的组件，注入到Vue实例中 import Vue from 'vue' import VueI18n from 'vue-i18n' import {Locale} from 'vant' import vantEN from 'vant/lib/locale/lang/en-US' import vantCN from 'vant/lib/locale/lang/zh-CN' import vxeCN from 'vxe-table/lib/locale/lang/zh-CN' import vxeEN from 'vxe-table/lib/locale/lang/en-US' Vue.use(VueI18n) const i18n = new VueI18n({ // locale: 'en', // 语言标识，通过切换locale的值来实现语言切换 this.$i18n.locale = \"zh\" locale: localStorage.getItem(\"lang\") == \"en\" ? 'en' : \"zh\", //初始化语言 messages:{ 'zh': { ...vxeCN, ...require('./zh') }, 'en':{ ...vxeEN, ...require('./en') }, 'vi':{ ...vxeEN, ...require('./vi') } } });","s":"3. Vue国际化","u":"/docs/Web/JavaStudy/Web国际化","h":"","p":257},{"i":274,"t":"new Vue({ el: '#app', router, i18n, store, render: h => h(App) })","s":"3.1 注入到Vue实例中(main.js文件中)","u":"/docs/Web/JavaStudy/Web国际化","h":"#31-注入到vue实例中mainjs文件中","p":257},{"i":276,"t":"\"SolderPaste\":{ \"lableprintTitle\": \"锡膏标贴打印\", \"item\":\"物料编码\", \"batch\":\"批次\", \"supplier\":\"供应商\", \"cycle\":\"生产周期\", \"count\":\"数量\", \"printerTemplate\":\"打印模板\", \"printer\":\"打印机\", \"enterinventory\":\"锡膏入库\", \"technologyType\":\"工艺\", \"sfc\":\"条码\", \"weight\":\"标准重量\", \"keyCode\":\"唯一码\", \"operator\":\"操作人\", \"scanCount\": \"已扫描数量\" }","s":"3.2 国际化数据按照Json格式编写：","u":"/docs/Web/JavaStudy/Web国际化","h":"#32-国际化数据按照json格式编写","p":257},{"i":278,"t":"languagePath:'SolderPaste.', //在data中声明 :title=\"$t(languagePath+'item')\" //以这种方式获取 切换语言： // 更新vant组件库本身的语言变化 onChange(val){ localeStorage.setItem('lang',val); this.$i18n.local = val }","s":"3.3 使用方式：","u":"/docs/Web/JavaStudy/Web国际化","h":"#33-使用方式","p":257},{"i":280,"t":"import Vue from 'vue' import VueI18n from 'vue-i18n' // 引入vant 国际化 import {Locale} from 'vant' import enUS from 'vant/lib/locale/lang/en-US' import zhCN from 'vant/lib/locale/lang/zh-CN' Vue.use(VueI18n) const i18n = new VueI18n({ // locale: 'en', // 语言标识，通过切换locale的值来实现语言切换 this.$i18n.locale = \"zh\" locale: localStorage.getItem(\"lang\") == \"en\" ? 'en' : \"zh\", //初始化语言 messages:{ 'zh': require('./zh'), 'en': require('./en') } }); // 更新vant组件库本身的语言变化 function vantLocales (lang) { console.log(lang) if (lang === 'en') { Locale.use(lang, enUS) } else if (lang === 'zh') { Locale.use(lang, zhCN) } } vantLocales(i18n.locale)//初始化语言 export {i18n, vantLocales} // Vant的切换语言 onChange(val){ localStorage.setItem('lang',val) this.$i18n.locale = val this.$vantLocales(val) //切换 vant 语言包 },","s":"3.4 vant组件国际化：","u":"/docs/Web/JavaStudy/Web国际化","h":"#34-vant组件国际化","p":257},{"i":283,"t":"<script src=\"../js/jquery.min.js?v=2.1.4\"></script> <script type=\"text/javascript\" src=\"../js/base.js\"></script> <script src=\"../js/plugins/jquery-i18n/jquery.i18n.properties.js\"></script> <script type=\"module\" src=\"../js/common/i18n.config.js\"></script>","s":"4.1 引入jquery.js和jquery.i18n.properties.js","u":"/docs/Web/JavaStudy/Web国际化","h":"#41-引入jqueryjs和jqueryi18npropertiesjs","p":257},{"i":285,"t":"import '../base.js' // getCookie() 和 getRootPath() 须引入 base.js let localeLang = getCookie(\"localeLang\") || \"zh\" // console.log(localeLang); $.i18n.properties({ name:'language', //资源文件名称 path:getRootPath() + \"/js/common/lang\", //资源文件路径 mode:'map', // 用 map 方式使用资源文件中的值 language:localeLang, callback:function(){ // 加载成功后处理显示内容 $(\"[data-i18n-text]\").each(function(){ $(this).html($.i18n.prop($(this).data(\"i18n-text\"))); }); $(\"[data-i18n-placeholder]\").each(function(){ $(this).attr(\"placeholder\",($.i18n.prop($(this).data(\"i18n-placeholder\")))); }); $(\"[data-i18n-value]\").each(function(){ $(this).val($.i18n.prop($(this).data(\"i18n-value\"))); }); $(\"[data-i18n-title]\").each(function(){ $(this).attr(\"title\",($.i18n.prop($(this).data(\"i18n-title\")))); }); } }); 这里就是根据getRootPath()和资源路径拼接获取到国际化信息，回调函数获取值，所以使用的时候，直接使用data-i18n-text就可以获取,例如： <label data-i18n-text=\"micro_feed_and_turnPull.shopOrder\">线体</label>","s":"4.2 按照后端的样式声明properties文件，并且自定义i18n.config.js","u":"/docs/Web/JavaStudy/Web国际化","h":"#42-按照后端的样式声明properties文件并且自定义i18nconfigjs","p":257},{"i":289,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"student\", //用户名 \"password\": \"\", //密码 \"remember\": false //下次自动登录 } 返回参数： { \"userName\": \"student\", //用户名 \"imagePath\": \"\", //头像 }","s":"#4.1.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#411-登录","p":286},{"i":291,"t":"接口地址：/api/student/user/register 请求参数： { \"userName\": \"student5\", //用户名 \"password\": \"123456\", //密码 \"userLevel\": 1 //年级 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.1.2 注册","u":"/docs/Web/软件工程课设/接口文档","h":"#412-注册","p":286},{"i":293,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.1.3 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#413-登出","p":286},{"i":295,"t":"接口地址：/api/student/dashboard/index 请求参数：无 返回参数： { \"fixedPaper\": [ //固定试卷 { \"id\": 2399, //试卷Id \"name\": \"test33333\", //试卷名称 \"limitStartTime\": null, //考试开始时间 \"limitEndTime\": null //考试结束时间 } ], \"timeLimitPaper\": [] //时段试卷 }","s":"#4.1.4 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#414-首页","p":286},{"i":297,"t":"接口地址：/api/student/dashboard/task 请求参数：无 返回参数： [ { \"id\": 8, //任务id \"title\": \"2021-04-25作业\", //任务标题 \"paperItems\": [ { \"examPaperId\": 181, //任务试卷id \"examPaperName\": \"第一次出卷\", //任务试卷名称 \"examPaperAnswerId\": 579, //答卷id \"status\": 2 //答卷状态 } ] } ]","s":"#4.1.5 任务中心","u":"/docs/Web/软件工程课设/接口文档","h":"#415-任务中心","p":286},{"i":299,"t":"接口地址：/api/student/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": \"18\", //学科id \"name\": \"英语\" //学科名称 } ] }","s":"#4.1.6 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#416-学科列表","p":286},{"i":301,"t":"接口地址：/api/student/exam/paper/pageList 请求参数： { \"paperType\": 1, //试卷类型 \"subjectId\": 158, //学科id \"pageIndex\": 1, //页数 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 2520, //试卷id \"name\": \"生理卫生\", //试卷名称 \"questionCount\": 1, //题目数 \"score\": 20, //试卷分数 \"createTime\": \"2021-05-31 13:34:49\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 158, //学科 \"subjectName\": \"英语\", //学科 \"paperType\": 1, //试卷类型 \"frameTextContentId\": 9016 //试卷内容 } ] } }","s":"#4.1.7 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#417-试卷分页","p":286},{"i":303,"t":"接口地址：/api/student/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"测试一\", //试卷名称 \"suggestTime\": 22, //建议时长 \"limitDateTime\": null, //考试时间限制 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 8, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //标题 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //顺序 } ] } ], \"score\": \"10\" } }","s":"#4.1.8 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#418-试卷查询","p":286},{"i":305,"t":"接口地址：/api/student/exampaper/answer/answerSubmit 请求参数： { \"questionId\": null, \"doTime\": 14, //耗时 \"answerItems\": [ { \"questionId\": 4, //题目id \"content\": null, //答题内容 \"contentArray\": [ //填空题内容 \"测试\", \"1\" ], \"completed\": true, //是否完成 \"itemOrder\": 1 //题目序号 } ], \"id\": 4 //试卷id } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"2\" //试卷得分 }","s":"#4.1.9 试卷提交","u":"/docs/Web/软件工程课设/接口文档","h":"#419-试卷提交","p":286},{"i":307,"t":"接口地址：/api/student/exampaper/answer/read/4 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"paper\": { //试卷信息 \"id\": 8, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 4, //试卷类型 \"name\": \"限时考试二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": [ //考试时间限制 \"2021-06-22 00:00:00\", \"2021-08-06 00:00:00\" ], \"titleItems\": [ { \"name\": \"一、完成题目\", //标题 \"questionItems\": [ //题目列表 { \"id\": 8, //题目id \"questionType\": 4, //题目类型 \"subjectId\": 1, //学科 \"title\": \"曲项向天歌红掌拨清波\", //题目标题 \"gradeLevel\": 1, //年级 \"items\": [ //题目选项 { \"prefix\": \"1\", //选项标识 \"content\": \"鹅鹅鹅\", //选项内容 \"score\": \"2\" //选项分数 }, { \"prefix\": \"2\", \"content\": \"白毛浮绿水\", \"score\": \"2\" } ], \"analyze\": \"咏鹅\", //解析 \"correctArray\": [ //标答 \"鹅鹅鹅\", \"白毛浮绿水\" ], \"correct\": \"\", //标答 \"score\": \"4\", //题目分数 \"difficult\": 4, //题目难度 \"itemOrder\": 1 //题目顺序 } ] } ], \"score\": \"18\" //试卷分数 }, \"answer\": { //答卷信息 \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分 \"answerItems\": [ //答题信息 { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"0\", //得分 \"questionScore\": \"4\" //题目分数 } ] } } }","s":"#4.1.10 答卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4110-答卷查询","p":286},{"i":309,"t":"接口地址：/api/student/exampaper/answer/edit 请求参数： { \"id\": 8, //答卷id \"doTime\": 14, //耗时 \"score\": \"2\", //得分数 \"answerItems\": [ { \"id\": 8, //答题id \"questionId\": 4, //题目id \"doRight\": null, //是否正确 \"content\": null, //答题内容 \"itemOrder\": 1, //题目顺序 \"contentArray\": [ //答题内容 \"测试\", \"1\" ], \"score\": \"4\", //得分 \"questionScore\": \"4\" //题目分数 } ] } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": \"16\" //试卷得分 }","s":"#4.1.11 试卷批改","u":"/docs/Web/软件工程课设/接口文档","h":"#4111-试卷批改","p":286},{"i":311,"t":"接口地址：/api/student/exampaper/answer/pageList 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 6204, \"list\": [ { \"id\": 6534, //试卷id \"createTime\": \"2021-06-01 17:56:38\", //创建时间 \"userScore\": \"0\", //考试分数 \"subjectName\": \"数学\", //考试学科 \"subjectId\": 129, //学科id \"questionCount\": 1, //题目数量 \"questionCorrect\": 0, //题目正确数 \"paperScore\": \"3\", //试卷总分 \"doTime\": \"4 秒\", //耗时 \"paperType\": 7, //试卷类型 \"systemScore\": \"0\", //系统批改得分 \"status\": 2, //试卷状态 \"paperName\": \"智能训练试卷 - 1845\", //试卷名称 \"userName\": null //用户名 } ] } }","s":"#4.1.12 考试记录分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4112-考试记录分页","p":286},{"i":313,"t":"接口地址：/api/student/question/answer/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 17002, \"list\": [ { \"id\": 24928, //题目id \"questionType\": 1, //题型 \"createTime\": \"2021-06-02 16:07:11\", //创建时间 \"subjectName\": \"语文\", //学科 \"shortTitle\": \"666\" //题干 } ] } }","s":"#4.1.13 错题本分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4113-错题本分页","p":286},{"i":315,"t":"接口地址：/api/student/question/answer/select/25067 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"questionVM\": { \"id\": 507, //题目id \"questionType\": 1, //题目类型 \"subjectId\": 46, //学科id \"title\": \"111\", //题干 \"gradeLevel\": 12, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项 \"content\": \"A\", //选项内容 \"score\": null //选项分数 } ], \"analyze\": \"D\", //解析 \"correctArray\": null, //标答 \"correct\": \"D\", //标答 \"score\": \"2\", //分数 \"difficult\": 3, //难度 \"itemOrder\": null //排序 }, \"questionAnswerVM\": { //用户答案 \"id\": 25067, \"questionId\": 507, //题目id \"doRight\": false, //是否正确 \"content\": \"A\", //用户答案 \"itemOrder\": 2, //排序 \"contentArray\": null, //用户答案 \"score\": \"0\", //得分 \"questionScore\": \"2\" //题目分数 } } }","s":"#4.1.14 答题详情","u":"/docs/Web/软件工程课设/接口文档","h":"#4114-答题详情","p":286},{"i":317,"t":"接口地址：/api/student/user/log 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 1812, \"userId\": 1, //用户id \"userName\": \"student\", //用户名 \"realName\": \"Test\", //用户真实姓名 \"content\": \"student 登录了学之思开源考试系统\", //动态内容 \"createTime\": \"2021-06-08 17:12:50\" //创建时间 } ] }","s":"#4.1.15 用户动态","u":"/docs/Web/软件工程课设/接口文档","h":"#4115-用户动态","p":286},{"i":319,"t":"接口地址：/api/student/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 } }","s":"#4.1.16 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4116-当前用户信息","p":286},{"i":321,"t":"接口地址：/api/student/user/update 请求参数： { \"id\": 8, \"userUuid\": \"d2d29da2-dcb3-4013-b874-727626236f47\", \"userName\": \"student\", //用户名 \"realName\": \"Test\", //真实姓名 \"age\": 18, //年龄 \"role\": 1, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-01 00:00:00\", //生日 \"phone\": \"158800882\", //手机号 \"lastActiveTime\": \"\", \"createTime\": \"2019-09-07 18:55:02\", \"modifyTime\": \"2021-06-09 17:04:31\", \"status\": 1, //状态 \"userLevel\": 1, //年级 \"classes\": \"1班\", //用户班级 \"imagePath\": \"\" //用户头像 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.1.17 修改用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4117-修改用户信息","p":286},{"i":323,"t":"接口地址：/api/student/user/message/page 请求参数： { \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 5, \"list\": [ { \"id\": 8, \"title\": \"rwerw\", //消息标题 \"messageId\": 10, \"content\": \"sfsdf\", //消息内容 \"readed\": true, //是否已读 \"createTime\": \"2021-06-11 16:32:40\", //创建时间 \"sendUserName\": \"admin\" //发送人 } ] } }","s":"#4.1.18 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4118-消息分页","p":286},{"i":325,"t":"接口地址：/api/student/user/message/read/14 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.1.19 消息标记已读","u":"/docs/Web/软件工程课设/接口文档","h":"#4119-消息标记已读","p":286},{"i":327,"t":"接口地址：/api/student/user/message/unreadCount 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 0 //未读消息数量 }","s":"#4.1.20 未读消息数量","u":"/docs/Web/软件工程课设/接口文档","h":"#4120-未读消息数量","p":286},{"i":330,"t":"接口地址：/api/user/login 请求参数： { \"userName\": \"admin\", //用户名 \"password\": \"\", //密码 \"remember\": false //记住我 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": null, \"userUuid\": null, \"userName\": \"admin\", //用户名 \"password\": null, \"realName\": null, \"age\": null, \"sex\": null, \"birthDay\": null, \"userLevel\": null, \"phone\": null, \"role\": null, \"status\": null, \"imagePath\": null, \"createTime\": null, \"modifyTime\": null, \"lastActiveTime\": null, \"deleted\": null, \"wxOpenId\": null } }","s":"#4.3.1 登录","u":"/docs/Web/软件工程课设/接口文档","h":"#431-登录","p":286},{"i":332,"t":"接口地址：/api/user/logout 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.2 登出","u":"/docs/Web/软件工程课设/接口文档","h":"#432-登出","p":286},{"i":334,"t":"接口地址：/api/admin/dashboard/index 请求参数：无 返回参数： { \"examPaperCount\": 2413, //试卷总数 \"questionCount\": 1025, //题目总数 \"doExamPaperCount\": 6148, //总答卷数 \"doQuestionCount\": 23945, //总题数 \"mothDayUserActionValue\": [ //活跃度 85 ], \"mothDayDoExamQuestionValue\": [ //月做题数 22 ], \"mothDayText\": [ //本月天数 \"1\" ] }","s":"#4.3.3 首页","u":"/docs/Web/软件工程课设/接口文档","h":"#433-首页","p":286},{"i":336,"t":"接口地址：/api/admin/user/page/list 请求参数： { \"userName\": \"\", //用户名 \"role\": 1, //角色 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页条数 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 81, //总数 \"list\": [ { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } ] } }","s":"#4.3.4 用户分页","u":"/docs/Web/软件工程课设/接口文档","h":"#434-用户分页","p":286},{"i":338,"t":"接口地址：/api/admin/user/select/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 100, //用户id \"userUuid\": \"fd31ab62-c32f-433c-8dc4-c07e653d390a\", //用户uuid \"userName\": \"王\", //用户名 \"realName\": null, //真实姓名 \"age\": null, //年龄 \"role\": 1, //角色 \"sex\": null, //性别 \"birthDay\": \"\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"2021-06-21 20:01:26\", //最后活动时间 \"createTime\": \"2021-06-21 20:01:26\", //创建时间 \"modifyTime\": \"2021-06-21 20:01:35\", //修改时间 \"status\": 1, //状态 \"userLevel\": 1, //年级 \"imagePath\": null //头像 } }","s":"#4.3.5 用户查询","u":"/docs/Web/软件工程课设/接口文档","h":"#435-用户查询","p":286},{"i":340,"t":"接口地址：/api/admin/user/edit 请求参数： { \"id\": null, \"userName\": \"testzz\", //用户名 \"password\": \"123456\", //密码 \"realName\": \"tesx\", //真实姓名 \"role\": 1, //角色 \"status\": 1, //状态 \"age\": \"\", //年龄 \"sex\": \"\", //性别 \"birthDay\": null, //生日 \"phone\": null, //手机号 \"userLevel\": 1 //年级 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 109, \"userUuid\": \"321dec89-0656-4736-ae4c-e2b07f4fcc67\", //用户id \"userName\": \"testzz\", //用户名 \"password\": \"\" //密码 \"realName\": \"tesx\", //真实姓名 \"age\": null, //年龄 \"sex\": null, //性别 \"birthDay\": null, //生日 \"userLevel\": 1, //年级 \"phone\": null, //手机号 \"role\": 1, //角色 \"status\": 1, //状态 \"imagePath\": null, //头像 \"createTime\": 1624538837259, //创建日期 \"modifyTime\": null, //修改时间 \"lastActiveTime\": 1624538837259, //最后活动时间 \"deleted\": false, //是否删除 \"wxOpenId\": null //微信openId } }","s":"#4.3.6 用户编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#436-用户编辑","p":286},{"i":342,"t":"接口地址：/api/admin/user/delete/3 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null }","s":"#4.3.7 用户删除","u":"/docs/Web/软件工程课设/接口文档","h":"#437-用户删除","p":286},{"i":344,"t":"接口地址：/api/admin/user/changeStatus/1 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": 2 }","s":"#4.3.8 用户状态修改","u":"/docs/Web/软件工程课设/接口文档","h":"#438-用户状态修�改","p":286},{"i":346,"t":"接口地址：/api/admin/education/subject/list 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"id\": 13, //学科id \"name\": \"语文\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\", //年级名称 \"itemOrder\": null, //排序 \"deleted\": false //是否删除 } ] }","s":"#4.3.9 学科列表","u":"/docs/Web/软件工程课设/接口文档","h":"#439-学科列表","p":286},{"i":348,"t":"接口地址：/api/admin/education/subject/page 请求参数： { \"level\": null, //年级 \"pageIndex\": 1, \"pageSize\": 10 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } ] } }","s":"#4.3.10 学科分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4310-学科分页","p":286},{"i":350,"t":"接口地址：/api/admin/education/subject/select/2 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 1, //年级 \"levelName\": \"一年级\" //年级名称 } }","s":"#4.3.11 学科查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4311-学科查询","p":286},{"i":352,"t":"接口地址：/api/admin/education/subject/edit 请求参数： { \"id\": 13, \"name\": \"数学\", //学科名称 \"level\": 2, //年级 \"levelName\": \"二年级\" //年级名称 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.12 学科编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4312-学科编辑","p":286},{"i":354,"t":"接口地址：/api/admin/education/subject/delete/3 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.13 学科删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4313-学科删除","p":286},{"i":356,"t":"接口地址：/api/admin/exam/paper/page 请求参数： { \"id\": null, \"level\": null, //年级 \"subjectId\": null, //学科 \"pageIndex\": 1, //页码 \"pageSize\": 10 //每页数量 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 9, \"list\": [ { \"id\": 13, //试卷id \"name\": \"中级任务二\", //试卷名称 \"questionCount\": 5, //题目总数 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:31\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 13 //试卷内容 } ] } }","s":"#4.3.14 试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4314-试卷分页","p":286},{"i":358,"t":"接口地址：/api/admin/exam/paper/select/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 1, //试卷类型 \"name\": \"语文试卷\", //试卷名称 \"suggestTime\": 20, //考试时间 \"limitDateTime\": null, //限时考试 \"titleItems\": [ { \"name\": \"一、选择题\", //试卷标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 5, //题目类型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //题目选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答数组 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"score\": \"10\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"10\" //试卷总分 } }","s":"#4.3.15 试卷查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4315-试卷查询","p":286},{"i":360,"t":"接口地址：/api/admin/exam/paper/edit 请求参数： { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ //题目列表 { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //试卷总分 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //试卷id \"level\": 1, //年级 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"name\": \"中级任务二\", //试卷名称 \"suggestTime\": 20, //考试时长 \"limitDateTime\": null, //限时 \"titleItems\": [ { \"name\": \"一、选择题\", //标题 \"questionItems\": [ { \"id\": 13, //题目id \"questionType\": 2, //题型 \"subjectId\": 1, //学科 \"title\": \"以下哪些诗句是静夜思的？\", //题干 \"gradeLevel\": 1, //年级 \"items\": [ //选项 { \"prefix\": \"A\", //选项标记 \"content\": \"床前明月光\", //选项内容 \"score\": null, //选项分数 \"itemUuid\": null //选项标识 } ], \"analyze\": \"床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。\", //解析 \"correctArray\": [ //正确答案 \"A\", \"C\" ], \"correct\": \"A,C\", //正确答案 \"score\": \"0\", //题目分数 \"difficult\": 3, //难度 \"itemOrder\": 1 //题序 } ] } ], \"score\": \"18\" //题序 } }","s":"#4.3.16 试卷编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4316-试卷编辑","p":286},{"i":362,"t":"接口地址：/api/admin/exam/paper/delete/9 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.17 试卷删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4317-试卷删除","p":286},{"i":364,"t":"接口地址：/api/admin/exam/paper/taskExamPage 请求参数： { \"subjectId\": null, //学科 \"level\": 1, //年级 \"paperType\": 6, //试卷类型 \"pageIndex\": 1, //页面 \"pageSize\": 5 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 1, \"list\": [ { \"id\": 13, \"name\": \"任务试卷五\", //试卷名称 \"questionCount\": 2, //题目总数 \"score\": 60, //试卷分数 \"createTime\": \"2021-08-02 14:36:26\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 26 //试卷内容 } ] } }","s":"#4.3.18 任务试卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4318-任务试卷分页","p":286},{"i":366,"t":"接口地址：/api/admin/question/page 请求参数： { \"id\": null, \"questionType\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 7, \"list\": [ { \"id\": 13, \"questionType\": 5, //题型 \"textContentId\": null, \"createTime\": \"2021-01-21 11:45:57\", //创建时间 \"subjectId\": 1, //学科 \"createUser\": 2, //创建人 \"score\": \"10\", //得分 \"status\": 1, //状态 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //标答 \"analyzeTextContentId\": null, //解析 \"difficult\": 3, //难度 \"shortTitle\": \"默写咏鹅\" //题干 } ] } }","s":"#4.3.19 题目分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4319-题目分页","p":286},{"i":368,"t":"接口地址：/api/admin/question/select/508 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 508, //题目id \"questionType\": 5, //题型 \"subjectId\": 4, //学科 \"title\": \"<p>什么是快乐星球？</p>\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"照抄即可\", //解析 \"correctArray\": null, //标答 \"correct\": \"什么是快乐星球\", //正确答案 \"score\": \"5\", //题目分数 \"difficult\": 5, //难度 \"itemOrder\": null } }","s":"#4.3.20 题目查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4320-题目查询","p":286},{"i":370,"t":"接口地址：/api/admin/question/edit 请求参数： { \"id\": 13, //题目id \"questionType\": 5, //题型 \"subjectId\": 1, //学科 \"title\": \"默写咏鹅\", //题干 \"gradeLevel\": 1, //年级 \"items\": [], //选项 \"analyze\": \"咏鹅可以带拼音\", //解析 \"correctArray\": null, //标答 \"correct\": \"鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。\", //正确答案 \"score\": 10, //题目分数 \"difficult\": 3, //难度 \"itemOrder\": null } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.21 题目编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4321-题目编辑","p":286},{"i":372,"t":"接口地址：/api/admin/question/delete/7 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.22 题目删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4322-题目删除","p":286},{"i":374,"t":"接口地址：/api/admin/task/page 请求参数： { \"gradeLevel\": null, \"pageIndex\": 1, \"pageSize\": 10 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 2, \"list\": [ { \"id\": 13, //任务id \"title\": \"中级任务\", //任务标题 \"gradeLevel\": 1, //年级 \"createUserName\": \"admin\", //创建人用户名 \"createTime\": \"2021-01-21 11:50:24\", //创建时间 \"deleted\": false //是否删除 } ] } }","s":"#4.3.23 任务分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4323-任务分页","p":286},{"i":376,"t":"接口地址：/api/admin/task/select/22 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 12, //年级 \"title\": \"考试\", //任务标题 \"paperItems\": [ { \"id\": 592, //试卷id \"name\": \"考试\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 275, //试卷分数 \"createTime\": \"2021-08-12 15:02:50\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 46, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 2897, //试卷内容 \"allClasses\": null } ] } }","s":"#4.3.24 任务查询","u":"/docs/Web/软件工程课设/接口文档","h":"#4324-任务查询","p":286},{"i":378,"t":"接口地址：/api/admin/task/edit 请求参数： { \"id\": 13, \"gradeLevel\": 1, \"title\": \"中级任务\", \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, //任务id \"gradeLevel\": 1, //年级 \"title\": \"中级任务\", //任务标题 \"paperItems\": [ { \"id\": 13, //试卷id \"name\": \"中级任务一\", //试卷名称 \"questionCount\": 5, //题目数量 \"score\": 180, //试卷分数 \"createTime\": \"2021-01-21 11:49:11\", //创建时间 \"createUser\": 2, //创建人 \"subjectId\": 1, //学科 \"paperType\": 6, //试卷类型 \"frameTextContentId\": 12 //试卷内容 } ] } }","s":"#4.3.25 任务编辑","u":"/docs/Web/软件工程课设/接口文档","h":"#4325-任务编辑","p":286},{"i":380,"t":"接口地址：/api/admin/task/delete/1 请求参数：无 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null }","s":"#4.3.26 任务删除","u":"/docs/Web/软件工程课设/接口文档","h":"#4326-任务删除","p":286},{"i":382,"t":"接口地址：/api/admin/message/page 请求参数： { \"sendUserName\": null, \"pageIndex\": 4, \"pageSize\": 10 } 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 36, \"list\": [ { \"id\": 13, //消息id \"title\": \"你好，同学！\", //消息标题 \"content\": \"考试请不要作弊\", //消息内容 \"sendUserName\": \"admin\", //发送人用户名 \"receives\": \"student\", //接收人用户名 \"receiveUserCount\": 1, //接收人数量 \"readCount\": 1, //已读数量 \"createTime\": \"2020-09-22 11:37:49\" //创建时间 } ] } }","s":"#4.3.27 消息分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4327-消息分页","p":286},{"i":384,"t":"接口地址：/api/admin/message/send 请求参数： { \"title\": \"全校师生请注意\", //消息标题 \"content\": \"大家好\", //消息内容 \"receiveUserIds\": [ //接收人 1 ] } 返回参数： { \"code\": 1, //返回状态 \"message\": \"成功\", //返回消息 \"response\": null }","s":"#4.3.28 消息发送","u":"/docs/Web/软件工程课设/接口文档","h":"#4328-消息发送","p":286},{"i":386,"t":"接口地址：/api/admin/examPaperAnswer/page 请求参数： { \"subjectId\": null, //学科 \"pageIndex\": 1, \"pageSize\": 10 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 4, \"list\": [ { \"id\": 13, \"createTime\": \"2021-07-07 14:03:02\", //提交时间 \"userScore\": \"16\", //用户得分 \"subjectName\": \"语文\", //学科名称 \"subjectId\": 1, //学科Id \"questionCount\": 5, //题目数量 \"questionCorrect\": 4, //正确题目数 \"paperScore\": \"18\", //试卷总分 \"doTime\": \"14 秒\", //耗时 \"paperType\": 4, //试卷类型 \"systemScore\": \"2\", //自动批改得分 \"status\": 2, //答卷状态 \"paperName\": \"限时考试二\", //试卷名称 \"userName\": \"student\" //用户名 } ] } }","s":"#4.3.29 答卷分页","u":"/docs/Web/软件工程课设/接口文档","h":"#4329-答卷分页","p":286},{"i":388,"t":"接口地址：/api/admin/user/event/page/list 请求参数： { \"userId\": null, \"userName\": null, \"pageIndex\": 1, \"pageSize\": 10 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"total\": 68, \"list\": [ { \"id\": 13, //日志id \"userId\": 2, //用户id \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"content\": \"admin 登录了学之思开源考试系统\", //日志内容 \"createTime\": \"2021-08-24 20:05:02\" //创建时间 } ] } }","s":"#4.3.30 用户日志","u":"/docs/Web/软件工程课设/接口文档","h":"#4330-用户日志","p":286},{"i":390,"t":"接口地址：/api/admin/user/current 请求参数：无 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //出生日期 \"phone\": null, //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //用户年级 \"imagePath\": null //头像 } }","s":"#4.3.31 当前用户信息","u":"/docs/Web/软件工程课设/接口文档","h":"#4331-当前用户信息","p":286},{"i":392,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, //用户id \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户标识 \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2019-09-07 18:56:07\", //生日 \"phone\": \"11\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-17 11:28:52\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新","p":286},{"i":394,"t":"接口地址：/api/admin/user/selectByUserName 请求参数： student //用户名 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": [ { \"name\": \"student\", //用户名 \"value\": 1 //用户id } ] }","s":"#4.3.32 用户信息更新","u":"/docs/Web/软件工程课设/接口文档","h":"#4332-用户信息更新-1","p":286},{"i":396,"t":"接口地址：/api/admin/upload/configAndUpload 请求参数：无 返回参数： { \"original\": \"头像.jpg\", \"name\": \"头像.jpg\", \"url\": \"http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_\", \"size\": 19665, \"type\": \".jpg\", \"state\": \"SUCCESS\" }","s":"#4.3.33 图片上传","u":"/docs/Web/软件工程课设/接口文档","h":"#4333-图片上传","p":286},{"i":398,"t":"接口地址：/api/admin/user/update 请求参数： { \"id\": 13, \"userUuid\": \"52045f5f-a13f-4ccc-93dd-f7ee8270ad4c\", //用户uuid \"userName\": \"admin\", //用户名 \"realName\": \"管理员\", //真实姓名 \"age\": 30, //年龄 \"role\": 3, //角色 \"sex\": 1, //性别 \"birthDay\": \"2021-09-07 18:56:07\", //出生日期 \"phone\": \"2112112\", //手机号 \"lastActiveTime\": \"\", //最后活动时间 \"createTime\": \"2019-09-07 18:56:21\", //创建时间 \"modifyTime\": \"2021-08-31 10:08:03\", //修改时间 \"status\": 1, //状态 \"userLevel\": null, //年级 \"imagePath\": null //头像 } 返回参数： { \"code\": 1, \"message\": \"成功\", \"response\": null }","s":"#4.3.34 个人信息修改","u":"/docs/Web/软件工程课设/接口文档","h":"#4334-个人信息修改","p":286},{"i":401,"t":"依据个人理解就是，当服务器突然发生问题的时候，正在处理的数据和已经存储好的数据不会被损坏，当服务器启动的时候，通过持久化工具进行数据恢复，避免了数据的丢失和系统的开销。Redis中由两种持久化：RDB和AOF： RDB：类似快照技术，将当前的数据快照存留成rdb文件 AOF：将数据操作指令打入队列中","s":"1.1 什么是持久化","u":"/docs/Web/Redis/Redis 持久化","h":"#11-什么是持久化","p":399},{"i":403,"t":"指定时间间隔内，执行数据集的时间点快照 实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。Redis的数据都是在内存中，RDB保存备份的是后，执行的是全量快照，把内存的数据记录到磁盘中去。","s":"2.RDB","u":"/docs/Web/Redis/Redis 持久化","h":"","p":399},{"i":406,"t":"Redis7以前的配置情况： Redis7的配置","s":"2.1.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#211配置","p":399},{"i":409,"t":"修改redis.conf配置中的save《seconds》《changes》项目 修改dump文件保存路径 修改dump文件名称 触发备份 恢复 修改redis.conf配置 修改文件路径 修改文件名称：修改为xxxxx.rdb即可，我修改为dbfiename dump6379.rdb 恢复：将备份文件移动到redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb文件的，但是这个文件是空的，没有什么意义。","s":"2.2.1自动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#221自动触发","p":399},{"i":411,"t":"分为两种：save和bgsave，其中默认使用bgsave。 save：在程序执行构成会阻塞当前的redis服务器，直到持久化工作完成，也就是过程不可被其他命令终端，线上禁止使用 bgsave：Redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork一个子进程，由该进程进行复制持久化过程。","s":"2.2.2手动触发","u":"/docs/Web/Redis/Redis 持久化","h":"#222手动触发","p":399},{"i":414,"t":"以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 默认不开启，一旦开启就是使用aof，命令为：appendonly yes。其保存的是appendonly.aof文件。工作流程如下： 1 Client作为命令的来源，会有多个源头以及源源不断的请求命令。 2 在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。 3 AOF缓冲会根据AOF缓冲区同步文件的三种写回策略将命令写入磁盘上的AOF文件。 4 随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称AOF重写)，从而起到AOF文件压缩的目的。 5 当Redis Server 服务器重启的时候会从AOF文件载入数据。","s":"3.1 工作流程","u":"/docs/Web/Redis/Redis 持久化","h":"#31-工作流程","p":399},{"i":416,"t":"Always：同步写回，每个写命令执行完立刻同步写到磁盘 everysec：每秒写回 No：操作系统决定何时xiehui","s":"3.2 三种写回机制","u":"/docs/Web/Redis/Redis 持久化","h":"#32-三种写回机制","p":399},{"i":419,"t":"开启AOF： 配置appendfsync为自己要的时间，一般就是everysec 配置保存路径与RDB差不多： aof文件有三种： 在redis7对应配置好:","s":"3.3.1配置","u":"/docs/Web/Redis/Redis 持久化","h":"#331配置","p":399},{"i":421,"t":"启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集 重写原理: 1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。 2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。 3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中 4：当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中 5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似","s":"3.3.2AOF的重写机制","u":"/docs/Web/Redis/Redis 持久化","h":"#332aof的重写机制","p":399},{"i":423,"t":"在同时开启RDB和AOF时，重启时只会加在AOF不会加在RDB。 RDB能够在指定时间间隔内对数据进行快照。 AOF对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以Reids协议追加保存每次写的操作到文件末尾。 推荐使用RDB和AOF混合方式 1 开启混合方式设置 设置aof-use-rdb-preamble的值为 yes yes表示开启，设置为no表示禁用 2 RDB+AOF的混合方式---------> 结论：RDB镜像做全量持久化，AOF做增量持久化 先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。----》AOF包括了RDB头部+AOF混写","s":"4.两者比较","u":"/docs/Web/Redis/Redis 持久化","h":"","p":399},{"i":426,"t":"新增：刮刀类型，M1，安装面别和默认安装点校验","s":"1.新增校验位","u":"/docs/Work/电控栈位表&&钢刀","h":"#1新增校验位","p":424},{"i":428,"t":"栈位表上传，抓取产品编码A，若A在产品主数据配置中的工艺类型是锡膏(红胶)，安装点为GD，则其刮刀编码要校验为S(P) 如果产品主数据没有配置则报错提示：产品主数据未配置工艺类型，请确认！","s":"1.1 刮刀类型","u":"/docs/Work/电控栈位表&&钢刀","h":"#11-刮刀类型","p":424},{"i":430,"t":"栈位表上传，若安装点为M1，则判断组件(刮刀编码)是否和产品A对应的产品主数据中的锡膏红胶品牌型号前半段是否匹配，如：220300060匹配220300060-红胶HT-130DL-工艺指定前面重复的部分，不匹配报错。","s":"1.2 M1","u":"/docs/Work/电控栈位表&&钢刀","h":"#12-m1","p":424},{"i":432,"t":"栈位表上传，若其资源最后一位是1(2)，则安装面必须为A(B)，产品主数据中也必须为A(B)，不匹配报错。","s":"1.3 安装面","u":"/docs/Work/电控栈位表&&钢刀","h":"#13-安装面","p":424},{"i":434,"t":"安装面单独是T或S的情况下报错","s":"1.4 默认安装点","u":"/docs/Work/电控栈位表&&钢刀","h":"#14-默认安装点","p":424},{"i":436,"t":"前端新增专用钢刮刀材质 输入刮刀条码，截取第一个逗号前的编码，取第四位为工艺类型 工艺类型对应：S，Z对应锡膏，P对应红胶 导入的解析中安装工艺类型带出锡膏或者红胶","s":"2.刮刀生产工艺和刮刀材质需求","u":"/docs/Work/电控栈位表&&钢刀","h":"#2刮刀生产工艺和刮刀材质需求","p":424},{"i":438,"t":"原本页面的导出是导出页面数据及其对应的详情，即1->n的关系，现新增一个单独导出目录的导出功能，及导出当前页面看到的信息(不包括详情)。新增几个查询条件。 前端新增组件，后端新增接口实现导出功能 后端数据筛选过滤，原本是1->n导出 查询条件同样需要进行过滤","s":"3.SMT栈位表批量变更操作","u":"/docs/Work/电控栈位表&&钢刀","h":"#3smt栈位表批量变更操作","p":424},{"i":441,"t":"Stream可以用来快速处理List类型的数据，避免繁杂的for循环和条件控制 typeResult.stream() .filter(map->map.get(\"xxx\")!=null) .anyMatch(map->\"xx\".equals(map.get(\"xx\").toString())); 通过Stream流打开处理，filter进行过滤，anyMatch相当于遍历每一个Map数据进行处理，其中使用Lambda表达式","s":"4.1 Java的Stream","u":"/docs/Work/电控栈位表&&钢刀","h":"#41-java的stream","p":424},{"i":443,"t":"**VO(View Object)：**视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 **DTO(Data Transfer Object)：**数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。 简单来说： VO用于封装前端需要展示的数据，数据库查询出来可能10个字段，但是为了不展示一些没必要的数据和不暴露数据库结构，需要减少一些字段，只返回需要的数据，使用VO封装 DTO用于前后端交互的数据传输，前端传参可能是一个完整的List和一些cookie保存的信息，后端使用JSON接收对象，往往使用DTO类型，开发中通常有时候会是DTO里面封装这VO","s":"4.2 VO，DTO","u":"/docs/Work/电控栈位表&&钢刀","h":"#42-vodto","p":424},{"i":446,"t":"在Redis官网中下载Redis7版本压缩包后，使用XFTP软件将本地的Redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar -zxvf redis-7.0.0.tar.gz) 进入redis-7.0.0目录下，执行make && make install命令 默认安装路径在/root/usr/local/bin下，ll列举redis-7.0.0中的文件，有两个为redis-cli和redis-server这两个分别是客户端和服务器启动命令。 需要对redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredis中，同时进行配置","s":"1.1 安装和解压","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#11-安装和解压","p":444},{"i":448,"t":"默认daemonize no 改为daemonize yes 默认protected-mode yes改为protected-mode no 默认bind 127.0.0.1改为 直接注释掉(默认bind 127.0.0.1只能本机访问)或改成本机IP地址，否则影响远程IP连接 添加redis密码改为 requirepass 你自己设置的密码 记得重启才会有效","s":"1.2配置","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#12配置","p":444},{"i":450,"t":"cd 进入/myredis目录下 redis-server /myredis/redis.conf redis-cli 即可进入 也可以redis-cli -a password进入","s":"1.3 服务启动","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#13-服务启动","p":444},{"i":452,"t":"单实例关闭：redis-cli -a password shutdown 多实例关闭：指定端口关闭：redis-cli -p 6379 shutdown","s":"1.4关闭","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#14关闭","p":444},{"i":455,"t":"string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M","s":"2.1字符串String","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#21字符串string","p":444},{"i":458,"t":"EX：Key在多少秒之后过期 PX：Key在多少毫秒后过期 NX：当Key不存在的时候，才创建Key，等效于setnx XX：当Key存在的时候，覆盖Key","s":"2.1.2分布式锁","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#212分布式锁","p":444},{"i":460,"t":"只有是数字才能进行加减 INCR key：递增 INCRBY key increment：增加指定的整数 DECR key：递减数值 DECRBY key decrement：减少指定的整数","s":"2.1.3数值增减","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#213数值增减","p":444},{"i":462,"t":"List（列表），Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)","s":"2.2 列表","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#22-列表","p":444},{"i":464,"t":"一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加；如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。 它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。","s":"2.2.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#221常用指令","p":444},{"i":466,"t":"Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）","s":"2.3哈希","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#23哈希","p":444},{"i":468,"t":"KV模式不变，但是V是一个键值对，Map<String,Map<Object,Object>>","s":"2.3.1常用指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#231常用指令","p":444},{"i":470,"t":"Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)","s":"2.4集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#24集合","p":444},{"i":473,"t":"Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232−12^{32} - 1232−1","s":"2.5有序集合","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#25有序集合","p":444},{"i":475,"t":"在Set的基础上，每个Value的值前加一个Score分数值，之前Set是K1,V1,Zset会变成K1,V1,Score1","s":"2.5.1跟Set的区别","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#251跟set的区别","p":444},{"i":478,"t":"Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括添加地理位置的坐标。获取地理位置的坐标。计算两个位置之间的距离。根据用户给定的经纬度坐标来获取指定范围内的地理位置集合","s":"2.6地理空间信息","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#26地理空间信息","p":444},{"i":480,"t":"移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？ 地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆 使用如下SQL即可：select taxi from position where x0-r < x < x0 + r and y0-r < y < y0+r、 但是会有如下问题： 查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的 这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。 精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差、","s":"2.6.1简介","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#261简介","p":444},{"i":482,"t":"GEOADD：多个经度、维度、位置名称添加到Key中 GEOPOS：从键里面返回所有给定位置元素的位置 GEODIST：返回两个给定位置之间的距离 GEORADIUS：以给定经纬度为中心，返回与中心距离不超过给定最大距离的所有位置元素 GEORAIUSBYMEMBER，跟上条类似 GEOHASH：返回一个或者多个位置元素的GeoHash","s":"2.6.2指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#262指令","p":444},{"i":484,"t":"HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。","s":"2.7HyperLogLog","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#27hyperloglog","p":444},{"i":486,"t":"Redis Stream 是 Redis 5.0 版本新增加的数据结构。 Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。 简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。 而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。","s":"2.8流","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#28流","p":444},{"i":488,"t":"一句话总结就是Redis版本的MQ消息中间件+阻塞队列。 实现消息队列，支持消息的持久化，支持自动生成全局唯一 ID，支持ACK确认消息模式，支持消费组模式，让消息队列更加稳定和可靠。 看起来就是一个消息链表，将所有的消息都串起来，每个消息都有一个唯一的ID和对应的内容 1 Message Content 消息内容 2 Consumer group 消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者 3 Last_delivered_id 游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。 4 Consumer 消费者，消费组中的消费者 5 Pending_ids 消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢","s":"2.8.1是什么","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#281是什么","p":444},{"i":490,"t":"队列相关指令 消费组相关指令 具体实例参见脑图","s":"2.8.2相关指令","u":"/docs/Web/Redis/Redis安装&&十大数据","h":"#282相关指令","p":444},{"i":492,"t":"这算是第一个正式接手的比较大的项目,有点难度,代码不难写,主要是逻辑难以捋顺. PCB：印刷电路板 SMT：一种工艺，对PCB进行贴片，将一些元器件安装到PCB板上","s":"3-拼板分板配置","u":"/docs/Work/拼板分板配置","h":"","p":491},{"i":494,"t":"一块板子经过镭射打码后会生成条码，上传MES，此时一块拼板(多块小板拼接，小板也有条码)已经形成绑定关系。拼板关系流入SMT工序(此时关系合格)，流入下一个工序则不合格，只支持按实际关系绑定的一个一个过站。","s":"1. 业务背景","u":"/docs/Work/拼板分板配置","h":"#1-业务背景","p":491},{"i":496,"t":"可以配置的按照机型，工序的拼板和分板方式 过站后变更 流过SMT后对板就行序列编码(标记1，2，3，.........) 支持按照工序的批量拼板绑定以及后续的解绑操作 支持按照工序实时分板","s":"1.1 任务","u":"/docs/Work/拼板分板配置","h":"#11-任务","p":491},{"i":498,"t":"涉及机密,数据库设计初始设计考虑不周,在生产中尽量可以不用外键关联,根据需求适当添加一些方便自己操作的字段,或者关联字段.","s":"2.数据库设计","u":"/docs/Work/拼板分板配置","h":"#2数据库设计","p":491},{"i":501,"t":"JPA是JAVA跟数据库交互的一种工具,不同于MyBatis需要写xml文件和SQL来交互,JPA可以根据一些命名规范来直接完成交互,简单的增删查改可以不用写SQL. 1.构建实体类,加上注解 @MetaData(\"\") @Entity @Table(name = \"\") 2.构建Dao,加上注解并extends Jpa 在Dao中可以使用JPA规范来写数据库交互的函数,也可以使用JPQL的方式来自定义SQL @Repository public interface TestDao extends JpaRepository<Test,String> { //func1 List<String> searchResultById(String Id) //func2 @Query(value = \"select Result from table where Id =: Id\",nativeQuery = true) List<String> searchResultById_1(@Param(\"Id\")String Id) }JPA 3.在Impl中使用Dao也可以快捷的使用save,delete等方法,只用过save,传入实体类即可,直接调用Dao.save(Class)即可在数据库中插入新数据.","s":"3.1 JPA","u":"/docs/Work/拼板分板配置","h":"#31-jpa","p":491},{"i":503,"t":"内部还是封装有直接执行SQL的方法,使用JPA是方便,但是遇到繁杂的业务,需要几次的JPA才能解决,增加了与数据库交互次数,性能损耗大. 可以直接书写SQL,通过封装好的方法执行即可. String preProcess; StringBuffer sql; sql = new StringBuffer(); List<Map<String,Object>> sqlResult = new ArrayList<>();//内部封装就是这个返回类型 sqlResult = baseFunctionService.getSqlResult(sql.toString());//还有其他很多方法,一般查询用这个 --------解析sqlResult的逻辑---------------","s":"3.2 SQL执行","u":"/docs/Work/拼板分板配置","h":"#32-sql执行","p":491},{"i":506,"t":"生产环境中,总是会遇到多种多样的异常情况,所以服务实现的时候,基本使用try-catch来包裹核心代码,适当时候抛出异常. 服务编写逻辑: 注入@Service 注入Dao 注入一些其他的Service类 ServiceImpl实现Service的服务 Controller调用Service服务 try{ demo------ if(条件){ throw new RuntimeException(message); } demo------ }catch (Exception e){ throw new RuntimeException(e.getMessage(),e); }","s":"4.1 服务编写","u":"/docs/Work/拼板分板配置","h":"#41-服务编写","p":491},{"i":508,"t":"接口编写主要就是调用Service提供服务,获取或者返回数据.注意功能逻辑卸载Impl类中,不要在Controller中书写功能. 接口编写逻辑: 注入@RestController,@RequestMapping(value = \"该Controller入口\") 注入@Api(value = \" \",tags = \" \")开启Swagger 注入需要的服务类 根据获取或者返回的数据需求,选择是否使用Json还是普通表单 表单可以使用@Parm和@RequestParm注解来获取参数,前者可为空后者不行 需要使用JSON: 当传入数据使用JSON或者返回JSON的时候，需要自己自定义类,以保存传入或者返回的对象,使用RequestBody Class class 的形式来获取JSON格式参数 @RestController @RequestMapping(value = \"/rachel/test\") @Api(value = \"测试\",tags = \"test\") public class RachelTestController { @Autowired private TestService testService; @ApiOperation(value = \"test\") @RequestMapping(value = \"/serachId\",method={RequestMethod.POST}) public OperationResult serachDetais( @RequestParam(value = \"name\")String name, @Param(value = \"sex\")String sex) { return TestService.serachId(name,sex); } @ApiOperation(value = \"test\") @RequestMapping(value = \"/serachId\",method={RequestMethod.POST}) public OperationResult serachDetais( @RequestBody Person person) { return TestService.serachId(person.getName,person.getSex); } }","s":"4.2 接口编写","u":"/docs/Work/拼板分板配置","h":"#42-接口编写","p":491},{"i":510,"t":"拼板过站是关键的一个接口，多个部门都在使用，且存在多设备使用的情况，即有并发场景 修改： 传参JSON 拼板过站前的校验 拼板重复过站校验","s":"7-拼板过站接口修改","u":"/docs/Work/拼板过站接口修改","h":"","p":509},{"i":512,"t":"设备传输时，根据传入的TYPE字段判断本次调用的目的： 校验：校验时类型TYPE传值为C，值不为NA的条码表单，到MESEXT_XLD_BAECODE表中的SFC逐一校验是否存在 上传数据：上传时，TYPE值需为I，看isPassing的值来判断是否过站，为N的时候不过站，对数据SFC不为NA的进行校验，并且保存，对NA的按照时间流水造一个SFC存入。为Y的时候执行上述的操作后进行过站 重复上传：TYPE值需为X，正常走上传数据的逻辑，但是走校验的时候，如果数据存在，checkCodeForm会返回exsit，会提示，不报错","s":"1.业务逻辑","u":"/docs/Work/拼板过站接口修改","h":"#1业务逻辑","p":509},{"i":514,"t":"校验工单工厂的空值，SFC表单的SFC数据是否存在，主板条码是否存在，设置标志位X为重复过站操作，遇到X的时候checkCodeForm校验存在SFC情况下返回exsit 其余情况下，只有完全校验通过才会返回success","s":"2.拼板校验","u":"/docs/Work/拼板过站接口修改","h":"#2拼板校验","p":509},{"i":516,"t":"对校验通过的条码进行保存，批量保存，为了避免重复交互数据库，使用jdbc的批量保存： String insertSql = \"insert into mesext_xld_barcode (barcode, site, shop_order, azm, seq, status, create_date, create_user, sfc) \" + \"values(?, ?, ?, ?, ?, ?, ?, ?, ?)\"; BatchPreparedStatementSetter bs = new BatchPreparedStatementSetter() { @Override public void setValues(PreparedStatement ps, int i) throws SQLException { ps.setString(1, saveDataList.get(i).getBARCODE()); ps.setString(2, saveDataList.get(i).getSITE()); ps.setString(3, saveDataList.get(i).getSHOP_ORDER()); ps.setString(4, saveDataList.get(i).getAZM()); ps.setString(5, saveDataList.get(i).getSEQ()); ps.setString(6, saveDataList.get(i).getSTATUS()); ps.setString(7, saveDataList.get(i).getCREATE_DATE()); ps.setString(8, saveDataList.get(i).getCREATE_USER()); ps.setString(9, saveDataList.get(i).getSFC()); } @Override public int getBatchSize() { return saveDataList.size(); } }; jdbcTemplate.batchUpdate(insertSql, bs); 类似的，jdbc也提供了单条保存的方法，多看源码","s":"3.条码保存","u":"/docs/Work/拼板过站接口修改","h":"#3条码保存","p":509},{"i":518,"t":"使用原有的拼版过站方法即可","s":"4.拼板过站","u":"/docs/Work/拼板过站接口修改","h":"#4拼板过站","p":509},{"i":520,"t":"记录请求和传出的数据，有AOP的方法和暴力的接口记录，这里还没去研究到AOP，先介绍暴力记录的方法： 在Controller的try-catch中新开事务 String message = e.getMessage(); Throwable cause = e.getCause(); status = \"失败\"; while (cause != null){ message = cause.getMessage(); cause = cause.getCause(); } dataLog(startTime,parmas,message,status); dataLog为记录日志的方法，在Impl中记录不起效，需要在Controller中新开事务才可以记录","s":"5.2024/10/31新增日志功能","u":"/docs/Work/拼板过站接口修改","h":"#520241031新增日志功能","p":509},{"i":522,"t":"出现报错 ORA-00001: unique constraint (MESWIP.MESEXT_XLD_BARCODE_PK) violated 报错ORACLE的数据表唯一性错误，这是并发引起的多线程进入保存的函数，同时保存引起的问题，这里的问题频率不高，因为有并发的情况，并且不可加锁，所以暂不处理。介绍一下加锁的方法：","s":"6.2024/11/07报错记录","u":"/docs/Work/拼板过站接口修改","h":"#620241107报错记录","p":509},{"i":524,"t":"synchronized是内部提供的方法，可以动态的加锁和解锁，确保同一时刻只有一个线程进入代码块","s":"6.1 使用synchronized关键字","u":"/docs/Work/拼板过站接口修改","h":"#61-使用synchronized关键字","p":509},{"i":526,"t":"ReentrantLock，也被称为“可重入锁”，是一个同步工具类，在java.util.concurrent.locks包下。这种锁的一个重要特点是，它允许一个线程多次获取同一个锁而不会产生死锁。这与synchronized关键字提供的锁定机制非常相似，但ReentrantLock提供了更高的扩展性。 可重入性：ReentrantLock的一个主要特点是它的名字所表示的含义——“可重入”。简单来说，如果一个线程已经持有了某个锁，那么它可以再次调用lock()方法而不会被阻塞。这在某些需要递归锁定的场景中非常有用。锁的持有计数会在每次成功调用lock()方法时递增，并在每次unlock()方法被调用时递减。 公平性：与内置的synchronized关键字不同，ReentrantLock提供了一个公平锁的选项。公平锁会按照线程请求锁的顺序来分配锁，而不是像非公平锁那样允许线程抢占已经等待的线程的锁。公平锁可以减少“饥饿”的情况，但也可能降低一些性能。 可中断性：ReentrantLock的获取锁操作（lockInterruptibly()方法）可以被中断。这提供了另一个相对于synchronized关键字的优势，因为synchronized不支持响应中断。 条件变量：ReentrantLock类中还包含一个Condition接口的实现，该接口允许线程在某些条件下等待或唤醒。这提供了一种比使用wait()和notify()更灵活和更安全的线程通信方式。 try{ ReentrantLock lock = new ReentrantLock(); lock.lock(); code ```````` }catch{ catch`````` }finally{ lock.unock(); } ````````` 目前测试依然无法避免，未知解决方案 ### 6.3 使用RedisService实现的KeyExpirationEventMessageListener 项目里有实现KeyExpirationEventMessageListener的工具类，利用Redis也可以实现上锁机制。 ```java public boolean set(String key, String value,long time,TimeUnit timeUnit){ try { redisTemplate.opsForValue().set(key, value,time,timeUnit); return true; } catch (Exception e) { e.printStackTrace(); return false; } } 通过set来对某一个键值上锁，设置时间和单位 public Object get(String key) { return key == null ? null : redisTemplate.opsForValue().get(key); } 通过get方法来尝试获取某一个键，如果取得到，抛出异常报错","s":"6.2 使用ReentrantLock","u":"/docs/Work/拼板过站接口修改","h":"#62-使用reentrantlock","p":509},{"i":529,"t":"根据清洗出来的数据进行产能获取和计算。产能获取就是调用SAP接口。 计算相应的效率，通过SQL来进行连笔操作，同一工单下的多个操作，选取最少的那条操作，类似做过的微电看班需求。 要求定时任务每晚获取当天产能数据，更新插入后，计算效率，进行前端报表展示 具体的SQL 设计： with A AS( SELECT ID as ID,LINE as LINE, SHOP_ORDER as SHOP_ORDER, INDUCTIVE_DATE as INDUCTIVE_DATE, START_TIME as START_TIME, END_TIME as END_TIME, ALL_COUNT as ALL_COUNT, PROCESS as PROCESS, OPERATION as OPERATION, TO_CHAR(START_TIME, 'HH24:MI') || '~' || TO_CHAR(END_TIME, 'HH24:MI') AS TIME_RANGE, SUM(ALL_COUNT) OVER (PARTITION BY LINE,SHOP_ORDER,START_TIME,END_TIME,INDUCTIVE_DATE) AS SUM_COUNT, ROW_NUMBER() OVER (PARTITION BY LINE,SHOP_ORDER,PROCESS,START_TIME,END_TIME ORDER BY ALL_COUNT ASC) AS RN, REMARK as REMARK FROM MOM_SFC_INDUCTION WHERE SITE = 'S801'), B AS( SELECT A.ID as ID,A.LINE as LINE, A.SHOP_ORDER as SHOP_ORDER, A.INDUCTIVE_DATE as INDUCTIVE_DATE, A.START_TIME as START_TIME, A.END_TIME as END_TIME, A.TIME_RANGE as TIME_RANGE, A.ALL_COUNT as ALL_COUNT, A.PROCESS as PROCESS, A.SUM_COUNT as SUM_COUNT, S.QTY_TO_BUILD, split(S.planned_item_bo,2) as ITEM, A.REMARK as REMARK FROM SHOP_ORDER S JOIN A ON A.SHOP_ORDER = S.SHOP_ORDER and A.RN = 1 ) select B.ID as ID, B.LINE as LINE, B.SHOP_ORDER as SHOP_ORDER, B.ITEM as ITEM, M.INTRODUCTION as INTRODUCTION, B.QTY_TO_BUILD, B.INDUCTIVE_DATE as INDUCTIVE_DATE, B.TIME_RANGE as TIME_RANGE, B.PROCESS as PROCESS, B.SUM_COUNT as SUM_COUNT, M.STAND_PEOPLE as STAND_PEOPLE, M.STAND_PRODUCT as STAND_PRODUCT, B.ALL_COUNT as ALL_COUNT, (B.ALL_COUNT - M.STAND_PRODUCT) AS DIFF_COUNT, TO_CHAR((B.ALL_COUNT) / (M.STAND_PRODUCT)*100, 'FM9999990.00') || '%' AS EFFICIENCY, B.REMARK as REMARK FROM B JOIN MOM_STANDWORK_HOURS M ON B.ITEM = M.ITEM AND B.PROCESS = M.PROCESS ORDER BY INDUCTIVE_DATE,START_TIME","s":"1.产能报表需求","u":"/docs/Work/研控报表组装","h":"#1产能报表需求","p":527},{"i":532,"t":"清洗数据获取到当天的工单和工序(一般有10和20)，正常来说清洗出来都会有，但是拼装的时候没有，所以做出了后续的修改： //新增，处理process Map<String,String> processMap = new HashMap<>(); for (int i = 0; i < allConfig.size(); i++) { String key = allConfig.get(i).getSite()+\",\"+allConfig.get(i).getLine()+\",\"+allConfig.get(i).getOperation(); processMap.put(key, allConfig.get(i).getProcess()); } for (int i = 0; i < saveDataList.size(); i++) { String key = saveDataList.get(i).getSite()+\",\"+saveDataList.get(i).getLine()+\",\"+saveDataList.get(i).getOperation(); String process = processMap.get(key); //当取到的工序存在的时候 if(process!=null){ saveDataList.get(i).setProcess(process); } //不存在的时候 else{ saveDataList.get(i).setProcess(null); } } 获取到工单和工序后，调用SAP接口即可。","s":"2.1 处理工序为空","u":"/docs/Work/研控报表组装","h":"#21-处理工序为空","p":527},{"i":534,"t":"使用html的前端设计，前后端交互使用JSON格式，由于有分页要求，设计DTO类 public class ProductStatiticDTO { private final String regex = \"[0-9]+\"; //工厂 @NotBlank(message = \"MesExtController.site.notEmpty\") private String site; //线体 private String line; //工单 private String shopOrder; //物料编码 private String item; //产品描述 private String productDesc; //工单批量 private String shopOrderQty; //起始日期 private String startDate; //结尾日期 private String endDate; //时间段 private String timeRange; //工序 private String process; //累计产出 private String sumCount; //标准人数 private String standPeople; //标准产出 private String standProduct; //实际产出 private String allCount; //差异数量 private String diffCount; //效率 private String efficiency; //原因备注 private String remark; //选择Ids private String selectIds; //选择Ids private List<String> exportIds; //编辑数据Json (新增/修改) private String dataJson; //导出类型(select/selectPage/selectAll) private String exportType; //当前页 private String page = \"1\"; //每页条数 private String limit = \"30\"; //日期 private String createDate; } 前端使用layui，初始化grid： 这是初始化展示数据，调用接口，获取data，后端数据封装使用OperationResult正常返回即可，参数传入使用 ...layui.form.val('#searchForm')","s":"2.2 实体设计","u":"/docs/Work/研控报表组装","h":"#22-实体设计","p":527},{"i":536,"t":"前端选取数据导出传入的是ID组，后端处理拼接SQL，使用LIKE子句判断： if(StringUtils.isNotBlank(exportIds)){ sql.append(\" AND B.ID IN ('\"+exportIds+\"')\"); } 前端页面以sfc_config_list.html为模板，基本能够包含所有需求。","s":"2.3 数据导出","u":"/docs/Work/研控报表组装","h":"#23-数据导出","p":527},{"i":538,"t":"需求： 1.产品实际产能取工艺路线第一个工序的产能数据（多个工单数量相加）。 2.班次固定白夜班，08:30~20:30白班，其他时间夜班 3.效率未达到95%需显示红色，功能直通率/外观直通率未到98%需显示红色","s":"2-看板重构","u":"/docs/Work/重构看板","h":"","p":537},{"i":541,"t":"用来根据条件判断加入一个标记列 end和as结尾 样例： case WHEN to_char(msf.end_time, 'HH24:MI:SS') < '20:30:00' then '白班' else '晚班' end as DAYTIME","s":"1.1 case字句","u":"/docs/Work/重构看板","h":"#11-case字句","p":537},{"i":543,"t":"把一个查询语句当成一个子表用来供后面的查询 with as后要接上select语句，不然会报错 //单个命名 with as T( select * from a )select * from T //多个 with as T(), as A(), as B() select * from A,B,T;","s":"1.2 with as字句","u":"/docs/Work/重构看板","h":"#12-with-as字句","p":537},{"i":545,"t":"结合聚集函数使用 假设要聚合A字段，并且select中包含的是A，B，C，D字段，除了A字段，B和C都要加入到Group by后 先where后Group by 后Order by Group by后可以加Having条件限制分组 SELECT T.START_TIME as START_TIME, T.END_TIME as END_TIME, T.DAYTIME as DAYTIME, SUM(T.ALL_COUNT) as ALL_COUNT FROM T GROUP BY T.START_TIME, T.END_TIME, T.DAYTIME ORDER BY T.START_TIME","s":"1.3 Group by","u":"/docs/Work/重构看板","h":"#13-group-by","p":537},{"i":547,"t":"按照条件对数据进行分组，内部会排序，并且按照1,2,3这样的顺序排序 ROW_NUMBER() OVER (PARTITION BY B.START_TIME, B.END_TIME ORDER BY B.CREATEDDATE DESC) AS rn ROW_NUMBER() OVER (PARTITION BY 分组的列(或者数据) ORDER BY 排序的列 DESC) AS 命名 //同时可以结合SUM函数 SUM(列) OVER (partition BY 分组的列 ORDER BY 排序的列) as 命名","s":"1.4 ROW_NUMBER（）","u":"/docs/Work/重构看板","h":"#14-row_number","p":537},{"i":549,"t":"外连接有左外和右外，外连接就是算上自己的和别人共有的 left join和right join后面的on接条件，可以加and 内连接join on，类似求交集","s":"1.5 连接","u":"/docs/Work/重构看板","h":"#15-连接","p":537},{"i":551,"t":"SUM(P.ALL_COUNT) OVER (ORDER BY P.START_TIME) AS SUM_COUNT 这里还可以结合使用PARTITION BY分组求和。","s":"1.6 按行分组求和","u":"/docs/Work/重构看板","h":"#16-按行分组求和","p":537},{"i":553,"t":"本次遇到的主要问题就是保留小数点和百分号拼接的问题，使用如下函数： TO_CHAR((M.P_PASS_COUNT) / (M.P_ALL_COUNT)*100, 'FM9999990.00') || '%' AS P_RATE 即可以百分比形式保存并保留小数点后两位","s":"1.7 字符串拼接","u":"/docs/Work/重构看板","h":"#17-字符串拼接","p":537},{"i":555,"t":"with T as ( select S.site as SITE, S.shop_order as SHOP_ORDER, split(S.planned_item_bo,2) ITEM, MSF.start_time as START_TIME, MSF.end_time as END_TIME, IT.description as DESCRIPTION, MSF.all_count as ALL_COUNT, MSF.pass_count as PASS_COUNT, MSF.OPERATION as OPERATION, MSF.CREATEDDATE as CREATEDDATE, MSF.LINE as LINE, MSF.CAUSE as CAUSE, MSF.PROCESS as PROCESS, ROW_NUMBER() OVER (PARTITION BY MSF.START_TIME, MSF.END_TIME ORDER BY MSF.START_TIME DESC) AS RN from (SELECT SHOP_ORDER from MOM_SFC_INDUCTION WHERE TRUNC(SYSDATE) = TRUNC(START_TIME) GROUP BY SHOP_ORDER) A join SHOP_ORDER S on S.SHOP_ORDER = A.SHOP_ORDER join item_t IT on IT.item_bo = S.planned_item_bo and IT.locale = 'zh' join MOM_SFC_INDUCTION MSF on MSF.SHOP_ORDER = S.SHOP_ORDER JOIN router_step R ON S.planned_router_bo = R.router_bo AND R.SEQUENCE = 1 JOIN router_operation RO ON R.handle = RO.router_step_bo AND MSF.OPERATION = split(RO.operation_bo,2) where S.site = '1001' and MSF.line = 'HA5D003' and TRUNC(SYSDATE) = TRUNC(MSF.START_TIME) order by MSF.CREATEDDATE DESC ), P as ( SELECT T.START_TIME as START_TIME, T.END_TIME as END_TIME, SUM(T.ALL_COUNT) as ALL_COUNT, SUM(T.PASS_COUNT) as PASS_COUNT, WM_CONCAT(T.CAUSE) as CAUSE FROM T GROUP BY T.START_TIME, T.END_TIME ORDER BY T.START_TIME), M as ( SELECT T.START_TIME AS START_TIME, T.END_TIME AS END_TIME, SUM(CASE WHEN T.OPERATION LIKE '%QCD%' OR T.OPERATION LIKE '%AOI%' THEN T.ALL_COUNT ELSE 0 END) AS P_ALL_COUNT, SUM(CASE WHEN T.OPERATION LIKE '%QCD%' OR T.OPERATION LIKE '%AOI%' THEN T.PASS_COUNT ELSE 0 END) AS P_PASS_COUNT, SUM(CASE WHEN T.OPERATION LIKE'%ICT%' OR T.OPERATION LIKE '%FCT%' OR T.OPERATION LIKE '%BUR%' THEN T.PASS_COUNT ELSE 0 END) AS F_PASS_COUNT, SUM(CASE WHEN T.OPERATION LIKE'%ICT%' OR T.OPERATION LIKE '%FCT%' OR T.OPERATION LIKE '%BUR%' THEN T.ALL_COUNT ELSE 0 END) AS F_ALL_COUNT FROM MOM_SFC_INDUCTION T WHERE TRUNC(T.START_TIME) = TRUNC(SYSDATE) GROUP BY T.START_TIME, T.END_TIME ORDER BY T.START_TIME ) SELECT T.SHOP_ORDER, T.ITEM, T.LINE, T.PROCESS, TO_CHAR(P.START_TIME, 'HH24:MI') || '~' || TO_CHAR(P.END_TIME, 'HH24:MI') AS TIME_RANGE, CASE WHEN TO_CHAR(P.END_TIME, 'HH24:MI:SS') < '20:30:00' AND '08:15:00' < TO_CHAR(P.END_TIME, 'HH24:MI:SS') THEN '白班' ELSE '晚班' END AS SCHEDULE, T.DESCRIPTION, T.OPERATION, P.ALL_COUNT, SUM(P.ALL_COUNT) OVER (ORDER BY P.START_TIME) AS SUM_COUNT, TO_CHAR((M.F_PASS_COUNT) / (M.F_ALL_COUNT)*100, 'FM9999990.00') || '%' AS F_RATE, TO_CHAR((M.P_PASS_COUNT) / (M.P_ALL_COUNT)*100, 'FM9999990.00') || '%' AS P_RATE, P.CAUSE FROM P JOIN T ON P.START_TIME = T.START_TIME AND P.END_TIME = T.END_TIME JOIN M ON P.START_TIME = M.START_TIME AND P.END_TIME = M.END_TIME WHERE T.RN = 1 AND ( (TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS') BETWEEN '08:15:00' AND '20:30:00' AND TO_CHAR(P.END_TIME, 'HH24:MI:SS') < '20:30:00' AND '08:15:00' < TO_CHAR(P.END_TIME, 'HH24:MI:SS')) OR (TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS') NOT BETWEEN '08:15:00' AND '20:30:00' AND (TO_CHAR(P.END_TIME, 'HH24:MI:SS') >= '20:30:00' OR '08:15:00' >= TO_CHAR(P.END_TIME, 'HH24:MI:SS'))) ); 主要业务逻辑： 先按日期查询今天的一个工单号情况 拿到工单号连接工序表查找首工序(此步反转可以节省很大的查询时间) 对数据底表进行拼接分组，按照时间分组出来并且计算首工序的一个产能 再次对数据底表进行拼接分组，按照时间分组设置条件遴选外观通过率和功能通过率的指标数据，进行累加","s":"2.优化后的SQL","u":"/docs/Work/重构看板","h":"#2优化后的sql","p":537},{"i":558,"t":"一开始对项目的理解有误，写好SQL后的主要任务是： 将SQL封到ServiceImpl类中，能够使用Service来查询到数据库数据 写Controller接口，要求如下： 使用一个常量常驻缓存，用来保存从SAP接口中请求来的标准产能和标准人数 SAP接口传参要求[工单号，工序]，Controller接口传参要求[站点，线别] 要求这个常量缓存不重复保存数据，只在存在差异的时候进行更新 根据SAP接口查找到的标准产能来计算效率，并且返回到接口的List中","s":"3.1数据类型设计","u":"/docs/Work/重构看板","h":"#31数据类型设计","p":537},{"i":560,"t":"接口完成后需要发布上线后进行测试，此次记录具体步骤： 将本地开发分支合并dev，发布dev 到Jenkins中发布测试机 Jenkins中可以看到对应的分支配置文件 启动后可以到eureka中查看网关，对应在yml配置文件中 走网关到application中 eureka会把几个服务器管理起来，访问服务的时候走eureka的网关去访问，同时也可以通过网关内部访问其他应用的服务，微服务 走url的时候，网关+服务名+接口 如果出现token不被认证的错误，需要去对应网关下的BASE中开启白名单，开白名单使用部分匹配即可，类似LIKE子句 另外一种token认证的方法也可以在浏览器中获取到相应的Authorization,测试接口的时候使用Authorization方式即可","s":"4.上线测试手记","u":"/docs/Work/重构看板","h":"#4上线测试手记","p":537},{"i":562,"t":"XLD板子过站打码后需要进行清洗和审核。 清洗：根据小板条码、工单抓去对应的拼板数据，统一一块板进行清洗，清洗结果为OK和NG 审核：原理与清洗类似，由不同职能分次进行审核 该项目难度的两个功能其实逻辑基本一直，根据工单和条码从XLD表中抓取数据处理，并存入表中。","s":"5-清洗板","u":"/docs/Work/清洗板","h":"","p":561},{"i":564,"t":"SELECT L.SHOP_ORDER, L.ITEM, L.LINE, L.CLEAN_TIME, L.CLEAN_RESULT, L.CHECK_STATUS, L.CHECK_RESULT, L.CLEAN_PEOPLE, COUNT(M.SFC) AS SFC_COUNT FROM MOM_CLEANBAR_LOG L INNER JOIN MESEXT_XLD_BARCODE M ON L.BARCODE = M.BARCODE GROUP BY L.SHOP_ORDER,L.ITEM,L.LINE,L.CLEAN_TIME,L.CLEAN_RESULT,L.CHECK_STATUS,L.CHECK_RESULT,L.CLEAN_PEOPLE 该SQL可以将工单下关联的BARCODE和BARCODE下关联的SFC进行统计，得出清洗总数，使用聚合函数COUNT注意要结合GROUP BY来使用，其中分组的字段是除了聚合字段之外的所有字段。","s":"1.SQL记录","u":"/docs/Work/清洗板","h":"#1sql记录","p":561},{"i":567,"t":"要求根据工单和共产带出线体(去重后多项可选择)，以输入条码和工单的维度进行数据拉取： 主板条码：拉取下属全部小板条码 小板条码：反查主板条码，然后执行上述步骤 将获取线体和获取条码数据拆分为两个接口设计，传参按照表单传参 2.1 前端设计​ 要点1：线体数据返回并且可选 要点2：支持扫描多个小码 一次提交 <van-field ref=\"line\" :label=\"$t(languagePath+'line')\" :placeholder=\"$t(languagePath+'line')\" v-model=\"line\" :readonly=\"initShow\" is-link @focus=\"showLine = true\" required/> <van-action-sheet v-model=\"showLine\" :actions=\"lineResult\" @select=\"onSelectLine\" :description=\"$t('线体')\" /> 设计此模块来进行线体部分的选取和设置，绑定好v-model，其中的showLIne为是否展示选项框，:actions为对应的选项数据，select绑定选择事件 showLine: false, lineResult:[], line:'', //data如上 //调用后端获取数据 async initLineResult(){ if(!this.shopOrder){ this.info_error = this.$t('请输入工单号'); this.$refs.shopOrder.focus(); return false; } let params = { site:this.site, shopOrder:this.shopOrder }; await getLineResult(params) .then(res => { if(res.code === '0'){ let line = res.data; this.lineResult = this.convertListToKeyValue(line); this.info_error = \"\"; this.$refs.line.focus(); } else { Dialog.alert({message:res.message}); this.info_error = res.message; return false; } }); }, //选项框操作 onSelectLine(item){ this.showLine = false; this.line = item.value; this.$refs.code.focus(); }, 2.2 后端设计​ 要点：根据前端批量传入的JSON进行处理 设计接收JSON格式的传参即可，设计CleanBarLogVO接收参数 public class CleanBarLogVO { List<CleanBarLogDTO> dataList; String cleanResult; String site; String cleanPeople; }","s":"2.1 清洗模块","u":"/docs/Work/清洗板","h":"#21-清洗模块","p":561},{"i":569,"t":"审核模块同清洗模块基本意思一致，前端后端逻辑差不多类似","s":"2.2 审核模块","u":"/docs/Work/清洗板","h":"#22-审核模块","p":561},{"i":571,"t":"根据数据库设计好对应的实体类 与前端交互，接收参数大多数是表单，前端配置也默认表单，需要JSON需要手动更改，后端设计实体接收JSON 往往设计成VO类来接收前端过来的参数，一般是复杂的组合，List和一些String类型，List可以封装好实体类或者字符串，如上述的CleanBarLogVO示例 如果遇到报表类型的展示，有分页要求的，设计DTO类 public class CleanBarLogPageDTO { @NotBlank(message = \"\") private String site; private String shopOrder; private String barcode; private String item; private String line; private String cleanTime; private String cleanCount; private String cleanResult; private String checkStatus; private String cleanPeople; private String checkResult; //当前页 private String page = \"1\"; //每页条数 private String limit = \"30\"; } 将所需要的字段打成String，分页调用baseFunctionService的getSqlPageLimitResult函数即可，传入sql和页数和限制。 SQL设计，简短SQL设计使用Query在Dao中书写即可，复杂SQL场景使用StringBuffer来拼接SQL，多条件的时候，尽可能的先把表连接起来，然后判断是否进行AND xxx = xxx的拼接","s":"3.后端开发手记","u":"/docs/Work/清洗板","h":"#3后端开发手记","p":561},{"i":573,"t":"这是第一次直接实战上前端Vue的项目，具体记录一下流程和不懂的点。","s":"4.前端开发手记","u":"/docs/Work/清洗板","h":"#4前端开发手记","p":561},{"i":575,"t":"在api目录下，构建新的js文件，引入后端接口 import request from '@/utils/request' import qs from 'qs' export function getDataFromCode(data) { return request({ url: '', method: 'post', data: qs.stringify(data) }) } 其中需要注意的是，data:qs.stringify(data)是将参数以表单的形式进行提交，如果以JSON格式，直接使用data即可","s":"4.1 引入后端接口","u":"/docs/Work/清洗板","h":"#41-引入后端接口","p":561},{"i":577,"t":"在router路径下的index.js中进行配置 进行这样的配置后，Path也就是在base中对应配置的路径 在Base中的菜单进行配置后，同时需要在角色管理中加上对应的菜单权限，即可在页面中看到页面。","s":"4.2 注册vue的路径","u":"/docs/Work/清洗板","h":"#42-注册vue的路径","p":561},{"i":579,"t":"按照路径配置后，到对应路径下构建vue页面即可 vue的结构为界面和函数逻辑，部分写界面设计的逻辑，大多都是采用组建，这里使用的是vxetable，官方文档很齐全。 目前会用的： <van-field ref=\"code\" v-model=\"code\" :label=\"$t(languagePath+'code')\" :placeholder=\"$t(languagePath+'code')\" clearable @keydown.native.enter=\"enterCode\"> </van-field> 通过ref和v-model来进行绑定，一般命名一样。 @keydown.native.enter为回车函数，执行回车后的逻辑 **JS部分：**JS部分就是写处理逻辑的，使用data来定义数据，methods定义方法，回车函数一般就是判空。 示例异步请求后端处理： convertListToKeyValue(list){ return list.map(item => { return { name: item, value: item }; }); }, async initLineResult(){ if(!this.shopOrder){ this.info_error = this.$t('请输入工单号'); this.$refs.shopOrder.focus(); return false; } let params = { site:this.site, shopOrder:this.shopOrder }; await getLineResult(params) .then(res => { if(res.code === '0'){ let line = res.data; this.lineResult = this.convertListToKeyValue(line); this.info_error = \"\"; this.$refs.line.focus(); } else { Dialog.alert({message:res.message}); this.info_error = res.message; return false; } }); }, convertListToKeyValue为将String列表转成一个Map(K-V)格式的数据，initLineResult为异步函数， getLineResult就是调用后端接口。 表格数据删除：这是本次vue开发中遇到最大的问题，希望能够根据表格勾选来完成选中删除的功能(仅前端删除)，数据是绑定的，所以可以在谷歌浏览器中安装Vue的插件来进行查看和调试 删除逻辑： onDelete(){ //获取表格数据 let $table = this.$refs.xTable; //获取选中行数据 const list = $table.getCheckboxRecords(); if(list.length < 1){ Notify({type:'danger',message:''+this.$t('请至少选择一条数据进行删除')}); return false; } for (let i = 0; i < list.length; i++) { //因为splice会缩减数组长度，只需要跟着一起缩减索引即可 let index = this.tableData.findIndex(item => item._X_ROW_KEY === list[i]._X_ROW_KEY); console.log(index); this.tableData.splice(index, 1); } }, 新版本的vxetable中，使用了_X_ROW_KEY为唯一ID字段来进行选择删除了，使用getCheckboxRecords函数来获取选中的数据，splice函数来切割选中的数据","s":"4.3 Vue页面","u":"/docs/Work/清洗板","h":"#43-vue页面","p":561},{"i":581,"t":"这是第一个前后端(Vue)结合的需求，学会后端和Vue一起的操作和Vue的一些编写和配置。","s":"5.总结","u":"/docs/Work/清洗板","h":"#5总结","p":561},{"i":583,"t":"新用到的指令Git stash：能够将当前工作区修改的代码进行一个暂存，往往在开发过程中会出现以往功能的一些Bug修复，这时候需要从当前分支切换到另一个分支，会出现\"放弃当前想修改\"的提醒，这时候为了能够保存修改，又能切换分支修复Bug，对当前修改的文件进行Git stash即可。","s":"5.1 Git学习新纪录","u":"/docs/Work/清洗板","h":"#51-git学习新纪录","p":561},{"i":585,"t":"代码合并会出现冲突，git是以文件和行号来判断是否修改的，可能A在修改100行，B也在修改100行，完成后A推送了，B写完了拉取远程代码合并，会出现冲突，一般来说优选选择保留远程的Master分支中正常使用的代码，手动解决冲突，保留好自己和别人的代码(功能不一致的情况下)，功能一致情况下需要进行协商","s":"5.2 冲突解决","u":"/docs/Work/清洗板","h":"#52-冲突解决","p":561},{"i":588,"t":"清洗，审核页面新增提醒的按钮，提醒必填，在组件中使用required属性即可展示必填项。","s":"6.1 界面按钮确认","u":"/docs/Work/清洗板","h":"#61-界面按钮确认","p":561},{"i":590,"t":"新增一个根据年月日时分秒生成的流水号函数，前端页面页面绑定调用接口的函数，函数中调用数据初始化函数即可带出。","s":"6.2 自动生成条码并带出","u":"/docs/Work/清洗板","h":"#62-自动生成条码并带出","p":561},{"i":592,"t":"消息推送配置需要提前配置好唯一码，业务流程按线体和班别进行推送(正常模式)。 本次任务推送不考虑班别，配置线体和人员即可，Java配置代码如下： String text = \"线体\"+sqlResult.get(i).get(\"LINE\").toString()+\",工单\"+sqlResult.get(i).get(\"SHOP_ORDER\").toString()+\"有清洗记录,\"+\"清洗数量\"+sqlResult.get(i).get(\"SFC_COUNT\").toString()+\",请审核!!!\"; messageRemindConfigService.pushMsg(site, remindCode, text, true, null, sqlResult.get(i).get(\"LINE\").toString(), null); 走pushMsg函数是进行企微推送，需要先开通测试机的企微账号，开通本地IP。推送流程：本地推送——>企微服务器——>个人。","s":"6.3 删除IPQC，改用消息推送","u":"/docs/Work/清洗板","h":"#63-删除ipqc改用消息推送","p":561},{"i":595,"t":"使用readPDF工具读取PDF，按页按行解析即可，获取数据逐个匹配塞进去","s":"1.PDF读取解析","u":"/docs/Work/PDF解析","h":"#1pdf读取解析","p":593},{"i":597,"t":"/* ** chenle 新加S801研控部门的PDF解析 */ PdfReader reader = null; try { reader = new PdfReader(fileName); CheckReport checkReport = new CheckReport(); String faceType = \"\"; /* ** chenle 新加S801研控部门的PDF解析 */ String isPass = \"\"; String testType=\"\"; if(StringUtils.equals(site,\"S801\")){ //S801工厂的PDF解析策略 if(pageNum==0){ pageNum = reader.getNumberOfPages(); } for(int i = 1;i <= pageNum;i++){ pageContent += PdfTextExtractor.getTextFromPage(reader, i); } checkReport.setModelName(modelName); String[] contentSplit = pageContent.split(\"\\n\"); //S801的机种名称与其他的不一样， // 单独一个循环判断机种是否重复上传 for(int i = 0;i < contentSplit.length;i++) { String[] split; String tempStr = contentSplit[i]; if (tempStr == null) { break; } split = tempStr.split(\" \"); if(i == 3){ StringBuffer sql_s801 = new StringBuffer(); sql_s801.append(\"select * from MESEXT_FIRST_CHECK_REPORT where model_name = '\"+split[3]+\"'\"); List<Map<String, Object>> sqlResult_s801 = baseFunctionService.getSqlResult(sql_s801.toString()); if(CollectionUtil.isNotEmpty(sqlResult_s801)){ return OperationResult.buildFailureResult(\"已解析过的pdf不能再次解析\"); } break; } } //S801的机种名称与其他的不一样， // 单独一个循环判断机种是否重复上传 for(int i = 0;i < contentSplit.length;i++){ String [] split; String tempStr = contentSplit[i]; // System.out.printf(\"第\"+i+\"行数据为：\"+tempStr); if(tempStr == null){ break; } split = tempStr.split(\" \"); switch (i){ case 1: if(!split[1].equals(\"PASS\")){ isPass = \"NG\"; throw new RuntimeException(\"failure的文件不能上传\"); }else{ isPass = split[1]; checkReport.setResult(split[1]); checkReport.setBOMVersion(split[3]); checkReport.setPassCount(split[5]); checkReport.setPassRate(split[7]); break; } case 2: checkReport.setCheckPerson(split[1]); checkReport.setCheckTime(split[3]+\" \"+split[4]); // checkReport.setTestTime(split[4]); checkReport.setNoPassCount(split[6]); break; case 3: // checkReport.setTestType(split[3]); testType = \"首件\"; checkReport.setTestType(testType); checkReport.setModelName(split[3]); checkReport.setNoCheckCount(split[5]); checkReport.setCheckCount(split[7]); break; case 4: checkReport.setLineBody(split[1]); checkReport.setOrderCode(split[3]); checkReport.setProductCode(split[5]); break; case 5: faceType = split[1]; if(StringUtils.equals(faceType,\"T\")){ checkReport.setABSurface(\"A\"); break; } if(StringUtils.equals(faceType,\"B\")){ checkReport.setABSurface(\"B\"); break; } else{ checkReport.setABSurface(faceType); } break; default: break; } } checkReport.setSite(site); checkReport.setFileId(fileId); } //其他工厂的PDF解析策略 else{ if(pageNum == 0) { pageNum = reader.getNumberOfPages(); } for(int i=1;i<=pageNum;i++){ pageContent += PdfTextExtractor.getTextFromPage(reader, i);//读取第i页的文档内容 //System.out.println(pageContent); } String shopOrder = modelName.split(\"-\")[1]; String productCode = modelName.split(\"-\")[0]; checkReport.setProductCode(productCode); String[] contentSplit = pageContent.split(\"\\n\"); // 添加面别 //是否PASS或NG for(int i = 0;i<contentSplit.length;i++){ String[] split; String tempStr = contentSplit[i]; System.out.println(i+\"行数据为：\"+contentSplit[i]); if(tempStr == null){ break; } if(i==2){ split = tempStr.split(\" \"); checkReport.setResult(split[1]); if(!\"PASS\".equals(split[1])&&StringUtils.equals(site,\"5001\")){ throw new RuntimeException(\"failure的文件不能上传\"); } if(!\"PASS\".equals(split[1])&&!StringUtils.equals(site,\"5001\")){ isPass = \"NG\"; } testType=split[3]; checkReport.setTestType(split[3]); } if(i==3){ split = tempStr.split(\" \"); checkReport.setCompany(split[1]); checkReport.setWorkClass(split[2]); checkReport.setCheckCount(split[3]); } if(i==5){ split = tempStr.split(\" \"); int length = split.length; checkReport.setModelName(modelName); checkReport.setABSurface(split[length-3]); faceType = split[length-3]; checkReport.setPassCount(split[length-1]); } if(i==6){ split = tempStr.split(\" \"); checkReport.setScanTime(split[1]); checkReport.setNoPassCount(split[split.length-1]); } if(i==7){ split = tempStr.split(\" \"); checkReport.setProcessTime(split[1]); checkReport.setOrderCode(shopOrder); checkReport.setNoCheckCount(split[split.length-1]); } if(i==9){ split = tempStr.split(\" \"); //文档解析发生了变化 第9行变得不怎么符合规则 分割后数量发生了改变 导致数组下标溢出 // 修复时为了向下兼容 故移除中文字符 //List<String> list = Arrays.asList(split); ArrayList<String> list = new ArrayList<>(Arrays.asList(split)); list.remove(\"测值时间:\"); list.remove(\"生产线别:\"); list.remove(\"通过率:\"); checkReport.setCheckTime(list.get(0)); checkReport.setLineBody(list.get(1)); checkReport.setPassRate(list.get(2)); } if(i==10){ split = tempStr.split(\" \"); if (split.length==2){ //取11行数据 split =contentSplit[11].split(\" \"); } checkReport.setTestTime(split[1]); checkReport.setProduceTime(split[3]+\" \"+split[4]); if(split.length > 5) { checkReport.setCheckPerson(split[6]); } } } checkReport.setSite(site); checkReport.setFileId(fileId); if(StringUtils.equals(faceType,\"TOP\")){ faceType = \"A\"; } if(StringUtils.equals(faceType,\"BOT\")){ faceType = \"B\"; } if(StringUtils.equals(faceType,\"ALL\")){ faceType = \"A\"; } if (StringUtils.equals(faceType,\"A\")){ faceType = \"A\"; } if (StringUtils.equals(faceType,\"B\")){ faceType = \"B\"; } } Map<String, Object> productPlan = getProductPlan(site, checkReport.getLineBody(), checkReport.getOrderCode(), faceType); String planLogUuid = null; if (Objects.nonNull(productPlan)){ planLogUuid = (String) productPlan.get(\"UUID\"); } //NG情况下进行停机 if(\"NG\".equals(isPass)) { //this.stopMounter(site, checkReport.getLineBody(), checkReport.getOrderCode(), faceType); } if(StringUtils.isNotBlank(planLogUuid)&&!StringUtils.equals(testType,\"IPQC\")){ checkReport.setPlanLogId(planLogUuid); //双套料生产的工单 允许上传多个首件报告 单套料则清空关联 if (Integer.parseInt((String)productPlan.get(\"TL\")) == 1){ clearOldRelation(planLogUuid); }else{ // 2024-05-27 双套料工单上传多个首件报告，不删除只解除关联关系 String updateSql = \"update mesext_first_check_report set plan_log_id = '' where id = :ID \"; Map<String, Object> params = new HashMap<>(); List<CheckReport> all = checkReportDao.findAllBySiteAndPlanLogIdOrderByCreatedDate(site, planLogUuid); if (all.size()>1){ String id = all.get(0).getId(); if (Objects.nonNull(id)){ params.put(\"ID\", id); int update = baseFunctionService.getUpdate(updateSql, params); // checkReportDao.deleteById(id); } } } } if(StringUtils.isBlank(planLogUuid)&&StringUtils.equals(site,\"5001\")&&!StringUtils.equals(testType,\"IPQC\")){ throw new RuntimeException(\"未找到PDF中下达/激活状态的工单\"); } //获取当前线体下达的工单获取其产品编码 与 现有的产品编码对比是否一致 List<Map<String, Object>> results = baseFunctionService.getSqlResultThrowE( \"select a.shop_order,split(b.planned_item_bo,2) item from mesext_production_plan a \" + \"left join shop_order b on a.site = b.site and a.shop_order = b.shop_order\" + \" where a.site = '\" + site + \"' and a.line_no = '\" + checkReport.getLineBody() + \"' and a.status = '10'\"); if (CollectionUtil.isEmpty(results)){ // throw new RuntimeException(\"当前线体\"+checkReport.getLineBody()+\"不存在下达工单\"); } System.out.printf(String.valueOf(results)); Map<String, Object> map = results.get(0); Object itemBo = map.get(\"ITEM\"); if (!StringUtils.equals(String.valueOf(itemBo ),checkReport.getProductCode())){ throw new RuntimeException(\"当前线体\"+checkReport.getLineBody()+\"下达工单的产品编码为：\"+itemBo+\",与当前上传文件产品编码\"+checkReport.getProductCode()+\"不符\"); } checkReportDao.save(checkReport); System.out.printf(\"解析完成\"); } catch (Exception e) { throw new RuntimeException(\"解析失败，请检查pdf格式是否正确\" + e.getMessage(), e); }finally { if(reader != null) { reader.close(); } }","s":"2.解析策略","u":"/docs/Work/PDF解析","h":"#2解析策略","p":593},{"i":599,"t":"本次主要进行的是PDF流解析的重写，新增一个工厂的解析方法，难度不大，重点还是熟悉业务流程和数据库，系统的操作。","s":"3.总结","u":"/docs/Work/PDF解析","h":"#3总结","p":593},{"i":601,"t":"从yaml文件中找到oracle的信息，连接的时候记得修改为端口后面的字段 切记只用env和dev，不可使用pro oracl不同于mysql，是以表空间为单位，本次操作的是在meswip中才找到了数据表，mesext_first_check_report存放的是首次报告检测的内容","s":"3.1数据库连接","u":"/docs/Work/PDF解析","h":"#31数据库连接","p":593},{"i":603,"t":"首先在本地克隆远程master分支 new一个本地修改代码的分支：chenle_xxxx 本地修改代码 上测试机 改代码的分支chenle_xxxx进行commit checkout到dev分支，merge分支chenle_xxxx到dev中 pull一次远程，然后push 上主机也是同理，将本地分支merge到master中，切记不要将dev合并到master中 ———————————————————————————————————————— 如果将dev合并到master将会导致别人的错误bug可能发布到正式机上，引起宕机 ————————————————————————————————————————","s":"3.2Git工具使用","u":"/docs/Work/PDF解析","h":"#32git工具使用","p":593},{"i":605,"t":"出现PDF Header not found的错误 PDF文件出错，受损等等 排查read PDF类和PDFBOX类的影响 最终问题出在服务器的问题，上传PDF的服务器和测试的服务器不是同一个，但是数据库一样，会导致无法从服务器下载PDF下来并且进行解析 代码提交后依然无效，出现数组越界问题 发布正式机没发布对 TODOLIST：学习docker指令","s":"3.3 8月23日~25日BUG排查日志","u":"/docs/Work/PDF解析","h":"#33-8月23日25日bug排查日志","p":593},{"i":608,"t":"MOM_SOLDER_CABINET_OPERATION 锡膏柜操作记录 MOM_SOLDER_ENTER_CHECK 锡膏红胶来料质检 MOM_SOLDER_INVENTORY 锡膏红胶库存数据 MOM_SOLDER_INVENTORY_LOG 锡膏红胶出入库数据 MOM_SOLDER_MOVE_LOG 锡膏红胶的移库记录","s":"1.数据库设计","u":"/docs/Work/锡膏后端","h":"#1数据库设计","p":606},{"i":611,"t":"用户进入界面后，系统自动获取当前工厂下打印模板及打印机填充到下拉框 在用户输入物料编码、批次、供应商及数量时，自动按照批次解析成生产日期 在用户点击打印时自动形成前端输入数量的条码调用打印机及打印模板执行打印","s":"2.1 操作流程","u":"/docs/Work/锡膏后端","h":"#21-操作流程","p":606},{"i":613,"t":"传入参数，后端会调用函数解析好SFC，通过打印服务打印SFC 条码格式： 物料编码,唯一码,批次解析后的周期,供应商编码-批次 打印机标识：type字段为锡膏绑定 **打印服务调用：**先会获取打印模板，然后获取打印设备，前端调用接口获取，传回参数到后端调用打印机","s":"2.2 调用打印服务","u":"/docs/Work/锡膏后端","h":"#22-调用打印服务","p":606},{"i":615,"t":"采用这种方式绑定： <!-- 打印模板 --> <VantSelect :rules=\"[{ required: true, message: '打印模板不能为空'}]\" :value.sync=\"printerTemplateId\" label=\"打印模板\" :options=\"printTemplateData\"/>","s":"2.3 前端","u":"/docs/Work/锡膏后端","h":"#23-前端","p":606},{"i":618,"t":"用户进入锡膏红胶来料质检主界面后，自动获取当前工厂三个月内的质检数据填充到表单中，支持按照查询条件查询数据， 支持用户手动发起新增质检，前端在进入质检执行界面后，调用接口填充待质检项，业务手动填入质检数据执行质检； 对页面中的质检数据，需能勾选单行后点击编辑按钮调用后端接口获取质检数据执行编辑，也可勾选多行执行删除；对页面表单中的文件，也支持点击查看对应文件预览及下载。","s":"3.1 操作流程","u":"/docs/Work/锡膏后端","h":"#31-操作流程","p":606},{"i":620,"t":"三张主要的质检表： MOM_CHECK_DATA 确认项主表(表头) MOM_CHECK_DATA_ITEM 确认项子表(存数据的表) 通过UUID关联 CHECK_ID唯一标识 MOM_CHECK_ITEM 确认项模板数据 操作流程： 用户先在配置项进行配置，配置数据会保存到MOM_CHECK_ITEM中去，MOM_CHECK_ITEM会生成一份模板的数据(配置项只有一份)，进行角色配置后，登陆某一角色的时候，会带出对应的MOM_CHECK_ITEM出来可以填。 用户填写一份质检数据后，首先会生成一条MOM_CHECK_DATA数据，其中MOM_CHECK_DATA通过UUID关联到MOM_CHECK_DATA_ITEM的UUID，MOM_CHECK_DATA_ITEM存的就是质检数据，通过CHECK_ID关联到MOM_CHECK_ITEM的模板。 **数据表关系：**一条质检数据，对应多条质检项数据，质检项数据又跟质检模板关联 MOM_CHECK_DATA的status设置为:SolderPaste_Check，代表锡膏红胶专属","s":"3.2 后端逻辑参考","u":"/docs/Work/锡膏后端","h":"#32-后端逻辑参考","p":606},{"i":622,"t":"前端参考solderpaste_enter_check.html和solderpaste_enter_check_add.html 3.3.1 新增质检​ 通过Layer.open方法跳转： layer.open({ type: 2, title: \"新增质检\", closeBtn: 1, area: ['85%', '100%'], content: ROOT + `/SolderCabinet/solderpaste_enter_check_add.html`, yes:function(index, layero){ layer.close(index); searchBtn(); }, end: function () { searchBtn(); }, success:function () { //弹层开启后 Enter回车 遮罩层无限弹处理 $(':focus').blur(); } }); yes和end是回调函数的处理，这里调用小框后，可以采取一个默认销毁层，直接进到end回调处理比较好 3.3.2 编辑质检​ 编辑质检，需要传入ID，方便后端抓取数据进行填充，可以采用这种方式进行传参： function editClick(){ let selection = grid.selection; if(selection.length !== 1){ layer.msg($.i18n.prop(\"hint.selectOnlyOne\"),{icon:7}); return false; } let mainId = selection[0].ID; layer.open({ type: 2, title:false, closeBtn:0, area: ['100%', '100%'], content: ROOT + `/SolderCabinet/solderpaste_enter_check_add.html?mainId=${mainId}`, yes:function(index, layero){ layer.close(index); searchBtn(); }, end: function () { searchBtn(); }, success:function () { //弹层开启后 Enter回车 遮罩层无限弹处理 $(':focus').blur(); } }); } 3.3.3 踩坑点​ html之间的传参有时候会需要传参中文，使用uri的方式直接传，会出现乱码，需要先编码，传参，解码后获取在处理： let encodeitem = encodeURIComponent(selection[0].ITEM); let encodetechnologyType = encodeURIComponent(selection[0].TECHNOLOGY_TYPE); let encodebatch = encodeURIComponent(selection[0].BATCH); 直接进行监听，取值，调后端接口： document.addEventListener('DOMContentLoaded', function() { const urlParams = new URLSearchParams(window.location.search); item = decodeURIComponent(urlParams.get('encodeitem')); technologyType = decodeURIComponent(urlParams.get('encodetechnologyType')); batch = decodeURIComponent(urlParams.get('encodebatch')); // 标头 document.getElementById(\"item\").value = item; document.getElementById(\"technologyType\").value = technologyType; document.getElementById(\"batch\").value = batch; let parmas={ item:item, technologyType:technologyType, batch:batch } // 接口 }); 需要传类似id的List到后端的时候，用逗号隔开传，不要转类似Json的 let ids = []; for(let index in selection){ ids.push(selection[index].ID); } let params = { site:SITE, selectIds:ids.join(',') }; 后端用List或者String来接都可以，按照情况解析即可","s":"3.3 前端","u":"/docs/Work/锡膏后端","h":"#33-前端","p":606},{"i":624,"t":"**操作流程：**用户点击进入锡膏红胶入库界面后，先选择工艺，随后扫条码，扫描条码时，自动解析条码规则，并按照工厂+物料编码+批次号的维度查询质检记录表中是否存在对应的质检记录，且校验唯一码是否在系统存在，存在对应质检记录且唯一码不在库存数据中存在即可扫描填充到表单中，可重复扫描后一次性提交入库； **注意：**先去质检里面质检一条该批次下的合格数据，条码来源打印接口的输出","s":"4.锡膏红胶入库","u":"/docs/Work/锡膏后端","h":"#4锡膏红胶入库","p":606},{"i":626,"t":"操作流程: 进入界面后，系统默认下拉框为按单瓶移库，操作人默认当前登录账号的工号； 描条码后，调用后端接口校验条码是否存在、状态是否在库且解析后的生产日期是否为当前库存数据中最早的锡膏红胶， 通过校验后解析条码带入表单中，并支持删除勾选行及提交现有表单信息、登录工厂及操作人调用后端接口执行保存； 不允许扫描多瓶后删除最新的提交，加校验","s":"5.锡膏红胶移库","u":"/docs/Work/锡膏后端","h":"#5锡膏红胶移库","p":606},{"i":628,"t":"5.1.1 单瓶​ SQL直接按照批次号，序列号，入库时间这三个维度(顺序)进行查询，组装数据返回到前端 前端校验：将当前扫码的数据与当前的数据第一条进行比较，SFC匹配代表是最早的，同时设置一个游标来移动，确保每次扫码带出的都是最早的数据 async initSingleMove(){ // 先校验当前库存中是否有可以进行移库的数据 if(this.sfcData.length === 0){ Dialog.alert({message:'当前没有在库可移库的数据'}); this.sfc=''; this.$refs.sfc.focus(); return false; } // 先进行校验，判断当前输入的条码是不是后端返回中的第一条数据(FIFO) if(this.sfc != this.sfcData[this.flag].sfc){ Dialog.alert({message:'当前条码不是库存中最早的数据'}); this.sfc=''; this.$refs.sfc.focus(); return false; } //组装参数调用校验条码接口 let params = { site:this.site, sfc:this.sfc }; await verifySingleMoveData(params) .then(res => { if(res.code === '0'){ let data = res.data; let addJudge = true; //若条码重复扫描则不新增行 if(this.tableData.length===0){ data.id = this.sfcData[this.flag].id; data.technologyType = this.sfcData[this.flag].technologyType; data.weight = this.sfcData[this.flag].weight; this.tableData.push(data); this.flag = this.flag + 1; } for(let i=0;i<this.tableData.length;i++){ if(this.tableData[i].keyCode === data.keyCode){ addJudge = false; break; } } if(addJudge){ data.id = this.sfcData[this.flag].id; data.technologyType = this.sfcData[this.flag].technologyType; data.weight = this.sfcData[this.flag].weight; this.tableData.push(data); this.flag = this.flag + 1; } this.info_error = \"\"; } else { Dialog.alert({message:res.message}); this.info_error = res.message; return false; } }); }, 删除校验：由于游标的存在，必须从下往上删除，确保每次删除的都是表单中最新的，最应该被删除的 onDelete(){ //获取表格数据 let $table = this.$refs.xTable; //获取选中行数据 let list = $table.getCheckboxRecords(); let len = list.length; //判断选中的长度 if(len < 1){ Notify({type:'danger',message:''+this.$t('请至少选择一条数据进行删除')}); return false; } //校验选中的数据是不是从下往上删除 if(len === 1){ console.log(list[0].id); console.log(this.sfcData[this.flag - 1].id); if(list[0].id != this.sfcData[this.flag - 1].id){ Dialog.alert({message:'删除请按照从下往上选择的规则'}); this.sfc=''; return false; } let index = this.tableData.findIndex(item => item._X_ROW_KEY === list[0]._X_ROW_KEY); this.flag = this.flag - 1; this.tableData.splice(index, 1); } if(len > 1 && len < this.tableData.length){ console.log(list); for(let i = 0;i<list.length;i++){ console.log(list[i].id != this.sfcData[this.flag - 1].id); if(list[i].id != this.sfcData[this.flag - 1].id){ Dialog.alert({message:'删除请按照从下往上选择的规则'}); this.sfc=''; return false; } let index = this.tableData.findIndex(item => item._X_ROW_KEY === list[i]._X_ROW_KEY); this.flag = this.flag - 1; this.tableData.splice(index, 1); } } if(len === this.tableData.length){ this.tableData = []; this.flag = 0; } }, 5.1.2 批次​ 直接从库中按照批次号，序列号，入库时间这三个维度(顺序)进行查询，按照批次来匹配数据即可，不匹配则提示","s":"5.1 校验是否最早","u":"/docs/Work/锡膏后端","h":"#51-校验是否最早","p":606},{"i":630,"t":"校验通过，修改状态则进行移库，取消移库则是可以批量取消，同样是修改状态即可，这两种操作都会记录到MOM_SOLDER_INVENTORY_LOG记录表和MOM_SOLDER_MOVE_LOG中","s":"5.2 移库和取消移库","u":"/docs/Work/锡膏后端","h":"#52-移库和取消移库","p":606},{"i":632,"t":"操作流程： 入库：锡膏红胶入库 移库：锡膏红胶转移，拿到锡膏柜中 冷冻：在锡膏柜中进行冷冻，也就是移库完成了 报废：对其进行报废","s":"6.库存主数据","u":"/docs/Work/锡膏后端","h":"#6库存主数据","p":606},{"i":634,"t":"不是每个用户都可以进行报废操作，此处做一个权限管控，先去BASE中造一个角色组 角色编码：SolderCabinetAdministrators @Override public OperationResult verifyUser(String roleCode) { UserInfo user = WebUserUtil.getUser(); if(user == null){ throw new RuntimeException(\"token is empty!\"); } String userId = user.getUserId(); String userName = user.getUserName(); String key = String.format(\"%s:%s:%s\", \"userRole\", roleCode, userId); // 先取redis再取base String value = redisService.getValue(key); if(StringUtils.isBlank(value)){ boolean checkResult = userUtils.checkUserRole(roleCode, userId, userName); value = String.valueOf(checkResult); redisService.set(key, value, 5, TimeUnit.MINUTES); } if(value.equals(\"true\")){ return OperationResult.buildSuccessResult(\"true\"); } return OperationResult.buildSuccessResult(\"false\"); } 通过权限管控控制是否展现报废按钮 **报废：**报废有三种情况：审核中，无需审核，审核完成，正常选择需要审批，选择人员就进入审核中，无需审批就是直接进入报废，审核过了就会进到审核完成。","s":"6.1 锡膏报废","u":"/docs/Work/锡膏后端","h":"#61-锡膏报废","p":606},{"i":636,"t":"设置审核通过和审核驳回两种状态","s":"6.2 审核","u":"/docs/Work/锡膏后端","h":"#62-审核","p":606},{"i":638,"t":"按照状态进行数据盘点","s":"6.3 库存数据盘点","u":"/docs/Work/锡膏后端","h":"#63-库存数据盘点","p":606},{"i":640,"t":"库存状态： 库存状态 在库 移库 冷冻 报废 0 1 2 3 操作类型： 操作类型 入库 移库 取消移库 冷冻 报废 0 1 2 3 4 移库类型： 移库类型 单瓶 批次 0 1 移库状态： 移库状态 移库中 移库完成(冷冻) 取消移库 0 1 2 审核状态： 审核状态 审核中 无需审核 审核通过 审核驳回 0 1 2 3 审核操作： 审核操作 审核通过 审核驳回 0 1","s":"7.状态表","u":"/docs/Work/锡膏后端","h":"#7状态表","p":606}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,1.575]],["t/5",[1,0.284,2,6.72,3,6.72,4,6.72,5,6.72]],["t/7",[1,0.278,2,6.591,3,6.591,4,6.591,5,6.591,6,7.859]],["t/10",[1,0.387,7,5.271,8,6.285,9,4.359,10,6.285]],["t/12",[0,1.276,1,0.362,2,5.908,3,5.908,4,5.908,5,5.908,11,7.045,12,2.327]],["t/15",[0,1.675,1,0.273,7,6.466,13,7.71,14,7.71,15,2.489]],["t/20",[1,0.295,15,2.693,16,5.409]],["t/22",[0,1.397,1,0.364,17,6.466,18,6.96]],["t/24",[0,1.66,1,0.324,17,6.966,18,5.854,19,6.485,20,6.485,21,6.485,22,4.674,23,6.485,24,6.485,25,6.485,26,6.485]],["t/27",[1,0.364,17,6.466,27,7.71,28,7.71]],["t/29",[1,0.284,29,8.013,30,6.336,31,8.013,32,8.013]],["t/34",[0,1.381,1,0.371,33,4.538,34,4.057,35,4.538,36,2.943,37,4.696,38,4.225,39,4.538,40,6.394,41,4.538,42,4.097,43,6.987,44,4.538,45,6.516,46,4.538,47,3.588,48,2.321]],["t/37",[0,1.397,1,0.327,12,3.054,49,7.71,50,7.71]],["t/39",[1,0.301,51,8.515]],["t/41",[0,1.734,12,2.699,52,8.174]],["t/44",[1,0.308]],["t/46",[0,0.925,1,0.367,9,3.541,12,1.686,37,3.68,53,5.106,54,5.106,55,5.106,56,5.106,57,5.106,58,5.106,59,5.106,60,5.106,61,5.106,62,5.106,63,5.106,64,5.106,65,5.106,66,2.277,67,5.106,68,5.106,69,5.106,70,2.663,71,5.106]],["t/48",[1,0.295,72,8.341,73,8.341]],["t/52",[1,0.339,74,3.703,75,8.174]],["t/54",[0,1.623,1,0.219,9,6.216,12,2.662,76,5.191,77,6.19,78,6.19,79,5.809,80,6.19,81,6.19,82,6.19,83,5.588,84,6.19,85,6.19]],["t/56",[0,1.474,9,6.623,12,2.076,76,5.271,79,6.508,83,7.349,86,6.285,87,6.285,88,6.285,89,6.285,90,6.285,91,6.285]],["t/58",[1,0.308]],["t/60",[1,0.301,92,8.515]],["t/63",[0,1.568,1,0.377,74,4.28]],["t/65",[74,3.94]],["t/69",[1,0.368,76,6.72]],["t/71",[93,8.174,94,8.174,95,8.174,96,8.174]],["t/73",[0,1.536,1,0.329,12,2.212,66,2.987,97,6.698,98,6.698,99,6.698,100,6.698,101,5.296,102,4.485,103,3.493,104,6.698]],["t/76",[1,0.331,105,7.859,106,7.859,107,7.859,108,5.914]],["t/78",[0,1.298,1,0.313,66,3.197,74,3.248,79,6.376,109,7.169,110,7.169,111,7.169,112,7.169]],["t/80",[1,0.366,70,3.805,113,6.119,114,5.491,115,7.297,116,6.587]],["t/82",[1,0.351,113,6.466,114,5.802,116,6.96,117,7.71]],["t/84",[1,0.331,113,6.591,114,5.914,118,7.859,119,7.859]],["t/87",[1,0.331,120,7.859,121,7.094,122,7.859,123,7.859]],["t/89",[0,1.656,1,0.324,124,7.567,125,7.567,126,7.567,127,7.567]],["t/91",[0,1.67,1,0.369,74,4.544,121,4.143,128,4.589,129,4.589,130,4.589,131,4.589,132,4.589,133,4.589,134,4.589,135,4.589,136,3.307,137,4.589,138,4.589,139,4.589]],["t/93",[140,8.696]],["t/95",[0,1.126,1,0.383,12,1.405,34,3.309,48,2.176,74,1.927,141,4.254,142,4.254,143,3.84,144,3.364,145,4.254,146,4.254,147,4.254,148,5.088,149,5.215,150,4.254,151,4.254,152,3.84,153,4.254,154,4.254]],["t/97",[1,0.335,155,8.013,156,8.013,157,8.013]],["t/99",[0,1.52,1,0.297,148,4.148,158,7.576,159,6.59,160,6.59,161,6.59,162,6.59,163,8.392,164,6.59,165,5.949,166,6.59]],["t/101",[0,1.626,1,0.345,12,0.807,148,5.142,165,2.207,167,2.445,168,2.445,169,2.445,170,2.445,171,2.445,172,1.933,173,4.035,174,2.445,175,9.124,176,7.1,177,2.445,178,2.445,179,5.153,180,2.445,181,2.445,182,7.127,183,7.881,184,2.445,185,2.445,186,2.445,187,2.445,188,2.445,189,2.445,190,5.981,191,2.445,192,2.445,193,2.207,194,2.445,195,2.445,196,2.445,197,2.445,198,2.207,199,2.445,200,2.445]],["t/103",[0,0.997,1,0.375,34,3.548,48,2.816,74,3.021,143,3.262,148,4.197,149,3.031,158,3.262,172,4.353,176,4.353,193,4.97,198,3.262,201,3.614,202,1.963,203,3.614,204,4.97,205,3.262,206,3.614,207,3.614,208,3.614,209,4.97,210,3.262,211,3.614,212,3.614,213,3.614,214,3.262,215,3.614,216,3.614,217,3.614,218,3.614]],["t/105",[1,0.375,34,2.362,74,3.412,148,4.037,149,3.723,152,4.007,176,5.954,202,2.412,204,4.007,205,4.007,209,4.007,210,5.79,219,4.439,220,4.439,221,4.439,222,4.439,223,4.439,224,4.439,225,4.439,226,6.414,227,6.414]],["t/109",[0,1.172,1,0.382,9,1.404,12,0.668,34,3.004,38,0.719,48,1.762,66,0.495,74,2.037,79,3.825,172,0.877,202,1.1,228,1.109,229,1.109,230,1.109,231,1.109,232,2.024,233,1.109,234,4.007,235,3.617,236,4.007,237,1.109,238,1.109,239,4.496,240,2.889,241,4.131,242,4.79,243,2.779,244,1.109,245,1.109,246,1.109,247,1.109,248,1.523,249,1.109,250,1.109,251,0.877,252,1.109,253,1.109,254,1.109,255,1.109,256,1.001,257,1.109,258,2.791,259,2.791,260,2.101,261,1.109,262,2.024,263,3.444,264,1.109,265,2.024,266,2.024,267,1.109,268,1.109,269,1.6,270,1.109,271,1.109,272,1.109,273,1.109,274,2.024,275,1.109,276,1.109,277,1.109,278,1.109,279,1.109,280,1.109,281,1.109,282,1.109,283,1.001,284,1.001,285,1.001,286,1.001,287,1.001,288,0.567,289,1.109,290,1.109,291,1.109,292,1.109,293,1.109,294,1.109,295,1.001,296,1.109,297,1.109,298,1.109,299,2.024,300,2.024,301,1.109,302,1.109,303,1.109,304,1.109,305,0.93,306,2.024,307,1.109,308,1.109,309,1.109,310,1.109,311,1.109]],["t/112",[0,1.254,1,0.381,312,6.925,313,6.925,314,6.925]],["t/114",[1,0.347]],["t/116",[1,0.382,283,6.147,315,6.147,316,6.81,317,6.81]],["t/118",[0,1.346,1,0.368,136,5.355,315,6.707,318,7.43]],["t/121",[0,1.507,1,0.371,34,3.119,74,4.553,240,3.293,241,3.293,319,3.927,320,3.927,321,3.927,322,3.927,323,3.927,324,3.927,325,3.927,326,3.927,327,3.927,328,3.545,329,3.545,330,3.927,331,3.927,332,3.545,333,3.927,334,3.293,335,3.927]],["t/123",[1,0.344,34,4.269,172,3.939,240,6.729,241,7.285,243,3.454,328,4.497,329,4.497,332,4.497,336,4.981,337,8.687,338,4.981,339,4.497,340,8.024,341,4.981,342,6.961,343,4.981]],["t/126",[0,0.718,1,0.373,12,1.95,202,3.207,251,3.135,256,3.579,344,3.965,345,3.579,346,3.965,347,5.329,348,4.443,349,3.965,350,3.965,351,3.965,352,3.965,353,3.965,354,3.965,355,3.965,356,3.579,357,3.579,358,3.613,359,5.903,360,3.965,361,3.965,362,3.579,363,3.579,364,3.579,365,3.579,366,3.965,367,3.965,368,3.579,369,3.965]],["t/128",[1,0.351,202,3.782,251,3.939,345,4.497,347,4.497,356,4.497,357,6.283,358,3.049,362,4.497,363,4.497,364,4.497,365,6.283,368,4.497,370,4.981,371,4.981,372,6.961,373,6.961,374,2.897,375,6.961,376,4.981,377,4.981,378,3.939,379,4.981]],["t/130",[0,1.346,1,0.345,378,5.875,380,7.43,381,7.43,382,7.43,383,7.43]],["t/132",[384,8.515,385,7.141]],["t/134",[385,7.141,386,8.515]],["t/136",[0,0.769,1,0.384,12,1.777,16,1.686,66,1.893,70,2.805,74,1.178,288,3.961,385,2.181,387,2.601,388,2.601,389,2.601,390,2.601,391,2.601,392,2.601,393,2.601,394,2.944,395,5.207,396,2.601,397,4.245,398,3.117,399,6.209,400,4.245,401,5.379,402,1.957,403,2.601,404,2.056,405,2.601,406,2.601,407,2.601,408,2.601,409,2.601,410,2.601]],["t/139",[411,8.696]],["t/141",[1,0.382,412,6.81,413,6.81,414,6.147,415,6.81]],["t/143",[1,0.36,416,5.921,417,5.921,418,5.921,419,5.921,420,5.921,421,5.921,422,5.921,423,5.921,424,5.921,425,5.921,426,5.921,427,5.921,428,5.921,429,5.921,430,5.921,431,5.921]],["t/147",[1,0.382]],["t/149",[1,0.387]],["t/153",[1,0.388,432,6.59,433,6.59]],["t/155",[0,1.233,1,0.359,12,2.249,66,3.037,70,3.551,434,6.81,435,6.81,436,6.81,437,6.81,438,6.81]],["t/158",[1,0.295,439,6.596,440,8.341]],["t/161",[1,0.38,441,8.847,442,7.169]],["t/163",[1,0.362]],["t/165",[1,0.337,15,2.274,443,7.045,444,7.045,445,7.045,446,7.045,447,7.045,448,5.302,449,7.045,450,7.045]],["t/168",[1,0.38,15,1.57,451,4.078,452,5.412,453,4.862,454,4.862,455,4.862,456,4.862,457,4.862,458,4.862,459,4.862,460,6.844,461,5.74,462,6.844,463,4.862,464,4.862,465,4.389]],["t/170",[0,0.524,1,0.374,12,0.956,16,1.878,269,3.662,466,4.853,467,2.896,468,2.896,469,3.337,470,2.896,471,3.337,472,2.896,473,2.614,474,2.896,475,2.896,476,2.896,477,2.896,478,3.752,479,4.631,480,4.631,481,2.896,482,2.896,483,2.896,484,2.896,485,2.896,486,3.337,487,2.896,488,2.896,489,4.18,490,2.896,491,2.896,492,2.614,493,2.896,494,2.896,495,2.614,496,2.896,497,2.614,498,2.896,499,2.896,500,3.883,501,3.485,502,2.896,503,2.896,504,2.896,505,4.18,506,2.896,507,2.179]],["t/172",[1,0.328,451,7.303,466,4.88,469,4.206,478,3.784,489,5.268,505,5.268,508,9.279,509,5.836,510,5.836,511,5.836,512,5.836,513,5.836,514,5.836,515,5.836]],["t/175",[1,0.237,516,6.698,517,6.698,518,9.78,519,6.698,520,7.654,521,6.698,522,6.698,523,6.698,524,6.698,525,6.698]],["t/177",[1,0.284,439,6.336,526,8.013,527,8.013,528,8.013]],["t/180",[1,0.308]],["t/182",[0,1.429,1,0.364,12,1.335,34,2.151,36,2.622,38,2.622,66,1.803,148,2.545,202,2.197,348,3.043,529,4.043,530,7.135,531,4.043,532,4.043,533,4.043,534,4.043,535,4.043,536,4.043,537,4.043,538,3.65,539,3.65,540,4.043,541,4.737,542,4.508,543,3.391,544,4.043,545,5.023,546,5.99,547,4.043,548,3.65,549,4.043,550,4.043]],["t/184",[0,1.5,1,0.379,12,1.747,34,1.826,36,2.225,38,2.225,40,5.416,42,3.098,43,5.416,47,5.106,66,1.53,202,1.864,214,4.776,334,2.878,348,2.582,538,3.098,539,3.098,541,5.106,542,2.582,543,2.878,545,4.437,551,3.431,552,3.431,553,3.431,554,3.431,555,3.431,556,3.098,557,2.473]],["t/186",[0,1.025,1,0.37,7,3.142,12,1.237,34,1.993,36,2.429,38,2.429,202,2.035,348,2.819,541,4.474,542,4.258,543,3.142,545,3.142,557,2.7,558,5.658,559,3.746,560,3.746,561,3.746,562,3.746,563,3.746,564,3.746,565,3.746,566,3.746,567,3.746,568,5.658,569,3.746,570,3.746,571,5.658,572,5.658,573,3.382,574,3.746,575,3.746,576,3.746,577,3.746,578,3.746,579,3.746,580,3.746]],["t/188",[1,0.308]],["t/190",[0,0.718,1,0.373,12,1.309,16,4.573,34,2.11,36,2.571,38,2.571,108,2.984,148,2.495,202,3.207,248,4.443,251,3.135,358,2.427,374,2.306,542,2.984,557,2.858,581,3.965,582,3.965,583,5.903,584,3.965,585,3.965,586,3.579,587,3.325,588,3.965,589,3.965,590,3.965,591,3.965,592,3.965,593,3.965,594,3.965,595,3.965,596,3.965,597,3.965]],["t/192",[0,0.922,1,0.368,12,1.079,34,3.331,36,3.303,40,5.928,47,6.42,48,1.671,66,2.272,148,2.056,202,1.775,556,4.597,598,3.267,599,3.267,600,3.267,601,3.267,602,3.267,603,3.267,604,3.267,605,3.267,606,4.597,607,5.093,608,7.069,609,3.267,610,5.093,611,3.267,612,3.267,613,3.267,614,3.267,615,3.267,616,3.267,617,3.267,618,3.267,619,3.267,620,3.267,621,3.267,622,3.267]],["t/194",[]],["t/196",[0,1.407,1,0.346,12,1.55,34,2.498,36,3.044,38,3.044,108,5.024,148,4.202,202,2.551,248,5.024,495,6.026,557,3.384,586,4.238,587,3.937,623,4.695,624,4.695,625,4.695,626,4.695,627,4.695,628,4.695,629,4.695,630,4.695,631,4.695,632,4.695,633,4.695,634,4.695,635,4.695,636,4.695]],["t/198",[0,1.005,1,0.38,9,3.055,12,0.899,36,3.599,38,3.599,66,1.214,70,1.42,176,2.152,202,3.015,248,4.177,284,2.457,285,2.457,286,2.457,287,2.457,288,1.392,394,1.888,414,2.457,541,3.484,542,2.048,557,1.962,637,2.722,638,2.722,639,2.722,640,2.722,641,2.722,642,2.722,643,2.722,644,2.722,645,2.722,646,2.722,647,2.722,648,2.722,649,2.722,650,2.722,651,2.722,652,2.722,653,5.01,654,2.722,655,2.722,656,2.722,657,2.722,658,2.722,659,2.722,660,2.722,661,2.722,662,2.722,663,2.722,664,2.722]],["t/201",[0,0.569,1,0.371,16,3.203,34,3.682,36,3.203,43,2.634,47,3.905,66,1.401,108,2.364,202,2.683,288,1.607,348,2.364,606,4.458,653,6.791,665,3.141,666,3.141,667,3.141,668,3.141,669,3.141,670,3.141,671,3.141,672,3.141,673,3.141,674,3.141,675,3.141,676,3.141,677,3.141,678,3.141,679,3.141,680,3.141,681,3.141,682,4.939,683,4.939,684,3.141,685,3.141,686,3.141,687,3.141,688,3.141,689,3.141,690,3.141,691,3.141,692,3.141,693,3.141,694,3.141,695,3.141]],["t/203",[0,1.19,1,0.363,9,6.394,12,1.516,66,2.047,70,2.393,74,2.079,148,2.888,696,4.589,697,4.589,698,4.589,699,4.589,700,4.589,701,4.589,702,4.589,703,4.589,704,3.848,705,4.589,706,4.143,707,4.589,708,4.589,709,4.589,710,4.589,711,4.589,712,4.589,713,4.589]],["t/205",[1,0.379,12,1.26,334,8.18,548,6.223,557,6.223,714,9.428,715,3.817,716,6.894,717,3.817]],["t/207",[0,1.48,12,2.699,66,3.646,70,4.263]],["t/209",[1,0.371]],["t/211",[718,8.696]],["t/213",[1,0.273,719,7.71,720,7.71,721,6.96,722,7.71,723,7.71,724,7.71]],["t/215",[1,0.348,721,6.831,725,7.567,726,7.567,727,7.567,728,7.567]],["t/217",[729,8.515,730,8.515]],["t/219",[1,0.295,731,8.341,732,8.341]],["t/221",[733,8.515,734,8.515]],["t/223",[1,0.348,439,5.984,735,7.567,736,5.984,737,7.567,738,7.567]],["t/225",[1,0.335,739,8.013,740,8.013,741,5.775]],["t/227",[1,0.335,742,8.013,743,8.013,744,8.013]],["t/229",[1,0.301,745,8.515]],["t/233",[1,0.356,741,4.395,746,6.098,747,9.075,748,7.465,749,5.504,750,6.098,751,6.098]],["t/235",[752,8.696]],["t/237",[1,0.336,22,4.461,461,6.76,741,7.096,753,5.588,754,6.19,755,6.76,756,5.588,757,5.191,758,6.19,759,5.191]],["t/239",[1,0.324,16,2.91,22,3.235,404,3.549,461,3.764,741,5.975,747,4.051,748,6.555,755,3.764,756,4.051,757,3.764,760,4.488,761,3.549,762,6.464,763,4.488,764,4.051,765,3.764,766,6.84,767,4.488,768,6.464,769,4.488,770,4.488,771,4.488,772,4.488,773,4.051,774,4.488,775,4.488,776,4.488,777,4.488,778,4.488]],["t/242",[1,0.352,79,2.537,260,2.649,749,3.178,759,4.525,779,6.561,780,3.52,781,3.178,782,3.52,783,3.52,784,3.52,785,3.52,786,3.52,787,3.52,788,3.52,789,3.52,790,3.52,791,2.649,792,5.396,793,5.396,794,2.952,795,3.52,796,3.52,797,3.52,798,3.52,799,3.52,800,3.52,801,3.52,802,5.396,803,5.396,804,3.52,805,3.52,806,5.396,807,3.178,808,3.52,809,3.52,810,3.52,811,3.178,812,3.52,813,3.52,814,3.52,815,2.784,816,1.913,817,3.52,818,3.52,819,3.52,820,3.52,821,3.52,822,3.52]],["t/244",[1,0.335,114,2.382,242,2.857,500,2.654,741,2.281,757,2.654,759,2.654,764,4.486,765,5.827,766,6.816,773,6.273,791,3.739,807,2.857,823,3.165,824,3.722,825,7.55,826,3.165,827,3.165,828,3.165,829,3.165,830,3.165,831,6.273,832,3.165,833,3.165,834,4.969,835,3.165,836,3.165,837,3.165,838,5.537,839,2.857,840,4.969,841,4.969,842,3.165,843,3.165,844,3.165,845,1.684,846,3.165,847,2.195,848,3.165,849,4.969,850,2.382,851,3.165,852,2.857]],["t/246",[1,0.268,439,5.984,853,7.567,854,7.567,855,7.567,856,5.984,857,7.567,858,7.567]],["t/250",[1,0.343,859,8.341]],["t/252",[1,0.374,794,6.231,860,2.511,861,6.231]],["t/254",[1,0.348,861,7.669,862,9.827]],["t/256",[1,0.354,235,4.667,765,4.336,860,2.983,861,8.392,863,4.667,864,7.143,865,5.17,866,5.17,867,5.17,868,5.17,869,5.17,870,4.667,871,5.17,872,5.17]],["t/259",[873,8.515,874,8.515]],["t/261",[1,0.273,875,7.71,876,7.71,877,7.71,878,7.71,879,7.71,880,7.71]],["t/263",[1,0.366,15,1.879,48,2.976,881,3.889,882,4.88,883,5.819,884,4.602,885,5.819,886,3.469,887,6.973,888,3.231,889,6.294,890,3.889,891,3.889,892,5.819,893,3.889,894,3.889,895,3.889,896,3.889,897,3.889,898,3.889,899,5.819,900,3.889,901,3.889,902,3.889,903,3.889,904,3.889,905,3.889,906,3.889]],["t/265",[1,0.377,15,2.172,48,3.908,815,1.993,824,1.242,850,5.442,882,2.114,886,2.467,888,2.923,907,2.52,908,2.52,909,2.52,910,6.074,911,2.52,912,2.52,913,2.52,914,2.52,915,2.52,916,2.52,917,4.138,918,4.138,919,2.52,920,2.52,921,2.52,922,2.275,923,6.729,924,2.52,925,2.52,926,3.735,927,5.264,928,2.52,929,2.52,930,6.729,931,2.52,932,2.52,933,2.52,934,2.52,935,2.275,936,2.52]],["t/268",[0,0.432,1,0.367,48,2.024,74,1.082,202,1.297,815,3.129,850,6.282,882,2.002,886,3.514,888,2.814,910,4.575,922,2.155,926,3.572,935,3.572,937,1.599,938,3.957,939,2.388,940,2.978,941,3.572,942,2.978,943,4.142,944,2.388,945,5.321,946,2.388,947,3.319,948,2.388,949,2.388,950,2.388,951,3.957,952,2.388,953,3.572,954,2.388,955,2.155,956,3.957,957,2.155,958,2.388,959,1.797,960,2.388,961,2.388,962,2.388,963,2.388,964,2.388,965,2.388,966,2.388,967,2.388,968,2.388,969,2.388,970,2.388,971,2.388,972,2.388,973,0.78,974,2.388,975,2.388,976,2.388,977,2.388]],["t/270",[1,0.373,15,0.749,48,3.29,136,2.785,202,1.26,753,2.094,886,3.835,888,1.288,889,5.806,937,1.553,940,3.736,941,5.806,942,1.746,943,3.571,978,2.32,979,2.32,980,2.32,981,2.32,982,2.32,983,2.32,984,2.094,985,2.32,986,2.32,987,2.32,988,2.242,989,3.578,990,4.965,991,3.863,992,6.432,993,3.055,994,3.863,995,3.367,996,1.834,997,2.32,998,2.32,999,1.746,1000,1.834,1001,2.32,1002,2.32,1003,2.32,1004,2.32,1005,2.32,1006,2.32,1007,2.32,1008,2.32,1009,2.32,1010,2.32]],["t/272",[1,0.353,850,5.611,888,2.006,959,5.018,1011,5.611,1012,3.614,1013,6.953,1014,4.97,1015,4.353,1016,3.031,1017,3.614,1018,3.262,1019,3.614,1020,3.262,1021,4.97,1022,5.505,1023,5.505,1024,3.614,1025,6.669,1026,3.614,1027,3.262,1028,2.858,1029,6.731,1030,3.262,1031,3.262,1032,1.128,1033,3.262,1034,3.262,1035,3.614,1036,3.614]],["t/274",[1,0.31,888,3.911,1011,5.302,1015,5.571,1037,7.045,1038,7.045,1039,7.045,1040,7.045,1041,7.045,1042,7.045,1043,7.045]],["t/276",[1,0.32,339,5.674,492,5.674,1044,6.285,1045,6.285,1046,3.49,1047,5.674,1048,6.285,1049,6.285,1050,6.285,1051,6.285,1052,6.285,1053,5.674,1054,5.271,1055,6.285,1056,5.271,1057,6.285]],["t/278",[1,0.361,243,4.802,1016,5.808,1058,6.925,1059,6.925,1060,6.252,1061,6.925,1062,6.925,1063,6.252]],["t/280",[1,0.369,850,5.12,888,1.692,945,5.402,959,5.12,1011,4.503,1013,5.862,1014,4.353,1015,4.732,1016,6.217,1018,2.751,1020,2.751,1021,2.751,1027,2.751,1028,2.41,1029,6.692,1030,4.353,1031,2.751,1032,0.952,1033,2.751,1034,2.751,1060,2.751,1063,2.751,1064,4.822,1065,4.822,1066,2.555,1067,4.822,1068,3.047,1069,4.822,1070,3.047,1071,2.751,1072,3.047,1073,3.047]],["t/283",[1074,10.02,1075,7.169,1076,7.169,1077,7.169,1078,7.169,1079,7.169,1080,7.169,1081,7.169]],["t/285",[1,0.37,243,5.632,959,2.794,1013,2.936,1015,6.756,1082,5.619,1083,3.712,1084,3.712,1085,3.712,1086,3.712,1087,3.712,1088,3.712,1089,3.712,1090,3.712,1091,3.712,1092,3.712,1093,3.351,1094,3.712,1095,3.712,1096,3.712,1097,3.712,1098,5.072,1099,3.712,1100,3.712,1101,3.712,1102,3.712,1103,3.712,1104,2.676,1105,3.712,1106,3.712,1107,2.017,1108,3.712,1109,3.351,1110,3.712]],["t/289",[1,0.382,374,3.494,478,5.126,845,4.206,847,4.166,1111,5.423,1112,5.423,1113,3.781]],["t/291",[0,1.432,1,0.374,15,1.94,845,3.197,847,4.166,973,1.962,988,1.94,1032,1.876,1114,6.008,1115,6.008,1116,5.423,1117,3.781]],["t/293",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1118,6.471]],["t/295",[1,0.381,15,2.457,824,2.796,860,2.572,1119,5.674,1120,5.674,1121,5.674,1122,5.674,1123,5.674,1124,5.674,1125,5.674]],["t/297",[1,0.376,12,1.729,816,2.845,860,3,1107,2.845,1126,5.237,1127,3.632,1128,2.581,1129,5.237,1130,5.237,1131,4.392,1132,5.237,1133,5.237,1134,5.237,1135,5.237,1136,5.237]],["t/299",[0,1.121,1,0.379,824,3.051,860,2.724,973,2.021,988,1.998,1032,1.933,1137,6.19,1138,4.461]],["t/301",[0,1.537,1,0.378,12,1.204,103,1.901,824,1.797,860,2.266,973,1.191,988,1.177,1032,1.139,1128,1.797,1139,3.646,1140,3.392,1141,3.077,1142,5.543,1143,2.071,1144,2.071,1145,2.12,1146,1.94,1147,3.646,1148,2.442,1149,2.071,1150,2.883,1151,1.735,1152,3.291,1153,3.291,1154,3.646,1155,2.628,1156,2.883,1157,2.744,1158,3.646]],["t/303",[0,1.5,1,0.384,15,1.566,66,1.369,103,2.53,288,1.57,824,2.391,860,2.309,973,1.002,988,0.991,1032,0.959,1046,1.705,1107,1.668,1127,3.364,1140,1.879,1141,2.693,1149,2.755,1159,3.07,1160,1.879,1161,2.428,1162,2.428,1163,2.428,1164,2.428,1165,2.428,1166,1.991,1167,1.932,1168,2.129,1169,2.129,1170,2.056,1171,2.056,1172,1.932]],["t/305",[0,1.372,1,0.379,12,1.482,15,2.087,70,3.371,358,2.747,402,3.377,860,2.561,973,1.465,988,1.449,995,2.61,1032,1.402,1172,2.825,1173,4.488,1174,5.112,1175,3.377,1176,3.764,1177,3.549,1178,4.488]],["t/307",[0,1.34,1,0.384,12,1.685,15,1.057,70,3.269,74,0.864,402,1.436,824,1.614,860,2.5,884,2.589,973,0.623,988,0.616,995,2.502,1032,0.596,1046,1.059,1107,1.036,1127,3.538,1128,1.614,1138,1.375,1140,1.168,1141,1.818,1149,3.56,1150,1.508,1160,1.168,1161,1.508,1162,1.508,1163,1.508,1164,1.508,1165,1.508,1166,1.237,1167,1.201,1168,1.323,1169,1.323,1170,1.277,1171,1.277,1172,2.061,1174,1.508,1175,1.436,1176,1.6,1177,1.508,1179,1.908,1180,1.908,1181,2.123,1182,2.746,1183,1.323,1184,1.908,1185,1.6,1186,1.6]],["t/309",[0,1.292,1,0.378,12,1.335,15,1.934,70,3.721,402,3.043,860,2.847,973,1.32,988,1.305,995,2.351,1032,1.263,1127,4.154,1149,3.402,1172,2.545,1174,3.197,1175,3.043,1176,3.391,1177,3.197,1185,3.391,1186,3.391,1187,4.043,1188,3.65]],["t/311",[0,1.163,1,0.379,12,1.124,15,1.099,66,1.518,70,1.775,74,2.91,102,2.279,103,1.775,395,2.854,816,1.849,845,1.811,860,2.171,973,1.111,988,1.099,1032,1.063,1128,1.677,1140,2.083,1141,1.889,1143,1.933,1144,1.933,1145,1.979,1146,1.811,1148,2.279,1151,1.62,1156,2.691,1175,2.561,1181,2.207,1189,3.403,1190,3.403,1191,3.403,1192,3.403,1193,3.072,1194,3.403,1195,3.072,1196,3.072,1197,3.072,1198,3.072,1199,3.403]],["t/313",[0,1.372,1,0.379,103,2.341,860,2.185,973,1.465,988,1.449,1032,1.402,1128,2.212,1143,2.549,1144,2.549,1145,2.61,1146,2.388,1151,2.136,1156,3.549,1166,2.91,1181,2.91,1200,4.488,1201,4.488,1202,4.488,1203,4.051,1204,4.488,1205,4.051,1206,4.488]],["t/315",[0,1.048,1,0.38,12,1.911,15,2.134,66,1.292,74,1.312,103,1.51,374,1.684,706,4.18,860,2.443,884,2.29,973,0.946,988,0.935,995,2.693,1032,0.904,1046,1.608,1107,1.573,1141,1.608,1143,1.645,1144,1.645,1149,3.286,1166,1.878,1167,1.823,1168,2.008,1169,2.008,1170,1.939,1171,1.939,1172,2.914,1174,2.29,1177,2.29,1185,2.428,1186,2.428,1207,2.896,1208,2.896,1209,4.631,1210,2.614,1211,2.896,1212,2.29,1213,2.896,1214,2.896]],["t/317",[0,1.272,1,0.374,478,4.552,845,2.683,860,2.373,973,1.647,988,1.628,995,2.932,1032,1.575,1128,2.485,1151,2.4,1181,3.27,1183,3.497,1215,5.043,1216,5.043,1217,4.229,1218,3.086,1219,3.988,1220,5.043]],["t/319",[0,1.526,1,0.368,102,2.399,478,2.323,816,1.946,845,1.906,860,1.211,937,2.399,973,1.17,988,1.156,1032,1.119,1113,2.254,1117,2.254,1127,2.484,1128,1.766,1138,2.582,1151,1.705,1181,2.323,1182,3.004,1218,2.192,1219,2.833,1221,3.582,1222,2.323,1223,3.234,1224,3.234,1225,3.234,1226,3.234,1227,3.234,1228,2.323,1229,2.323,1230,2.254,1231,2.323,1232,4.115,1233,4.78,1234,2.323,1235,3.234,1236,2.323,1237,2.582,1238,3.234,1239,2.323,1240,3.234]],["t/321",[0,1.521,1,0.367,15,1.146,102,2.378,478,2.303,816,1.929,845,1.889,860,1.2,937,2.378,973,1.159,988,1.146,1032,1.109,1113,2.235,1117,2.235,1127,2.462,1128,1.75,1138,2.559,1151,1.69,1181,2.303,1182,2.978,1218,2.173,1219,2.808,1222,2.303,1223,3.205,1224,3.205,1225,3.205,1226,3.205,1227,3.205,1228,2.303,1229,2.303,1230,2.235,1231,2.303,1232,4.088,1233,4.755,1234,2.303,1235,3.205,1236,2.303,1237,2.559,1238,3.205,1239,2.303,1240,3.205,1241,3.551]],["t/323",[0,1.135,1,0.377,101,3.399,103,3.268,288,2.199,358,2.631,860,1.453,973,1.404,988,1.388,995,2.5,1032,1.342,1107,2.336,1127,2.981,1128,2.119,1143,2.441,1144,2.441,1145,2.5,1146,2.287,1151,2.046,1181,2.788,1242,4.299,1243,4.299,1244,4.299,1245,4.299,1246,3.881,1247,4.299,1248,3.881,1249,2.879]],["t/325",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1250,7.169]],["t/327",[0,1.276,1,0.369,74,3.192,973,2.3,988,2.274,1032,2.2,1251,7.045]],["t/330",[0,0.698,1,0.358,15,3.337,374,2.24,507,2.899,816,2.093,845,3.074,847,4.007,860,1.302,973,1.258,988,1.244,1032,1.203,1111,3.478,1112,3.478,1113,2.425,1117,2.425,1151,1.834,1218,2.358,1222,2.498,1228,2.498,1229,2.498,1230,2.425,1231,2.498,1234,2.498,1236,2.498,1239,2.498,1249,3.869,1252,3.478]],["t/332",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1118,6.471]],["t/334",[0,0.948,1,0.382,1148,3.507,1162,4.141,1253,5.237,1254,5.237,1255,5.237,1256,5.237,1257,5.237,1258,5.237,1259,5.237,1260,5.237,1261,5.237,1262,4.727,1263,5.237,1264,5.237]],["t/336",[0,1.41,1,0.377,15,2.359,103,1.543,816,1.608,845,2.507,860,1.592,973,0.966,988,0.955,1032,0.924,1113,1.862,1117,1.862,1128,2.893,1143,1.68,1144,1.68,1145,1.721,1146,1.574,1151,1.408,1181,3.806,1218,1.811,1222,1.919,1228,1.919,1229,3.055,1230,1.862,1231,1.919,1234,1.919,1236,1.919,1239,1.919,1265,2.959,1266,2.959,1267,2.481,1268,2.671,1269,2.671,1270,2.671,1271,2.671,1272,2.671,1273,2.227,1274,4.23,1275,4.253,1276,2.671]],["t/338",[0,1.332,1,0.37,15,2.561,816,1.913,845,1.873,860,1.824,973,1.149,988,1.137,1032,1.099,1113,2.216,1117,2.216,1128,3.234,1151,1.675,1181,4.255,1218,2.155,1222,2.283,1228,2.283,1229,2.283,1230,2.216,1231,2.283,1234,2.283,1236,2.283,1239,2.283,1267,2.952,1268,3.178,1269,3.178,1270,3.178,1271,3.178,1272,3.178,1273,2.649,1274,4.729,1275,4.871,1276,3.178,1277,3.52]],["t/340",[0,1.434,1,0.376,15,2.822,374,1.593,507,2.062,816,2.407,845,2.357,847,3.072,860,1.884,973,0.895,988,0.885,1032,0.856,1113,1.725,1116,2.474,1117,2.788,1151,1.304,1218,2.711,1222,1.777,1228,2.872,1229,2.872,1230,2.788,1231,2.872,1234,2.872,1236,1.777,1239,1.777,1252,2.474,1278,2.74,1279,4.43,1280,4.43,1281,2.74,1282,2.74,1283,2.74,1284,2.74,1285,2.74,1286,2.74,1287,4.43,1288,2.74]],["t/342",[0,1.254,1,0.373,15,2.236,973,2.261,988,2.236,1032,2.163,1289,6.925]],["t/344",[0,1.298,1,0.364,12,2.367,973,2.341,988,2.314,1032,2.239,1290,7.169]],["t/346",[0,1.305,1,0.38,15,1.691,374,3.045,398,2.629,507,3.941,824,2.581,860,2.435,973,1.71,988,1.691,1032,1.635,1160,3.205,1172,3.296,1291,5.237,1292,4.141]],["t/348",[0,1.425,1,0.381,12,1.587,15,1.551,103,2.506,398,2.412,824,2.368,860,1.624,973,1.569,988,1.551,1032,1.501,1143,2.729,1144,2.729,1145,2.794,1146,2.557,1160,4.154,1292,3.8,1293,4.805]],["t/350",[0,1.418,1,0.379,398,2.972,824,2.918,860,2.001,973,1.933,988,1.912,1032,1.849,1160,3.624,1292,4.682,1294,5.921]],["t/352",[0,1.057,1,0.378,12,1.927,15,1.884,398,2.929,824,2.876,860,1.972,973,1.906,988,1.884,1032,1.822,1160,3.572,1292,4.615,1295,5.836]],["t/354",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1296,7.169]],["t/356",[0,1.221,1,0.378,12,1.215,15,2.177,30,2.909,102,2.464,103,1.919,288,1.882,394,2.551,398,2.801,824,1.813,860,2.279,973,1.201,988,1.188,1032,1.149,1128,1.813,1140,2.252,1141,3.098,1143,2.089,1144,2.089,1145,2.139,1146,1.958,1148,2.464,1149,2.089,1151,1.751,1155,2.651,1157,2.769,1160,2.252,1274,2.651,1297,3.679,1298,3.085,1299,3.679]],["t/358",[0,1.496,1,0.384,15,1.557,66,1.359,103,2.515,288,1.559,398,2.421,824,2.377,860,2.299,973,0.995,988,0.984,1032,0.952,1046,1.692,1107,1.656,1140,1.865,1141,2.677,1149,2.739,1150,2.41,1160,1.865,1161,2.41,1163,2.41,1164,2.41,1165,2.41,1166,1.976,1167,1.918,1168,2.113,1169,2.113,1170,2.04,1171,2.04,1172,1.918,1300,3.047]],["t/360",[0,1.359,1,0.386,12,0.962,15,1.875,66,1.299,74,1.319,394,2.02,398,2.335,520,2.629,824,2.293,860,2.241,884,2.303,973,0.544,988,0.538,995,1.694,1032,0.52,1046,1.617,1107,1.582,1138,2.099,1140,1.783,1141,2.583,1149,3.299,1150,2.303,1160,1.783,1161,2.303,1163,2.303,1164,2.303,1165,2.303,1166,1.888,1167,1.833,1168,2.02,1169,2.02,1170,1.95,1171,1.95,1172,1.833,1301,1.666,1302,2.912,1303,2.912]],["t/362",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1304,7.169]],["t/364",[0,1.471,1,0.378,12,1.856,15,1.199,288,1.899,394,3.897,398,1.863,824,1.83,860,1.255,973,1.212,988,1.199,1032,1.159,1128,1.83,1140,3.439,1141,3.12,1143,2.108,1144,2.108,1145,2.159,1146,1.975,1148,2.486,1149,2.108,1151,1.767,1155,2.676,1157,2.794,1160,2.272,1183,2.574,1203,3.351,1305,3.712,1306,3.712,1307,3.712,1308,3.712]],["t/366",[0,1.315,1,0.377,12,1.133,15,2.675,66,1.53,102,2.298,103,2.759,288,1.755,395,2.878,398,1.722,816,1.864,860,1.788,973,1.12,988,1.108,1032,1.072,1128,1.691,1141,2.938,1143,1.949,1144,1.949,1145,1.995,1146,1.826,1149,1.949,1151,1.633,1155,2.473,1160,2.1,1166,3.431,1170,2.298,1171,2.298,1205,3.098,1274,2.473,1309,3.431,1310,3.431,1311,3.431,1312,3.431]],["t/368",[0,1.153,1,0.378,15,2.055,70,2.29,288,3.828,860,2.151,973,1.434,988,1.418,1032,1.371,1046,2.438,1107,2.386,1141,2.438,1149,2.494,1166,2.848,1167,2.764,1168,3.045,1169,3.045,1170,2.941,1171,2.941,1172,2.764,1313,4.392,1314,4.392,1315,4.392]],["t/370",[0,1.323,1,0.381,15,2.359,66,1.878,103,2.196,288,2.154,398,2.113,860,2.086,973,1.375,988,1.359,1032,1.315,1046,2.338,1107,2.287,1141,2.338,1149,2.391,1166,2.73,1167,2.65,1168,2.92,1169,2.92,1170,2.819,1171,2.819,1172,2.65,1316,4.21]],["t/372",[0,1.298,1,0.364,15,2.314,973,2.341,988,2.314,1032,2.239,1317,7.169]],["t/374",[0,1.347,1,0.376,12,1.435,15,1.403,102,2.909,103,2.266,374,2.527,398,2.181,507,3.27,860,2.134,973,1.419,988,1.403,1032,1.357,1107,2.361,1128,2.141,1143,2.467,1144,2.467,1145,2.527,1146,2.312,1151,2.068,1167,3.974,1249,2.909,1274,3.131,1318,4.345,1319,4.345,1320,4.345]],["t/376",[0,0.711,1,0.377,12,1.297,15,1.268,288,2.008,394,2.723,398,1.971,824,1.935,860,2.628,973,1.282,988,1.268,1032,1.226,1107,2.133,1128,1.935,1131,3.293,1140,2.403,1141,2.18,1148,2.629,1149,2.23,1151,1.869,1155,2.83,1157,2.955,1167,2.471,1183,2.723,1210,3.545,1212,4.635,1321,3.927,1322,3.927,1323,3.927,1324,3.927,1325,3.927,1326,3.927]],["t/378",[0,1.291,1,0.379,12,1.495,102,3.032,288,2.316,394,3.14,398,3.266,824,2.232,860,2.705,973,0.919,988,0.909,1032,0.879,1107,2.46,1128,2.232,1131,3.797,1140,2.771,1141,2.514,1148,3.032,1149,2.571,1151,2.155,1155,3.263,1157,3.407,1167,2.85,1212,3.581,1274,3.263,1298,3.797,1327,2.816,1328,4.528]],["t/380",[0,1.254,1,0.373,15,2.236,973,2.261,988,2.236,1032,2.163,1329,6.925]],["t/382",[0,1.292,1,0.378,15,1.305,70,2.109,103,2.109,398,2.03,478,2.622,860,2.024,973,1.32,988,1.305,995,2.351,1032,1.263,1107,2.197,1143,2.296,1144,2.296,1145,2.351,1146,2.151,1151,1.924,1162,3.197,1233,2.914,1248,5.407,1249,2.708,1330,4.043,1331,4.043,1332,4.043,1333,4.043,1334,4.043,1335,4.043,1336,4.043]],["t/384",[0,1.378,1,0.384,15,1.832,973,1.853,988,1.832,995,3.299,1032,1.772,1107,3.083,1337,5.674,1338,5.674]],["t/386",[0,1.17,1,0.378,12,1.747,15,1.108,70,3.368,103,1.79,288,1.755,398,1.722,402,2.582,478,2.225,816,1.864,845,1.826,860,1.788,973,1.12,988,1.108,1032,1.072,1128,1.691,1138,2.473,1140,2.1,1141,2.938,1143,1.949,1144,1.949,1145,1.995,1146,1.826,1148,2.298,1151,1.633,1156,2.713,1175,2.582,1188,3.098,1193,3.098,1195,3.098,1196,3.098,1197,3.098,1198,3.098,1237,3.813,1339,3.431,1340,3.431]],["t/388",[0,1.118,1,0.374,12,1.39,15,1.992,103,2.196,398,2.113,845,3.284,860,2.469,973,1.375,988,1.359,995,2.448,1032,1.315,1128,2.075,1143,2.391,1144,2.391,1145,2.448,1146,2.24,1151,2.004,1183,2.92,1217,5.175,1218,2.577,1249,4.132,1341,4.21,1342,4.21,1343,4.21,1344,4.21]],["t/390",[0,1.214,1,0.374,15,2.165,66,1.626,398,1.83,816,1.981,845,1.94,860,1.232,973,1.191,988,1.177,1032,1.139,1113,2.295,1117,2.295,1151,1.735,1218,2.232,1222,2.364,1228,2.364,1229,2.364,1230,2.295,1231,2.364,1232,4.171,1233,3.995,1234,2.364,1236,2.364,1237,3.995,1239,2.364,1249,2.442,1273,2.744,1345,3.646,1346,3.058,1347,3.058,1348,3.058,1349,3.058,1350,3.058,1351,2.744,1352,3.058,1353,3.058]],["t/392",[0,1.182,1,0.372,15,2.107,66,1.557,101,2.76,398,1.752,816,1.896,845,1.857,860,1.812,973,1.14,988,1.127,1032,1.09,1113,2.197,1117,2.197,1128,1.72,1151,1.661,1183,2.42,1218,2.136,1222,2.263,1228,2.263,1229,2.263,1230,2.197,1231,2.263,1232,4.034,1233,3.864,1234,2.263,1236,2.263,1237,3.864,1239,2.263,1249,2.337,1346,2.927,1347,2.927,1348,2.927,1349,2.927,1350,2.927,1351,2.626,1352,2.927,1353,2.927,1354,3.151,1355,3.49,1356,3.49]],["t/394",[0,1.432,1,0.377,478,5.126,824,2.961,860,2.03,973,1.962,988,1.94,1032,1.876,1104,4.33,1357,6.008]],["t/396",[1,0.342,305,5.439,755,5.439,761,5.128,824,3.196,1358,6.485,1359,9.165,1360,6.485,1361,6.485,1362,6.485,1363,5.128,1364,6.485]],["t/398",[0,1.188,1,0.37,15,2.118,66,1.57,398,1.767,816,1.913,845,1.873,860,1.19,973,1.149,988,1.137,1032,1.099,1113,2.216,1117,2.216,1128,2.66,1151,1.675,1153,3.178,1183,2.441,1218,2.155,1222,2.283,1228,2.283,1229,2.283,1230,2.216,1231,2.283,1232,2.649,1233,3.889,1234,2.283,1236,2.283,1237,3.889,1239,2.283,1249,2.357,1273,2.649,1346,2.952,1347,2.952,1348,2.952,1349,2.952,1350,2.952,1351,2.649,1352,2.952,1353,2.952,1354,3.178,1365,3.52,1366,3.52]],["t/401",[1367,8.341,1368,8.341,1369,6.277]],["t/403",[1,0.295,1370,8.341,1371,8.341]],["t/406",[1372,8.849]],["t/409",[1,0.342,1373,7.297,1374,8.944,1375,7.297,1376,7.297,1377,7.297,1378,7.297]],["t/411",[1379,8.341,1380,8.341,1381,8.341]],["t/414",[0,1.175,12,2.142,66,2.892,70,3.382,288,3.317,791,6.251,839,5.854,1369,4.88,1382,6.485,1383,6.485,1384,6.485,1385,5.084,1386,6.485,1387,6.485,1388,6.485]],["t/416",[1389,8.341,1390,8.341,1391,8.341]],["t/419",[1369,7.121,1372,7.234,1392,8.013,1393,7.234]],["t/421",[1,0.273,1369,5.802,1394,7.71,1395,7.71,1396,7.71,1397,7.71,1398,7.71]],["t/423",[0,1.156,1,0.291,12,2.108,831,5.763,1369,4.804,1393,7.423,1399,6.384,1400,6.384,1401,6.384,1402,6.384,1403,5.763,1404,6.384,1405,6.384,1406,6.384,1407,6.384,1408,6.384]],["t/426",[1409,8.696]],["t/428",[1,0.301,1410,8.515]],["t/430",[1,0.289,1411,8.174,1412,8.174,1413,8.174]],["t/432",[1414,8.696]],["t/434",[1415,8.696]],["t/436",[1,0.359,1416,8.174]],["t/438",[0,1.694,1,0.331,108,7.039]],["t/441",[1417,7.71,1418,7.71,1419,7.71,1420,7.71,1421,7.71,1422,7.71,1423,7.71]],["t/443",[1,0.268,993,5.984,1424,7.567,1425,7.567,1426,7.567,1427,7.567,1428,7.567,1429,7.567]],["t/446",[1,0.241,791,5.125,838,6.147,1385,5.244,1430,6.81,1431,6.81,1432,6.81,1433,6.81,1434,6.81,1435,6.81,1436,6.81,1437,6.81,1438,6.81]],["t/448",[1,0.3,1385,4.1,1403,6.046,1439,8.479,1440,6.698,1441,8.479,1442,6.698,1443,8.479,1444,6.698,1445,6.698,1446,6.698]],["t/450",[1,0.254,791,5.395,847,4.971,870,6.471,1385,5.873,1447,7.169,1448,7.169,1449,7.986]],["t/452",[847,5.152,1385,5.535,1449,8.163,1450,9.043,1451,6.707,1452,7.43]],["t/455",[1453,8.515,1454,8.515]],["t/458",[1455,8.174,1456,8.174,1457,8.174,1458,8.174]],["t/460",[1,0.254,37,7.221,1459,7.169,1460,7.169,1461,7.169,1462,7.169,1463,7.169,1464,7.169]],["t/462",[0,1.423,1,0.278,1465,7.859,1466,6.591,1467,7.094,1468,6.591]],["t/464",[1,0.301,1469,8.515]],["t/466",[0,1.194,1,0.355,943,3.659,1104,4.749,1385,5.136,1466,5.526,1468,5.526,1470,9.234,1471,5.526]],["t/468",[1472,8.696]],["t/470",[0,1.213,1,0.346,501,6.381,943,3.719,1385,4.1,1466,5.617,1467,6.046,1468,5.617,1473,6.698,1474,6.698,1475,6.046]],["t/473",[1,0.32,501,5.591,1385,4.547,1475,6.707,1476,7.43,1477,7.43,1478,7.43,1479,7.43]],["t/475",[1480,8.696]],["t/478",[1,0.295,1385,5.105,1481,8.341]],["t/480",[1,0.371,79,3.925,114,4.099,704,7.567,1298,6.208,1482,5.446,1483,5.446,1484,5.446,1485,5.446,1486,5.446,1487,5.446,1488,7.403,1489,5.446,1490,5.446]],["t/482",[1491,7.859,1492,7.859,1493,7.859,1494,7.859,1495,7.859,1496,7.859]],["t/484",[1,0.377,1212,4.97,1385,3.847,1497,9.893,1498,6.285,1499,6.285]],["t/486",[1,0.37,811,7.917,1385,6.103,1500,5.921,1501,5.921,1502,5.921,1503,7.829]],["t/488",[0,0.948,1,0.34,12,1.729,66,2.336,70,2.731,288,2.679,451,4.392,469,3.774,860,1.77,995,3.045,1032,1.635,1146,2.786,1504,5.237,1505,5.237,1506,7.207,1507,5.237,1508,8.24,1509,5.237,1510,5.237,1511,5.237,1512,5.237,1513,5.237,1514,5.237,1515,5.237]],["t/490",[1,0.362]],["t/492",[1,0.295,1516,8.341,1517,8.341]],["t/494",[1518,8.696]],["t/496",[1,0.368,1519,8.013]],["t/498",[1,0.308]],["t/501",[0,0.891,1,0.334,358,3.012,452,3.891,466,3.097,860,2.694,886,2.934,1520,4.921,1521,4.921,1522,4.921,1523,4.921,1524,4.921,1525,6.902,1526,4.921,1527,4.921,1528,4.921,1529,4.921,1530,4.921,1531,4.921,1532,4.921,1533,5.788,1534,4.921,1535,4.921,1536,4.921,1537,4.442,1538,4.921,1539,4.921,1540,4.921]],["t/503",[1,0.32,448,6.795,888,4.52,943,3.49,1541,6.285,1542,6.285,1543,7.349,1544,6.285,1545,9.03,1546,6.285,1547,6.285]],["t/506",[1,0.313,136,4.33,888,4.389,996,6.251,999,5.948,1000,4.751,1548,7.904,1549,6.008,1550,6.008,1551,6.008,1552,7.904,1553,6.251,1554,6.008,1555,6.008]],["t/508",[1,0.368,48,2.672,824,1.663,886,3.81,937,4.279,940,2.54,984,3.046,1219,5.053,1230,2.124,1556,3.375,1557,3.375,1558,3.046,1559,5.223,1560,5.223,1561,3.375,1562,5.053,1563,3.375,1564,3.375,1565,3.375,1566,6.39,1567,3.375,1568,3.375,1569,5.223,1570,5.223,1571,5.223,1572,4.715,1573,5.223,1574,3.375,1575,3.375,1576,3.375,1577,3.375,1578,3.375,1579,3.375,1580,5.223,1581,3.375]],["t/510",[1,0.368,1562,6.336]],["t/512",[1363,6.463,1582,8.174,1583,8.174,1584,8.174]],["t/514",[305,7.141,1585,8.515]],["t/516",[1,0.362,34,2.834,48,1.77,202,1.88,497,3.124,816,1.88,863,3.124,886,3.175,888,1.921,943,1.921,947,4.466,1054,2.902,1104,2.494,1553,2.736,1586,5.326,1587,3.461,1588,3.124,1589,3.124,1590,2.4,1591,2.736,1592,3.461,1593,3.461,1594,3.461,1595,3.461,1596,5.326,1597,5.326,1598,3.461,1599,3.461,1600,3.461,1601,3.461,1602,3.461,1603,3.461,1604,3.461,1605,3.461,1606,3.461,1607,3.461,1608,3.461,1609,3.461,1610,3.461,1611,3.461,1612,3.461,1613,3.461,1614,3.461,1615,3.461,1616,3.461,1617,3.461,1618,3.461,1619,3.124,1620,3.461]],["t/518",[1,0.308]],["t/520",[1,0.362,15,1.832,816,3.083,943,3.15,999,4.27,1032,2.376,1621,5.674,1622,5.674,1623,5.122,1624,5.674,1625,7.751,1626,5.674,1627,5.674,1628,5.674,1629,5.674,1630,5.674]],["t/522",[1,0.268,465,6.831,1631,7.567,1632,7.567,1633,7.567,1634,7.567,1635,7.567,1636,7.567]],["t/524",[1637,8.696]],["t/526",[1,0.361,15,1.802,37,4.859,48,3.449,136,2.651,358,2.252,374,2.139,501,2.769,886,3.327,888,2.043,942,2.769,943,2.043,988,1.188,993,2.909,996,4.413,999,5.074,1000,2.909,1638,3.679,1639,3.679,1640,3.679,1641,3.679,1642,3.679,1643,5.581,1644,3.679,1645,3.679,1646,3.679,1647,3.679,1648,3.679,1649,3.679,1650,3.321,1651,3.321,1652,3.679,1653,3.679,1654,3.679,1655,3.679,1656,3.679,1657,3.679,1658,3.679,1659,3.679,1660,3.679]],["t/529",[0,0.406,1,0.315,16,2.436,22,1.617,404,1.774,448,2.827,466,3.051,471,2.708,486,2.708,860,1.27,1046,2.086,1056,3.151,1590,1.556,1591,4.992,1661,1.881,1662,2.243,1663,3.493,1664,5.67,1665,4.065,1666,4.065,1667,5.294,1668,4.483,1669,2.243,1670,3.391,1671,2.243,1672,4.375,1673,2.243,1674,2.971,1675,2.971,1676,2.243,1677,4.065,1678,1.881,1679,2.243,1680,2.243,1681,1.881,1682,5.118,1683,2.025,1684,2.025,1685,2.243,1686,2.243,1687,3.151,1688,2.243,1689,2.243,1690,2.243,1691,2.243,1692,2.243,1693,2.243,1694,2.243,1695,2.243,1696,2.025,1697,2.243,1698,2.025,1699,2.243,1700,2.025,1701,2.243,1702,2.025,1703,3.757,1704,2.243,1705,2.243,1706,2.243,1707,2.243,1708,2.243,1709,3.757,1710,2.243,1711,2.243,1712,2.243,1713,3.757,1714,2.243,1715,3.757,1716,2.243,1717,2.243,1718,2.243,1719,1.881,1720,2.025,1721,2.243,1722,2.243,1723,2.243,1724,2.243,1725,2.243]],["t/532",[1,0.373,34,3.495,37,4.734,74,2.976,888,2.548,943,4.259,1619,4.143,1661,3.848,1668,5.194,1726,4.589,1727,4.589,1728,4.589,1729,4.143,1730,4.589,1731,4.589,1732,4.589,1733,4.589,1734,4.589,1735,4.589,1736,4.589,1737,4.589,1738,4.589]],["t/534",[0,0.445,1,0.36,30,1.945,74,1.114,748,1.945,860,1.371,886,1.466,937,1.647,940,7.573,942,1.851,943,5.557,1046,1.366,1351,1.851,1533,2.063,1562,1.945,1590,1.706,1663,1.773,1668,1.945,1682,2.22,1720,2.22,1739,2.459,1740,2.459,1741,2.459,1742,2.22,1743,2.459,1744,2.063,1745,2.459,1746,2.459,1747,2.459,1748,2.459,1749,2.459,1750,2.459,1751,2.459,1752,2.459,1753,2.459,1754,2.459,1755,2.459,1756,2.22,1757,2.459,1758,2.459,1759,2.459,1760,2.22,1761,2.459,1762,2.459,1763,2.459,1764,2.459]],["t/536",[1,0.273,1700,6.96,1756,6.96,1765,7.71,1766,7.71,1767,7.71,1768,7.71]],["t/538",[0,1.48,1,0.289,1769,8.174,1770,8.174]],["t/541",[1,0.362,736,5.571,1771,7.045,1772,5.908,1773,7.045,1774,6.359,1775,6.359,1776,6.359]],["t/543",[1,0.365,16,4.343,144,7.357,466,5.856,1777,6.698,1778,6.698]],["t/545",[1,0.213,144,4.751,466,3.781,469,5.697,471,5.697,1665,5.038,1666,5.038,1667,5.038,1776,5.423,1779,6.008,1780,6.008,1781,6.008,1782,7.975,1783,7.135,1784,7.904,1785,5.423]],["t/547",[1,0.349,471,6.188,1674,6.79,1675,6.79,1678,6.382,1681,4.758,1786,5.674,1787,5.674,1788,5.674,1789,5.674,1790,6.869,1791,7.61]],["t/549",[1,0.284,269,6.336,486,5.775,1792,8.013,1793,8.013]],["t/551",[471,5.664,1674,6.214,1675,6.214,1677,6.591,1794,7.094,1795,7.094]],["t/553",[1,0.368,1719,6.231,1796,6.707,1797,6.707,1798,6.707]],["t/555",[0,0.414,1,0.349,22,1.647,74,1.728,144,3.017,404,1.002,466,2.772,469,2.248,471,3.175,473,2.062,486,3.856,704,1.063,736,3.483,959,0.954,1046,0.704,1056,1.063,1451,2.062,1590,0.879,1591,3.017,1625,2.062,1663,0.914,1665,2.615,1666,2.615,1667,1.916,1668,1.002,1670,2.062,1672,1.144,1674,1.807,1675,1.002,1677,1.063,1678,1.063,1681,1.063,1683,2.815,1687,1.063,1696,1.144,1698,2.815,1719,1.916,1772,1.063,1774,5.177,1775,3.976,1782,4.83,1783,3.976,1785,1.144,1790,2.062,1794,1.144,1795,2.815,1796,1.144,1797,1.144,1798,1.144,1799,2.285,1800,3.119,1801,2.285,1802,1.268,1803,1.268,1804,1.268,1805,1.268,1806,2.285,1807,2.285,1808,2.285,1809,1.268,1810,2.285,1811,1.268,1812,1.268,1813,3.119,1814,1.268,1815,1.268,1816,1.268,1817,1.268,1818,1.268,1819,1.268,1820,1.268,1821,1.268,1822,1.268,1823,1.268,1824,1.268,1825,1.268,1826,1.268,1827,1.268,1828,1.268,1829,1.268,1830,1.268,1831,1.268,1832,1.268,1833,1.268,1834,1.268,1835,3.815,1836,6.648,1837,2.285,1838,2.285,1839,2.285,1840,1.268,1841,2.285,1842,1.268,1843,2.285,1844,2.285,1845,2.285,1846,1.268,1847,1.268,1848,1.268,1849,1.268,1850,1.268,1851,1.268,1852,1.268,1853,1.268,1854,5.351,1855,4.405,1856,1.268,1857,1.268,1858,1.268,1859,1.268,1860,1.268,1861,1.268,1862,1.268,1863,2.285,1864,1.268,1865,1.268,1866,1.268,1867,2.285]],["t/558",[1,0.273,448,5.802,1558,6.96,1661,6.466,1868,7.71,1869,7.71,1870,7.71]],["t/560",[1,0.258,761,5.77,1871,7.297,1872,8.944,1873,7.297,1874,7.297,1875,7.297,1876,7.297,1877,7.297]],["t/562",[1,0.289,1878,9.573,1879,8.174]],["t/564",[1,0.21,22,4.267,466,3.726,469,4.267,486,4.267,1588,5.345,1880,5.921,1881,5.921,1882,5.921,1883,5.921,1884,5.921,1885,5.921,1886,5.921,1887,5.921,1888,5.921,1889,5.921,1890,5.921,1891,5.921,1892,5.921,1893,5.921,1894,5.921,1895,5.921,1896,5.921]],["t/567",[0,0.471,1,0.371,12,0.859,48,2.171,74,1.178,243,1.803,358,1.592,374,3.611,378,4.254,852,2.348,856,2.056,886,1.55,937,1.741,943,2.987,989,1.874,1471,2.181,1562,2.056,1590,1.803,1663,3.06,1897,2.601,1898,3.832,1899,2.601,1900,2.601,1901,2.601,1902,2.601,1903,2.601,1904,2.601,1905,2.601,1906,2.601,1907,2.601,1908,2.601,1909,2.601,1910,2.601,1911,2.601,1912,2.601,1913,2.601,1914,2.181,1915,2.348,1916,2.348,1917,4.511,1918,2.348,1919,2.348,1920,2.181,1921,2.348,1922,2.181,1923,2.348,1924,2.181,1925,2.181,1926,2.181,1927,2.348,1928,2.348,1929,2.348,1930,2.181,1931,2.181,1932,2.601,1933,2.601,1934,2.601,1935,2.601,1936,2.601,1937,2.601,1938,2.601,1939,2.601,1940,2.601,1941,2.601,1942,2.348,1943,2.348]],["t/569",[1,0.308]],["t/571",[0,0.685,1,0.339,748,2.99,886,2.254,937,2.532,940,7.506,943,5.538,1046,2.099,1351,2.845,1589,3.413,1590,2.622,1663,2.725,1742,3.413,1744,3.171,1760,3.413,1942,3.413,1943,3.413,1944,3.781,1945,3.781,1946,3.781,1947,3.781,1948,3.781,1949,3.781,1950,3.781,1951,3.413,1952,3.781,1953,3.781,1954,5.697]],["t/573",[1011,6.544]],["t/575",[1,0.332,48,3.073,243,4.166,761,4.751,815,6.251,1013,6.251,1066,5.038,1071,5.423,1955,6.008,1956,6.008,1957,7.904,1958,6.008,1959,6.008,1960,6.008,1961,6.008,1962,6.008]],["t/577",[1963,8.341,1964,8.341,1965,7.529]],["t/579",[0,0.738,1,0.375,48,3.408,74,1.847,260,1.862,374,3.022,378,1.957,452,1.957,824,1.22,989,1.783,1011,1.862,1028,1.957,1046,2.263,1104,1.783,1146,1.317,1471,3.418,1663,1.783,1898,3.679,1914,2.075,1915,2.234,1916,2.234,1917,4.358,1918,2.234,1919,2.234,1920,2.075,1921,2.234,1922,2.075,1923,2.234,1924,2.075,1925,2.075,1926,2.075,1927,2.234,1928,2.234,1929,2.234,1930,2.075,1931,2.075,1966,2.474,1967,2.474,1968,2.474,1969,2.474,1970,2.474,1971,2.474,1972,2.474,1973,2.474,1974,2.474,1975,2.474,1976,2.474,1977,2.474,1978,2.474,1979,2.474,1980,2.474,1981,2.474,1982,2.474,1983,2.234,1984,2.234,1985,2.234,1986,2.474,1987,2.234,1988,2.234,1989,2.474,1990,2.234,1991,2.234,1992,2.234,1993,2.474,1994,2.234,1995,2.474]],["t/581",[1996,8.696]],["t/583",[741,6.011,1997,8.341,1998,8.341]],["t/585",[1999,8.696]],["t/588",[856,6.877]],["t/590",[1,0.308]],["t/592",[1,0.303,15,2.766,358,4.168,943,3.781,1098,7.735,1650,6.147,2000,6.81,2001,6.81,2002,6.81,2003,6.81,2004,6.81]],["t/595",[2005,8.696]],["t/597",[0,0.562,1,0.377,12,0.22,15,1.001,16,1.161,30,0.526,34,0.67,48,0.341,66,1.013,70,0.347,74,0.57,101,0.526,103,0.347,136,0.907,248,2.036,269,0.526,288,0.644,295,1.137,466,0.419,486,0.48,500,1.056,501,0.501,573,0.601,587,0.558,860,0.767,888,2.58,942,0.501,943,3.269,953,4.619,955,0.601,957,1.137,989,0.907,993,2.452,996,0.526,999,0.501,1000,0.526,1046,0.37,1093,0.601,1146,0.67,1152,0.601,1533,0.558,1537,0.601,1543,1.137,1553,2.452,1590,0.462,1591,0.526,1623,0.601,1684,1.137,1687,0.558,1702,0.601,1729,0.601,1744,0.558,1772,2.269,2006,1.259,2007,1.259,2008,0.666,2009,1.259,2010,0.666,2011,1.791,2012,4.384,2013,2.271,2014,1.259,2015,0.666,2016,0.666,2017,0.666,2018,1.259,2019,1.259,2020,0.666,2021,1.259,2022,1.259,2023,1.259,2024,1.259,2025,1.259,2026,1.259,2027,2.271,2028,1.791,2029,4.414,2030,4.101,2031,0.666,2032,0.666,2033,0.666,2034,1.259,2035,0.666,2036,0.666,2037,1.259,2038,0.666,2039,0.666,2040,0.666,2041,0.666,2042,0.666,2043,1.259,2044,0.666,2045,0.666,2046,1.791,2047,1.259,2048,1.259,2049,0.666,2050,0.666,2051,0.666,2052,0.666,2053,0.666,2054,1.259,2055,0.666,2056,0.666,2057,1.259,2058,0.666,2059,0.666,2060,0.666,2061,0.666,2062,0.666,2063,0.666,2064,0.666,2065,0.666,2066,0.666,2067,0.666,2068,0.666,2069,0.666,2070,0.666,2071,1.259,2072,1.259,2073,0.558,2074,0.666,2075,0.666,2076,0.666,2077,0.666,2078,1.259,2079,0.666,2080,0.666,2081,0.666,2082,0.666,2083,0.666,2084,0.666,2085,0.666,2086,0.666,2087,0.666,2088,0.666,2089,0.666,2090,0.666,2091,0.666,2092,0.666,2093,0.666,2094,0.666,2095,0.666,2096,0.666,2097,0.666,2098,0.666,2099,0.666,2100,0.666,2101,0.666,2102,0.666,2103,0.666,2104,0.666,2105,0.666,2106,0.666,2107,0.666,2108,1.791,2109,0.666,2110,0.666,2111,0.666,2112,0.666,2113,0.666,2114,0.666,2115,0.666,2116,0.666,2117,0.666,2118,0.666,2119,0.666,2120,0.666,2121,0.666,2122,0.666,2123,0.666,2124,1.791,2125,0.666,2126,0.666,2127,1.791,2128,1.259,2129,1.791,2130,0.666,2131,0.666,2132,0.666,2133,0.666,2134,0.666,2135,0.666,2136,0.666,2137,0.666,2138,0.666,2139,0.666,2140,0.666,2141,0.666,2142,0.666,2143,0.666,2144,0.666,2145,0.666,2146,0.666,2147,0.666,2148,0.666,2149,0.666,2150,0.666,2151,0.666,2152,0.666,2153,0.666,2154,1.259,2155,0.666,2156,0.666,2157,0.666,2158,0.666,2159,0.666,2160,0.666,2161,0.666,2162,0.666,2163,0.666,2164,0.666,2165,0.666,2166,0.666,2167,0.666,2168,0.666,2169,0.666,2170,0.666,2171,0.666]],["t/599",[2073,7.293]],["t/601",[2172,8.341,2173,8.341,2174,8.341]],["t/603",[1,0.355,2175,7.169,2176,7.169,2177,7.169,2178,7.169,2179,7.169,2180,7.169,2181,7.169]],["t/605",[1,0.317,1246,6.587,2073,7.501,2182,7.297,2183,7.297,2184,7.297,2185,7.297,2186,7.297]],["t/608",[1,0.366,2187,7.297,2188,7.297,2189,7.297,2190,7.297,2191,7.297]],["t/611",[1,0.362]],["t/613",[1,0.366,1363,6.214,2192,7.859]],["t/615",[1,0.361,358,4.239,856,5.476,1032,2.163,1109,6.252,2193,6.925,2194,6.925,2195,6.925,2196,6.925]],["t/618",[1,0.362]],["t/620",[1,0.366,1273,5.125,2197,6.81,2198,6.81,2199,6.81,2200,6.81,2201,6.81,2202,6.81,2203,6.81]],["t/622",[0,0.626,1,0.377,12,1.141,48,1.039,260,1.528,374,1.181,466,2.174,736,2.732,794,2.897,860,1.168,888,1.128,989,1.464,995,2.009,1028,1.606,1046,1.918,1047,3.119,1053,3.119,1066,4.46,1107,1.103,1262,1.833,1267,3.78,1363,2.732,2204,2.031,2205,2.031,2206,4.508,2207,2.031,2208,3.455,2209,2.031,2210,3.455,2211,3.455,2212,3.455,2213,5.319,2214,3.455,2215,3.455,2216,3.455,2217,2.031,2218,2.031,2219,2.031,2220,2.031,2221,2.031,2222,2.031,2223,2.031,2224,2.031,2225,2.031,2226,2.031,2227,2.031,2228,2.031,2229,2.031,2230,2.031,2231,2.031,2232,2.031,2233,2.031,2234,2.031,2235,2.031,2236,2.031,2237,2.031,2238,2.031,2239,2.031,2240,2.031,2241,2.031,2242,2.031,2243,2.031,2244,2.031,2245,2.031,2246,2.031,2247,2.031,2248,2.031,2249,2.031,2250,1.833,2251,2.031,2252,2.031,2253,2.031,2254,2.031]],["t/624",[1,0.347]],["t/626",[1,0.376]],["t/628",[0,1.228,1,0.379,38,1.799,48,2.875,74,1.683,243,1.093,260,2.087,358,0.965,374,3.528,448,1.186,452,1.246,989,1.136,1054,1.322,1146,0.839,1914,1.322,1917,2.326,1920,1.322,1922,1.322,1924,1.322,1925,1.322,1926,1.322,1930,1.322,1931,1.322,1983,1.423,1984,1.423,1985,1.423,1987,1.423,1988,1.423,1990,2.504,1991,2.504,1992,1.423,1994,2.504,2029,1.423,2250,2.504,2255,1.576,2256,1.576,2257,1.576,2258,4.473,2259,4.473,2260,2.774,2261,1.576,2262,1.576,2263,1.576,2264,1.576,2265,1.576,2266,2.774,2267,1.576,2268,2.774,2269,2.774,2270,2.774,2271,2.774,2272,2.774,2273,2.774,2274,2.774,2275,6.782,2276,1.576,2277,1.576,2278,1.576,2279,1.576,2280,4.473,2281,1.576,2282,1.576,2283,4.473,2284,1.576,2285,3.715,2286,1.576,2287,2.774,2288,1.576,2289,1.576,2290,1.576,2291,1.576,2292,1.576,2293,1.576]],["t/630",[2294,8.696]],["t/632",[1,0.376]],["t/634",[1,0.361,15,1.188,37,2.651,48,2.854,288,1.882,781,3.321,845,2.969,886,2.193,888,2.043,943,4.178,947,3.085,1104,4.859,1217,5.654,1553,2.909,1572,3.321,1651,3.321,1951,3.321,1965,3.321,2295,3.679,2296,3.679,2297,5.581,2298,3.679,2299,3.679,2300,3.679,2301,3.679,2302,3.679,2303,3.679,2304,3.679,2305,3.679,2306,3.679,2307,3.679,2308,3.679,2309,3.679,2310,3.679,2311,3.679,2312,3.679,2313,3.679,2314,3.679,2315,3.679,2316,3.679]],["t/636",[1,0.308]],["t/638",[1,0.308]],["t/640",[0,1.615,1,0.387,12,2.644,66,3.239,70,2.173,74,4.04]]],"invertedIndex":[["",{"_index":1,"t":{"5":{"position":[[0,21]]},"7":{"position":[[122,45]]},"10":{"position":[[0,61],[62,5],[68,8],[77,5],[83,17],[101,11],[113,37],[151,4],[161,7],[169,3],[173,3],[177,3],[181,5],[187,21],[273,10]]},"12":{"position":[[0,12],[13,10],[24,13],[103,43],[154,28]]},"15":{"position":[[35,9]]},"20":{"position":[[8,9]]},"22":{"position":[[34,12],[47,32],[80,9],[90,5]]},"24":{"position":[[64,25],[90,24],[474,14]]},"27":{"position":[[67,15],[83,37],[121,34],[156,21]]},"29":{"position":[[184,26]]},"34":{"position":[[84,6],[135,1],[153,1],[162,1],[195,1],[202,1],[220,2],[246,1],[259,1],[270,1],[282,1],[288,1],[293,1],[295,1],[304,1]]},"37":{"position":[[6,14],[127,39]]},"39":{"position":[[84,5]]},"44":{"position":[[0,33]]},"46":{"position":[[23,1],[116,1],[122,2],[171,57],[229,6],[269,1],[351,1],[516,1],[541,2],[602,4],[607,5]]},"48":{"position":[[0,39]]},"52":{"position":[[0,12],[79,12]]},"54":{"position":[[73,2]]},"58":{"position":[[0,40]]},"60":{"position":[[76,9]]},"63":{"position":[[0,2],[3,2],[6,2],[9,5],[17,2],[20,1],[24,1],[32,1]]},"69":{"position":[[0,72],[73,11],[85,27],[113,29]]},"73":{"position":[[8,30],[59,1],[151,27]]},"76":{"position":[[0,22],[111,5]]},"78":{"position":[[111,3],[206,3]]},"80":{"position":[[0,7],[29,10],[40,5],[46,2],[109,4]]},"82":{"position":[[0,22],[23,7],[52,14]]},"84":{"position":[[0,7],[29,36]]},"87":{"position":[[18,2],[26,1]]},"89":{"position":[[73,3],[77,12]]},"91":{"position":[[0,4],[194,2],[197,2],[200,2],[203,1],[231,3],[242,3],[246,9],[256,18],[275,32],[308,21],[392,4],[397,8],[486,7]]},"95":{"position":[[0,43],[44,4],[118,5],[124,5],[130,5],[136,5],[142,4],[183,1],[189,1],[202,2],[211,2],[216,2],[238,2],[251,2],[254,9],[274,1],[284,1],[292,1],[297,6],[306,1],[311,1],[313,1],[320,1],[346,13],[370,1]]},"97":{"position":[[176,14],[201,3]]},"99":{"position":[[412,1],[454,11]]},"101":{"position":[[636,1],[677,12],[905,2],[925,1],[941,2],[961,1],[979,2],[1001,1],[1287,6],[1751,2],[1781,2],[1807,1],[1834,1],[1839,2],[1880,1],[1887,1],[1929,1],[2115,1],[2496,1],[2506,1]]},"103":{"position":[[71,4],[82,1],[88,1],[101,1],[140,2],[153,6],[170,1],[189,1],[199,1],[203,1],[213,1],[224,6],[231,1],[233,1],[235,1],[295,1],[301,1],[320,2],[350,2],[373,1],[383,1],[394,1],[436,1],[438,1]]},"105":{"position":[[0,73],[333,4],[386,1],[392,1],[408,1],[421,1],[436,2],[441,2],[452,2],[486,2],[509,1],[514,19],[550,1],[564,15],[580,1],[589,1],[602,1],[604,1]]},"109":{"position":[[0,42],[43,1],[61,1],[71,1],[96,1],[143,3],[147,5],[153,1],[422,3],[426,5],[432,1],[434,52],[487,49],[537,3],[541,5],[547,1],[575,3],[579,11],[707,1],[736,1],[741,1],[743,1],[745,3],[791,2],[833,1],[835,1],[837,7],[886,2],[891,1],[917,1],[971,1],[973,1],[975,6],[1022,2],[1027,1],[1053,1],[1058,1],[1110,1],[1112,1],[1114,6],[1160,2],[1165,1],[1190,1],[1241,1],[1243,1],[1280,3],[1347,1],[1418,1],[1424,1],[1426,1],[1428,16],[1445,3],[1449,2],[1452,5],[1489,1],[1510,3],[1571,1],[1592,2],[1595,1],[1616,2],[1619,1],[1642,2],[1645,1],[1672,2],[1732,2],[1735,4],[1740,3],[1744,8],[1753,14],[1768,87],[1966,3],[1970,6],[1977,12],[1990,57],[2158,10],[2169,54],[2224,3],[2228,10],[2239,1],[2241,5],[2247,1],[2249,6],[2256,1],[2258,7],[2266,1],[2268,1],[2274,1],[2280,1],[2286,1],[2288,1],[2290,2],[2293,1],[2295,2],[2298,1],[2300,2],[2303,1],[2305,1],[2307,2],[2310,1],[2312,2],[2315,1],[2317,2],[2320,1],[2322,3],[2326,8],[2335,32],[2497,19],[2602,1],[2608,1],[2635,1],[2641,3],[2657,21],[2728,1],[2743,20],[2833,5],[2839,3],[2931,20],[2960,3],[2964,2],[2967,6],[2974,3],[2978,8],[2987,33],[3021,1],[3100,27],[3139,143],[3283,3],[3287,3],[3291,4],[3296,16],[3360,3],[3475,3],[3479,13],[3663,3]]},"112":{"position":[[0,13],[14,6],[21,14],[36,4],[56,14],[71,12],[84,3],[108,1],[205,14]]},"114":{"position":[[0,20],[21,30]]},"116":{"position":[[0,12],[13,2],[16,3],[20,4],[25,3],[29,1],[31,6],[38,7],[46,20],[96,1]]},"118":{"position":[[0,4],[5,5],[11,3],[15,1],[29,14]]},"121":{"position":[[207,1],[211,2],[225,1],[232,2],[339,7],[383,1],[387,1],[394,2],[399,1],[403,1],[410,2],[415,1],[419,1],[426,2],[431,1],[435,1],[442,2],[695,12],[825,16]]},"123":{"position":[[0,6],[114,4],[167,11],[211,5],[244,17],[319,10],[330,1]]},"126":{"position":[[7,45],[53,10],[64,25],[163,122],[286,32],[319,6],[326,4],[331,8],[397,1],[429,1],[458,1],[505,1],[507,1],[610,1],[638,1],[698,1],[720,1],[722,1],[724,1],[726,1]]},"128":{"position":[[165,1],[196,1],[211,1],[257,1],[305,1],[319,1],[347,1],[394,1]]},"130":{"position":[[54,5],[60,28],[102,1]]},"136":{"position":[[0,26],[282,9],[292,12],[305,1],[309,1],[311,1],[315,1],[317,1],[321,1],[323,1],[327,1],[329,1],[333,1],[335,1],[339,1],[341,1],[345,1],[349,1],[351,1],[353,1],[355,1],[357,1],[359,1],[361,1],[371,3],[375,3],[379,3],[383,3],[387,3],[391,3],[397,1],[399,1],[417,3],[421,3],[425,3],[431,1],[469,3],[473,3],[491,3],[495,3],[499,3],[503,3],[507,3],[531,3],[535,3],[539,3],[543,3],[549,1],[551,1],[553,1],[555,1],[557,1],[570,3]]},"141":{"position":[[0,19],[20,9],[51,5],[80,17],[132,3],[136,48],[275,11],[287,15],[303,37],[341,104]]},"143":{"position":[[0,12],[102,1],[114,1],[173,66],[331,1],[394,65],[492,20]]},"147":{"position":[[0,44],[45,38],[84,2],[87,4],[92,6],[99,20],[120,33]]},"149":{"position":[[0,17],[18,4],[23,40],[64,4],[69,24],[94,12],[107,17],[125,39],[165,14],[180,4],[185,11]]},"153":{"position":[[0,74],[75,5],[81,1],[83,4],[88,1],[90,2],[93,16],[110,16],[127,20],[148,4],[153,2],[156,2],[159,5],[196,21]]},"155":{"position":[[135,11],[147,7],[166,9],[176,10],[384,10]]},"158":{"position":[[4,11]]},"161":{"position":[[0,44],[83,18],[102,8],[111,8],[120,4],[125,12],[246,57],[304,49]]},"163":{"position":[[0,29],[30,29],[60,25]]},"165":{"position":[[103,12],[128,22],[160,18]]},"168":{"position":[[13,5],[19,2],[56,16],[73,16],[119,4],[162,2],[165,2],[168,1],[170,4],[187,4],[196,2],[199,4],[204,14],[223,2],[231,2],[326,5],[338,2],[341,4]]},"170":{"position":[[0,2],[43,4],[57,4],[69,4],[83,4],[140,12],[242,1],[251,2],[259,12],[317,4],[322,20],[399,1],[552,1],[561,4],[596,4],[643,4],[660,4],[695,4],[707,4],[716,2],[719,1],[721,11],[762,2],[785,1],[809,1],[847,1],[849,4],[854,1],[856,4],[873,2],[882,2],[885,6]]},"172":{"position":[[0,80],[93,5],[157,2],[262,20]]},"175":{"position":[[233,23]]},"177":{"position":[[4,18]]},"180":{"position":[[0,117]]},"182":{"position":[[211,21],[311,4],[500,1],[506,2],[541,1],[555,1],[568,1],[588,1],[596,1],[605,1],[613,1],[615,1],[617,1],[792,2],[876,85]]},"184":{"position":[[0,104],[280,14],[295,4],[300,7],[379,1],[385,2],[403,1],[415,1],[424,1],[455,1],[462,1],[470,1],[485,1],[497,1],[503,1],[518,1],[529,1],[537,1],[547,2],[555,1],[562,2],[569,1],[574,1],[582,1],[591,1],[596,1],[604,1],[606,1],[616,12],[677,58]]},"186":{"position":[[172,11],[258,15],[282,1],[301,1],[311,6],[324,1],[443,1],[456,10],[472,1],[480,4],[491,1],[503,2],[519,1],[535,1],[552,1],[560,1],[562,1],[564,1],[566,1],[893,12]]},"188":{"position":[[0,57]]},"190":{"position":[[0,7],[8,13],[62,1],[69,1],[76,1],[84,1],[125,1],[132,1],[151,1],[177,1],[190,2],[201,1],[209,14],[245,1],[253,1],[271,1],[273,1],[275,1],[407,1],[493,2]]},"192":{"position":[[449,14],[464,8],[524,1],[544,1],[568,2],[595,10],[613,1],[639,2],[664,10],[683,1],[693,1],[702,1],[723,1],[725,3],[778,1],[800,1],[868,5],[895,1],[906,5],[912,1],[914,1],[1153,3],[1157,13]]},"196":{"position":[[309,1],[333,1],[348,1],[384,1],[389,1],[421,1],[423,1],[572,3]]},"198":{"position":[[4,100],[113,21],[135,16],[152,18],[182,44],[279,7],[287,11],[392,18],[497,1],[526,2],[529,1],[558,2],[561,1],[584,2],[587,1],[614,2],[742,3],[782,20],[803,39],[889,1],[955,1],[1002,1],[1010,24],[1045,1],[1101,2],[1158,12],[1182,1],[1190,12],[1205,1],[1210,32],[1243,1],[1245,1],[1252,1],[1259,1],[1267,8],[1276,31],[1308,5],[1383,1],[1396,2],[1437,1],[1439,1],[1563,3]]},"201":{"position":[[0,37],[228,3],[232,7],[240,15],[256,19],[290,1],[326,2],[329,4],[439,1],[458,6],[470,1],[484,1],[492,1],[502,1],[513,2],[566,1],[586,1],[596,1],[598,11],[631,1],[663,1],[673,1],[798,1],[884,1],[886,1],[1011,2]]},"203":{"position":[[80,17],[98,17],[220,22],[243,23],[267,21],[289,13],[310,28],[654,14],[733,32],[810,18],[944,2],[952,37]]},"205":{"position":[[0,2],[3,5],[9,5],[15,3],[19,2],[22,2],[25,2],[28,4],[93,1],[95,4],[179,1],[181,2],[184,1],[186,1],[218,2],[221,2],[284,1],[286,2],[399,2],[402,4],[471,2],[474,1],[585,2],[702,1],[704,2],[804,1]]},"209":{"position":[[0,5],[6,31],[38,4],[43,50]]},"213":{"position":[[32,1]]},"215":{"position":[[40,1],[64,1],[86,111]]},"219":{"position":[[76,72]]},"223":{"position":[[58,171],[230,34],[265,134]]},"225":{"position":[[107,6],[114,9]]},"227":{"position":[[117,26],[144,30]]},"229":{"position":[[74,21]]},"233":{"position":[[67,2],[77,23],[132,18],[157,10],[172,13],[246,41]]},"237":{"position":[[0,20],[52,8],[69,1],[115,19]]},"239":{"position":[[93,4],[98,32],[131,2],[190,1],[218,1],[347,1]]},"242":{"position":[[179,1],[206,1],[213,1],[222,1],[231,3],[258,8],[384,2],[404,1],[406,1],[503,1],[505,1],[647,1],[691,1],[782,1]]},"244":{"position":[[99,1],[106,1],[312,2],[375,2],[467,2],[480,3],[501,2],[504,5],[520,3],[540,2],[543,4],[728,5]]},"246":{"position":[[66,29]]},"250":{"position":[[0,89],[90,20]]},"252":{"position":[[0,66],[67,16],[89,28],[121,3],[125,87],[220,13]]},"254":{"position":[[82,8],[107,22],[139,47]]},"256":{"position":[[75,8],[101,6],[127,6],[153,6],[211,10],[236,11],[252,4],[257,8]]},"261":{"position":[[0,7]]},"263":{"position":[[102,1],[122,1],[181,1],[221,1],[300,1],[344,1],[432,1],[564,1],[595,2],[604,1],[673,1],[778,1],[829,2],[838,1],[896,1],[1082,1],[1332,1]]},"265":{"position":[[252,1],[273,1],[314,1],[359,2],[441,1],[507,1],[557,2],[650,1],[716,1],[723,1],[767,1],[817,1],[850,2],[858,1],[891,1],[989,1],[991,1],[1150,1],[1173,1],[1218,2],[1226,2],[1266,2],[1275,1],[1299,1],[1306,1],[1329,1],[1382,1],[1444,2],[1490,1],[1515,1],[1590,2],[1599,1],[1625,1],[1632,1],[1655,2],[1663,1],[1679,1],[1696,1],[1698,1],[1705,1],[1729,1],[1731,1],[1733,1]]},"268":{"position":[[95,1],[140,1],[200,1],[287,1],[301,1],[375,1],[415,1],[431,1],[479,1],[496,1],[532,1],[545,1],[585,1],[594,1],[618,1],[632,1],[676,18],[789,1],[827,1],[833,13],[864,1],[908,1],[928,3],[932,49],[1030,1],[1048,1],[1050,1],[1052,1],[1054,1],[1071,1],[1178,1],[1180,2],[1422,1],[1461,1]]},"270":{"position":[[81,1],[115,1],[290,1],[321,1],[338,1],[340,3],[344,1],[353,9],[363,1],[377,1],[387,2],[435,1],[468,1],[470,3],[474,1],[476,10],[487,1],[501,1],[515,1],[525,2],[588,1],[620,4],[625,1],[627,3],[631,1],[633,10],[644,2],[730,1],[752,1],[762,1],[841,1],[863,1],[902,1],[920,1],[938,1],[940,1],[967,12],[980,5],[1069,2],[1072,3],[1262,5],[1268,11]]},"272":{"position":[[342,1],[358,2],[375,2],[421,1],[465,2],[473,1],[480,1],[488,7],[513,1],[544,2],[583,2],[622,1],[624,1],[626,3]]},"274":{"position":[[53,2],[63,2]]},"276":{"position":[[35,9],[290,7],[298,1]]},"278":{"position":[[73,9],[83,5],[89,2],[176,1],[182,1]]},"280":{"position":[[53,2],[63,3],[215,1],[231,2],[248,2],[294,1],[338,2],[346,1],[353,1],[361,7],[425,1],[427,3],[431,2],[479,1],[508,3],[518,1],[543,1],[559,3],[569,1],[594,1],[596,1],[657,2],[736,1],[765,4],[775,3],[779,2]]},"285":{"position":[[20,2],[35,1],[51,3],[78,1],[104,2],[112,2],[177,8],[205,1],[226,8],[247,2],[250,1],[256,11],[310,2],[313,11],[418,3],[545,3],[643,3],[752,3],[756,1],[758,3]]},"289":{"position":[[21,5],[27,1],[52,5],[70,3],[74,4],[97,8],[106,1],[108,5],[114,1],[139,5],[158,3],[162,4],[167,1]]},"291":{"position":[[32,5],[38,1],[64,5],[92,4],[112,4],[117,1],[119,5],[125,1],[149,5],[172,1]]},"293":{"position":[[22,6],[29,5],[35,1],[59,5],[82,1]]},"295":{"position":[[34,6],[41,5],[47,1],[63,1],[65,6],[72,1],[114,6],[145,8],[175,8],[184,1],[186,2],[207,2],[210,6],[217,1]]},"297":{"position":[[33,6],[40,5],[46,1],[48,1],[91,6],[112,1],[114,1],[162,8],[171,8],[225,6],[232,1],[234,1],[236,1],[238,1]]},"299":{"position":[[41,6],[48,5],[54,1],[78,5],[96,1],[98,1],[127,4],[132,6],[139,1],[141,1],[143,1]]},"301":{"position":[[38,5],[44,1],[62,6],[110,4],[130,6],[137,1],[139,5],[145,1],[169,5],[187,1],[209,1],[211,1],[240,7],[248,6],[275,5],[294,6],[338,6],[362,5],[386,4],[406,5],[412,4],[433,6],[467,6],[474,1],[476,1],[478,1],[480,1]]},"303":{"position":[[38,6],[45,5],[51,1],[75,5],[93,1],[123,4],[144,4],[165,6],[180,6],[187,6],[213,6],[243,8],[266,1],[268,1],[278,8],[287,6],[311,1],[313,1],[350,4],[371,4],[385,7],[393,4],[415,4],[429,3],[433,4],[449,10],[460,4],[487,4],[503,5],[509,6],[516,6],[523,8],[532,4],[552,4],[573,4],[593,4],[598,1],[600,1],[602,1],[604,2],[621,1],[623,1]]},"305":{"position":[[48,5],[54,1],[90,4],[110,1],[112,1],[155,6],[178,1],[180,7],[188,5],[198,2],[220,6],[242,6],[249,1],[251,2],[269,1],[271,5],[277,1],[301,5],[323,6],[330,1]]},"307":{"position":[[42,6],[49,5],[55,1],[79,5],[97,1],[108,1],[110,6],[145,4],[166,4],[187,6],[202,8],[211,6],[237,6],[261,1],[263,8],[317,2],[334,1],[336,1],[346,9],[356,4],[378,1],[380,6],[387,1],[424,6],[447,4],[461,13],[475,6],[499,4],[513,1],[515,6],[522,1],[539,6],[557,6],[564,6],[584,6],[591,2],[594,1],[622,8],[644,1],[646,2],[660,5],[666,4],[687,1],[689,4],[694,6],[701,7],[709,2],[723,3],[727,4],[746,6],[769,6],[791,6],[798,1],[800,1],[802,1],[804,2],[821,6],[828,2],[841,1],[843,6],[880,4],[899,4],[919,1],[921,6],[928,1],[987,6],[1011,6],[1034,4],[1055,1],[1057,6],[1064,5],[1074,2],[1091,4],[1117,6],[1124,1],[1126,1],[1128,1],[1130,1],[1132,1]]},"309":{"position":[[40,5],[46,1],[78,4],[97,5],[118,1],[120,1],[179,6],[203,6],[226,6],[249,1],[251,6],[258,5],[268,2],[285,4],[311,6],[318,1],[320,1],[322,1],[324,5],[330,1],[354,5],[377,6],[384,1]]},"311":{"position":[[44,5],[50,1],[68,4],[88,6],[95,1],[97,5],[103,1],[127,5],[145,1],[170,1],[172,1],[230,6],[255,6],[277,5],[283,6],[335,6],[364,7],[391,6],[411,3],[415,4],[436,6],[463,8],[485,6],[505,7],[522,6],[546,5],[552,1],[554,1],[556,1],[558,1]]},"313":{"position":[[39,5],[45,1],[63,4],[83,6],[90,1],[92,5],[98,1],[122,5],[140,1],[166,1],[168,1],[209,4],[251,6],[273,5],[279,4],[304,4],[309,1],[311,1],[313,1],[315,1]]},"315":{"position":[[47,5],[53,1],[71,4],[91,6],[98,1],[100,5],[106,1],[130,5],[148,1],[164,1],[203,6],[250,4],[273,4],[287,1],[289,4],[294,1],[311,4],[332,6],[353,6],[360,1],[362,2],[381,4],[408,4],[429,4],[448,4],[469,4],[492,4],[497,2],[520,1],[522,6],[586,6],[609,6],[632,4],[659,6],[680,4],[706,6],[713,1],[715,1],[717,1]]},"317":{"position":[[27,6],[34,5],[40,1],[64,5],[82,1],[84,1],[141,5],[167,8],[196,14],[211,6],[254,6],[261,1],[263,1],[265,1]]},"319":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[172,5],[198,6],[216,4],[232,4],[247,4],[287,4],[314,5],[338,3],[429,4],[450,4],[472,6],[492,2],[495,6],[502,1],[504,1]]},"321":{"position":[[30,5],[36,1],[122,5],[148,6],[166,4],[182,4],[197,4],[237,4],[264,5],[288,3],[379,4],[400,4],[422,6],[442,2],[445,6],[452,1],[454,5],[460,1],[484,5],[507,1]]},"323":{"position":[[36,5],[42,1],[60,4],[80,6],[87,1],[89,5],[95,1],[119,5],[137,1],[159,1],[161,1],[190,6],[234,6],[257,6],[301,6],[332,5],[338,1],[340,1],[342,1],[344,1]]},"325":{"position":[[39,6],[46,5],[52,1],[76,5],[99,1]]},"327":{"position":[[43,6],[50,5],[56,1],[80,5],[100,8],[109,1]]},"330":{"position":[[21,5],[27,1],[50,5],[68,3],[72,4],[95,5],[101,1],[103,5],[109,1],[133,5],[151,1],[204,5],[471,1],[473,1]]},"332":{"position":[[22,6],[29,5],[35,1],[59,5],[82,1]]},"334":{"position":[[32,6],[39,5],[45,1],[71,6],[101,6],[134,6],[167,5],[199,1],[201,5],[210,2],[243,1],[245,6],[255,2],[273,1],[275,6],[286,1],[288,1]]},"336":{"position":[[31,5],[37,1],[51,3],[55,5],[72,4],[93,4],[113,6],[120,1],[122,5],[128,1],[152,5],[170,1],[185,4],[198,1],[200,1],[293,4],[298,5],[322,6],[342,4],[358,4],[376,4],[393,3],[397,6],[419,5],[466,8],[512,6],[556,6],[576,4],[597,4],[620,4],[625,1],[627,1],[629,1],[631,1]]},"338":{"position":[[30,6],[37,5],[43,1],[67,5],[85,1],[178,4],[183,5],[207,6],[227,4],[243,4],[261,4],[278,3],[282,6],[304,5],[351,8],[397,6],[441,6],[461,4],[482,4],[505,4],[510,1],[512,1]]},"340":{"position":[[26,5],[32,1],[68,5],[96,4],[121,6],[139,4],[157,4],[169,3],[173,4],[185,3],[189,4],[212,4],[232,5],[253,4],[258,1],[260,5],[266,1],[290,5],[308,1],[402,5],[420,2],[423,4],[448,6],[468,4],[486,4],[509,4],[530,4],[550,5],[567,4],[585,4],[609,4],[643,6],[670,6],[710,8],[737,6],[772,1],[774,1]]},"342":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6],[104,1]]},"344":{"position":[[36,6],[43,5],[49,1],[73,5],[93,1]]},"346":{"position":[[39,6],[46,5],[52,1],[76,5],[94,1],[96,1],[123,5],[129,6],[148,4],[166,6],[173,6],[199,4],[221,6],[228,1],[230,1],[232,1]]},"348":{"position":[[39,5],[45,1],[62,4],[98,1],[100,5],[106,1],[130,5],[148,1],[170,1],[172,1],[192,5],[198,6],[217,4],[235,5],[241,6],[248,1],[250,1],[252,1],[254,1]]},"350":{"position":[[43,6],[50,5],[56,1],[80,5],[98,1],[118,5],[124,6],[143,4],[161,5],[167,6],[174,1],[176,1]]},"352":{"position":[[39,5],[45,1],[65,5],[71,6],[90,4],[108,5],[114,6],[121,1],[123,5],[129,1],[153,5],[176,1]]},"354":{"position":[[43,6],[50,5],[56,1],[80,5],[103,1]]},"356":{"position":[[32,5],[38,1],[67,4],[91,4],[112,4],[132,6],[139,1],[141,5],[147,1],[171,5],[189,1],[211,1],[213,1],[240,8],[249,6],[276,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,1],[453,1]]},"358":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[122,4],[143,4],[164,6],[179,7],[187,6],[213,6],[243,6],[264,1],[266,1],[276,8],[285,6],[309,1],[311,1],[349,6],[372,4],[386,7],[394,4],[416,4],[430,3],[434,6],[452,10],[463,4],[490,6],[508,5],[514,6],[521,6],[528,8],[537,4],[557,6],[580,4],[600,4],[605,1],[607,1],[609,1],[611,2],[628,6],[635,1],[637,1]]},"360":{"position":[[32,5],[38,1],[69,4],[90,4],[111,6],[126,8],[135,6],[161,6],[191,4],[210,1],[212,1],[222,8],[231,4],[253,1],[255,6],[262,1],[300,4],[321,4],[335,15],[351,4],[373,4],[387,1],[389,4],[394,1],[411,6],[429,8],[438,6],[460,6],[484,6],[491,1],[493,2],[507,7],[515,6],[522,6],[529,8],[538,4],[559,1],[561,6],[577,2],[598,6],[619,6],[642,4],[662,4],[667,1],[669,1],[671,1],[673,2],[690,6],[697,1],[699,5],[705,1],[729,5],[747,1],[778,4],[799,4],[820,6],[835,8],[844,6],[870,6],[900,4],[919,1],[921,1],[931,8],[940,4],[962,1],[964,1],[1002,4],[1023,4],[1037,15],[1053,4],[1075,4],[1089,1],[1091,4],[1096,1],[1113,6],[1131,8],[1140,6],[1162,6],[1186,6],[1193,1],[1195,2],[1209,7],[1217,6],[1224,6],[1231,8],[1240,4],[1261,1],[1263,6],[1279,2],[1300,6],[1321,6],[1344,4],[1364,4],[1369,1],[1371,1],[1373,1],[1375,2],[1392,4],[1397,1],[1399,1]]},"362":{"position":[[36,6],[43,5],[49,1],[73,5],[96,1]]},"364":{"position":[[40,5],[46,1],[67,4],[84,4],[105,6],[128,4],[147,1],[149,5],[155,1],[179,5],[197,1],[219,1],[221,1],[241,8],[250,6],[277,6],[297,6],[341,6],[365,5],[387,4],[408,6],[440,6],[447,1],[449,1],[451,1],[453,1]]},"366":{"position":[[30,5],[36,1],[137,1],[139,5],[145,1],[169,5],[187,1],[209,1],[211,1],[242,4],[307,6],[330,4],[352,5],[373,4],[391,4],[407,5],[413,6],[420,6],[427,8],[436,4],[471,4],[492,4],[511,6],[518,4],[523,1],[525,1],[527,1],[529,1]]},"368":{"position":[[36,6],[43,5],[49,1],[73,5],[91,1],[130,4],[151,4],[184,4],[206,4],[220,3],[224,4],[240,7],[248,4],[275,4],[291,10],[302,6],[323,6],[346,4],[369,1],[371,1]]},"370":{"position":[[30,5],[36,1],[74,4],[95,4],[109,7],[117,4],[139,4],[153,3],[157,4],[173,10],[184,4],[211,4],[227,5],[233,6],[240,6],[247,8],[256,6],[276,6],[299,4],[322,1],[324,5],[330,1],[354,5],[377,1]]},"372":{"position":[[34,6],[41,5],[47,1],[71,5],[94,1]]},"374":{"position":[[26,5],[32,1],[85,1],[87,5],[93,1],[117,5],[135,1],[157,1],[159,1],[187,7],[195,6],[219,4],[251,8],[297,6],[321,6],[328,1],[330,1],[332,1],[334,1]]},"376":{"position":[[31,6],[38,5],[44,1],[68,5],[86,1],[123,4],[137,5],[143,6],[164,1],[166,1],[194,5],[200,6],[227,6],[248,6],[292,6],[316,5],[339,4],[360,6],[395,6],[421,1],[423,1],[425,1],[427,1]]},"378":{"position":[[26,5],[32,1],[70,7],[92,1],[94,1],[121,8],[130,6],[157,6],[178,6],[222,6],[246,5],[268,4],[289,6],[321,6],[328,1],[330,1],[332,1],[334,5],[340,1],[364,5],[382,1],[418,4],[432,7],[440,6],[461,1],[463,1],[490,8],[499,6],[526,6],[547,6],[591,6],[615,5],[637,4],[658,6],[690,6],[697,1],[699,1],[701,1],[703,1]]},"380":{"position":[[30,6],[37,5],[43,1],[56,6],[74,5],[80,6],[104,1]]},"382":{"position":[[29,5],[35,1],[90,1],[92,6],[99,5],[105,1],[129,5],[147,1],[170,1],[172,1],[200,9],[210,6],[228,10],[239,6],[271,8],[303,8],[335,7],[359,6],[402,6],[409,1],[411,1],[413,1],[415,1]]},"384":{"position":[[29,5],[35,1],[46,10],[57,6],[75,6],[82,6],[107,1],[109,5],[117,1],[119,1],[121,5],[127,1],[140,6],[158,5],[164,6],[188,1]]},"386":{"position":[[37,5],[43,1],[64,4],[100,1],[102,5],[108,1],[132,5],[150,1],[172,1],[174,1],[223,6],[249,6],[271,5],[277,6],[327,6],[356,7],[384,6],[405,3],[409,4],[430,6],[457,8],[479,6],[499,8],[508,6],[537,5],[543,1],[545,1],[547,1],[549,1]]},"388":{"position":[[37,5],[43,1],[110,1],[112,5],[118,1],[142,5],[160,1],[183,1],[185,1],[245,5],[263,6],[270,6],[295,14],[310,6],[353,6],[360,1],[362,1],[364,1],[366,1]]},"390":{"position":[[29,6],[36,5],[42,1],[66,5],[84,1],[178,5],[196,6],[203,6],[221,4],[237,4],[252,4],[292,6],[314,5],[338,3],[342,8],[388,6],[409,3],[413,6],[433,4],[457,6],[482,4],[487,1],[489,1]]},"392":{"position":[[28,5],[34,1],[105,6],[133,5],[151,6],[158,6],[176,4],[192,4],[207,4],[247,4],[267,5],[291,3],[295,8],[341,6],[385,6],[405,4],[429,4],[452,4],[457,1],[459,5],[465,1],[489,5],[512,1]]},"394":{"position":[[38,5],[52,5],[58,5],[64,1],[88,5],[106,1],[108,1],[129,5],[153,1],[155,1],[157,1]]},"396":{"position":[[39,6],[46,5],[52,1],[212,1]]},"398":{"position":[[28,5],[34,1],[128,5],[146,6],[153,6],[171,4],[187,4],[202,4],[242,6],[269,5],[293,3],[297,8],[343,6],[387,6],[407,4],[431,4],[454,4],[459,1],[461,5],[467,1],[491,5],[514,1]]},"403":{"position":[[0,19]]},"409":{"position":[[65,4],[70,2],[88,6]]},"421":{"position":[[29,5]]},"423":{"position":[[138,8],[218,1]]},"428":{"position":[[60,34]]},"430":{"position":[[91,18]]},"436":{"position":[[0,11],[12,28],[62,20]]},"438":{"position":[[78,19],[117,12]]},"443":{"position":[[201,5]]},"446":{"position":[[140,2]]},"448":{"position":[[164,8],[173,8]]},"450":{"position":[[60,4]]},"460":{"position":[[0,11]]},"462":{"position":[[92,3]]},"464":{"position":[[126,44]]},"466":{"position":[[11,3],[22,3],[36,1],[74,3],[83,4]]},"470":{"position":[[6,1],[12,1],[21,45],[74,2]]},"473":{"position":[[11,1],[167,10]]},"478":{"position":[[10,86]]},"480":{"position":[[86,24],[111,1],[128,1],[283,1],[287,1],[292,1],[305,1],[309,1],[317,9],[327,29],[391,48]]},"484":{"position":[[36,43],[80,1],[88,5],[106,6],[119,10],[135,7],[143,31],[175,5],[193,28],[234,18]]},"486":{"position":[[13,1],[25,11],[83,6],[96,4],[153,12],[166,8],[185,17],[203,1],[218,62]]},"488":{"position":[[29,26],[154,4],[196,19],[236,13],[304,5],[321,12]]},"490":{"position":[[0,6],[7,7],[15,8]]},"492":{"position":[[0,39]]},"496":{"position":[[0,20],[21,5],[61,22],[84,10]]},"498":{"position":[[0,61]]},"501":{"position":[[131,1],[133,3],[279,1],[351,1],[388,2],[407,1]]},"503":{"position":[[134,1],[191,1],[236,1]]},"506":{"position":[[62,7],[210,1],[291,1]]},"508":{"position":[[66,7],[114,1],[146,1],[148,1],[157,1],[159,1],[173,8],[389,1],[418,1],[430,1],[474,1],[540,1],[572,1],[672,1],[707,1],[727,1],[768,1],[790,1],[822,1],[930,1],[991,1],[993,1]]},"510":{"position":[[0,40],[41,3],[52,8],[61,8]]},"516":{"position":[[60,1],[171,1],[173,1],[186,2],[189,2],[192,2],[195,2],[198,2],[201,2],[204,2],[207,4],[244,1],[281,1],[364,1],[820,1],[858,1],[888,1],[890,2]]},"518":{"position":[[0,13]]},"520":{"position":[[93,1],[127,1],[150,1],[152,5],[171,2],[189,1],[217,1],[237,1]]},"522":{"position":[[0,4]]},"526":{"position":[[659,1],[700,8],[753,1],[755,9],[765,17],[783,3],[990,1],[1064,1],[1086,1],[1123,1],[1125,1],[1180,1],[1193,2],[1201,1],[1208,1],[1248,1]]},"529":{"position":[[89,36],[133,3],[385,2],[388,3],[392,2],[697,1],[1078,1],[1102,1],[1106,1],[1508,1],[1549,2],[1552,3],[1634,1],[1657,1]]},"532":{"position":[[105,1],[135,1],[142,1],[167,1],[180,1],[329,1],[342,1],[349,1],[377,1],[390,1],[511,1],[534,13],[608,1],[610,8],[663,1],[665,1]]},"534":{"position":[[73,1],[102,1],[114,4],[137,1],[194,4],[220,4],[251,6],[279,6],[314,6],[350,6],[383,6],[414,5],[446,4],[475,6],[507,6],[542,6],[578,6],[610,6],[643,4],[675,6],[790,7],[886,5],[912,1],[919,6],[947,1],[955,4],[987,1]]},"536":{"position":[[123,1]]},"538":{"position":[[0,3]]},"541":{"position":[[0,15],[25,3],[75,1],[93,4],[103,4]]},"543":{"position":[[0,21],[48,6],[73,1],[90,1],[99,4],[139,1]]},"545":{"position":[[0,8]]},"547":{"position":[[159,10],[179,4],[193,2],[236,4],[250,5],[259,2]]},"549":{"position":[[0,26]]},"553":{"position":[[0,33],[59,1],[98,2],[101,3],[115,19]]},"555":{"position":[[10,1],[528,1],[605,1],[649,1],[683,1],[735,1],[792,1],[821,1],[862,1],[900,1],[940,1],[962,1],[993,1],[1047,2],[1055,1],[1278,1],[1895,1],[1968,1],[2051,2],[2054,3],[2058,2],[2151,1],[2179,1],[2220,4],[2230,4],[2378,1],[2417,2],[2420,3],[2460,1],[2499,2],[2502,3],[2555,1],[2585,1],[2621,1],[2651,1],[2675,1],[2683,1],[2794,1],[2822,1],[2976,2],[3004,2],[3043,2],[3046,7],[3054,16],[3071,32],[3104,32],[3137,47]]},"558":{"position":[[165,29]]},"560":{"position":[[0,26]]},"562":{"position":[[64,22]]},"564":{"position":[[210,1]]},"567":{"position":[[0,42],[43,15],[59,20],[80,30],[115,5],[149,4],[309,1],[434,2],[567,10],[639,1],[704,1],[717,1],[719,1],[762,2],[803,2],[806,1],[820,3],[839,1],[867,1],[919,1],[921,3],[950,1],[957,1],[1012,1],[1041,1],[1043,3],[1047,2],[1050,7],[1092,1],[1111,1],[1150,2],[1157,5],[1247,1],[1333,1]]},"569":{"position":[[0,27]]},"571":{"position":[[0,14],[208,1],[228,1],[230,3],[512,5],[538,1],[545,6],[573,1],[581,1],[755,1]]},"575":{"position":[[120,1],[144,3],[189,2],[192,1]]},"579":{"position":[[83,6],[378,11],[440,2],[443,1],[452,1],[478,2],[481,3],[485,2],[549,1],[614,1],[627,1],[629,1],[672,2],[713,2],[716,1],[730,3],[749,1],[777,1],[829,1],[831,3],[860,1],[867,1],[922,1],[951,1],[953,3],[957,2],[1141,5],[1159,8],[1179,1],[1200,9],[1221,1],[1267,1],[1348,1],[1361,1],[1368,1],[1388,1],[1432,1],[1464,2],[1483,3],[1561,1],[1563,2]]},"590":{"position":[[0,54]]},"592":{"position":[[0,38],[85,1]]},"597":{"position":[[0,2],[3,2],[30,2],[50,1],[62,1],[71,1],[122,1],[159,1],[161,3],[165,2],[168,2],[195,2],[212,1],[214,3],[316,1],[345,1],[357,1],[363,2],[392,2],[440,1],[501,1],[548,2],[551,16],[578,1],[584,1],[611,1],[644,1],[675,2],[684,1],[693,1],[701,1],[719,3],[728,2],[757,1],[803,1],[853,1],[914,1],[1079,1],[1088,1],[1090,1],[1112,2],[1115,16],[1142,1],[1148,1],[1183,2],[1208,1],[1227,2],[1283,2],[1300,1],[1308,1],[1326,3],[1387,1],[1455,1],[1615,1],[1712,2],[1803,2],[1850,1],[1852,5],[2153,1],[2241,1],[2319,1],[2363,1],[2388,1],[2390,1],[2450,1],[2484,2],[2490,1],[2500,1],[2529,1],[2572,2],[2667,1],[2686,1],[2732,1],[2822,1],[2849,2],[2852,4],[2879,1],[2942,1],[3019,2],[3036,1],[3054,1],[3072,3],[3218,1],[3291,1],[3299,1],[3355,1],[3373,1],[3391,3],[3502,1],[3520,1],[3538,3],[3553,1],[3658,1],[3720,1],[3738,1],[3756,3],[3846,1],[3864,1],[3882,3],[4013,1],[4031,1],[4049,3],[4053,11],[4078,10],[4089,8],[4098,2],[4101,9],[4111,7],[4139,1],[4186,1],[4407,1],[4426,1],[4444,3],[4511,3],[4515,1],[4619,1],[4624,1],[4664,1],[4666,1],[4668,1],[4777,1],[4784,1],[4835,1],[4842,1],[4893,1],[4900,1],[4950,1],[4957,1],[5007,1],[5014,1],[5016,1],[5050,1],[5158,1],[5213,1],[5249,1],[5287,1],[5380,1],[5500,10],[5511,10],[5522,8],[5583,2],[5628,2],[5642,24],[5684,1],[5736,1],[5738,2],[5750,1],[5756,2],[5786,1],[5827,1],[5937,1],[6018,1],[6070,2],[6104,1],[6106,1],[6108,1],[6110,1],[6270,1],[6272,20],[6293,1],[6295,13],[6343,1],[6468,1],[6470,1],[6506,1],[6532,1],[6548,1],[6550,1],[6565,1],[6567,2],[6570,1],[6577,1],[6579,2],[6596,1],[6598,2],[6601,1],[6629,1],[6631,2],[6647,1],[6695,2],[6770,1],[6840,1],[6872,1],[7103,1],[7166,1],[7188,1],[7237,1],[7268,1],[7280,2],[7289,1],[7307,1],[7309,1]]},"603":{"position":[[45,6],[52,4],[184,40],[267,40]]},"605":{"position":[[128,18],[147,9]]},"608":{"position":[[29,7],[60,8],[90,8],[124,9],[154,9]]},"611":{"position":[[0,33],[34,34],[69,35]]},"613":{"position":[[31,5],[37,23],[61,2],[82,50]]},"615":{"position":[[0,9],[10,2],[15,4],[22,1],[72,13]]},"618":{"position":[[0,54],[55,52],[108,78]]},"620":{"position":[[0,9],[25,9],[55,12],[105,7],[113,5],[381,40]]},"622":{"position":[[72,5],[125,7],[183,1],[298,2],[315,2],[318,1],[333,2],[353,2],[356,1],[358,7],[374,8],[403,1],[405,3],[466,5],[547,1],[585,3],[662,1],[675,1],[779,1],[911,2],[928,2],[931,1],[946,2],[966,2],[969,1],[971,7],[987,8],[1016,1],[1018,3],[1022,1],[1030,4],[1107,1],[1173,1],[1241,1],[1283,16],[1357,1],[1375,1],[1427,1],[1493,1],[1560,1],[1612,2],[1615,2],[1656,1],[1712,1],[1769,1],[1845,1],[1847,2],[1850,2],[1853,3],[1902,1],[1904,3],[1968,1],[1981,1],[1983,1],[2020,2]]},"624":{"position":[[0,149],[150,38]]},"626":{"position":[[0,5],[6,35],[42,53],[96,52],[149,19]]},"628":{"position":[[6,3],[145,2],[148,20],[192,3],[291,1],[293,2],[344,2],[470,1],[472,14],[498,1],[500,1],[531,2],[579,2],[582,1],[596,3],[615,1],[640,1],[648,14],[702,1],[752,1],[806,1],[877,1],[889,1],[894,1],[967,3],[995,1],[1011,1],[1013,1],[1037,1],[1087,1],[1141,1],[1212,1],[1224,1],[1229,1],[1247,1],[1249,3],[1253,1],[1260,1],[1315,1],[1344,1],[1346,3],[1350,2],[1353,45],[1411,8],[1431,1],[1452,9],[1471,1],[1510,1],[1525,9],[1542,1],[1623,1],[1625,18],[1651,3],[1743,2],[1848,1],[1860,1],[1892,2],[1911,3],[1946,1],[1996,1],[2005,1],[2009,2],[2016,1],[2071,1],[2118,2],[2168,2],[2273,1],[2285,1],[2317,2],[2336,3],[2371,1],[2421,1],[2423,1],[2432,3],[2475,1],[2477,3],[2491,1],[2496,1],[2498,2],[2507,3],[2511,51]]},"632":{"position":[[0,5],[6,9],[16,16],[33,21],[55,9]]},"634":{"position":[[134,1],[150,1],[183,2],[240,1],[256,1],[292,1],[325,1],[384,2],[414,1],[496,1],[557,1],[639,1],[718,1],[772,1],[774,16],[791,75]]},"636":{"position":[[0,15]]},"638":{"position":[[0,10]]},"640":{"position":[[0,5],[6,4],[11,2],[14,2],[17,2],[20,2],[31,5],[37,4],[42,2],[45,2],[48,4],[53,2],[56,2],[69,5],[75,4],[80,2],[83,2],[90,5],[96,4],[101,3],[105,8],[114,4],[125,5],[131,4],[136,3],[140,4],[145,4],[150,4],[163,5],[169,4],[174,4],[179,4]]}}}],["0",{"_index":74,"t":{"52":{"position":[[13,65]]},"63":{"position":[[15,1],[22,1],[29,2]]},"65":{"position":[[0,3]]},"78":{"position":[[0,42]]},"91":{"position":[[205,2],[208,1],[210,1],[212,1],[214,2],[219,1],[222,1],[227,1],[229,1],[240,1]]},"95":{"position":[[367,2]]},"103":{"position":[[90,2],[103,2],[433,2]]},"105":{"position":[[394,2],[410,2],[439,1]]},"109":{"position":[[902,2],[949,2],[1038,2],[1088,2],[1176,2],[1220,2]]},"121":{"position":[[227,4],[381,1],[392,1],[397,1],[401,1],[405,1],[407,2],[413,1],[417,1],[421,1],[433,1],[437,1],[439,2]]},"136":{"position":[[347,1]]},"203":{"position":[[525,2]]},"268":{"position":[[829,3]]},"307":{"position":[[1086,4]]},"311":{"position":[[250,4],[361,2],[458,4]]},"315":{"position":[[675,4]]},"327":{"position":[[98,1]]},"360":{"position":[[614,4],[1316,4]]},"532":{"position":[[137,2],[344,2]]},"534":{"position":[[104,3]]},"555":{"position":[[1428,1],[1541,1],[1682,1],[1822,1]]},"567":{"position":[[824,5]]},"579":{"position":[[734,5],[1363,2]]},"597":{"position":[[2487,2],[2752,6]]},"628":{"position":[[196,3],[600,5],[2493,2]]},"640":{"position":[[23,1],[59,1],[86,1],[119,1],[155,1],[184,1]]}}}],["0,1,2...di​=0,1,2",{"_index":59,"t":{"46":{"position":[[271,24]]}}}],["0.000",{"_index":91,"t":{"56":{"position":[[224,14]]}}}],["0.1xxxxx",{"_index":124,"t":{"89":{"position":[[0,11]]}}}],["0.1xxx，负数1.1xxx",{"_index":138,"t":{"91":{"position":[[330,44]]}}}],["00",{"_index":100,"t":{"73":{"position":[[179,2]]}}}],["00001",{"_index":1632,"t":{"522":{"position":[[9,6]]}}}],["00:00:00",{"_index":1182,"t":{"307":{"position":[[284,10],[307,9]]},"319":{"position":[[276,10]]},"321":{"position":[[226,10]]}}}],["01",{"_index":102,"t":{"73":{"position":[[185,5]]},"311":{"position":[[216,2]]},"319":{"position":[[273,2]]},"321":{"position":[[223,2]]},"356":{"position":[[324,2]]},"366":{"position":[[290,2]]},"374":{"position":[[280,2]]},"378":{"position":[[205,2],[574,2]]}}}],["0110000000011000]\\begin{bmatrix",{"_index":325,"t":{"121":{"position":[[347,33]]}}}],["02",{"_index":1203,"t":{"313":{"position":[[237,2]]},"364":{"position":[[327,2]]}}}],["04",{"_index":1129,"t":{"297":{"position":[[81,2]]}}}],["05",{"_index":1152,"t":{"301":{"position":[[321,2]]},"597":{"position":[[5636,2]]}}}],["06",{"_index":1181,"t":{"307":{"position":[[278,2],[304,2]]},"311":{"position":[[213,2]]},"313":{"position":[[234,2]]},"317":{"position":[[238,2]]},"319":{"position":[[399,2]]},"321":{"position":[[349,2]]},"323":{"position":[[284,2]]},"336":{"position":[[449,2],[495,2],[539,2]]},"338":{"position":[[334,2],[380,2],[424,2]]}}}],["0656",{"_index":1283,"t":{"340":{"position":[[343,4]]}}}],["07",{"_index":1237,"t":{"319":{"position":[[365,2]]},"321":{"position":[[315,2]]},"386":{"position":[[206,2],[209,2]]},"390":{"position":[[278,2],[374,2]]},"392":{"position":[[233,2],[327,2]]},"398":{"position":[[228,2],[329,2]]}}}],["08",{"_index":1183,"t":{"307":{"position":[[301,2]]},"317":{"position":[[241,2]]},"364":{"position":[[324,2]]},"376":{"position":[[275,2]]},"388":{"position":[[337,2]]},"392":{"position":[[368,2]]},"398":{"position":[[370,2]]}}}],["08:15:00",{"_index":1855,"t":{"555":{"position":[[2168,10],[2730,10],[2811,10],[2911,10],[2993,10]]}}}],["09",{"_index":1233,"t":{"319":{"position":[[270,2],[362,2],[402,2]]},"321":{"position":[[220,2],[312,2],[352,2]]},"382":{"position":[[386,2]]},"390":{"position":[[275,2],[371,2]]},"392":{"position":[[230,2],[324,2]]},"398":{"position":[[225,2],[326,2]]}}}],["0999",{"_index":696,"t":{"203":{"position":[[0,79]]}}}],["0;high",{"_index":41,"t":{"34":{"position":[[155,6]]}}}],["0;i",{"_index":295,"t":{"109":{"position":[[2604,3]]},"597":{"position":[[580,3],[1144,3]]}}}],["0;i<contentsplit.length;i",{"_index":2082,"t":{"597":{"position":[[2881,29]]}}}],["0;i<g.vexnum;i",{"_index":352,"t":{"126":{"position":[[460,18]]}}}],["0;i<g.vexnuml;i",{"_index":349,"t":{"126":{"position":[[399,18]]}}}],["0;i<len;i",{"_index":249,"t":{"109":{"position":[[709,13]]}}}],["0;i<list.length;i",{"_index":2289,"t":{"628":{"position":[[2073,21]]}}}],["0;i<n",{"_index":586,"t":{"190":{"position":[[153,5]]},"196":{"position":[[311,5]]}}}],["0;v<g.vexnum;++v",{"_index":373,"t":{"128":{"position":[[167,17],[213,17]]}}}],["0^2,1^2",{"_index":61,"t":{"46":{"position":[[353,8]]}}}],["0≤kji≤r−1(0≤j≤n,0≤i≤d−1)0",{"_index":702,"t":{"203":{"position":[[476,28]]}}}],["0和全1",{"_index":137,"t":{"91":{"position":[[184,9]]}}}],["0有两种表示：10000和00000",{"_index":85,"t":{"54":{"position":[[179,24]]}}}],["0舍1入、末位恒置1",{"_index":139,"t":{"91":{"position":[[375,16]]}}}],["0，余数左移并且加上除数；余数为正，商1",{"_index":117,"t":{"82":{"position":[[67,37]]}}}],["0，并且加上除数的补码，余数为正商0",{"_index":115,"t":{"80":{"position":[[49,32]]}}}],["1",{"_index":0,"t":{"3":{"position":[[0,30]]},"12":{"position":[[96,6]]},"15":{"position":[[29,5],[91,5]]},"22":{"position":[[31,2]]},"24":{"position":[[61,2],[329,12],[342,48]]},"34":{"position":[[170,2],[267,2],[290,2]]},"37":{"position":[[0,5]]},"41":{"position":[[0,4],[42,62]]},"46":{"position":[[236,7]]},"54":{"position":[[68,2],[89,1],[144,2]]},"56":{"position":[[144,1],[156,1]]},"63":{"position":[[26,2],[34,1]]},"73":{"position":[[0,7],[131,12]]},"78":{"position":[[138,3]]},"89":{"position":[[90,1],[92,12]]},"91":{"position":[[217,1],[224,2],[235,2],[238,1],[406,58],[465,20]]},"95":{"position":[[191,2],[308,2]]},"99":{"position":[[409,2],[425,2]]},"101":{"position":[[193,10],[633,2],[652,2],[922,2],[938,2],[958,2],[976,2],[998,2],[1014,2],[1804,2],[1822,2],[1877,2],[1902,2]]},"103":{"position":[[201,1],[303,2]]},"109":{"position":[[67,3],[549,25],[591,10],[738,2],[1060,2],[1420,3],[1491,1],[1508,1],[1531,4],[2479,17],[2638,2],[3324,35]]},"112":{"position":[[41,14]]},"118":{"position":[[52,2]]},"121":{"position":[[209,1],[385,1],[389,2],[423,2],[429,1]]},"126":{"position":[[0,6]]},"130":{"position":[[29,24]]},"136":{"position":[[307,1],[578,3]]},"155":{"position":[[0,5]]},"170":{"position":[[601,5]]},"182":{"position":[[12,2],[316,129],[446,4],[531,4]]},"184":{"position":[[308,4],[430,2],[505,2],[526,2],[571,2],[593,2]]},"186":{"position":[[0,137],[207,4]]},"190":{"position":[[22,4]]},"192":{"position":[[0,6],[864,3]]},"196":{"position":[[187,4],[260,4],[490,5]]},"198":{"position":[[0,3],[227,51],[1433,3]]},"201":{"position":[[104,4]]},"203":{"position":[[116,7],[523,1]]},"207":{"position":[[0,4]]},"268":{"position":[[534,3]]},"291":{"position":[[110,1],[135,2]]},"293":{"position":[[45,2]]},"299":{"position":[[64,2]]},"301":{"position":[[59,2],[107,2],[155,2],[198,2],[272,2],[430,2]]},"303":{"position":[[61,2],[120,2],[141,2],[162,2],[368,2],[412,2],[591,1]]},"305":{"position":[[194,3],[240,1],[287,2]]},"307":{"position":[[65,2],[142,2],[163,2],[444,2],[496,2],[534,4],[789,1],[1031,2],[1070,3]]},"309":{"position":[[223,2],[264,3],[340,2]]},"311":{"position":[[65,2],[113,2],[332,2]]},"313":{"position":[[60,2],[108,2],[206,2]]},"315":{"position":[[68,2],[116,2],[200,2]]},"317":{"position":[[50,2],[108,2]]},"319":{"position":[[54,2],[229,2],[244,2],[426,2],[447,2],[466,5]]},"321":{"position":[[179,2],[194,2],[376,2],[397,2],[416,5],[470,2]]},"323":{"position":[[57,2],[105,2]]},"325":{"position":[[62,2]]},"327":{"position":[[66,2]]},"330":{"position":[[119,2]]},"332":{"position":[[45,2]]},"334":{"position":[[282,3]]},"336":{"position":[[69,2],[90,2],[138,2],[355,2],[573,2],[594,2]]},"338":{"position":[[53,2],[240,2],[458,2],[479,2]]},"340":{"position":[[136,2],[154,2],[251,1],[276,2],[527,2],[564,2],[582,2]]},"342":{"position":[[53,2]]},"344":{"position":[[59,2]]},"346":{"position":[[62,2],[145,2]]},"348":{"position":[[80,2],[116,2],[214,2]]},"350":{"position":[[66,2],[140,2]]},"352":{"position":[[139,2]]},"354":{"position":[[66,2]]},"356":{"position":[[109,2],[157,2],[384,2]]},"358":{"position":[[59,2],[119,2],[140,2],[161,2],[369,2],[413,2],[598,1]]},"360":{"position":[[66,2],[87,2],[318,2],[370,2],[660,1],[715,2],[775,2],[796,2],[1020,2],[1072,2],[1362,1]]},"362":{"position":[[59,2]]},"364":{"position":[[81,2],[125,2],[165,2],[208,2],[384,2]]},"366":{"position":[[119,2],[155,2],[327,2],[388,2]]},"368":{"position":[[59,2],[203,2]]},"370":{"position":[[92,2],[136,2],[340,2]]},"372":{"position":[[57,2]]},"374":{"position":[[67,2],[103,2],[216,2]]},"376":{"position":[[54,2]]},"378":{"position":[[58,2],[265,2],[350,2],[415,2],[634,2]]},"380":{"position":[[53,2]]},"382":{"position":[[115,2],[332,2],[356,2]]},"384":{"position":[[115,1],[137,2]]},"386":{"position":[[82,2],[118,2],[297,2]]},"388":{"position":[[92,2],[128,2]]},"390":{"position":[[52,2],[249,2],[430,2]]},"392":{"position":[[204,2],[402,2],[475,2]]},"394":{"position":[[74,2],[144,1]]},"398":{"position":[[199,2],[404,2],[477,2]]},"414":{"position":[[192,1]]},"423":{"position":[[136,1]]},"438":{"position":[[0,24],[98,13]]},"462":{"position":[[90,1]]},"466":{"position":[[95,1]]},"470":{"position":[[149,1]]},"488":{"position":[[136,1]]},"501":{"position":[[84,12]]},"529":{"position":[[1104,1]]},"534":{"position":[[914,4]]},"538":{"position":[[4,34]]},"555":{"position":[[823,1],[2677,1]]},"567":{"position":[[121,14]]},"571":{"position":[[540,4]]},"579":{"position":[[1269,3],[1557,3]]},"597":{"position":[[1347,2],[2706,6],[3715,4],[3841,4],[4008,4],[5586,3]]},"622":{"position":[[143,2],[589,3]]},"628":{"position":[[891,2],[1226,2],[1544,3],[1655,3],[1960,2],[1992,3],[2007,1],[2385,2],[2417,3]]},"640":{"position":[[25,1],[61,1],[88,1],[121,1],[157,1],[186,1]]}}}],["1(2)，则安装面必须为a(b)，产品主数据中也必须为a(b",{"_index":1414,"t":{"432":{"position":[[0,53]]}}}],["1)/2",{"_index":283,"t":{"109":{"position":[[1611,4]]},"116":{"position":[[75,4]]}}}],["1)0≤kji​≤r−1(0≤j≤n,0≤i≤d−1)，r",{"_index":707,"t":{"203":{"position":[[554,33]]}}}],["1)^",{"_index":121,"t":{"87":{"position":[[21,4]]},"91":{"position":[[133,4]]}}}],["1)return",{"_index":259,"t":{"109":{"position":[[893,8],[1029,8],[1167,8]]}}}],["1)}{2",{"_index":643,"t":{"198":{"position":[[551,6]]}}}],["1)}{2}2n(n−1)​，故时间复杂度为o(n2)o(n^2)o(n2",{"_index":636,"t":{"196":{"position":[[533,38]]}}}],["1)}{2}∑i=1n−1​(n−i)=2n(n−1)​,为o(n2)o(n^2)o(n2",{"_index":597,"t":{"190":{"position":[[419,73]]}}}],["1)红叔叔（2",{"_index":11,"t":{"12":{"position":[[38,57]]}}}],["1**，且其左（右）兄弟的关键字数目大于**（m/2",{"_index":20,"t":{"24":{"position":[[145,83]]}}}],["1+8+23组合。ieee754标准表示成浮点数真值为：(−1)s∗1.m∗2e−127",{"_index":133,"t":{"91":{"position":[[87,45]]}}}],["1,2,3",{"_index":1786,"t":{"547":{"position":[[0,34]]}}}],["1,2,5",{"_index":405,"t":{"136":{"position":[[585,7]]}}}],["1,2,5,6",{"_index":406,"t":{"136":{"position":[[593,9]]}}}],["1,2,5,6,3",{"_index":407,"t":{"136":{"position":[[603,11]]}}}],["1,2,5,6,3,4",{"_index":408,"t":{"136":{"position":[[615,13]]}}}],["1,2,5,6,3,4,7",{"_index":409,"t":{"136":{"position":[[629,15]]}}}],["1,2,5,6,3,4,7,0",{"_index":410,"t":{"136":{"position":[[645,17]]}}}],["1,high",{"_index":619,"t":{"192":{"position":[[897,8]]}}}],["1,j",{"_index":145,"t":{"95":{"position":[[185,3]]}}}],["1,k",{"_index":205,"t":{"103":{"position":[[84,3]]},"105":{"position":[[388,3]]}}}],["1.000",{"_index":75,"t":{"52":{"position":[[92,55]]}}}],["1.1xxxxx",{"_index":125,"t":{"89":{"position":[[12,11]]}}}],["1.m*2^{e",{"_index":134,"t":{"91":{"position":[[138,9]]}}}],["1.已知树高求结点总数：sum",{"_index":228,"t":{"109":{"position":[[45,15]]}}}],["1.若i为偶数则双亲为\\frac{i}{2",{"_index":641,"t":{"198":{"position":[[499,26]]}}}],["1.若i为偶数则双亲为i/2",{"_index":281,"t":{"109":{"position":[[1573,18]]}}}],["1.若i为偶数则双亲为i2向下取整2.若i为奇数则双亲为(i−1)23.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1\\begin{align",{"_index":640,"t":{"198":{"position":[[411,85]]}}}],["1.题目给定树的总节点数目n，和转换后的二叉树叶节点数目m",{"_index":308,"t":{"109":{"position":[[3493,32]]}}}],["1.，所以尾数的精度是24，能表示24",{"_index":129,"t":{"91":{"position":[[22,35]]}}}],["10",{"_index":103,"t":{"73":{"position":[[191,5]]},"301":{"position":[[127,2]]},"303":{"position":[[546,5],[616,4]]},"311":{"position":[[85,2]]},"313":{"position":[[80,2]]},"315":{"position":[[88,2]]},"323":{"position":[[77,2],[210,3]]},"336":{"position":[[110,2]]},"348":{"position":[[95,2]]},"356":{"position":[[129,2]]},"358":{"position":[[551,5],[623,4]]},"366":{"position":[[134,2],[367,5]]},"370":{"position":[[272,3]]},"374":{"position":[[82,2]]},"382":{"position":[[87,2]]},"386":{"position":[[97,2]]},"388":{"position":[[107,2]]},"597":{"position":[[6649,7]]}}}],["10).7pd1kn253.webp",{"_index":291,"t":{"109":{"position":[[2137,20]]}}}],["100",{"_index":1267,"t":{"336":{"position":[[208,4]]},"338":{"position":[[93,4]]},"622":{"position":[[160,8],[747,8],[756,8]]}}}],["1001",{"_index":1830,"t":{"555":{"position":[[942,6]]}}}],["1024",{"_index":790,"t":{"242":{"position":[[200,5]]}}}],["1025",{"_index":1256,"t":{"334":{"position":[[95,5]]}}}],["109",{"_index":1281,"t":{"340":{"position":[[316,4]]}}}],["10:08:03",{"_index":1366,"t":{"398":{"position":[[376,10]]}}}],["10和20",{"_index":1726,"t":{"532":{"position":[[0,59]]}}}],["11",{"_index":101,"t":{"73":{"position":[[182,2]]},"323":{"position":[[287,2]]},"392":{"position":[[261,5]]},"597":{"position":[[4470,8]]}}}],["111",{"_index":1211,"t":{"315":{"position":[[243,6]]}}}],["11:28:52",{"_index":1356,"t":{"392":{"position":[[374,10]]}}}],["11:37:49",{"_index":1336,"t":{"382":{"position":[[392,9]]}}}],["11:45:57",{"_index":1311,"t":{"366":{"position":[[296,10]]}}}],["11:49:11",{"_index":1328,"t":{"378":{"position":[[211,10],[580,10]]}}}],["11:49:31",{"_index":1299,"t":{"356":{"position":[[330,10]]}}}],["11:50:24",{"_index":1320,"t":{"374":{"position":[[286,10]]}}}],["12",{"_index":1212,"t":{"315":{"position":[[269,3]]},"376":{"position":[[119,3],[278,2]]},"378":{"position":[[318,2],[687,2]]},"484":{"position":[[113,2]]}}}],["12).2oblghufvq.webp",{"_index":292,"t":{"109":{"position":[[2457,21]]}}}],["1232−1",{"_index":1479,"t":{"473":{"position":[[192,6]]}}}],["123456",{"_index":1116,"t":{"291":{"position":[[82,9]]},"340":{"position":[[86,9]]}}}],["127.0.0.1",{"_index":1444,"t":{"448":{"position":[[78,11]]}}}],["127.0.0.1只能本机访问)或改成本机ip地址，否则影响远程ip",{"_index":1445,"t":{"448":{"position":[[103,36]]}}}],["127}(−1)s∗1.m∗2e−127",{"_index":135,"t":{"91":{"position":[[148,20]]}}}],["129",{"_index":1194,"t":{"311":{"position":[[303,4]]}}}],["13",{"_index":398,"t":{"136":{"position":[[433,2],[442,2],[451,2],[460,2]]},"346":{"position":[[104,3]]},"348":{"position":[[180,3]]},"350":{"position":[[106,3]]},"352":{"position":[[53,3]]},"356":{"position":[[221,3],[437,2]]},"358":{"position":[[99,3],[319,3]]},"360":{"position":[[46,3],[270,3],[755,3],[972,3]]},"364":{"position":[[229,3]]},"366":{"position":[[219,3]]},"370":{"position":[[44,3]]},"374":{"position":[[167,3]]},"376":{"position":[[94,3]]},"378":{"position":[[40,3],[102,3],[390,3],[471,3]]},"382":{"position":[[180,3]]},"386":{"position":[[182,3]]},"388":{"position":[[193,3]]},"390":{"position":[[92,3]]},"392":{"position":[[42,3]]},"398":{"position":[[42,3]]}}}],["13).1lbw5lyxum.webp",{"_index":307,"t":{"109":{"position":[[3453,21]]}}}],["130dl",{"_index":1413,"t":{"430":{"position":[[85,5]]}}}],["13:34:49",{"_index":1154,"t":{"301":{"position":[[327,10]]}}}],["14",{"_index":402,"t":{"136":{"position":[[559,2]]},"305":{"position":[[86,3]]},"307":{"position":[[876,3]]},"309":{"position":[[74,3]]},"386":{"position":[[401,3]]}}}],["14:03:02",{"_index":1340,"t":{"386":{"position":[[212,10]]}}}],["14:36:26",{"_index":1307,"t":{"364":{"position":[[330,10]]}}}],["158",{"_index":1142,"t":{"301":{"position":[[82,4],[381,4]]}}}],["158800882",{"_index":1235,"t":{"319":{"position":[[301,12]]},"321":{"position":[[251,12]]}}}],["15:02:50",{"_index":1324,"t":{"376":{"position":[[281,10]]}}}],["15的子节点，然后进入9的子节点，对比了6",{"_index":31,"t":{"29":{"position":[[124,39]]}}}],["16",{"_index":1188,"t":{"309":{"position":[[372,4]]},"386":{"position":[[243,5]]}}}],["16.x",{"_index":834,"t":{"244":{"position":[[200,4],[253,6]]}}}],["1624538837259",{"_index":1287,"t":{"340":{"position":[[628,14],[695,14]]}}}],["16:07:11",{"_index":1204,"t":{"313":{"position":[[240,10]]}}}],["16:32:40",{"_index":1247,"t":{"323":{"position":[[290,10]]}}}],["17",{"_index":1355,"t":{"392":{"position":[[371,2]]}}}],["17002",{"_index":1201,"t":{"313":{"position":[[151,6]]}}}],["17:04:31",{"_index":1240,"t":{"319":{"position":[[405,10]]},"321":{"position":[[355,10]]}}}],["17:12:50",{"_index":1220,"t":{"317":{"position":[[244,9]]}}}],["17:56:38",{"_index":1192,"t":{"311":{"position":[[219,10]]}}}],["18",{"_index":1138,"t":{"299":{"position":[[106,5]]},"307":{"position":[[816,4]]},"319":{"position":[[212,3]]},"321":{"position":[[162,3]]},"360":{"position":[[685,4],[1387,4]]},"386":{"position":[[378,5]]}}}],["180",{"_index":1298,"t":{"356":{"position":[[292,4]]},"378":{"position":[[173,4],[542,4]]},"480":{"position":[[113,4],[118,9]]}}}],["181",{"_index":1133,"t":{"297":{"position":[[131,4]]}}}],["1812",{"_index":1216,"t":{"317":{"position":[[92,5]]}}}],["1845",{"_index":1199,"t":{"311":{"position":[[515,6]]}}}],["18:55:02",{"_index":1238,"t":{"319":{"position":[[368,10]]},"321":{"position":[[318,10]]}}}],["18:56:07",{"_index":1352,"t":{"390":{"position":[[281,10]]},"392":{"position":[[236,10]]},"398":{"position":[[231,10]]}}}],["18:56:21",{"_index":1353,"t":{"390":{"position":[[377,10]]},"392":{"position":[[330,10]]},"398":{"position":[[332,10]]}}}],["19665",{"_index":1362,"t":{"396":{"position":[[170,6]]}}}],["1;a[0",{"_index":544,"t":{"182":{"position":[[561,6]]}}}],["1;high",{"_index":554,"t":{"184":{"position":[[417,6]]}}}],["1;i",{"_index":587,"t":{"190":{"position":[[159,7]]},"196":{"position":[[317,7]]},"597":{"position":[[359,3]]}}}],["1;j",{"_index":214,"t":{"103":{"position":[[297,3]]},"184":{"position":[[543,3],[557,3]]}}}],["1;j>i;j",{"_index":588,"t":{"190":{"position":[[181,7]]}}}],["1]+1",{"_index":192,"t":{"101":{"position":[[1776,4]]}}}],["1].id",{"_index":2283,"t":{"628":{"position":[[1721,7],[1771,7],[2146,7],[2196,7]]}}}],["1][0,p−1",{"_index":57,"t":{"46":{"position":[[161,9]]}}}],["1][0,p−1]所以失败针对这些散列地址，依次计算这些地址查找失败的次数，累加除以p",{"_index":73,"t":{"48":{"position":[[82,45]]}}}],["1]中寻找最小的元素a[k",{"_index":626,"t":{"196":{"position":[[213,14]]}}}],["1]和l[k+1...n]，其中l[k]为pivot，使得左边表的值都小于pivot",{"_index":599,"t":{"192":{"position":[[76,80]]}}}],["1]，所以删除后节点的关键字个数不能小于（m/2",{"_index":19,"t":{"24":{"position":[[31,29]]}}}],["1^2,2^2",{"_index":62,"t":{"46":{"position":[[362,8]]}}}],["1n−1",{"_index":385,"t":{"132":{"position":[[122,14]]},"134":{"position":[[87,8]]},"136":{"position":[[210,29]]}}}],["1}(n",{"_index":595,"t":{"190":{"position":[[399,4]]}}}],["1},k_j^{d",{"_index":699,"t":{"203":{"position":[[405,9]]}}}],["1}.......q_0qr​,qr−1​.......q0",{"_index":710,"t":{"203":{"position":[[701,31]]}}}],["1~n",{"_index":233,"t":{"109":{"position":[[155,71]]}}}],["1~n，所以要缺少也只能是缺少右边屁股的叶子结点，如果一颗完全二叉树有度为1的节点，那么有且只有一个，如上上述的3",{"_index":238,"t":{"109":{"position":[[337,84]]}}}],["1→2",{"_index":396,"t":{"136":{"position":[[367,3]]}}}],["1→2→4",{"_index":399,"t":{"136":{"position":[[436,5],[445,5],[454,5],[463,5]]}}}],["1→2→4→7",{"_index":403,"t":{"136":{"position":[[562,7]]}}}],["1→5",{"_index":400,"t":{"136":{"position":[[481,3],[487,3]]}}}],["1→5→3",{"_index":397,"t":{"136":{"position":[[403,5],[411,5]]}}}],["1→6",{"_index":401,"t":{"136":{"position":[[515,3],[521,3],[527,3]]}}}],["1−(2n−1)≤x≤2n−1",{"_index":84,"t":{"54":{"position":[[162,16]]}}}],["1−2n≤x≤2n−1",{"_index":90,"t":{"56":{"position":[[212,11]]}}}],["1−2−n)≤x≤1−2−n",{"_index":77,"t":{"54":{"position":[[43,24]]}}}],["1∣e∣=∣v∣−1",{"_index":382,"t":{"130":{"position":[[109,10]]}}}],["1≤x≤1−2−n",{"_index":87,"t":{"56":{"position":[[126,17]]}}}],["1、非空二叉树的叶结点等于度为2的结点数加1，即n0",{"_index":275,"t":{"109":{"position":[[1458,27]]}}}],["1个字符串有关。我们看前部分字符串，发现共同前后缀是ab，长度为2，那么意味着前两个字母和后两个字母是相同的，这时候的k指针自然就是指向3也就是c这个位置，为啥呢？因为从k指针开始作为区分线，是不是前后相同？于是我们next[j]就填写为2。接下来再看，k指针和j指针的值相同，那么这时候我们要求解的是next[j]，我们肉眼观察共同前后缀是不是abc？长度为2，那么next[j+1]就是在next[j]的基础上加1",{"_index":188,"t":{"101":{"position":[[1347,231]]}}}],["1中找到适合l[i]的位置即可，因为前面已经是排好序的，找到合适的位置插入后，子序列长度变为1~i",{"_index":534,"t":{"182":{"position":[[102,108]]}}}],["1变为0",{"_index":24,"t":{"24":{"position":[[391,36]]}}}],["1和2",{"_index":414,"t":{"141":{"position":[[98,33]]},"198":{"position":[[1314,5]]}}}],["1开始的，如果是0",{"_index":271,"t":{"109":{"position":[[1245,34]]}}}],["1次递归调用，所以栈为o(n)n−1次递归调用，所以栈为o(n)，平均是o(log2n)o(log_{2}n)o(log2​n",{"_index":621,"t":{"192":{"position":[[1018,64]]}}}],["1躺排序，第i躺排序要进行n",{"_index":593,"t":{"190":{"position":[[339,14]]}}}],["1躺，一共移动3(n",{"_index":634,"t":{"196":{"position":[[479,10]]}}}],["1项是已经排序好的子序列，后面的in是待排序的，是可以很容易想到解决方法就是在1i",{"_index":533,"t":{"182":{"position":[[60,41]]}}}],["1（从右到左找到第一个1，前面的数取反即可）。如果是从x",{"_index":86,"t":{"56":{"position":[[0,88]]}}}],["1）事件vkv_kvk​的最早发生时间ve(k)ve(k)ve(k",{"_index":416,"t":{"143":{"position":[[13,34]]}}}],["1，m",{"_index":18,"t":{"22":{"position":[[27,3]]},"24":{"position":[[27,3]]}}}],["1，二叉树的非终端结点数为：n",{"_index":309,"t":{"109":{"position":[[3537,112]]}}}],["1，余数左移减去除数；异号商0",{"_index":118,"t":{"84":{"position":[[66,39]]}}}],["1，列2",{"_index":498,"t":{"170":{"position":[[665,10]]}}}],["1，则加上被乘数，为0则加0",{"_index":106,"t":{"76":{"position":[[50,20]]}}}],["1，此时模式串next数组第一位是1，那么只能从这里进行下一步匹配(如果到0，那么0",{"_index":170,"t":{"101":{"position":[[401,62]]}}}],["1，那么此时下一步指针会走向0，意味着没有匹配的前后缀了，则该处会填写为0",{"_index":199,"t":{"101":{"position":[[2508,38]]}}}],["1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的aof",{"_index":1394,"t":{"421":{"position":[[35,70]]}}}],["1；阶码：8；尾数：23",{"_index":128,"t":{"91":{"position":[[5,16]]}}}],["2",{"_index":12,"t":{"12":{"position":[[147,6]]},"37":{"position":[[90,5],[96,30]]},"41":{"position":[[37,4]]},"46":{"position":[[296,14]]},"54":{"position":[[71,1],[91,3]]},"56":{"position":[[158,3]]},"73":{"position":[[144,6]]},"95":{"position":[[294,2]]},"101":{"position":[[533,11]]},"109":{"position":[[2645,11],[3667,38]]},"126":{"position":[[90,11],[156,6]]},"136":{"position":[[313,1],[363,1],[582,2]]},"155":{"position":[[63,5]]},"170":{"position":[[637,5]]},"182":{"position":[[619,9]]},"184":{"position":[[472,2],[608,7]]},"186":{"position":[[770,11]]},"190":{"position":[[277,11]]},"192":{"position":[[157,4]]},"196":{"position":[[425,9]]},"198":{"position":[[105,7]]},"203":{"position":[[303,6]]},"205":{"position":[[588,4]]},"207":{"position":[[5,4]]},"297":{"position":[[223,1]]},"301":{"position":[[359,2]]},"305":{"position":[[319,3]]},"307":{"position":[[580,3],[606,4],[640,3],[894,4]]},"309":{"position":[[92,4]]},"311":{"position":[[482,2]]},"315":{"position":[[443,4],[629,2],[702,3]]},"344":{"position":[[91,1]]},"348":{"position":[[159,2]]},"352":{"position":[[87,2]]},"356":{"position":[[362,2]]},"360":{"position":[[297,2],[999,2]]},"364":{"position":[[274,2],[362,2]]},"366":{"position":[[349,2]]},"374":{"position":[[146,2]]},"376":{"position":[[313,2]]},"378":{"position":[[243,2],[612,2]]},"386":{"position":[[452,4],[476,2]]},"388":{"position":[[214,2]]},"414":{"position":[[227,1]]},"423":{"position":[[195,1]]},"488":{"position":[[159,1]]},"567":{"position":[[136,12]]},"597":{"position":[[1622,2]]},"622":{"position":[[115,2],[713,2]]},"640":{"position":[[27,1],[63,1],[123,1],[159,1]]}}}],["2(key1",{"_index":459,"t":{"168":{"position":[[153,8]]}}}],["2*log_{2}{(n+1)}h≤2∗log2​(n+1",{"_index":10,"t":{"10":{"position":[[242,30]]}}}],["2.1",{"_index":1897,"t":{"567":{"position":[[111,3]]}}}],["2.2",{"_index":1937,"t":{"567":{"position":[[1153,3]]}}}],["2.已知编号i求双亲：(i/2",{"_index":230,"t":{"109":{"position":[[73,22]]}}}],["2.构建dao,加上注解并extend",{"_index":1524,"t":{"501":{"position":[[137,20]]}}}],["2.班次固定白夜班，08:30~20:30",{"_index":1769,"t":{"538":{"position":[[39,30]]}}}],["2.若i为奇数则双亲为(i",{"_index":282,"t":{"109":{"position":[[1597,13]]}}}],["2.若i为奇数则双亲为\\frac{(i",{"_index":642,"t":{"198":{"position":[[531,19]]}}}],["20",{"_index":1150,"t":{"301":{"position":[[290,3]]},"307":{"position":[[233,3]]},"358":{"position":[[209,3]]},"360":{"position":[[157,3],[866,3]]}}}],["2019",{"_index":1232,"t":{"319":{"position":[[264,5],[356,5]]},"321":{"position":[[214,5],[306,5]]},"390":{"position":[[269,5],[365,5]]},"392":{"position":[[224,5],[318,5]]},"398":{"position":[[320,5]]}}}],["2020",{"_index":1335,"t":{"382":{"position":[[380,5]]}}}],["2021",{"_index":1128,"t":{"297":{"position":[[75,5]]},"301":{"position":[[315,5]]},"307":{"position":[[272,5],[295,5]]},"311":{"position":[[207,5]]},"313":{"position":[[228,5]]},"317":{"position":[[232,5]]},"319":{"position":[[393,5]]},"321":{"position":[[343,5]]},"323":{"position":[[278,5]]},"336":{"position":[[443,5],[489,5],[533,5]]},"338":{"position":[[328,5],[374,5],[418,5]]},"356":{"position":[[318,5]]},"364":{"position":[[318,5]]},"366":{"position":[[284,5]]},"374":{"position":[[274,5]]},"376":{"position":[[269,5]]},"378":{"position":[[199,5],[568,5]]},"386":{"position":[[200,5]]},"388":{"position":[[331,5]]},"392":{"position":[[362,5]]},"398":{"position":[[219,5],[364,5]]}}}],["2024",{"_index":2138,"t":{"597":{"position":[[5631,4]]}}}],["20:01:26",{"_index":1275,"t":{"336":{"position":[[455,10],[501,10]]},"338":{"position":[[340,10],[386,10]]}}}],["20:01:35",{"_index":1276,"t":{"336":{"position":[[545,10]]},"338":{"position":[[430,10]]}}}],["20:05:02",{"_index":1344,"t":{"388":{"position":[[343,9]]}}}],["20:30:00",{"_index":1775,"t":{"541":{"position":[[77,10]]},"555":{"position":[[2153,10],[2745,10],[2796,10],[2926,10],[2979,10]]}}}],["21",{"_index":1274,"t":{"336":{"position":[[452,2],[498,2],[542,2]]},"338":{"position":[[337,2],[383,2],[427,2]]},"356":{"position":[[327,2]]},"366":{"position":[[293,2]]},"374":{"position":[[283,2]]},"378":{"position":[[208,2],[577,2]]}}}],["2112112",{"_index":1365,"t":{"398":{"position":[[258,10]]}}}],["22",{"_index":1162,"t":{"303":{"position":[[209,3]]},"307":{"position":[[281,2]]},"334":{"position":[[252,2]]},"382":{"position":[[389,2]]}}}],["232−12^{32",{"_index":1478,"t":{"473":{"position":[[178,11]]}}}],["23945",{"_index":1260,"t":{"334":{"position":[[160,6]]}}}],["2399",{"_index":1121,"t":{"295":{"position":[[80,5]]}}}],["24",{"_index":1343,"t":{"388":{"position":[[340,2]]}}}],["2413",{"_index":1255,"t":{"334":{"position":[[65,5]]}}}],["24928",{"_index":1202,"t":{"313":{"position":[[176,6]]}}}],["25",{"_index":1130,"t":{"297":{"position":[[84,6]]}}}],["25067",{"_index":1214,"t":{"315":{"position":[[535,6]]}}}],["2520",{"_index":1147,"t":{"301":{"position":[[219,5]]}}}],["26",{"_index":1308,"t":{"364":{"position":[[437,2]]}}}],["27",{"_index":573,"t":{"186":{"position":[[635,2]]},"597":{"position":[[5639,2]]}}}],["275",{"_index":1323,"t":{"376":{"position":[[243,4]]}}}],["2897",{"_index":1325,"t":{"376":{"position":[[389,5]]}}}],["2;i",{"_index":538,"t":{"182":{"position":[[502,3]]},"184":{"position":[[381,3]]}}}],["2^2.........k^2",{"_index":63,"t":{"46":{"position":[[371,16]]}}}],["2^32",{"_index":1466,"t":{"462":{"position":[[83,4]]},"466":{"position":[[88,4]]},"470":{"position":[[142,4]]}}}],["2^64",{"_index":1499,"t":{"484":{"position":[[130,4]]}}}],["2^h",{"_index":229,"t":{"109":{"position":[[63,3]]}}}],["2^n",{"_index":83,"t":{"54":{"position":[[157,3]]},"56":{"position":[[193,3],[207,3]]}}}],["2^{n",{"_index":82,"t":{"54":{"position":[[137,6]]}}}],["2e",{"_index":317,"t":{"116":{"position":[[98,2]]}}}],["2n2^n2n，相当于x",{"_index":92,"t":{"60":{"position":[[0,75]]}}}],["2n−1)≤x≤2n−1",{"_index":81,"t":{"54":{"position":[[115,21]]}}}],["2n≤x≤2n−1",{"_index":89,"t":{"56":{"position":[[175,17]]}}}],["2x",{"_index":266,"t":{"109":{"position":[[1055,2],[1192,3]]}}}],["2},k_j^{d",{"_index":700,"t":{"203":{"position":[[415,9]]}}}],["2、二叉树第k层上最多有2k",{"_index":277,"t":{"109":{"position":[[1493,14]]}}}],["2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right",{"_index":1469,"t":{"464":{"position":[[0,125]]}}}],["2的，要求小数点后一位不全为0，也就是要为1",{"_index":126,"t":{"89":{"position":[[24,27]]}}}],["2路归并，基于分治思想，将n个元素分解成n/2",{"_index":687,"t":{"201":{"position":[[684,49]]}}}],["2）事件vkv_kvk​的最迟发生时间vl(k)vl(k)vl(k",{"_index":421,"t":{"143":{"position":[[240,34]]}}}],["2，o",{"_index":169,"t":{"101":{"position":[[388,12]]}}}],["2，此时需要父节点落下一个节点，与兄弟合并，则合并后的节点关键字数目为m",{"_index":23,"t":{"24":{"position":[[292,36]]}}}],["2，知道增量变成1",{"_index":559,"t":{"186":{"position":[[193,13]]}}}],["2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的aof文件中，这样做是保证原有的aof",{"_index":1395,"t":{"421":{"position":[[106,81]]}}}],["3",{"_index":66,"t":{"46":{"position":[[473,5]]},"73":{"position":[[197,7]]},"78":{"position":[[147,15]]},"109":{"position":[[2843,13]]},"136":{"position":[[319,1],[395,1]]},"155":{"position":[[155,10]]},"182":{"position":[[756,7]]},"184":{"position":[[671,5]]},"192":{"position":[[444,4],[916,11]]},"198":{"position":[[171,10]]},"201":{"position":[[276,6]]},"203":{"position":[[829,11]]},"207":{"position":[[10,6]]},"303":{"position":[[570,2]]},"311":{"position":[[386,4]]},"315":{"position":[[466,2]]},"358":{"position":[[577,2]]},"360":{"position":[[639,2],[1341,2]]},"366":{"position":[[489,2]]},"370":{"position":[[296,2]]},"390":{"position":[[234,2]]},"392":{"position":[[189,2]]},"398":{"position":[[184,2]]},"414":{"position":[[344,1]]},"488":{"position":[[216,1]]},"597":{"position":[[731,3],[1800,2],[3644,4],[3673,3]]},"640":{"position":[[29,1],[65,1],[161,1]]}}}],["3.2i",{"_index":284,"t":{"109":{"position":[[1621,4]]},"198":{"position":[[563,4]]}}}],["3.3.1",{"_index":2205,"t":{"622":{"position":[[66,5]]}}}],["3.3.2",{"_index":2218,"t":{"622":{"position":[[460,5]]}}}],["3.3.3",{"_index":2228,"t":{"622":{"position":[[1024,5]]}}}],["3.在impl中使用dao也可以快捷的使用save,delete等方法,只用过save,传入实体类即可,直接调用dao.save(class",{"_index":1540,"t":{"501":{"position":[[475,84]]}}}],["3.已知编号i求两个儿子：左孩子2i，右孩子2i+1",{"_index":231,"t":{"109":{"position":[[98,28]]}}}],["3.效率未达到95%需显示红色，功能直通率/外观直通率未到98",{"_index":1770,"t":{"538":{"position":[[70,37]]}}}],["30",{"_index":1351,"t":{"390":{"position":[[217,3]]},"392":{"position":[[172,3]]},"398":{"position":[[167,3]]},"534":{"position":[[949,5]]},"571":{"position":[[575,5]]}}}],["31",{"_index":1153,"t":{"301":{"position":[[324,2]]},"398":{"position":[[373,2]]}}}],["321dec89",{"_index":1282,"t":{"340":{"position":[[333,9]]}}}],["36",{"_index":1331,"t":{"382":{"position":[[158,3]]}}}],["38和27进行交换（因为27",{"_index":624,"t":{"196":{"position":[[159,19]]}}}],["3}......k_j^{0})(kjd−1​,kjd−2​,kjd−3​......kj0",{"_index":701,"t":{"203":{"position":[[425,50]]}}}],["3、高度为k的二叉树最多有2k",{"_index":278,"t":{"109":{"position":[[1514,15]]}}}],["3后，整体带上acc",{"_index":107,"t":{"76":{"position":[[71,25]]}}}],["3和4共n次，最后再执行一次3，但是不右移（也就是n+1次累加和n",{"_index":112,"t":{"78":{"position":[[163,42]]}}}],["3）活动aia_iai​的最早开始事件e(i)e(i)e(i",{"_index":426,"t":{"143":{"position":[[460,31]]}}}],["3，9，15",{"_index":28,"t":{"27":{"position":[[178,45]]}}}],["3，执行n−1n",{"_index":392,"t":{"136":{"position":[[198,11]]}}}],["3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新aof",{"_index":1396,"t":{"421":{"position":[[188,60]]}}}],["4",{"_index":70,"t":{"46":{"position":[[574,8]]},"80":{"position":[[82,14]]},"136":{"position":[[325,1],[365,1],[429,1]]},"155":{"position":[[187,8]]},"198":{"position":[[384,7]]},"203":{"position":[[947,4]]},"207":{"position":[[17,3]]},"305":{"position":[[128,2],[260,1]]},"307":{"position":[[184,2],[421,2],[741,4],[766,2],[960,2],[1113,3]]},"309":{"position":[[152,2],[280,4],[307,3]]},"311":{"position":[[408,2]]},"368":{"position":[[148,2]]},"382":{"position":[[72,2]]},"386":{"position":[[161,2],[353,2],[427,2]]},"414":{"position":[[387,1]]},"488":{"position":[[310,1]]},"597":{"position":[[2017,2]]},"640":{"position":[[67,1]]}}}],["4.2i+1",{"_index":286,"t":{"109":{"position":[[1647,6]]},"198":{"position":[[589,6]]}}}],["40",{"_index":1468,"t":{"462":{"position":[[109,13]]},"466":{"position":[[97,9]]},"470":{"position":[[164,15]]}}}],["4013",{"_index":1225,"t":{"319":{"position":[[124,4]]},"321":{"position":[[74,4]]}}}],["4294967295",{"_index":1467,"t":{"462":{"position":[[96,12]]},"470":{"position":[[151,12]]}}}],["433c",{"_index":1270,"t":{"336":{"position":[[247,4]]},"338":{"position":[[132,4]]}}}],["46",{"_index":1210,"t":{"315":{"position":[[223,3]]},"376":{"position":[[335,3]]}}}],["4736",{"_index":1284,"t":{"340":{"position":[[348,4]]}}}],["49",{"_index":572,"t":{"186":{"position":[[627,7],[742,2]]}}}],["49，这次变成了27",{"_index":578,"t":{"186":{"position":[[731,10]]}}}],["4ccc",{"_index":1348,"t":{"390":{"position":[[123,4]]},"392":{"position":[[80,4]]},"398":{"position":[[73,4]]}}}],["4、对于结点i(i>1",{"_index":279,"t":{"109":{"position":[[1536,16]]}}}],["4操作n次，最后一步恒置1，“末位恒置1",{"_index":119,"t":{"84":{"position":[[106,23]]}}}],["4的，要求小数点后两位不全为0",{"_index":127,"t":{"89":{"position":[[52,20]]}}}],["4）n",{"_index":686,"t":{"201":{"position":[[675,8]]}}}],["4）活动aia_iai​的最迟开始事件l(i)l(i)l(i",{"_index":428,"t":{"143":{"position":[[538,31]]}}}],["4：当追加结束后，redis就会用新aof文件来代替旧aof文件，之后再有新的写指令，就都会追加到新的aof",{"_index":1397,"t":{"421":{"position":[[249,57]]}}}],["5",{"_index":288,"t":{"109":{"position":[[1691,5]]},"136":{"position":[[331,1],[477,1],[479,1],[485,1],[513,1],[519,1],[525,1]]},"198":{"position":[[1261,5]]},"201":{"position":[[888,11]]},"303":{"position":[[347,2]]},"323":{"position":[[148,2]]},"356":{"position":[[273,2]]},"358":{"position":[[346,2]]},"364":{"position":[[145,1]]},"366":{"position":[[239,2]]},"368":{"position":[[127,2],[318,4],[343,2]]},"370":{"position":[[71,2]]},"376":{"position":[[224,2]]},"378":{"position":[[154,2],[523,2]]},"386":{"position":[[324,2]]},"414":{"position":[[447,1]]},"488":{"position":[[334,1]]},"597":{"position":[[2141,2],[4621,2]]},"634":{"position":[[617,2]]}}}],["5.0",{"_index":1500,"t":{"486":{"position":[[21,3]]}}}],["5.1.1",{"_index":2255,"t":{"628":{"position":[[0,5]]}}}],["5.1.2",{"_index":2293,"t":{"628":{"position":[[2501,5]]}}}],["507",{"_index":1209,"t":{"315":{"position":[[172,4],[556,4]]}}}],["508",{"_index":1314,"t":{"368":{"position":[[99,4]]}}}],["52045f5f",{"_index":1346,"t":{"390":{"position":[[108,9]]},"392":{"position":[[65,9]]},"398":{"position":[[58,9]]}}}],["520，211，438,888,007,111,985,666,996，233,168。每个位置都是09的数，我们说其基数r=10。每个数的范围在0~999",{"_index":697,"t":{"203":{"position":[[124,95]]}}}],["53",{"_index":639,"t":{"198":{"position":[[364,19]]}}}],["53下坠到原87",{"_index":638,"t":{"198":{"position":[[334,29]]}}}],["53＜87",{"_index":637,"t":{"198":{"position":[[299,34]]}}}],["579",{"_index":1136,"t":{"297":{"position":[[201,4]]}}}],["592",{"_index":1322,"t":{"376":{"position":[[174,4]]}}}],["5，将5复制到的哨兵中，因为子序列中只有一个8，所以mid、low、high都指向8，当拿8和哨兵比较后，发现哨兵更小，high指针左移，终止循环，也就是找到了合适的位置了，此时会将右子序列右移，其实也就是将8",{"_index":551,"t":{"184":{"position":[[105,174]]}}}],["5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof",{"_index":1398,"t":{"421":{"position":[[307,68]]}}}],["6",{"_index":394,"t":{"136":{"position":[[337,1],[511,1]]},"198":{"position":[[1441,11]]},"356":{"position":[[405,2]]},"360":{"position":[[108,2],[817,2]]},"364":{"position":[[102,2],[405,2]]},"376":{"position":[[357,2]]},"378":{"position":[[286,2],[655,2]]}}}],["6.3",{"_index":1647,"t":{"526":{"position":[[787,3]]}}}],["60",{"_index":1306,"t":{"364":{"position":[[293,3]]}}}],["6148",{"_index":1258,"t":{"334":{"position":[[128,5]]}}}],["6204",{"_index":1190,"t":{"311":{"position":[[156,5]]}}}],["6379",{"_index":1452,"t":{"452":{"position":[[63,4]]}}}],["6534",{"_index":1191,"t":{"311":{"position":[[180,5]]}}}],["65是一组的，此时i=3，j=1",{"_index":575,"t":{"186":{"position":[[641,27]]}}}],["666",{"_index":1206,"t":{"313":{"position":[[298,5]]}}}],["68",{"_index":1342,"t":{"388":{"position":[[171,3]]}}}],["7",{"_index":395,"t":{"136":{"position":[[343,1],[401,1],[409,1],[547,1]]},"311":{"position":[[433,2]]},"366":{"position":[[198,2]]}}}],["7.0.0.tar.gz",{"_index":1432,"t":{"446":{"position":[[102,13]]}}}],["7.0.0中的文件，有两个为redi",{"_index":1436,"t":{"446":{"position":[[196,19]]}}}],["7.0.0目录下，执行make",{"_index":1433,"t":{"446":{"position":[[124,15]]}}}],["70",{"_index":25,"t":{"24":{"position":[[428,17]]}}}],["727626236f47",{"_index":1227,"t":{"319":{"position":[[134,14]]},"321":{"position":[[84,14]]}}}],["73处不满足，同时左兄弟不够借，则82",{"_index":26,"t":{"24":{"position":[[446,27]]}}}],["76",{"_index":574,"t":{"186":{"position":[[638,2]]}}}],["76，依次类推，当i为7",{"_index":579,"t":{"186":{"position":[[745,24]]}}}],["8",{"_index":1127,"t":{"297":{"position":[[56,2]]},"303":{"position":[[101,2],[321,2]]},"307":{"position":[[123,2],[395,2],[856,2],[936,2]]},"309":{"position":[[54,2],[128,2]]},"319":{"position":[[94,2]]},"321":{"position":[[44,2]]},"323":{"position":[[169,2]]}}}],["8).969t9t3wv9.webp",{"_index":237,"t":{"109":{"position":[[316,20]]}}}],["81",{"_index":1266,"t":{"336":{"position":[[181,3]]}}}],["85",{"_index":1262,"t":{"334":{"position":[[207,2]]},"622":{"position":[[152,7]]}}}],["8dc4",{"_index":1271,"t":{"336":{"position":[[252,4]]},"338":{"position":[[137,4]]}}}],["8，发现8已经大于7",{"_index":32,"t":{"29":{"position":[[164,19]]}}}],["9",{"_index":30,"t":{"29":{"position":[[95,28]]},"356":{"position":[[200,2]]},"534":{"position":[[108,5]]},"597":{"position":[[4065,12]]}}}],["9).83a3yx8fu3.webp",{"_index":290,"t":{"109":{"position":[[1945,20]]}}}],["90",{"_index":1483,"t":{"480":{"position":[[130,3]]}}}],["9016",{"_index":1158,"t":{"301":{"position":[[462,4]]}}}],["90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r",{"_index":1484,"t":{"480":{"position":[[134,101]]}}}],["92",{"_index":21,"t":{"24":{"position":[[229,31]]}}}],["93dd",{"_index":1349,"t":{"390":{"position":[[128,4]]},"392":{"position":[[85,4]]},"398":{"position":[[78,4]]}}}],["a,b",{"_index":518,"t":{"175":{"position":[[68,22],[106,5],[115,12],[144,10]]}}}],["a,b,c",{"_index":467,"t":{"170":{"position":[[10,5]]}}}],["a,b,t",{"_index":1778,"t":{"543":{"position":[[146,6]]}}}],["a,c",{"_index":1303,"t":{"360":{"position":[[591,6],[1293,6]]}}}],["a,cours",{"_index":483,"t":{"170":{"position":[[375,8]]}}}],["a,int",{"_index":582,"t":{"190":{"position":[[41,6]]}}}],["a.all_count",{"_index":1692,"t":{"529":{"position":[[892,11]]}}}],["a.cno,b.cpno",{"_index":482,"t":{"170":{"position":[[350,12]]}}}],["a.cpno",{"_index":484,"t":{"170":{"position":[[392,6]]}}}],["a.end_tim",{"_index":1690,"t":{"529":{"position":[[840,10]]}}}],["a.id",{"_index":1685,"t":{"529":{"position":[[721,4]]}}}],["a.inductive_d",{"_index":1688,"t":{"529":{"position":[[776,16]]}}}],["a.line_no",{"_index":2156,"t":{"597":{"position":[[6586,9]]}}}],["a.process",{"_index":1693,"t":{"529":{"position":[[918,9]]}}}],["a.remark",{"_index":1697,"t":{"529":{"position":[[1018,8]]}}}],["a.rn",{"_index":1699,"t":{"529":{"position":[[1097,4]]}}}],["a.shop_ord",{"_index":1687,"t":{"529":{"position":[[748,12],[1065,12]]},"555":{"position":[[607,12]]},"597":{"position":[[6519,12]]}}}],["a.shop_order,split(b.planned_item_bo,2",{"_index":2152,"t":{"597":{"position":[[6393,39]]}}}],["a.sit",{"_index":2154,"t":{"597":{"position":[[6499,6],[6558,6]]}}}],["a.start_tim",{"_index":1689,"t":{"529":{"position":[[812,12]]}}}],["a.statu",{"_index":2157,"t":{"597":{"position":[[6638,8]]}}}],["a.sum_count",{"_index":1694,"t":{"529":{"position":[[940,11]]}}}],["a.time_rang",{"_index":1691,"t":{"529":{"position":[[864,12]]}}}],["a13f",{"_index":1347,"t":{"390":{"position":[[118,4]]},"392":{"position":[[75,4]]},"398":{"position":[[68,4]]}}}],["a[0",{"_index":541,"t":{"182":{"position":[[536,4],[607,5]]},"184":{"position":[[398,4],[487,5],[598,5]]},"186":{"position":[[467,4],[554,5]]},"198":{"position":[[997,4],[1254,4]]}}}],["a[0]<a[j];j",{"_index":570,"t":{"186":{"position":[[506,11]]}}}],["a[0]当哨兵作为辅助，故空间复杂度上为o(1)o(1)o(1",{"_index":547,"t":{"182":{"position":[[629,39]]}}}],["a[],int",{"_index":36,"t":{"34":{"position":[[113,7]]},"182":{"position":[[471,7]]},"184":{"position":[[337,7]]},"186":{"position":[[231,7]]},"190":{"position":[[106,7]]},"192":{"position":[[491,7],[748,7]]},"196":{"position":[[285,7]]},"198":{"position":[[865,7],[977,7],[1338,7]]},"201":{"position":[[349,7],[753,7]]}}}],["a[high",{"_index":556,"t":{"184":{"position":[[584,6]]},"192":{"position":[[615,8],[675,7]]}}}],["a[high]>=pivot",{"_index":611,"t":{"192":{"position":[[571,15]]}}}],["a[i",{"_index":542,"t":{"182":{"position":[[543,5],[764,27]]},"184":{"position":[[405,5]]},"186":{"position":[[445,3],[474,5]]},"190":{"position":[[203,5]]},"198":{"position":[[1184,5]]}}}],["a[i]<a[i+1",{"_index":657,"t":{"198":{"position":[[1104,12]]}}}],["a[i][j",{"_index":322,"t":{"121":{"position":[[214,10]]}}}],["a[i]，则从a[i.....n",{"_index":625,"t":{"196":{"position":[[192,20]]}}}],["a[j",{"_index":545,"t":{"182":{"position":[[570,5],[590,5]]},"184":{"position":[[565,3],[576,5]]},"186":{"position":[[537,5]]}}}],["a[j+1",{"_index":546,"t":{"182":{"position":[[581,6],[598,6]]}}}],["a[j+gap",{"_index":571,"t":{"186":{"position":[[526,8],[543,8]]}}}],["a[j]，其中i<j，理论上正常人工排序会将a[i]排在a[j",{"_index":550,"t":{"182":{"position":[[795,80]]}}}],["a[k",{"_index":653,"t":{"198":{"position":[[1004,5],[1177,4],[1247,4]]},"201":{"position":[[472,5],[561,4],[581,4],[624,6],[656,6]]}}}],["a[k]和a[i",{"_index":627,"t":{"196":{"position":[[228,11]]}}}],["a[low",{"_index":608,"t":{"192":{"position":[[526,7],[606,6],[685,7],[695,6]]}}}],["a[low]<=pivot",{"_index":612,"t":{"192":{"position":[[642,14]]}}}],["a_sb_",{"_index":98,"t":{"73":{"position":[[61,6]]}}}],["aba",{"_index":161,"t":{"99":{"position":[[268,24]]}}}],["accaccacc的计算公式为：tp+tntp+fn+fp+tn\\frac",{"_index":731,"t":{"219":{"position":[[0,37]]}}}],["accept",{"_index":935,"t":{"265":{"position":[[1735,17]]},"268":{"position":[[202,7],[695,9]]}}}],["acceptheaderlocaleresolv",{"_index":917,"t":{"265":{"position":[[725,26],[773,29]]}}}],["acceptheaderlocaleresolver来获取。acceptheaderlocaleresolv",{"_index":921,"t":{"265":{"position":[[993,100]]}}}],["access_log",{"_index":821,"t":{"242":{"position":[[739,10]]}}}],["acc和recallacc和recallacc和recall也是非常相似的两个指标，同时也有着区别，recallrecallrecall关注的是模型识别肿瘤正确能力，也就是正向识别能力，都是通过像素点来判断，但是recallrecallrecall关注的是正向的像素点。而accaccacc",{"_index":734,"t":{"221":{"position":[[177,164]]}}}],["acc设置00.0000，mq中为乘数，乘数后添加一个辅助位（辅助位就是mq",{"_index":110,"t":{"78":{"position":[[66,44]]}}}],["acc里面设置为00.0000（00",{"_index":105,"t":{"76":{"position":[[23,26]]}}}],["ack",{"_index":1513,"t":{"488":{"position":[[505,3]]}}}],["acknowledg",{"_index":1514,"t":{"488":{"position":[[509,12]]}}}],["ack的消息id，如果客户端没有ack，这个变量里面的消息id会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在redi",{"_index":1510,"t":{"488":{"position":[[348,107]]}}}],["action",{"_index":852,"t":{"244":{"position":[[766,56]]},"567":{"position":[[333,6]]}}}],["action@4.0.0",{"_index":844,"t":{"244":{"position":[[440,12]]}}}],["actions/checkout@v2",{"_index":832,"t":{"244":{"position":[[160,19]]}}}],["actions/setup",{"_index":835,"t":{"244":{"position":[[211,13]]}}}],["actions=\"lineresult",{"_index":1908,"t":{"567":{"position":[[365,21]]}}}],["add",{"_index":461,"t":{"168":{"position":[[192,3],[219,3]]},"237":{"position":[[41,3],[65,3]]},"239":{"position":[[214,3]]}}}],["addjudg",{"_index":2266,"t":{"628":{"position":[[631,8],[986,8]]}}}],["addr=h(key)addr",{"_index":53,"t":{"46":{"position":[[0,22]]}}}],["admin",{"_index":1249,"t":{"323":{"position":[[324,7]]},"330":{"position":[[41,8],[195,8]]},"374":{"position":[[242,8]]},"382":{"position":[[262,8]]},"388":{"position":[[236,8],[288,6]]},"390":{"position":[[169,8]]},"392":{"position":[[124,8]]},"398":{"position":[[119,8]]}}}],["ae4c",{"_index":1285,"t":{"340":{"position":[[353,4]]}}}],["ag",{"_index":1228,"t":{"319":{"position":[[205,6]]},"321":{"position":[[155,6]]},"330":{"position":[[246,6]]},"336":{"position":[[329,6]]},"338":{"position":[[214,6]]},"340":{"position":[[162,6],[455,6]]},"390":{"position":[[210,6]]},"392":{"position":[[165,6]]},"398":{"position":[[160,6]]}}}],["algraph",{"_index":342,"t":{"123":{"position":[[332,8],[341,20]]}}}],["all.get(0).getid",{"_index":2144,"t":{"597":{"position":[[5939,19]]}}}],["all.size()>1",{"_index":2143,"t":{"597":{"position":[[5911,15]]}}}],["all_count",{"_index":1667,"t":{"529":{"position":[[286,9],[299,10],[624,9],[907,10],[1428,10]]},"545":{"position":[[217,9]]},"555":{"position":[[200,10],[1136,10]]}}}],["allclass",{"_index":1326,"t":{"376":{"position":[[402,13]]}}}],["allconfig.get(i).getprocess",{"_index":1733,"t":{"532":{"position":[[297,31]]}}}],["allconfig.get(i).getsite()+\",\"+allconfig.get(i).getline()+\",\"+allconfig.get(i).getoper",{"_index":1731,"t":{"532":{"position":[[182,94]]}}}],["allconfig.s",{"_index":1730,"t":{"532":{"position":[[144,17]]}}}],["allcount",{"_index":1753,"t":{"534":{"position":[[600,9]]}}}],["alter",{"_index":460,"t":{"168":{"position":[[175,5],[332,5]]}}}],["alway",{"_index":1389,"t":{"416":{"position":[[0,28]]}}}],["ana^nan的元素an[i][j]a^n[i][j]an[i][j]表示的是由顶点i到j长度为n",{"_index":335,"t":{"121":{"position":[[758,66]]}}}],["analyz",{"_index":1168,"t":{"303":{"position":[[438,10]]},"307":{"position":[[649,10]]},"315":{"position":[[365,10]]},"358":{"position":[[441,10]]},"360":{"position":[[496,10],[1198,10]]},"368":{"position":[[229,10]]},"370":{"position":[[162,10]]}}}],["analyzetextcontentid",{"_index":1312,"t":{"366":{"position":[[441,23]]}}}],["answer",{"_index":1184,"t":{"307":{"position":[[831,9]]}}}],["answeritem",{"_index":1176,"t":{"305":{"position":[[95,14]]},"307":{"position":[[904,14]]},"309":{"position":[[103,14]]}}}],["anymatch(map",{"_index":1421,"t":{"441":{"position":[[95,13]]}}}],["aof",{"_index":1369,"t":{"401":{"position":[[134,16]]},"414":{"position":[[463,20]]},"419":{"position":[[0,6],[56,9]]},"421":{"position":[[0,28]]},"423":{"position":[[147,5]]}}}],["aof内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称aof重写)，从而起到aof",{"_index":1388,"t":{"414":{"position":[[389,57]]}}}],["aof包括了rdb头部+aof",{"_index":1408,"t":{"423":{"position":[[404,18]]}}}],["aof对服务器写的操作进行记录，当服务器重启的时候会重新执行这些命令来恢复数据，以reid",{"_index":1400,"t":{"423":{"position":[[55,64]]}}}],["aof文件，会将其这些命令先放入aof缓存中进行保存。这里的aof缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘io",{"_index":1386,"t":{"414":{"position":[[249,94]]}}}],["aof缓冲会根据aof缓冲区同步文件的三种写回策略将命令写入磁盘上的aof",{"_index":1387,"t":{"414":{"position":[[346,40]]}}}],["aof，命令为：appendonli",{"_index":1383,"t":{"414":{"position":[[125,32]]}}}],["aoi",{"_index":1838,"t":{"555":{"position":[[1398,7],[1510,7]]}}}],["aop的方法和暴力的接口记录，这里还没去研究到aop",{"_index":1621,"t":{"520":{"position":[[0,50]]}}}],["aov",{"_index":415,"t":{"141":{"position":[[185,89]]}}}],["aov网中选择一个没有前驱的节点(入度为0",{"_index":413,"t":{"141":{"position":[[57,22]]}}}],["api(valu",{"_index":1559,"t":{"508":{"position":[[133,12],[407,10]]}}}],["api/admin/dashboard/index",{"_index":1253,"t":{"334":{"position":[[0,31]]}}}],["api/admin/education/subject/delete/3",{"_index":1296,"t":{"354":{"position":[[0,42]]}}}],["api/admin/education/subject/edit",{"_index":1295,"t":{"352":{"position":[[0,38]]}}}],["api/admin/education/subject/list",{"_index":1291,"t":{"346":{"position":[[0,38]]}}}],["api/admin/education/subject/pag",{"_index":1293,"t":{"348":{"position":[[0,38]]}}}],["api/admin/education/subject/select/2",{"_index":1294,"t":{"350":{"position":[[0,42]]}}}],["api/admin/exam/paper/delete/9",{"_index":1304,"t":{"362":{"position":[[0,35]]}}}],["api/admin/exam/paper/edit",{"_index":1301,"t":{"360":{"position":[[0,31]]}}}],["api/admin/exam/paper/pag",{"_index":1297,"t":{"356":{"position":[[0,31]]}}}],["api/admin/exam/paper/select/9",{"_index":1300,"t":{"358":{"position":[[0,35]]}}}],["api/admin/exam/paper/taskexampag",{"_index":1305,"t":{"364":{"position":[[0,39]]}}}],["api/admin/exampaperanswer/pag",{"_index":1339,"t":{"386":{"position":[[0,36]]}}}],["api/admin/message/pag",{"_index":1330,"t":{"382":{"position":[[0,28]]}}}],["api/admin/message/send",{"_index":1337,"t":{"384":{"position":[[0,28]]}}}],["api/admin/question/delete/7",{"_index":1317,"t":{"372":{"position":[[0,33]]}}}],["api/admin/question/edit",{"_index":1316,"t":{"370":{"position":[[0,29]]}}}],["api/admin/question/pag",{"_index":1309,"t":{"366":{"position":[[0,29]]}}}],["api/admin/question/select/508",{"_index":1313,"t":{"368":{"position":[[0,35]]}}}],["api/admin/task/delete/1",{"_index":1329,"t":{"380":{"position":[[0,29]]}}}],["api/admin/task/edit",{"_index":1327,"t":{"378":{"position":[[0,25]]}}}],["api/admin/task/pag",{"_index":1318,"t":{"374":{"position":[[0,25]]}}}],["api/admin/task/select/22",{"_index":1321,"t":{"376":{"position":[[0,30]]}}}],["api/admin/upload/configandupload",{"_index":1358,"t":{"396":{"position":[[0,38]]}}}],["api/admin/user/changestatus/1",{"_index":1290,"t":{"344":{"position":[[0,35]]}}}],["api/admin/user/curr",{"_index":1345,"t":{"390":{"position":[[0,28]]}}}],["api/admin/user/delete/3",{"_index":1289,"t":{"342":{"position":[[0,29]]}}}],["api/admin/user/edit",{"_index":1278,"t":{"340":{"position":[[0,25]]}}}],["api/admin/user/event/page/list",{"_index":1341,"t":{"388":{"position":[[0,36]]}}}],["api/admin/user/page/list",{"_index":1265,"t":{"336":{"position":[[0,30]]}}}],["api/admin/user/select/1",{"_index":1277,"t":{"338":{"position":[[0,29]]}}}],["api/admin/user/selectbyusernam",{"_index":1357,"t":{"394":{"position":[[0,37]]}}}],["api/admin/user/upd",{"_index":1354,"t":{"392":{"position":[[0,27]]},"398":{"position":[[0,27]]}}}],["api/student/dashboard/index",{"_index":1119,"t":{"295":{"position":[[0,33]]}}}],["api/student/dashboard/task",{"_index":1126,"t":{"297":{"position":[[0,32]]}}}],["api/student/education/subject/list",{"_index":1137,"t":{"299":{"position":[[0,40]]}}}],["api/student/exam/paper/pagelist",{"_index":1139,"t":{"301":{"position":[[0,37]]}}}],["api/student/exam/paper/select/9",{"_index":1159,"t":{"303":{"position":[[0,37]]}}}],["api/student/exampaper/answer/answersubmit",{"_index":1173,"t":{"305":{"position":[[0,47]]}}}],["api/student/exampaper/answer/edit",{"_index":1187,"t":{"309":{"position":[[0,39]]}}}],["api/student/exampaper/answer/pagelist",{"_index":1189,"t":{"311":{"position":[[0,43]]}}}],["api/student/exampaper/answer/read/4",{"_index":1179,"t":{"307":{"position":[[0,41]]}}}],["api/student/question/answer/pag",{"_index":1200,"t":{"313":{"position":[[0,38]]}}}],["api/student/question/answer/select/25067",{"_index":1207,"t":{"315":{"position":[[0,46]]}}}],["api/student/user/curr",{"_index":1221,"t":{"319":{"position":[[0,30]]}}}],["api/student/user/log",{"_index":1215,"t":{"317":{"position":[[0,26]]}}}],["api/student/user/message/pag",{"_index":1242,"t":{"323":{"position":[[0,35]]}}}],["api/student/user/message/read/14",{"_index":1250,"t":{"325":{"position":[[0,38]]}}}],["api/student/user/message/unreadcount",{"_index":1251,"t":{"327":{"position":[[0,42]]}}}],["api/student/user/regist",{"_index":1114,"t":{"291":{"position":[[0,31]]}}}],["api/student/user/upd",{"_index":1241,"t":{"321":{"position":[[0,29]]}}}],["api/user/login",{"_index":1111,"t":{"289":{"position":[[0,20]]},"330":{"position":[[0,20]]}}}],["api/user/logout",{"_index":1118,"t":{"293":{"position":[[0,21]]},"332":{"position":[[0,21]]}}}],["apioperation(valu",{"_index":1570,"t":{"508":{"position":[[520,19],[770,19]]}}}],["api目录下，构建新的j",{"_index":1955,"t":{"575":{"position":[[0,23]]}}}],["app",{"_index":1038,"t":{"274":{"position":[[14,7]]}}}],["appendfsync为自己要的时间，一般就是everysec",{"_index":1392,"t":{"419":{"position":[[7,33]]}}}],["applic",{"_index":1874,"t":{"560":{"position":[[113,16]]}}}],["application/octet",{"_index":810,"t":{"242":{"position":[[551,17]]}}}],["apt",{"_index":841,"t":{"244":{"position":[[297,3],[320,3]]}}}],["arcnod",{"_index":337,"t":{"123":{"position":[[105,8],[152,7],[179,9],[228,7]]}}}],["area",{"_index":2208,"t":{"622":{"position":[[146,5],[741,5]]}}}],["arg",{"_index":992,"t":{"270":{"position":[[510,4],[582,5],[614,5],[701,5],[801,5]]}}}],["arraylist",{"_index":1546,"t":{"503":{"position":[[197,28]]}}}],["arraylist<>(arrays.aslist(split",{"_index":2107,"t":{"597":{"position":[[4192,34]]}}}],["arraylist<str",{"_index":2106,"t":{"597":{"position":[[4163,17]]}}}],["arrays.aslist(split",{"_index":2105,"t":{"597":{"position":[[4141,21]]}}}],["asc",{"_index":1680,"t":{"529":{"position":[[634,4]]}}}],["asl为：1∗1+2∗2+3∗4+4∗411\\frac{1*1+2*2+3*4+4*4}{11}111∗1+2∗2+3∗4+4∗4",{"_index":49,"t":{"37":{"position":[[21,68]]}}}],["asl为：3∗4+4∗812\\frac{3*4+4*8}{12}123∗4+4∗8​这里的12",{"_index":50,"t":{"37":{"position":[[167,60]]}}}],["async",{"_index":1914,"t":{"567":{"position":[[578,5]]},"579":{"position":[[488,5]]},"628":{"position":[[121,5]]}}}],["as后要接上select",{"_index":1777,"t":{"543":{"position":[[27,20]]}}}],["auto",{"_index":783,"t":{"242":{"position":[[110,5]]}}}],["autowir",{"_index":984,"t":{"270":{"position":[[158,10]]},"508":{"position":[[476,10]]}}}],["avg",{"_index":493,"t":{"170":{"position":[[575,6]]}}}],["await",{"_index":1922,"t":{"567":{"position":[[765,5]]},"579":{"position":[[675,5]]},"628":{"position":[[534,5]]}}}],["azm",{"_index":1592,"t":{"516":{"position":[[122,4]]}}}],["a|b|a,b",{"_index":519,"t":{"175":{"position":[[91,14]]}}}],["a在b前面，则图中不存在b到a",{"_index":412,"t":{"141":{"position":[[30,20]]}}}],["a字段，并且select中包含的是a，b，c，d字段，除了a字段，b和c都要加入到group",{"_index":1779,"t":{"545":{"position":[[9,51]]}}}],["a是从0开始存储还是1",{"_index":645,"t":{"198":{"position":[[705,36]]}}}],["a是关系r的主属性，a不能为nul",{"_index":443,"t":{"165":{"position":[[0,28]]}}}],["a，若a在产品主数据配置中的工艺类型是锡膏(红胶)，安装点为gd，则其刮刀编码要校验为s(p",{"_index":1410,"t":{"428":{"position":[[0,59]]}}}],["b",{"_index":16,"t":{"20":{"position":[[0,7]]},"136":{"position":[[175,2]]},"170":{"position":[[384,1]]},"190":{"position":[[48,4],[71,2],[74,1]]},"201":{"position":[[127,14],[287,2]]},"239":{"position":[[162,1]]},"529":{"position":[[708,1],[1595,1]]},"543":{"position":[[128,3]]},"597":{"position":[[4837,4],[5009,4],[6494,1]]}}}],["b,b",{"_index":523,"t":{"175":{"position":[[176,4]]}}}],["b.all_count",{"_index":1715,"t":{"529":{"position":[[1413,11],[1439,12]]}}}],["b.cno",{"_index":485,"t":{"170":{"position":[[401,5]]}}}],["b.createdd",{"_index":1789,"t":{"547":{"position":[[101,13]]}}}],["b.end_tim",{"_index":1788,"t":{"547":{"position":[[81,10]]}}}],["b.id",{"_index":1700,"t":{"529":{"position":[[1115,4]]},"536":{"position":[[94,4]]}}}],["b.inductive_d",{"_index":1707,"t":{"529":{"position":[[1235,16]]}}}],["b.item",{"_index":1703,"t":{"529":{"position":[[1171,6],[1627,6]]}}}],["b.line",{"_index":1701,"t":{"529":{"position":[[1127,6]]}}}],["b.process",{"_index":1709,"t":{"529":{"position":[[1299,9],[1647,9]]}}}],["b.qty_to_build",{"_index":1706,"t":{"529":{"position":[[1219,15]]}}}],["b.remark",{"_index":1721,"t":{"529":{"position":[[1571,8]]}}}],["b.shop_ord",{"_index":1702,"t":{"529":{"position":[[1143,12]]},"597":{"position":[[6534,13]]}}}],["b.site",{"_index":2155,"t":{"597":{"position":[[6508,6]]}}}],["b.start_tim",{"_index":1787,"t":{"547":{"position":[[67,13]]}}}],["b.sum_count",{"_index":1710,"t":{"529":{"position":[[1321,11]]}}}],["b.time_rang",{"_index":1708,"t":{"529":{"position":[[1271,12]]}}}],["b874",{"_index":1226,"t":{"319":{"position":[[129,4]]},"321":{"position":[[79,4]]}}}],["b[i",{"_index":682,"t":{"201":{"position":[[568,7],[633,7]]}}}],["b[j",{"_index":683,"t":{"201":{"position":[[588,7],[665,7]]}}}],["b[k",{"_index":675,"t":{"201":{"position":[[465,4]]}}}],["b[p1]和b[p2]，较小者放入a",{"_index":667,"t":{"201":{"position":[[166,28]]}}}],["backend",{"_index":857,"t":{"246":{"position":[[45,7]]}}}],["badrecordcontroller.shoporder.nodata",{"_index":1009,"t":{"270":{"position":[[1280,45]]}}}],["barcod",{"_index":1589,"t":{"516":{"position":[[94,9]]},"571":{"position":[[296,8]]}}}],["bar{s_s}+\\bar{a_{s}}\\bar{b_{s}}s_sv=as​bs​ss​ˉ​+as​ˉ​bs​ˉ​ss",{"_index":99,"t":{"73":{"position":[[68,62]]}}}],["base",{"_index":1965,"t":{"577":{"position":[[55,46]]},"634":{"position":[[0,39]]}}}],["base.j",{"_index":1082,"t":{"285":{"position":[[7,12],[55,7]]}}}],["basefunctionservice.getsqlresult(sql.tostr",{"_index":1547,"t":{"503":{"position":[[238,67]]}}}],["basefunctionservice.getsqlresult(sql_s801.tostr",{"_index":2039,"t":{"597":{"position":[[916,54]]}}}],["basefunctionservice.getsqlresultthrow",{"_index":2151,"t":{"597":{"position":[[6345,39]]}}}],["basefunctionservice.getupdate(updatesql",{"_index":2147,"t":{"597":{"position":[[6020,40]]}}}],["baseurl",{"_index":763,"t":{"239":{"position":[[84,8]]}}}],["batch",{"_index":1047,"t":{"276":{"position":[[60,13]]},"622":{"position":[[1554,5],[1771,6]]}}}],["batch:batch",{"_index":2248,"t":{"622":{"position":[[1833,11]]}}}],["batchpreparedstatementsett",{"_index":1596,"t":{"516":{"position":[[212,28],[250,30]]}}}],["bean",{"_index":882,"t":{"263":{"position":[[63,5],[223,5]]},"265":{"position":[[214,5]]},"268":{"position":[[1377,5]]}}}],["begin{align",{"_index":280,"t":{"109":{"position":[[1553,17]]}}}],["between",{"_index":473,"t":{"170":{"position":[[110,7]]},"555":{"position":[[2722,7],[2903,7]]}}}],["bf",{"_index":344,"t":{"126":{"position":[[102,53]]}}}],["bfs(g,i",{"_index":354,"t":{"126":{"position":[[495,9]]}}}],["bfs(graph",{"_index":355,"t":{"126":{"position":[[514,9]]}}}],["bfstraverse(graph",{"_index":346,"t":{"126":{"position":[[369,17]]}}}],["bgsave：redis在后台异步进行快照，不阻塞快照同时还可以响应客户端的请求，触发方式会fork",{"_index":1381,"t":{"411":{"position":[[90,70]]}}}],["bin/bash",{"_index":868,"t":{"256":{"position":[[183,9]]}}}],["binary_search(int",{"_index":35,"t":{"34":{"position":[[95,17]]}}}],["bind",{"_index":1443,"t":{"448":{"position":[[71,6],[90,12]]}}}],["birthday",{"_index":1231,"t":{"319":{"position":[[252,11]]},"321":{"position":[[202,11]]},"330":{"position":[[272,11]]},"336":{"position":[[381,11]]},"338":{"position":[[266,11]]},"340":{"position":[[194,11],[491,11]]},"390":{"position":[[257,11]]},"392":{"position":[[212,11]]},"398":{"position":[[207,11]]}}}],["body_bytes_s",{"_index":817,"t":{"242":{"position":[[658,16]]}}}],["bool",{"_index":251,"t":{"109":{"position":[[756,4]]},"126":{"position":[[340,4]]},"128":{"position":[[107,4]]},"190":{"position":[[120,4]]}}}],["boolean",{"_index":1651,"t":{"526":{"position":[[919,7]]},"634":{"position":[[476,7]]}}}],["branch",{"_index":826,"t":{"244":{"position":[[89,9]]}}}],["branch设置为gh",{"_index":777,"t":{"239":{"position":[[355,12]]}}}],["break",{"_index":2029,"t":{"597":{"position":[[686,6],[1081,6],[1293,6],[1608,6],[1788,6],[2005,6],[2129,6],[2234,6],[2312,6],[2365,6],[2381,6],[3029,6]]},"628":{"position":[[1004,6]]}}}],["bs",{"_index":1597,"t":{"516":{"position":[[241,2],[929,4]]}}}],["bubblesort(int",{"_index":584,"t":{"190":{"position":[[91,14]]}}}],["build",{"_index":766,"t":{"239":{"position":[[142,5],[184,5],[204,5]]},"244":{"position":[[352,5],[386,5],[577,6],[734,7],[742,23]]}}}],["buildmaxheap(a,len",{"_index":660,"t":{"198":{"position":[[1352,20]]}}}],["buildmaxheap(int",{"_index":647,"t":{"198":{"position":[[848,16]]}}}],["build后的代码上传到gh",{"_index":775,"t":{"239":{"position":[[295,23]]}}}],["bur",{"_index":1845,"t":{"555":{"position":[[1651,7],[1792,7]]}}}],["by后可以加hav",{"_index":1781,"t":{"545":{"position":[[97,18]]}}}],["b|}iou=∣a+b∣2∣a∩b",{"_index":728,"t":{"215":{"position":[[66,19]]}}}],["b|}{a",{"_index":722,"t":{"213":{"position":[[48,5]]}}}],["b|}{|a",{"_index":727,"t":{"215":{"position":[[57,6]]}}}],["b}iou=a∪b∣a∩b",{"_index":724,"t":{"213":{"position":[[59,164]]}}}],["b树的一个地方，b",{"_index":29,"t":{"29":{"position":[[0,94]]}}}],["c",{"_index":520,"t":{"175":{"position":[[112,2],[164,2]]},"360":{"position":[[573,3],[1275,3]]}}}],["c07e653d390a",{"_index":1272,"t":{"336":{"position":[[257,14]]},"338":{"position":[[142,14]]}}}],["c32f",{"_index":1269,"t":{"336":{"position":[[242,4]]},"338":{"position":[[127,4]]}}}],["cachedur",{"_index":899,"t":{"263":{"position":[[764,13],[814,14]]}}}],["callback:funct",{"_index":1095,"t":{"285":{"position":[[289,20]]}}}],["cap",{"_index":721,"t":{"213":{"position":[[43,4]]},"215":{"position":[[52,4]]}}}],["cascade|restrict",{"_index":463,"t":{"168":{"position":[[234,19]]}}}],["cascade就是删除引用该列的其他对象，例如视图）（restrict",{"_index":464,"t":{"168":{"position":[[254,55]]}}}],["case",{"_index":1772,"t":{"541":{"position":[[29,4]]},"555":{"position":[[2107,4]]},"597":{"position":[[1342,4],[1617,4],[1795,4],[2012,4],[2136,4]]}}}],["cat",{"_index":872,"t":{"256":{"position":[[248,3]]}}}],["catch",{"_index":999,"t":{"270":{"position":[[843,5]]},"506":{"position":[[39,22],[223,6]]},"520":{"position":[[67,10]]},"526":{"position":[[709,7],[717,11],[1066,5]]},"597":{"position":[[7168,5]]}}}],["caus",{"_index":1625,"t":{"520":{"position":[[121,5],[164,6],[211,5]]},"555":{"position":[[332,6],[1202,5]]}}}],["cause.getcaus",{"_index":1628,"t":{"520":{"position":[[219,17]]}}}],["cause.getmessag",{"_index":1627,"t":{"520":{"position":[[191,19]]}}}],["cd",{"_index":870,"t":{"256":{"position":[[222,2]]},"450":{"position":[[0,2]]}}}],["cf",{"_index":96,"t":{"71":{"position":[[57,25]]}}}],["cf和最高位数位的进位c1",{"_index":104,"t":{"73":{"position":[[205,51]]}}}],["ch[0",{"_index":174,"t":{"101":{"position":[[621,4]]}}}],["ch[0...k",{"_index":164,"t":{"99":{"position":[[400,8]]}}}],["ch[0...k−1]=ch[j−k...j−1",{"_index":163,"t":{"99":{"position":[[374,25],[428,25]]}}}],["ch[0∼k−1]=ch[j−k∼j−1",{"_index":173,"t":{"101":{"position":[[599,21],[655,21]]}}}],["ch[j",{"_index":165,"t":{"99":{"position":[[414,4]]},"101":{"position":[[638,4]]}}}],["char",{"_index":328,"t":{"121":{"position":[[620,4]]},"123":{"position":[[217,4]]}}}],["charact",{"_index":1515,"t":{"488":{"position":[[522,46]]}}}],["check",{"_index":509,"t":{"172":{"position":[[114,5]]}}}],["check_id",{"_index":2199,"t":{"620":{"position":[[77,12]]}}}],["checkout",{"_index":767,"t":{"239":{"position":[[152,8]]}}}],["checkout到dev分支，merge分支chenle_xxxx到dev",{"_index":2178,"t":{"603":{"position":[[83,38]]}}}],["checkreport",{"_index":2011,"t":{"597":{"position":[[98,11],[110,11],[128,14]]}}}],["checkreport.getlinebodi",{"_index":2127,"t":{"597":{"position":[[5073,26],[5314,26],[6603,25]]}}}],["checkreport.getordercod",{"_index":2128,"t":{"597":{"position":[[5100,27],[5341,27]]}}}],["checkreport.getproductcod",{"_index":2165,"t":{"597":{"position":[[6937,33]]}}}],["checkreport.setabsurface(\"a",{"_index":2066,"t":{"597":{"position":[[2203,30]]}}}],["checkreport.setabsurface(\"b",{"_index":2068,"t":{"597":{"position":[[2281,30]]}}}],["checkreport.setabsurface(facetyp",{"_index":2069,"t":{"597":{"position":[[2327,35]]}}}],["checkreport.setabsurface(split[length",{"_index":2094,"t":{"597":{"position":[[3606,37]]}}}],["checkreport.setbomversion(split[3",{"_index":2049,"t":{"597":{"position":[[1500,36]]}}}],["checkreport.setcheckcount(split[3",{"_index":2091,"t":{"597":{"position":[[3465,36]]}}}],["checkreport.setcheckcount(split[7",{"_index":2061,"t":{"597":{"position":[[1968,36]]}}}],["checkreport.setcheckperson(split[1",{"_index":2052,"t":{"597":{"position":[[1625,37]]}}}],["checkreport.setcheckperson(split[6",{"_index":2118,"t":{"597":{"position":[[4626,37]]}}}],["checkreport.setchecktime(list.get(0",{"_index":2109,"t":{"597":{"position":[[4292,38]]}}}],["checkreport.setchecktime(split[3",{"_index":2053,"t":{"597":{"position":[[1663,35]]}}}],["checkreport.setcompany(split[1",{"_index":2089,"t":{"597":{"position":[[3395,33]]}}}],["checkreport.setfileid(fileid",{"_index":2072,"t":{"597":{"position":[[2419,30],[4697,30]]}}}],["checkreport.setlinebody(list.get(1",{"_index":2110,"t":{"597":{"position":[[4331,37]]}}}],["checkreport.setlinebody(split[1",{"_index":2062,"t":{"597":{"position":[[2020,34]]}}}],["checkreport.setmodelname(modelnam",{"_index":2023,"t":{"597":{"position":[[442,36],[3569,36]]}}}],["checkreport.setmodelname(split[3",{"_index":2059,"t":{"597":{"position":[[1893,35]]}}}],["checkreport.setnocheckcount(split[5",{"_index":2060,"t":{"597":{"position":[[1929,38]]}}}],["checkreport.setnocheckcount(split[split.length",{"_index":2103,"t":{"597":{"position":[[3961,46]]}}}],["checkreport.setnopasscount(split[6",{"_index":2056,"t":{"597":{"position":[[1750,37]]}}}],["checkreport.setnopasscount(split[split.length",{"_index":2099,"t":{"597":{"position":[[3795,45]]}}}],["checkreport.setordercode(shopord",{"_index":2102,"t":{"597":{"position":[[3924,36]]}}}],["checkreport.setordercode(split[3",{"_index":2063,"t":{"597":{"position":[[2055,35]]}}}],["checkreport.setpasscount(split[5",{"_index":2050,"t":{"597":{"position":[[1537,35]]}}}],["checkreport.setpasscount(split[length",{"_index":2096,"t":{"597":{"position":[[3677,37]]}}}],["checkreport.setpassrate(list.get(2",{"_index":2111,"t":{"597":{"position":[[4369,37]]}}}],["checkreport.setpassrate(split[7",{"_index":2051,"t":{"597":{"position":[[1573,34]]}}}],["checkreport.setplanlogid(planloguuid",{"_index":2135,"t":{"597":{"position":[[5461,38]]}}}],["checkreport.setprocesstime(split[1",{"_index":2101,"t":{"597":{"position":[[3886,37]]}}}],["checkreport.setproducetime(split[3",{"_index":2116,"t":{"597":{"position":[[4552,37]]}}}],["checkreport.setproductcode(productcod",{"_index":2080,"t":{"597":{"position":[[2759,40]]}}}],["checkreport.setproductcode(split[5",{"_index":2064,"t":{"597":{"position":[[2091,37]]}}}],["checkreport.setresult(split[1",{"_index":2048,"t":{"597":{"position":[[1467,32],[3076,32]]}}}],["checkreport.setscantime(split[1",{"_index":2098,"t":{"597":{"position":[[3760,34]]}}}],["checkreport.setsite(sit",{"_index":2071,"t":{"597":{"position":[[2392,26],[4670,26]]}}}],["checkreport.settesttime(split[1",{"_index":2115,"t":{"597":{"position":[[4517,34]]}}}],["checkreport.settesttime(split[4",{"_index":2055,"t":{"597":{"position":[[1715,34]]}}}],["checkreport.settesttype(split[3",{"_index":2057,"t":{"597":{"position":[[1806,34],[3320,34]]}}}],["checkreport.settesttype(testtyp",{"_index":2058,"t":{"597":{"position":[[1858,34]]}}}],["checkreport.setworkclass(split[2",{"_index":2090,"t":{"597":{"position":[[3429,35]]}}}],["checkreportdao.deletebyid(id",{"_index":2148,"t":{"597":{"position":[[6073,30]]}}}],["checkreportdao.findallbysiteandplanlogidorderbycreateddate(sit",{"_index":2142,"t":{"597":{"position":[[5829,64]]}}}],["checkreportdao.save(checkreport",{"_index":2167,"t":{"597":{"position":[[7105,33]]}}}],["checkresult",{"_index":1951,"t":{"571":{"position":[[499,12]]},"634":{"position":[[484,11]]}}}],["checkstatu",{"_index":1950,"t":{"571":{"position":[[443,12]]}}}],["chenl",{"_index":2006,"t":{"597":{"position":[[6,6],[171,6]]}}}],["chenle_xxxx进行commit",{"_index":2177,"t":{"603":{"position":[[57,25]]}}}],["child",{"_index":299,"t":{"109":{"position":[[2735,7],[2802,5]]}}}],["class",{"_index":937,"t":{"268":{"position":[[40,5]]},"270":{"position":[[66,5]]},"319":{"position":[[455,10]]},"321":{"position":[[405,10]]},"508":{"position":[[324,5],[330,5],[447,5]]},"534":{"position":[[48,5]]},"567":{"position":[[1227,5]]},"571":{"position":[[183,5]]}}}],["cleanbarlogpagedto",{"_index":1947,"t":{"571":{"position":[[189,18]]}}}],["cleanbarlogvo",{"_index":1939,"t":{"567":{"position":[[1233,13]]}}}],["cleancount",{"_index":1949,"t":{"571":{"position":[[388,11]]}}}],["cleanpeopl",{"_index":1943,"t":{"567":{"position":[[1320,12]]},"571":{"position":[[471,12]]}}}],["cleanresult",{"_index":1942,"t":{"567":{"position":[[1287,12]]},"571":{"position":[[415,12]]}}}],["cleantim",{"_index":1948,"t":{"571":{"position":[[362,10]]}}}],["clearabl",{"_index":1971,"t":{"579":{"position":[[199,9]]}}}],["clearoldrelation(planloguuid",{"_index":2137,"t":{"597":{"position":[[5590,30]]}}}],["cli",{"_index":1449,"t":{"450":{"position":[[56,3],[74,3]]},"452":{"position":[[12,3],[56,3]]}}}],["client",{"_index":839,"t":{"244":{"position":[[280,6]]},"414":{"position":[[194,32]]}}}],["cli和redi",{"_index":1437,"t":{"446":{"position":[[216,9]]}}}],["closebtn",{"_index":2207,"t":{"622":{"position":[[133,9]]}}}],["closebtn:0",{"_index":2226,"t":{"622":{"position":[[729,11]]}}}],["cn",{"_index":1021,"t":{"272":{"position":[[206,3],[258,3]]},"280":{"position":[[183,3]]}}}],["cn,zh;q=0.9,en;q=0.8",{"_index":960,"t":{"268":{"position":[[718,20]]}}}],["cnblogs.com",{"_index":157,"t":{"97":{"position":[[205,13]]}}}],["code",{"_index":988,"t":{"270":{"position":[[346,6],[372,4],[429,5],[496,4],[567,5],[686,5]]},"291":{"position":[[127,7]]},"293":{"position":[[37,7]]},"299":{"position":[[56,7]]},"301":{"position":[[147,7]]},"303":{"position":[[53,7]]},"305":{"position":[[279,7]]},"307":{"position":[[57,7]]},"309":{"position":[[332,7]]},"311":{"position":[[105,7]]},"313":{"position":[[100,7]]},"315":{"position":[[108,7]]},"317":{"position":[[42,7]]},"319":{"position":[[46,7]]},"321":{"position":[[462,7]]},"323":{"position":[[97,7]]},"325":{"position":[[54,7]]},"327":{"position":[[58,7]]},"330":{"position":[[111,7]]},"332":{"position":[[37,7]]},"336":{"position":[[130,7]]},"338":{"position":[[45,7]]},"340":{"position":[[268,7]]},"342":{"position":[[45,7]]},"344":{"position":[[51,7]]},"346":{"position":[[54,7]]},"348":{"position":[[108,7]]},"350":{"position":[[58,7]]},"352":{"position":[[131,7]]},"354":{"position":[[58,7]]},"356":{"position":[[149,7]]},"358":{"position":[[51,7]]},"360":{"position":[[707,7]]},"362":{"position":[[51,7]]},"364":{"position":[[157,7]]},"366":{"position":[[147,7]]},"368":{"position":[[51,7]]},"370":{"position":[[332,7]]},"372":{"position":[[49,7]]},"374":{"position":[[95,7]]},"376":{"position":[[46,7]]},"378":{"position":[[342,7]]},"380":{"position":[[45,7]]},"382":{"position":[[107,7]]},"384":{"position":[[129,7]]},"386":{"position":[[110,7]]},"388":{"position":[[120,7]]},"390":{"position":[[44,7]]},"392":{"position":[[467,7]]},"394":{"position":[[66,7]]},"398":{"position":[[469,7]]},"526":{"position":[[695,4]]}}}],["collect",{"_index":853,"t":{"246":{"position":[[4,7]]}}}],["collectionutil.isempty(result",{"_index":2158,"t":{"597":{"position":[[6660,34]]}}}],["commit",{"_index":756,"t":{"237":{"position":[[75,6]]},"239":{"position":[[224,6]]}}}],["complet",{"_index":1178,"t":{"305":{"position":[[201,12]]}}}],["compon",{"_index":979,"t":{"270":{"position":[[48,10]]}}}],["conditionalonmissingbean",{"_index":909,"t":{"265":{"position":[[220,26]]}}}],["configurationproperti",{"_index":883,"t":{"263":{"position":[[69,25],[1298,26]]}}}],["console.log(index",{"_index":1993,"t":{"579":{"position":[[1508,19]]}}}],["console.log(lang",{"_index":1068,"t":{"280":{"position":[[481,17]]}}}],["console.log(list",{"_index":2288,"t":{"628":{"position":[[2042,18]]}}}],["console.log(list[0].id",{"_index":2281,"t":{"628":{"position":[[1659,24]]}}}],["console.log(list[i].id",{"_index":2290,"t":{"628":{"position":[[2095,22]]}}}],["console.log(localelang",{"_index":1087,"t":{"285":{"position":[[115,24]]}}}],["console.log(this.sfcdata[this.flag",{"_index":2282,"t":{"628":{"position":[[1684,34]]}}}],["const",{"_index":1028,"t":{"272":{"position":[[331,5]]},"280":{"position":[[204,5]]},"579":{"position":[[1210,5]]},"622":{"position":[[1359,5]]}}}],["constraint",{"_index":465,"t":{"168":{"position":[[315,10]]},"522":{"position":[[23,10]]}}}],["consum",{"_index":1506,"t":{"488":{"position":[[161,8],[312,8]]}}}],["content",{"_index":995,"t":{"270":{"position":[[739,8],[754,7],[894,7],[929,8]]},"305":{"position":[[138,10]]},"307":{"position":[[546,10],[611,10],[994,10]]},"309":{"position":[[186,10]]},"315":{"position":[[316,10],[593,10]]},"317":{"position":[[176,10]]},"323":{"position":[[214,10]]},"360":{"position":[[418,10],[1120,10]]},"382":{"position":[[217,10]]},"384":{"position":[[64,10]]},"388":{"position":[[277,10]]},"488":{"position":[[146,7]]},"622":{"position":[[169,8],[765,8]]}}}],["contentarray",{"_index":1177,"t":{"305":{"position":[[162,15]]},"307":{"position":[[1039,15]]},"309":{"position":[[233,15]]},"315":{"position":[[637,15]]}}}],["contentsplit",{"_index":2024,"t":{"597":{"position":[[488,12],[2809,12]]}}}],["contentsplit.length;i",{"_index":2026,"t":{"597":{"position":[[586,24],[1150,25]]}}}],["contentsplit[11].split",{"_index":2114,"t":{"597":{"position":[[4485,25]]}}}],["contentsplit[i",{"_index":2028,"t":{"597":{"position":[[646,16],[1210,16],[2944,16]]}}}],["control",{"_index":1558,"t":{"508":{"position":[[116,16]]},"558":{"position":[[67,19]]}}}],["controller的tri",{"_index":1622,"t":{"520":{"position":[[51,15]]}}}],["controller调用servic",{"_index":1551,"t":{"506":{"position":[[127,21]]}}}],["convertlisttokeyvalue(list",{"_index":1977,"t":{"579":{"position":[[390,28]]}}}],["convertlisttokeyvalue为将string列表转成一个map(k",{"_index":1979,"t":{"579":{"position":[[960,40]]}}}],["core>=30",{"_index":481,"t":{"170":{"position":[[233,8]]}}}],["correct",{"_index":1170,"t":{"303":{"position":[[492,10]]},"307":{"position":[[712,10]]},"315":{"position":[[413,10]]},"358":{"position":[[497,10]]},"360":{"position":[[580,10],[1282,10]]},"366":{"position":[[396,10]]},"368":{"position":[[280,10]]},"370":{"position":[[216,10]]}}}],["correctarray",{"_index":1169,"t":{"303":{"position":[[465,15]]},"307":{"position":[[671,15]]},"315":{"position":[[386,15]]},"358":{"position":[[468,15]]},"360":{"position":[[543,15],[1245,15]]},"368":{"position":[[253,15]]},"370":{"position":[[189,15]]}}}],["count",{"_index":492,"t":{"170":{"position":[[566,8]]},"276":{"position":[[108,13]]}}}],["count(m.sfc",{"_index":1888,"t":{"564":{"position":[[115,12]]}}}],["cours",{"_index":480,"t":{"170":{"position":[[220,6],[368,6]]}}}],["cpp",{"_index":239,"t":{"109":{"position":[[602,6],[749,6],[1284,6],[2517,6],[2679,6],[2857,6]]}}}],["creat",{"_index":451,"t":{"168":{"position":[[0,6]]},"172":{"position":[[81,6],[160,6],[283,6]]},"488":{"position":[[189,6]]}}}],["create_d",{"_index":1594,"t":{"516":{"position":[[140,12]]}}}],["create_us",{"_index":1595,"t":{"516":{"position":[[153,12]]}}}],["created",{"_index":1761,"t":{"534":{"position":[[975,11]]}}}],["createdd",{"_index":1809,"t":{"555":{"position":[[288,12]]}}}],["createtim",{"_index":1151,"t":{"301":{"position":[[301,13]]},"311":{"position":[[193,13]]},"313":{"position":[[214,13]]},"317":{"position":[[218,13]]},"319":{"position":[[342,13]]},"321":{"position":[[292,13]]},"323":{"position":[[264,13]]},"330":{"position":[[373,13]]},"336":{"position":[[475,13]]},"338":{"position":[[360,13]]},"340":{"position":[[614,13]]},"356":{"position":[[304,13]]},"364":{"position":[[304,13]]},"366":{"position":[[270,13]]},"374":{"position":[[260,13]]},"376":{"position":[[255,13]]},"378":{"position":[[185,13],[554,13]]},"382":{"position":[[366,13]]},"386":{"position":[[186,13]]},"388":{"position":[[317,13]]},"390":{"position":[[351,13]]},"392":{"position":[[304,13]]},"398":{"position":[[306,13]]}}}],["createus",{"_index":1155,"t":{"301":{"position":[[345,13]]},"356":{"position":[[348,13]]},"364":{"position":[[348,13]]},"366":{"position":[[335,13]]},"376":{"position":[[299,13]]},"378":{"position":[[229,13],[598,13]]}}}],["createusernam",{"_index":1319,"t":{"374":{"position":[[224,17]]}}}],["cup",{"_index":723,"t":{"213":{"position":[[54,4]]}}}],["cycl",{"_index":1049,"t":{"276":{"position":[[92,15]]}}}],["c中的属性t，t和s的组合要全部出现在r",{"_index":450,"t":{"165":{"position":[[277,24]]}}}],["c和b时候会发现不匹配，此时的next会跳转到2，从ab再次匹配，但是通过第一次的不匹配我们可以得知的是，一定不会跟ab中的b进行匹配成功的，此时产生了一次无效匹配，然后next到1",{"_index":219,"t":{"105":{"position":[[74,103]]}}}],["c和d时，不匹配，肉眼观察，可以直接将j",{"_index":160,"t":{"99":{"position":[[229,38]]}}}],["c，且b推不出a，则c对于a",{"_index":524,"t":{"175":{"position":[[181,21]]}}}],["c，同时a|b",{"_index":522,"t":{"175":{"position":[[155,8]]}}}],["c，少了a或者b都推不出来c",{"_index":521,"t":{"175":{"position":[[128,15]]}}}],["d",{"_index":706,"t":{"203":{"position":[[552,1]]},"315":{"position":[[376,4],[424,4]]}}}],["d.e.knuth、j.h.morris和v.r.prat一起发明了kmp算法，致力于解决这个主串指针回溯的问题来降低时间开销。kmp算法相对难度有点大，一开始学习半知不解，参考了一些博主的博文总结了一下这个算法。kmp",{"_index":155,"t":{"97":{"position":[[0,175]]}}}],["d2d29da2",{"_index":1223,"t":{"319":{"position":[[109,9]]},"321":{"position":[[59,9]]}}}],["daemon",{"_index":1439,"t":{"448":{"position":[[0,11],[15,11]]}}}],["dao",{"_index":1549,"t":{"506":{"position":[[81,5]]}}}],["dao中可以使用jpa规范来写数据库交互的函数,也可以使用jpql的方式来自定义sql",{"_index":1526,"t":{"501":{"position":[[162,44]]}}}],["data",{"_index":243,"t":{"109":{"position":[[634,5],[2549,5],[2710,5],[2796,5],[2889,5]]},"123":{"position":[[222,5]]},"278":{"position":[[29,10]]},"285":{"position":[[325,8],[422,8],[549,8],[647,8],[848,4]]},"567":{"position":[[558,8]]},"575":{"position":[[164,5]]},"628":{"position":[[610,4]]}}}],["data.id",{"_index":2268,"t":{"628":{"position":[[694,7],[1029,7]]}}}],["data.keycod",{"_index":2278,"t":{"628":{"position":[[971,14]]}}}],["data.technologytyp",{"_index":2270,"t":{"628":{"position":[[732,19],[1067,19]]}}}],["data.weight",{"_index":2272,"t":{"628":{"position":[[794,11],[1129,11]]}}}],["data:qs.stringify(data)是将参数以表单的形式进行提交，如果以json格式，直接使用data",{"_index":1962,"t":{"575":{"position":[[194,67]]}}}],["database的缩写。redis的数据都是在内存中，rdb",{"_index":1371,"t":{"403":{"position":[[139,61]]}}}],["datajson",{"_index":1757,"t":{"534":{"position":[[813,9]]}}}],["datalist",{"_index":1941,"t":{"567":{"position":[[1270,9]]}}}],["datalog(starttime,parmas,message,statu",{"_index":1629,"t":{"520":{"position":[[239,41]]}}}],["datalog为记录日志的方法，在impl中记录不起效，需要在control",{"_index":1630,"t":{"520":{"position":[[281,51]]}}}],["data，后端数据封装使用operationresult",{"_index":1763,"t":{"534":{"position":[[1008,58]]}}}],["data，边表头指针first",{"_index":336,"t":{"123":{"position":[[7,82]]}}}],["daytim",{"_index":1776,"t":{"541":{"position":[[115,7]]},"545":{"position":[[188,8]]}}}],["db",{"_index":441,"t":{"161":{"position":[[45,37],[181,64]]}}}],["dbm",{"_index":442,"t":{"161":{"position":[[138,42]]}}}],["dcb3",{"_index":1224,"t":{"319":{"position":[[119,4]]},"321":{"position":[[69,4]]}}}],["decodeuricomponent(urlparams.get('encodebatch",{"_index":2241,"t":{"622":{"position":[[1562,49]]}}}],["decodeuricomponent(urlparams.get('encodeitem",{"_index":2239,"t":{"622":{"position":[[1429,48]]}}}],["decodeuricomponent(urlparams.get('encodetechnologytyp",{"_index":2240,"t":{"622":{"position":[[1495,58]]}}}],["decr",{"_index":1462,"t":{"460":{"position":[[53,4]]}}}],["decrbi",{"_index":1463,"t":{"460":{"position":[[67,6]]}}}],["decrement",{"_index":1464,"t":{"460":{"position":[[78,17]]}}}],["default",{"_index":2070,"t":{"597":{"position":[[2372,8]]}}}],["default_serv",{"_index":793,"t":{"242":{"position":[[235,15],[267,15]]}}}],["default_typ",{"_index":809,"t":{"242":{"position":[[538,12]]}}}],["defaultlocal",{"_index":923,"t":{"265":{"position":[[1159,13],[1203,14],[1284,14],[1641,13],[1665,13]]}}}],["defaultmessag",{"_index":994,"t":{"270":{"position":[[714,15],[904,15]]}}}],["defult_path_paramet",{"_index":946,"t":{"268":{"position":[[178,21]]}}}],["delet",{"_index":507,"t":{"170":{"position":[[861,6]]},"330":{"position":[[437,10]]},"340":{"position":[[719,10]]},"346":{"position":[[204,10]]},"374":{"position":[[304,10]]}}}],["demo",{"_index":1552,"t":{"506":{"position":[[154,4],[212,4]]}}}],["deploy",{"_index":773,"t":{"239":{"position":[[234,7]]},"244":{"position":[[72,6],[114,7],[404,6],[433,6]]}}}],["dequeue(q,v",{"_index":361,"t":{"126":{"position":[[590,13]]}}}],["desc",{"_index":1790,"t":{"547":{"position":[[115,5],[184,5]]},"555":{"position":[[448,5],[1042,4]]}}}],["descript",{"_index":1803,"t":{"555":{"position":[[170,12]]}}}],["description=\"$t",{"_index":1910,"t":{"567":{"position":[[410,23]]}}}],["desc|asc",{"_index":472,"t":{"170":{"position":[[88,8]]}}}],["destralverse(graph",{"_index":371,"t":{"128":{"position":[[136,18]]}}}],["develop",{"_index":858,"t":{"246":{"position":[[53,12]]}}}],["dev合并到master将会导致别人的错误bug",{"_index":2181,"t":{"603":{"position":[[225,41]]}}}],["dev，发布dev",{"_index":1871,"t":{"560":{"position":[[27,18]]}}}],["dfs(g,v",{"_index":375,"t":{"128":{"position":[[247,9],[384,9]]}}}],["dfs(graph",{"_index":376,"t":{"128":{"position":[[264,9]]}}}],["dfs就类似于树的先序遍历，理解就是往深了走，顺着一个节点往下一直搜索，直到没有就回溯，持续回溯，直到回溯到一个又可以重新向下搜索的节点。跟bf",{"_index":370,"t":{"128":{"position":[[0,106]]}}}],["dfs算法是递归算法，需要借助一个递归空间栈，在最优情况下，空间复杂度可以为o(1)o(1)o(1)，平均的为o(∣v∣)o(|v|)o(∣v",{"_index":379,"t":{"128":{"position":[[597,82]]}}}],["di=0,1,2...d_i",{"_index":58,"t":{"46":{"position":[[244,24]]}}}],["di=02,12,−12,22,−22.........k2,−k2d_i",{"_index":60,"t":{"46":{"position":[[311,39]]}}}],["dialog.alert({messag",{"_index":2258,"t":{"628":{"position":[[200,39],[377,41],[1779,41],[2204,41]]}}}],["dialog.alert({message:res.messag",{"_index":1930,"t":{"567":{"position":[[959,36]]},"579":{"position":[[869,36]]},"628":{"position":[[1262,36]]}}}],["dicedicedice系数的计算公式为：iou=2∣a∩b∣∣a+b∣i",{"_index":725,"t":{"215":{"position":[[0,39]]}}}],["dice和ioudice和ioudice和iou是非常相似的两个指标，但是又有着区别，iouiouiou更加关注的是局部细节和纹理，对模型的边缘分割和细节处理要求较高。dicedicedice更加关注整体的相似度，也就是形状大致的相似程度。放到肿瘤识别中就是dicedicedice检验识别肿瘤的大致形状，iouioui",{"_index":733,"t":{"221":{"position":[[0,176]]}}}],["did_idi",{"_index":71,"t":{"46":{"position":[[583,18]]}}}],["diff_count",{"_index":1716,"t":{"529":{"position":[[1474,11]]}}}],["diffcount",{"_index":1754,"t":{"534":{"position":[[632,10]]}}}],["difficult",{"_index":1171,"t":{"303":{"position":[[557,12]]},"307":{"position":[[753,12]]},"315":{"position":[[453,12]]},"358":{"position":[[564,12]]},"360":{"position":[[626,12],[1328,12]]},"366":{"position":[[476,12]]},"368":{"position":[[330,12]]},"370":{"position":[[283,12]]}}}],["dir",{"_index":849,"t":{"244":{"position":[[555,4],[572,4]]}}}],["disciplin",{"_index":738,"t":{"223":{"position":[[46,11]]}}}],["docker",{"_index":861,"t":{"252":{"position":[[213,6]]},"254":{"position":[[0,72],[91,6]]},"256":{"position":[[0,27],[28,6],[41,15],[57,6],[84,6],[108,6],[134,6],[160,6]]}}}],["docs.xpoet.cn",{"_index":740,"t":{"225":{"position":[[92,14]]}}}],["docsaururs配置文件进行修改，将config",{"_index":760,"t":{"239":{"position":[[0,48]]}}}],["document.addeventlistener('domcontentload",{"_index":2236,"t":{"622":{"position":[[1300,45]]}}}],["document.getelementbyid(\"batch\").valu",{"_index":2244,"t":{"622":{"position":[[1730,38]]}}}],["document.getelementbyid(\"item\").valu",{"_index":2242,"t":{"622":{"position":[[1618,37]]}}}],["document.getelementbyid(\"technologytype\").valu",{"_index":2243,"t":{"622":{"position":[[1664,47]]}}}],["docusauru",{"_index":774,"t":{"239":{"position":[[242,10]]}}}],["doexampapercount",{"_index":1257,"t":{"334":{"position":[[108,19]]}}}],["doquestioncount",{"_index":1259,"t":{"334":{"position":[[141,18]]}}}],["doright",{"_index":1185,"t":{"307":{"position":[[970,10]]},"309":{"position":[[162,10]]},"315":{"position":[[568,10]]}}}],["dotim",{"_index":1175,"t":{"305":{"position":[[76,9]]},"307":{"position":[[866,9]]},"309":{"position":[[64,9]]},"311":{"position":[[398,9]]},"386":{"position":[[391,9]]}}}],["drop",{"_index":462,"t":{"168":{"position":[[226,4],[310,4]]}}}],["dto",{"_index":1946,"t":{"571":{"position":[[150,25]]}}}],["dto(data",{"_index":1425,"t":{"443":{"position":[[59,10]]}}}],["dto用于前后端交互的数据传输，前端传参可能是一个完整的list和一些cookie保存的信息，后端使用json接收对象，往往使用dto类型，开发中通常有时候会是dto里面封装这vo",{"_index":1429,"t":{"443":{"position":[[288,90]]}}}],["dump",{"_index":1374,"t":{"409":{"position":[[41,12],[54,10]]}}}],["dump6379.rdb",{"_index":1377,"t":{"409":{"position":[[131,12]]}}}],["durat",{"_index":898,"t":{"263":{"position":[[755,8]]}}}],["d的距离是5",{"_index":391,"t":{"136":{"position":[[178,19]]}}}],["d躺排序，一次分配要q(n)q(n)q(n)，一次收集要q(r)q(r)q(r)，所以时间复杂度为o(d(n+1))o(d(n+1))o(d(n+1",{"_index":713,"t":{"203":{"position":[[863,80]]}}}],["e",{"_index":136,"t":{"91":{"position":[[169,14]]},"118":{"position":[[55,7]]},"270":{"position":[[860,2],[887,6]]},"506":{"position":[[241,3]]},"526":{"position":[[1083,2]]},"597":{"position":[[7185,2],[7255,3]]}}}],["e.getcaus",{"_index":1626,"t":{"520":{"position":[[129,13]]}}}],["e.getmessag",{"_index":1623,"t":{"520":{"position":[[95,15]]},"597":{"position":[[7239,15]]}}}],["e.printstacktrac",{"_index":1658,"t":{"526":{"position":[[1088,20]]}}}],["e/i",{"_index":770,"t":{"239":{"position":[[179,4]]}}}],["e2b07f4fcc67",{"_index":1286,"t":{"340":{"position":[[358,14]]}}}],["editclick",{"_index":2219,"t":{"622":{"position":[[520,12]]}}}],["effici",{"_index":1720,"t":{"529":{"position":[[1559,11]]},"534":{"position":[[663,11]]}}}],["el",{"_index":1037,"t":{"274":{"position":[[10,3]]}}}],["elmenttyp",{"_index":301,"t":{"109":{"position":[[2785,10]]}}}],["empti",{"_index":2302,"t":{"634":{"position":[[230,9]]}}}],["en",{"_index":1029,"t":{"272":{"position":[[369,5],[468,4],[475,4],[547,6]]},"280":{"position":[[242,5],[341,4],[348,4],[403,5],[512,5]]}}}],["encodebatch",{"_index":2234,"t":{"622":{"position":[[1229,11]]}}}],["encodeitem",{"_index":2230,"t":{"622":{"position":[[1096,10]]}}}],["encodetechnologytyp",{"_index":2232,"t":{"622":{"position":[[1152,20]]}}}],["encodeuricomponent(selection[0].batch",{"_index":2235,"t":{"622":{"position":[[1243,39]]}}}],["encodeuricomponent(selection[0].item",{"_index":2231,"t":{"622":{"position":[[1109,38]]}}}],["encodeuricomponent(selection[0].technology_typ",{"_index":2233,"t":{"622":{"position":[[1175,49]]}}}],["end",{"_index":736,"t":{"223":{"position":[[23,3]]},"541":{"position":[[108,3]]},"555":{"position":[[1430,4],[1543,4],[1684,4],[1824,4],[2235,3]]},"622":{"position":[[301,4],[914,4]]}}}],["end_tim",{"_index":1666,"t":{"529":{"position":[[264,8],[276,9],[854,9]]},"545":{"position":[[165,9]]},"555":{"position":[[142,9],[1106,9],[1329,9]]}}}],["enddat",{"_index":1748,"t":{"534":{"position":[[405,8]]}}}],["end{align",{"_index":232,"t":{"109":{"position":[[127,15],[1675,15]]}}}],["end{aligned}​1.若i为偶数则双亲为2i​向下取整2.若i为奇数则双亲为2(i−1)​3.2i≤n时，i的左孩子是2i4.2i+1≤n时，i的右孩子是2i+1",{"_index":644,"t":{"198":{"position":[[617,87]]}}}],["end{aligned}​当(vi​,vj​)是g的边，则a[i][j]=1否则a[i][j]=0",{"_index":323,"t":{"121":{"position":[[235,54]]}}}],["end{aligned}​当出现s[i]=t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1",{"_index":184,"t":{"101":{"position":[[1017,89]]}}}],["end{aligned}​当有t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j",{"_index":194,"t":{"101":{"position":[[1945,157]]}}}],["end{bmatrix}​0001​1000​1000​0010",{"_index":326,"t":{"121":{"position":[[445,35]]}}}],["end和a",{"_index":1771,"t":{"541":{"position":[[16,8]]}}}],["enqueue(q,v",{"_index":359,"t":{"126":{"position":[[556,13],[706,13]]}}}],["enter",{"_index":2215,"t":{"622":{"position":[[366,7],[979,7]]}}}],["enterinventori",{"_index":1052,"t":{"276":{"position":[[165,24]]}}}],["entiti",{"_index":1522,"t":{"501":{"position":[[111,7]]}}}],["entri",{"_index":1512,"t":{"488":{"position":[[468,7]]}}}],["enu",{"_index":1064,"t":{"280":{"position":[[102,4],[537,5]]}}}],["env和dev，不可使用pro",{"_index":2173,"t":{"601":{"position":[[38,19]]}}}],["error_log",{"_index":784,"t":{"242":{"position":[[116,9]]}}}],["esl",{"_index":263,"t":{"109":{"position":[[952,4],[1091,4],[1223,4],[1349,5]]}}}],["etc/nginx/mime.typ",{"_index":808,"t":{"242":{"position":[[515,22]]}}}],["eureka中查看网关，对应在yml",{"_index":1873,"t":{"560":{"position":[[83,29]]}}}],["eureka会把几个服务器管理起来，访问服务的时候走eureka",{"_index":1875,"t":{"560":{"position":[[130,63]]}}}],["event",{"_index":788,"t":{"242":{"position":[[172,6]]}}}],["everysec",{"_index":1390,"t":{"416":{"position":[[29,13]]}}}],["exampaperanswerid",{"_index":1135,"t":{"297":{"position":[[180,20]]}}}],["exampapercount",{"_index":1254,"t":{"334":{"position":[[47,17]]}}}],["exampaperid",{"_index":1132,"t":{"297":{"position":[[116,14]]}}}],["exampapernam",{"_index":1134,"t":{"297":{"position":[[145,16]]}}}],["except",{"_index":1000,"t":{"270":{"position":[[849,10]]},"506":{"position":[[230,10]]},"526":{"position":[[1072,10]]},"597":{"position":[[7174,10]]}}}],["exec",{"_index":867,"t":{"256":{"position":[[167,4]]}}}],["export",{"_index":1071,"t":{"280":{"position":[[630,6]]},"575":{"position":[[82,6]]}}}],["exportid",{"_index":1756,"t":{"534":{"position":[[768,10]]},"536":{"position":[[102,20]]}}}],["exporttyp",{"_index":1759,"t":{"534":{"position":[[874,11]]}}}],["extend",{"_index":1530,"t":{"501":{"position":[[244,7]]}}}],["ex：key",{"_index":1455,"t":{"458":{"position":[[0,14]]}}}],["e∣=∣v∣−1|",{"_index":381,"t":{"130":{"position":[[89,12]]}}}],["e（23~30",{"_index":131,"t":{"91":{"position":[[66,10]]}}}],["f7ee8270ad4c",{"_index":1350,"t":{"390":{"position":[[133,14]]},"392":{"position":[[90,14]]},"398":{"position":[[83,14]]}}}],["f_all_count",{"_index":1847,"t":{"555":{"position":[[1832,11]]}}}],["f_pass_count",{"_index":1846,"t":{"555":{"position":[[1692,13]]}}}],["f_rate",{"_index":1861,"t":{"555":{"position":[[2427,7]]}}}],["facetyp",{"_index":2012,"t":{"597":{"position":[[150,8],[2144,8],[3649,8],[4768,8],[4826,8],[4884,8],[4941,8],[4998,8],[5128,10],[5369,10]]}}}],["fals",{"_index":374,"t":{"128":{"position":[[198,6]]},"190":{"position":[[134,6]]},"289":{"position":[[91,5]]},"315":{"position":[[579,6]]},"330":{"position":[[89,5]]},"340":{"position":[[730,6]]},"346":{"position":[[215,5]]},"374":{"position":[[315,5]]},"526":{"position":[[1116,6]]},"567":{"position":[[527,6],[697,6],[1034,6],[1094,6]]},"579":{"position":[[607,6],[944,6],[1341,6]]},"622":{"position":[[655,6]]},"628":{"position":[[284,6],[463,6],[997,6],[1337,6],[1616,6],[1841,6],[2266,6]]}}}],["fasl",{"_index":256,"t":{"109":{"position":[[826,6]]},"126":{"position":[[431,6]]}}}],["fct",{"_index":1844,"t":{"555":{"position":[[1623,7],[1764,7]]}}}],["fd31ab62",{"_index":1268,"t":{"336":{"position":[[232,9]]},"338":{"position":[[117,9]]}}}],["field",{"_index":1471,"t":{"466":{"position":[[26,9]]},"567":{"position":[[159,5]]},"579":{"position":[[95,5],[250,6]]}}}],["fifo",{"_index":2261,"t":{"628":{"position":[[296,35]]}}}],["filter(map",{"_index":1419,"t":{"441":{"position":[[60,11]]}}}],["final",{"_index":942,"t":{"268":{"position":[[112,5],[165,5]]},"270":{"position":[[98,5]]},"526":{"position":[[729,9]]},"534":{"position":[[83,5]]},"597":{"position":[[7259,8]]}}}],["findleft(t[],int",{"_index":268,"t":{"109":{"position":[[1125,16]]}}}],["findparent(t[],int",{"_index":257,"t":{"109":{"position":[[849,18]]}}}],["findright(t[],int",{"_index":264,"t":{"109":{"position":[[986,17]]}}}],["first",{"_index":341,"t":{"123":{"position":[[236,7]]}}}],["firstchild",{"_index":302,"t":{"109":{"position":[[2808,12]]}}}],["firstlang",{"_index":965,"t":{"268":{"position":[[854,9]]}}}],["firstlang.split",{"_index":967,"t":{"268":{"position":[[910,17]]}}}],["firstneighbor(g,v);w>=0;w",{"_index":363,"t":{"126":{"position":[[612,25]]},"128":{"position":[[321,25]]}}}],["fixedlocaleresolver(this.mvcproperties.getlocal",{"_index":916,"t":{"265":{"position":[[663,52]]}}}],["fixedlocaleresolver(this.webproperties.getlocal",{"_index":913,"t":{"265":{"position":[[454,52]]}}}],["fixedpap",{"_index":1120,"t":{"295":{"position":[[49,13]]}}}],["flag",{"_index":585,"t":{"190":{"position":[[127,4]]}}}],["fm9999990.00",{"_index":1719,"t":{"529":{"position":[[1533,15]]},"553":{"position":[[82,15]]},"555":{"position":[[2401,15],[2483,15]]}}}],["focus').blur",{"_index":2216,"t":{"622":{"position":[[383,19],[996,19]]}}}],["focus=\"showlin",{"_index":1905,"t":{"567":{"position":[[292,16]]}}}],["for(gap",{"_index":562,"t":{"186":{"position":[[274,7]]}}}],["for(i",{"_index":348,"t":{"126":{"position":[[391,5],[452,5]]},"182":{"position":[[494,5]]},"184":{"position":[[373,5]]},"186":{"position":[[318,5]]},"201":{"position":[[478,5]]}}}],["for(int",{"_index":248,"t":{"109":{"position":[[697,7],[2592,7]]},"190":{"position":[[141,7],[167,7]]},"196":{"position":[[299,7],[338,7]]},"198":{"position":[[879,7],[1035,7],[1373,7]]},"597":{"position":[[347,7],[568,7],[1132,7],[2531,7],[2869,7]]}}}],["for(j",{"_index":543,"t":{"182":{"position":[[549,5]]},"184":{"position":[[531,5]]},"186":{"position":[[485,5]]}}}],["for(k",{"_index":673,"t":{"201":{"position":[[433,5]]}}}],["for(let",{"_index":2250,"t":{"622":{"position":[[1908,7]]},"628":{"position":[[896,7],[2061,7]]}}}],["for(v",{"_index":372,"t":{"128":{"position":[[159,5],[205,5]]}}}],["for(w",{"_index":362,"t":{"126":{"position":[[604,5]]},"128":{"position":[[313,5]]}}}],["foreign",{"_index":456,"t":{"168":{"position":[[124,7]]}}}],["for循环，时间复杂度为o(n2)o(n^2)o(n2",{"_index":549,"t":{"182":{"position":[[710,45]]}}}],["found",{"_index":2183,"t":{"605":{"position":[[17,8]]}}}],["frac{2|a",{"_index":726,"t":{"215":{"position":[[42,9]]}}}],["frac{n(n",{"_index":596,"t":{"190":{"position":[[409,9]]}}}],["frac{|a",{"_index":720,"t":{"213":{"position":[[34,8]]}}}],["frametextcontentid",{"_index":1157,"t":{"301":{"position":[[440,21]]},"356":{"position":[[415,21]]},"364":{"position":[[415,21]]},"376":{"position":[[367,21]]},"378":{"position":[[296,21],[665,21]]}}}],["ftp",{"_index":825,"t":{"244":{"position":[[68,3],[276,3],[400,3],[560,5],[714,3]]}}}],["func1",{"_index":1532,"t":{"501":{"position":[[281,7]]}}}],["func2",{"_index":1535,"t":{"501":{"position":[[330,7]]}}}],["function",{"_index":1066,"t":{"280":{"position":[[451,8]]},"575":{"position":[[89,8]]},"622":{"position":[[306,8],[511,8],[919,8],[1346,10]]}}}],["fundament",{"_index":737,"t":{"223":{"position":[[34,11]]}}}],["g",{"_index":347,"t":{"126":{"position":[[387,3],[524,3]]},"128":{"position":[[155,3]]}}}],["g,int",{"_index":377,"t":{"128":{"position":[[274,5]]}}}],["g=(v,e)和g′=(v′,e′)g",{"_index":312,"t":{"112":{"position":[[88,19]]}}}],["gap",{"_index":568,"t":{"186":{"position":[[449,6],[521,4]]}}}],["gap+1;i<=n;i",{"_index":565,"t":{"186":{"position":[[326,16]]}}}],["gap+1是因为从a[1]开始，这里i++而不是按分组进行循环，个人理解是，指针向前走，后面的j会控制gap，所以会在后面进行组内的排序(这里思考了挺久，看后面的p",{"_index":566,"t":{"186":{"position":[[343,91]]}}}],["gap,i,j",{"_index":561,"t":{"186":{"position":[[249,8]]}}}],["gap/2",{"_index":564,"t":{"186":{"position":[[303,7]]}}}],["gap;j>0",{"_index":569,"t":{"186":{"position":[[495,7]]}}}],["geo",{"_index":1481,"t":{"478":{"position":[[6,3]]}}}],["geoadd：多个经度、维度、位置名称添加到key",{"_index":1491,"t":{"482":{"position":[[0,26]]}}}],["geodist",{"_index":1493,"t":{"482":{"position":[[52,21]]}}}],["geohash：返回一个或者多个位置元素的geohash",{"_index":1496,"t":{"482":{"position":[[141,28]]}}}],["geopo",{"_index":1492,"t":{"482":{"position":[[27,24]]}}}],["georadiu",{"_index":1494,"t":{"482":{"position":[[74,43]]}}}],["georaiusbymemb",{"_index":1495,"t":{"482":{"position":[[118,22]]}}}],["get(str",{"_index":1659,"t":{"526":{"position":[[1164,10]]}}}],["get_next(str",{"_index":203,"t":{"103":{"position":[[44,15]]}}}],["get_nextval(str",{"_index":221,"t":{"105":{"position":[[343,18]]}}}],["getbatchs",{"_index":1618,"t":{"516":{"position":[[843,14]]}}}],["getcooki",{"_index":1083,"t":{"285":{"position":[[23,11]]}}}],["getcookie(\"localelang",{"_index":1086,"t":{"285":{"position":[[80,23]]}}}],["getdatafromcode(data",{"_index":1958,"t":{"575":{"position":[[98,21]]}}}],["getlineresult",{"_index":1981,"t":{"579":{"position":[[1030,22]]}}}],["getlineresult(param",{"_index":1923,"t":{"567":{"position":[[771,21]]},"579":{"position":[[681,21]]}}}],["getmessage(cod",{"_index":991,"t":{"270":{"position":[[444,16],[597,16]]}}}],["getmessage(str",{"_index":990,"t":{"270":{"position":[[411,17],[549,17],[668,17]]}}}],["getproductplan(sit",{"_index":2126,"t":{"597":{"position":[[5052,20]]}}}],["getrootpath",{"_index":1084,"t":{"285":{"position":[[37,13]]}}}],["getrootpath()和资源路径拼接获取到国际化信息，回调函数获取值，所以使用的时候，直接使用data",{"_index":1108,"t":{"285":{"position":[[762,59]]}}}],["gh",{"_index":768,"t":{"239":{"position":[[164,2],[286,2]]}}}],["git",{"_index":741,"t":{"225":{"position":[[124,27]]},"233":{"position":[[168,3]]},"237":{"position":[[21,3],[30,3],[61,3],[71,3],[91,3]]},"239":{"position":[[148,3],[210,3],[220,3],[270,3]]},"244":{"position":[[699,14]]},"583":{"position":[[0,9]]}}}],["github",{"_index":747,"t":{"233":{"position":[[54,6],[70,6],[101,6],[108,17],[208,6],[221,18]]},"239":{"position":[[256,6]]}}}],["github/workflows，并且在里面创建nodejs.yml",{"_index":823,"t":{"244":{"position":[[0,61]]}}}],["githubpag",{"_index":751,"t":{"233":{"position":[[288,47]]}}}],["github提供的托管工具githubpag",{"_index":746,"t":{"233":{"position":[[0,53]]}}}],["git仓库中进行push",{"_index":745,"t":{"229":{"position":[[0,73]]}}}],["git是以文件和行号来判断是否修改的，可能a在修改100行，b也在修改100行，完成后a推送了，b写完了拉取远程代码合并，会出现冲突，一般来说优选选择保留远程的mast",{"_index":1999,"t":{"585":{"position":[[0,150]]}}}],["grade",{"_index":503,"t":{"170":{"position":[[779,5]]}}}],["grade+10",{"_index":504,"t":{"170":{"position":[[787,8]]}}}],["gradelevel",{"_index":1167,"t":{"303":{"position":[[398,13]]},"307":{"position":[[482,13]]},"315":{"position":[[255,13]]},"358":{"position":[[399,13]]},"360":{"position":[[356,13],[1058,13]]},"368":{"position":[[189,13]]},"370":{"position":[[122,13]]},"374":{"position":[[34,13],[202,13]]},"376":{"position":[[105,13]]},"378":{"position":[[44,13],[401,13]]}}}],["grid.select",{"_index":2220,"t":{"622":{"position":[[549,15]]}}}],["group",{"_index":469,"t":{"170":{"position":[[48,5],[272,5]]},"172":{"position":[[332,5]]},"488":{"position":[[170,5]]},"545":{"position":[[91,5],[234,5]]},"555":{"position":[[548,5],[1215,5],[1912,5]]},"564":{"position":[[222,5]]}}}],["h",{"_index":1042,"t":{"274":{"position":[[51,1]]}}}],["h(app",{"_index":1043,"t":{"274":{"position":[[56,6]]}}}],["h(key)+i*hash_2(key",{"_index":68,"t":{"46":{"position":[[518,22]]}}}],["h(key)addr=h(key)建立起关键字和散列地址的映射关系，408",{"_index":54,"t":{"46":{"position":[[25,47]]}}}],["ha5d003",{"_index":1831,"t":{"555":{"position":[[964,9]]}}}],["hash",{"_index":1470,"t":{"466":{"position":[[6,4],[47,9],[78,4]]}}}],["hashmap",{"_index":1729,"t":{"532":{"position":[[111,12]]},"597":{"position":[[5792,12]]}}}],["hashtable。redi",{"_index":1474,"t":{"470":{"position":[[77,15]]}}}],["have",{"_index":470,"t":{"170":{"position":[[62,6]]}}}],["headadjust(a,1,i",{"_index":663,"t":{"198":{"position":[[1416,16]]}}}],["headadjust(a,i,len",{"_index":650,"t":{"198":{"position":[[934,20]]}}}],["headadjust(int",{"_index":651,"t":{"198":{"position":[[962,14]]}}}],["header",{"_index":2182,"t":{"605":{"position":[[6,6]]}}}],["heapsort(int",{"_index":659,"t":{"198":{"position":[[1325,12]]}}}],["hh24:mi",{"_index":1670,"t":{"529":{"position":[[374,10],[413,10]]},"555":{"position":[[2040,10],[2081,10]]}}}],["hh24:mi:ss",{"_index":1774,"t":{"541":{"position":[[61,13]]},"555":{"position":[[2137,13],[2201,13],[2708,13],[2780,13],[2844,14],[2885,13],[2962,13],[3027,15]]}}}],["hi=(h(key)+i∗hash2(key))%mh_i",{"_index":67,"t":{"46":{"position":[[479,36]]}}}],["high",{"_index":47,"t":{"34":{"position":[[254,4]]},"184":{"position":[[464,5],[513,4],[550,4]]},"192":{"position":[[435,6],[507,6],[546,6],[589,5],[764,6],[780,6]]},"201":{"position":[[373,6],[769,6]]}}}],["high)/2",{"_index":44,"t":{"34":{"position":[[204,8]]}}}],["high位置的元素拿走（挖坑），去填low",{"_index":602,"t":{"192":{"position":[[347,22]]}}}],["high向前移动，直到遇到第一个比pivot",{"_index":601,"t":{"192":{"position":[[320,26]]}}}],["host",{"_index":803,"t":{"242":{"position":[[450,4],[455,6]]}}}],["hosting/raw/master/20241227/imag",{"_index":236,"t":{"109":{"position":[[282,33],[1911,33],[2103,33],[2423,33],[3419,33]]}}}],["ht",{"_index":1412,"t":{"430":{"position":[[80,4]]}}}],["html之间的传参有时候会需要传参中文，使用uri",{"_index":2229,"t":{"622":{"position":[[1035,56]]}}}],["html的前端设计，前后端交互使用json格式，由于有分页要求，设计dto",{"_index":1739,"t":{"534":{"position":[[0,40]]}}}],["http",{"_index":749,"t":{"233":{"position":[[151,5]]},"242":{"position":[[208,4]]}}}],["http://xzs.file.mindskip.net/fi4vlef1ri4vmgsonwn2ch0o8ed_",{"_index":1360,"t":{"396":{"position":[[101,60]]}}}],["http://服务器ip",{"_index":801,"t":{"242":{"position":[[419,13]]}}}],["http_refer",{"_index":818,"t":{"242":{"position":[[675,15]]}}}],["http_user_ag",{"_index":819,"t":{"242":{"position":[[693,19]]}}}],["http_x_forwarded_for",{"_index":820,"t":{"242":{"position":[[713,25]]}}}],["https://username.github.io",{"_index":762,"t":{"239":{"position":[[54,29],[398,52]]}}}],["httpservletrespons",{"_index":972,"t":{"268":{"position":[[1133,19]]}}}],["hyperloglog",{"_index":1497,"t":{"484":{"position":[[0,11],[12,23],[94,11],[181,11],[222,11]]}}}],["i);//读取第i",{"_index":2076,"t":{"597":{"position":[[2616,15]]}}}],["i++后指向5，对前一个组进行排序，只不过前一个表是27",{"_index":577,"t":{"186":{"position":[[690,40]]}}}],["i+1;j<n;j",{"_index":630,"t":{"196":{"position":[[350,13]]}}}],["i,j",{"_index":537,"t":{"182":{"position":[[489,4]]}}}],["i,j,k",{"_index":672,"t":{"201":{"position":[[426,6]]}}}],["i,j,low,high,mid",{"_index":553,"t":{"184":{"position":[[355,17]]}}}],["i18n",{"_index":1015,"t":{"272":{"position":[[80,5],[337,4]]},"274":{"position":[[30,5]]},"280":{"position":[[47,5],[210,4],[637,6]]},"285":{"position":[[334,4],[431,4],[558,4],[656,4],[822,4],[853,4]]}}}],["i18n.properti",{"_index":1088,"t":{"285":{"position":[[140,19]]}}}],["i18n/jquery.i18n.properties.js\"></script",{"_index":1079,"t":{"283":{"position":[[147,41]]}}}],["i18nutil",{"_index":980,"t":{"270":{"position":[[72,8]]}}}],["i18nutil.getmessage(\"badrecordcontroller.shoporder.nodata",{"_index":1003,"t":{"270":{"position":[[1009,59]]}}}],["i18nutil.getmessage(\"solderpastemanagerservice.standardwarmtime.exceedlimit",{"_index":1004,"t":{"270":{"position":[[1076,77]]}}}],["i18nutil.staticmessagesourc",{"_index":987,"t":{"270":{"position":[[292,28]]}}}],["i18n下存放.properti",{"_index":876,"t":{"261":{"position":[[29,20]]}}}],["i18n文件夹(idea",{"_index":875,"t":{"261":{"position":[[8,20]]}}}],["i18n类，调用getmessag",{"_index":1002,"t":{"270":{"position":[[986,22]]}}}],["i18n，声明i18n的组件，注入到vu",{"_index":1012,"t":{"272":{"position":[[8,24]]}}}],["i;i<=mid",{"_index":678,"t":{"201":{"position":[[504,8]]}}}],["i=0;i<this.tabledata.length;i",{"_index":2276,"t":{"628":{"position":[[904,33]]}}}],["i=1;i<=pagenum;i",{"_index":2075,"t":{"597":{"position":[[2539,20]]}}}],["id",{"_index":860,"t":{"252":{"position":[[118,2]]},"256":{"position":[[68,6],[120,6],[146,6],[176,6]]},"295":{"position":[[74,5],[86,6]]},"297":{"position":[[50,5],[59,6],[136,8],[206,6]]},"299":{"position":[[100,5],[112,6]]},"301":{"position":[[87,6],[213,5],[225,6]]},"303":{"position":[[95,5],[104,6],[315,5],[324,6]]},"305":{"position":[[131,6],[254,5],[262,6]]},"307":{"position":[[117,5],[126,6],[389,5],[398,6],[850,5],[859,6],[930,5],[939,6],[963,6]]},"309":{"position":[[48,5],[57,6],[122,5],[131,6],[155,6]]},"311":{"position":[[174,5],[186,6],[308,6]]},"313":{"position":[[170,5],[183,6]]},"315":{"position":[[166,5],[177,6],[227,6],[529,5],[561,6]]},"317":{"position":[[86,5],[111,6]]},"319":{"position":[[88,5]]},"321":{"position":[[38,5]]},"323":{"position":[[163,5]]},"330":{"position":[[153,5]]},"336":{"position":[[202,5],[213,6]]},"338":{"position":[[87,5],[98,6]]},"340":{"position":[[34,5],[310,5],[373,6]]},"346":{"position":[[98,5],[108,6]]},"348":{"position":[[174,5]]},"350":{"position":[[100,5]]},"352":{"position":[[47,5]]},"356":{"position":[[40,5],[215,5],[225,6]]},"358":{"position":[[93,5],[103,6],[313,5],[323,6]]},"360":{"position":[[40,5],[50,6],[264,5],[274,6],[749,5],[759,6],[966,5],[976,6]]},"364":{"position":[[223,5]]},"366":{"position":[[38,5],[213,5]]},"368":{"position":[[93,5],[104,6]]},"370":{"position":[[38,5],[48,6]]},"374":{"position":[[161,5],[171,6]]},"376":{"position":[[88,5],[98,6],[168,5],[179,6]]},"378":{"position":[[34,5],[96,5],[106,6],[384,5],[394,6],[465,5],[475,6]]},"382":{"position":[[174,5],[184,6]]},"386":{"position":[[176,5],[300,6]]},"388":{"position":[[187,5],[197,6],[217,6]]},"390":{"position":[[86,5]]},"392":{"position":[[36,5],[46,6]]},"394":{"position":[[146,6]]},"398":{"position":[[36,5]]},"488":{"position":[[93,42]]},"501":{"position":[[326,3],[385,2],[466,3]]},"529":{"position":[[155,2],[1123,3]]},"534":{"position":[[705,7],[739,7]]},"597":{"position":[[5747,2],[5752,3],[5934,2],[6002,4]]},"622":{"position":[[472,38],[1898,3]]}}}],["id\",nativequeri",{"_index":1538,"t":{"501":{"position":[[391,15]]}}}],["id,a.lin",{"_index":1686,"t":{"529":{"position":[[729,9]]}}}],["id,lin",{"_index":1662,"t":{"529":{"position":[[161,7]]}}}],["ids.push(selection[index].id",{"_index":2251,"t":{"622":{"position":[[1937,30]]}}}],["id的list到后端的时候，用逗号隔开传，不要转类似json",{"_index":2249,"t":{"622":{"position":[[1857,36]]}}}],["id组，后端处理拼接sql，使用lik",{"_index":1765,"t":{"536":{"position":[[0,37]]}}}],["id，支持ack",{"_index":1505,"t":{"488":{"position":[[56,36]]}}}],["if(!\"pass\".equals(split[1])&&!stringutils.equals(site,\"5001",{"_index":2086,"t":{"597":{"position":[[3220,63]]}}}],["if(!\"pass\".equals(split[1])&&stringutils.equals(site,\"5001",{"_index":2085,"t":{"597":{"position":[[3109,62]]}}}],["if(!flag)return",{"_index":591,"t":{"190":{"position":[[255,15]]}}}],["if(!split[1].equals(\"pass",{"_index":2045,"t":{"597":{"position":[[1350,29]]}}}],["if(!stringutils.equals(\"zh",{"_index":968,"t":{"268":{"position":[[982,28]]}}}],["if(!stringutils.isempty(lang",{"_index":961,"t":{"268":{"position":[[739,31]]}}}],["if(!this.shopord",{"_index":1916,"t":{"567":{"position":[[602,20]]},"579":{"position":[[512,20]]}}}],["if(!visited[i",{"_index":353,"t":{"126":{"position":[[479,15]]}}}],["if(!visited[w",{"_index":365,"t":{"126":{"position":[[660,16]]},"128":{"position":[[231,15],[368,15]]}}}],["if(\"ng\".equals(ispass",{"_index":2132,"t":{"597":{"position":[[5263,23]]}}}],["if(a[0]>a[i])break",{"_index":658,"t":{"198":{"position":[[1138,19]]}}}],["if(a[i",{"_index":567,"t":{"186":{"position":[[435,7]]}}}],["if(a[i]<a[i",{"_index":540,"t":{"182":{"position":[[519,11]]}}}],["if(a[j",{"_index":589,"t":{"190":{"position":[[193,7]]}}}],["if(a[j]<a[min",{"_index":631,"t":{"196":{"position":[[364,15]]}}}],["if(a[mid",{"_index":555,"t":{"184":{"position":[[475,9]]}}}],["if(addjudg",{"_index":2279,"t":{"628":{"position":[[1015,13]]}}}],["if(b[i]<=b[j",{"_index":681,"t":{"201":{"position":[[546,14]]}}}],["if(collectionutil.isnotempty(sqlresult_s801",{"_index":2040,"t":{"597":{"position":[[971,46]]}}}],["if(i",{"_index":2031,"t":{"597":{"position":[[723,4]]}}}],["if(i!=min",{"_index":632,"t":{"196":{"position":[[391,10]]}}}],["if(i<len",{"_index":656,"t":{"198":{"position":[[1092,8]]}}}],["if(i==10",{"_index":2112,"t":{"597":{"position":[[4409,10]]}}}],["if(i==2",{"_index":2084,"t":{"597":{"position":[[3038,9]]}}}],["if(i==3",{"_index":2088,"t":{"597":{"position":[[3357,9]]}}}],["if(i==5",{"_index":2092,"t":{"597":{"position":[[3504,9]]}}}],["if(i==6",{"_index":2097,"t":{"597":{"position":[[3722,9]]}}}],["if(i==7",{"_index":2100,"t":{"597":{"position":[[3848,9]]}}}],["if(i==9",{"_index":2104,"t":{"597":{"position":[[4015,9]]}}}],["if(isempty(index))return",{"_index":262,"t":{"109":{"position":[[924,24],[1322,24]]}}}],["if(isempty(left))return",{"_index":270,"t":{"109":{"position":[[1196,23]]}}}],["if(isempty(right))return",{"_index":267,"t":{"109":{"position":[[1063,24]]}}}],["if(isempty(x",{"_index":258,"t":{"109":{"position":[[872,13],[1008,13],[1146,13]]}}}],["if(j",{"_index":152,"t":{"95":{"position":[[315,4]]},"105":{"position":[[431,4]]}}}],["if(j==0||s.ch[i",{"_index":217,"t":{"103":{"position":[[333,16]]}}}],["if(j>t.len",{"_index":218,"t":{"103":{"position":[[396,11]]}}}],["if(k==0",{"_index":208,"t":{"103":{"position":[[122,7]]}}}],["if(langstrs.length",{"_index":964,"t":{"268":{"position":[[808,18]]}}}],["if(len",{"_index":2280,"t":{"628":{"position":[[1535,6],[1644,6],[1998,6],[2425,6]]}}}],["if(list.length",{"_index":1986,"t":{"579":{"position":[[1252,14]]}}}],["if(list[0].id",{"_index":2284,"t":{"628":{"position":[[1729,13]]}}}],["if(list[i].id",{"_index":2291,"t":{"628":{"position":[[2154,13]]}}}],["if(low",{"_index":614,"t":{"192":{"position":[[771,6]]}}}],["if(low<high",{"_index":689,"t":{"201":{"position":[[776,13]]}}}],["if(mid",{"_index":45,"t":{"34":{"position":[[213,6],[239,6]]}}}],["if(pagenum",{"_index":2074,"t":{"597":{"position":[[2473,10]]}}}],["if(pagenum==0",{"_index":2017,"t":{"597":{"position":[[292,15]]}}}],["if(process!=nul",{"_index":1736,"t":{"532":{"position":[[548,18]]}}}],["if(read",{"_index":2170,"t":{"597":{"position":[[7270,9]]}}}],["if(res.cod",{"_index":1925,"t":{"567":{"position":[[808,11]]},"579":{"position":[[718,11]]},"628":{"position":[[584,11]]}}}],["if(s.ch[i",{"_index":150,"t":{"95":{"position":[[227,10]]}}}],["if(selection.length",{"_index":2221,"t":{"622":{"position":[[565,19]]}}}],["if(split.length",{"_index":2117,"t":{"597":{"position":[[4603,15]]}}}],["if(stringutils.equals(facetype,\"al",{"_index":2121,"t":{"597":{"position":[[4844,39]]}}}],["if(stringutils.equals(facetype,\"b",{"_index":2067,"t":{"597":{"position":[[2243,37]]}}}],["if(stringutils.equals(facetype,\"bot",{"_index":2120,"t":{"597":{"position":[[4786,39]]}}}],["if(stringutils.equals(facetype,\"t",{"_index":2065,"t":{"597":{"position":[[2165,37]]}}}],["if(stringutils.equals(facetype,\"top",{"_index":2119,"t":{"597":{"position":[[4728,39]]}}}],["if(stringutils.equals(site,\"s801",{"_index":2015,"t":{"597":{"position":[[238,36]]}}}],["if(stringutils.isblank(planloguuid)&&stringutils.equals(site,\"5001\")&&!stringutils.equals(testtype,\"ipqc",{"_index":2149,"t":{"597":{"position":[[6112,108]]}}}],["if(stringutils.isblank(valu",{"_index":2309,"t":{"634":{"position":[[444,31]]}}}],["if(stringutils.isnotblank(exportid",{"_index":1766,"t":{"536":{"position":[[38,38]]}}}],["if(stringutils.isnotblank(planloguuid)&&!stringutils.equals(testtype,\"ipqc",{"_index":2134,"t":{"597":{"position":[[5382,78]]}}}],["if(t.ch[j",{"_index":225,"t":{"105":{"position":[[475,10]]}}}],["if(tempstr",{"_index":2043,"t":{"597":{"position":[[1272,10],[3008,10]]}}}],["if(this.sfc",{"_index":2262,"t":{"628":{"position":[[332,11]]}}}],["if(this.sfcdata.length",{"_index":2257,"t":{"628":{"position":[[169,22]]}}}],["if(this.tabledata.length===0",{"_index":2267,"t":{"628":{"position":[[663,30]]}}}],["if(this.tabledata[i].keycod",{"_index":2277,"t":{"628":{"position":[[938,28]]}}}],["if(us",{"_index":2300,"t":{"634":{"position":[[175,7]]}}}],["if(value.equals(\"tru",{"_index":2314,"t":{"634":{"position":[[641,25]]}}}],["if(x>=len",{"_index":253,"t":{"109":{"position":[[781,9]]}}}],["imag",{"_index":235,"t":{"109":{"position":[[275,6],[1904,6],[2096,6],[2416,6],[3412,6]]},"256":{"position":[[91,6]]}}}],["image.png](https://github.com/rachel1771/picx",{"_index":234,"t":{"109":{"position":[[227,47],[1856,47],[2048,47],[2368,47],[3364,47]]}}}],["imagepath",{"_index":1113,"t":{"289":{"position":[[145,12]]},"319":{"position":[[479,12]]},"321":{"position":[[429,12]]},"330":{"position":[[354,12]]},"336":{"position":[[602,12]]},"338":{"position":[[487,12]]},"340":{"position":[[590,12]]},"390":{"position":[[464,12]]},"392":{"position":[[434,12]]},"398":{"position":[[436,12]]}}}],["implement",{"_index":939,"t":{"268":{"position":[[69,10]]}}}],["import",{"_index":1013,"t":{"272":{"position":[[33,6],[55,6],[86,6],[114,6],[162,6],[210,6],[262,6]]},"280":{"position":[[0,6],[22,6],[67,6],[95,6],[141,6]]},"285":{"position":[[0,6]]},"575":{"position":[[24,6],[62,6]]}}}],["includ",{"_index":807,"t":{"242":{"position":[[507,7]]},"244":{"position":[[718,9]]}}}],["incr",{"_index":1459,"t":{"460":{"position":[[12,4]]}}}],["incrbi",{"_index":1460,"t":{"460":{"position":[[24,6]]}}}],["increment",{"_index":1461,"t":{"460":{"position":[[35,17]]}}}],["index",{"_index":260,"t":{"109":{"position":[[911,5],[964,6],[1314,7]]},"242":{"position":[[354,5]]},"579":{"position":[[1426,5]]},"622":{"position":[[1916,5]]},"628":{"position":[[1854,5],[2279,5]]}}}],["index(str",{"_index":142,"t":{"95":{"position":[[151,12]]}}}],["index.html",{"_index":796,"t":{"242":{"position":[[360,11]]}}}],["index_kmp(str",{"_index":213,"t":{"103":{"position":[[248,16]]}}}],["inductive_d",{"_index":1664,"t":{"529":{"position":[[204,14],[222,15],[796,15],[1255,15]]}}}],["inductive_date,start_tim",{"_index":1725,"t":{"529":{"position":[[1678,25]]}}}],["info",{"_index":7,"t":{"10":{"position":[[156,4]]},"15":{"position":[[0,4]]},"186":{"position":[[138,4]]}}}],["init",{"_index":753,"t":{"237":{"position":[[25,4]]},"270":{"position":[[283,6]]}}}],["init(treenod",{"_index":246,"t":{"109":{"position":[[669,13]]}}}],["initlineresult",{"_index":1915,"t":{"567":{"position":[[584,17]]},"579":{"position":[[494,17]]}}}],["initqueue(q",{"_index":351,"t":{"126":{"position":[[438,13]]}}}],["initsinglemov",{"_index":2256,"t":{"628":{"position":[[127,17]]}}}],["inner",{"_index":1892,"t":{"564":{"position":[[165,5]]}}}],["insert",{"_index":497,"t":{"170":{"position":[[648,6]]},"516":{"position":[[62,7]]}}}],["insertsort(int",{"_index":536,"t":{"182":{"position":[[456,14]]}}}],["insertsortplus(int",{"_index":552,"t":{"184":{"position":[[318,18]]}}}],["insertsql",{"_index":1587,"t":{"516":{"position":[[50,9]]}}}],["instal",{"_index":838,"t":{"244":{"position":[[268,7],[328,7],[367,7]]},"446":{"position":[[148,9]]}}}],["int",{"_index":34,"t":{"34":{"position":[[91,3],[127,3],[145,3]]},"95":{"position":[[147,3],[177,3]]},"103":{"position":[[76,3],[244,3],[289,3]]},"105":{"position":[[380,3]]},"109":{"position":[[630,3],[640,3],[845,3],[982,3],[1121,3],[2545,3],[2555,3],[2706,3],[2885,3]]},"121":{"position":[[633,3],[676,3]]},"123":{"position":[[119,3],[133,3],[300,3]]},"182":{"position":[[485,3]]},"184":{"position":[[351,3]]},"186":{"position":[[245,3]]},"190":{"position":[[53,3]]},"192":{"position":[[473,3],[514,3],[787,3]]},"196":{"position":[[325,3]]},"201":{"position":[[283,3],[292,4],[422,3],[790,3]]},"516":{"position":[[337,3],[839,3]]},"532":{"position":[[128,4],[335,4]]},"597":{"position":[[3542,3],[6007,3]]}}}],["integer.parseint((string)productplan.get(\"tl",{"_index":2136,"t":{"597":{"position":[[5534,48]]}}}],["integer、varchar、等等）not",{"_index":453,"t":{"168":{"position":[[22,27]]}}}],["interfac",{"_index":1528,"t":{"501":{"position":[[226,9]]}}}],["internation",{"_index":873,"t":{"259":{"position":[[0,143]]}}}],["introduct",{"_index":1705,"t":{"529":{"position":[[1205,13]]}}}],["intset",{"_index":1473,"t":{"470":{"position":[[67,6]]}}}],["in配合select",{"_index":502,"t":{"170":{"position":[[739,22]]}}}],["iouiouiou的计算公式为：iou=∣a∩b∣a∪bi",{"_index":719,"t":{"213":{"position":[[0,31]]}}}],["iou、dice、recall、acciou、dice、recall、acciou、dice、recall、acc。其中a代表真实标注区域，b代表模型预测区域a代表真实标注区域，b代表模型预测区域a代表真实标注区域，b",{"_index":718,"t":{"211":{"position":[[0,140]]}}}],["ip",{"_index":805,"t":{"242":{"position":[[486,2]]}}}],["is_stud",{"_index":511,"t":{"172":{"position":[[172,10]]}}}],["isempti",{"_index":244,"t":{"109":{"position":[[644,8]]}}}],["isempty(t[],int",{"_index":252,"t":{"109":{"position":[[761,15]]}}}],["ispass",{"_index":2013,"t":{"597":{"position":[[205,6],[1380,6],[1448,6],[3284,6]]}}}],["it.descript",{"_index":1802,"t":{"555":{"position":[[152,14]]}}}],["it.item_bo",{"_index":1816,"t":{"555":{"position":[[638,10]]}}}],["it.local",{"_index":1818,"t":{"555":{"position":[[673,9]]}}}],["item",{"_index":1046,"t":{"276":{"position":[[45,14]]},"303":{"position":[[420,8]]},"307":{"position":[[504,8]]},"315":{"position":[[278,8]]},"358":{"position":[[421,8]]},"360":{"position":[[378,8],[1080,8]]},"368":{"position":[[211,8]]},"370":{"position":[[144,8]]},"529":{"position":[[1012,5],[1181,5]]},"534":{"position":[[273,5]]},"555":{"position":[[90,5]]},"571":{"position":[[320,5]]},"579":{"position":[[460,5],[473,4]]},"597":{"position":[[6433,4]]},"622":{"position":[[1422,4],[1658,5]]}}}],["item._x_row_key",{"_index":1991,"t":{"579":{"position":[[1467,15]]},"628":{"position":[[1895,15],[2320,15]]}}}],["item.valu",{"_index":1935,"t":{"567":{"position":[[1113,11]]}}}],["item:item",{"_index":2246,"t":{"622":{"position":[[1791,10]]}}}],["item_t",{"_index":1815,"t":{"555":{"position":[[625,6]]}}}],["itembo",{"_index":2162,"t":{"597":{"position":[[6865,6]]}}}],["itemord",{"_index":1172,"t":{"303":{"position":[[578,12]]},"305":{"position":[[227,12]]},"307":{"position":[[776,12],[1018,12]]},"309":{"position":[[210,12]]},"315":{"position":[[474,12],[616,12]]},"346":{"position":[[180,12]]},"358":{"position":[[585,12]]},"360":{"position":[[647,12],[1349,12]]},"368":{"position":[[351,12]]},"370":{"position":[[304,12]]}}}],["itemuuid",{"_index":1302,"t":{"360":{"position":[[467,11],[1169,11]]}}}],["i做前段指针，j",{"_index":680,"t":{"201":{"position":[[530,15]]}}}],["i前移（i",{"_index":628,"t":{"196":{"position":[[240,19]]}}}],["i向前走到4",{"_index":576,"t":{"186":{"position":[[669,20]]}}}],["i和j",{"_index":141,"t":{"95":{"position":[[49,68]]}}}],["i指到哪里就将i的元素插入到有序序列中合适的位置，同时后移位置，这里的a[i]在序列中的排序是位置的，是在一次次的插入过程中，移动到它应在的位置。简单选择是每次从待排序的序列中找到最小的，和当前i",{"_index":623,"t":{"196":{"position":[[0,158]]}}}],["i次比较，则比较次数为∑i=1n−1(n−i)=n(n−1)2\\sum_{i=1}^{n",{"_index":594,"t":{"190":{"position":[[354,44]]}}}],["i，前面i",{"_index":532,"t":{"182":{"position":[[34,25]]}}}],["j",{"_index":148,"t":{"95":{"position":[[214,1],[269,4],[290,1],[304,1]]},"99":{"position":[[466,93]]},"101":{"position":[[352,35],[545,53],[650,1],[913,1],[936,1],[974,1],[1820,1],[1900,1],[1942,2]]},"103":{"position":[[80,1],[368,4],[381,1]]},"105":{"position":[[384,1],[465,4]]},"182":{"position":[[577,3]]},"190":{"position":[[175,1]]},"192":{"position":[[378,12]]},"196":{"position":[[346,1],[386,2]]},"203":{"position":[[532,1]]}}}],["j<=high;k",{"_index":679,"t":{"201":{"position":[[516,13]]}}}],["j<t.len",{"_index":216,"t":{"103":{"position":[[323,9]]}}}],["java",{"_index":1650,"t":{"526":{"position":[[904,7]]},"592":{"position":[[39,33]]}}}],["jdbc",{"_index":1586,"t":{"516":{"position":[[0,42],[934,24]]}}}],["jdbctemplate.batchupdate(insertsql",{"_index":1620,"t":{"516":{"position":[[893,35]]}}}],["jekyl",{"_index":750,"t":{"233":{"position":[[186,21]]}}}],["jenkin",{"_index":1872,"t":{"560":{"position":[[46,14],[61,21]]}}}],["job",{"_index":827,"t":{"244":{"position":[[108,5]]}}}],["join",{"_index":486,"t":{"170":{"position":[[439,4],[529,4]]},"529":{"position":[[1055,4],[1597,4]]},"549":{"position":[[63,7]]},"555":{"position":[[571,4],[620,4],[690,4],[750,4],[825,4],[2532,4],[2598,4]]},"564":{"position":[[171,4]]},"597":{"position":[[6478,4]]}}}],["join后面的on接条件，可以加and",{"_index":1793,"t":{"549":{"position":[[43,19]]}}}],["join和right",{"_index":1792,"t":{"549":{"position":[[32,10]]}}}],["jpa",{"_index":1525,"t":{"501":{"position":[[158,3],[470,4]]}}}],["jparepository<test,str",{"_index":1531,"t":{"501":{"position":[[252,26]]}}}],["jpa是java跟数据库交互的一种工具,不同于mybatis需要写xml文件和sql来交互,jpa可以根据一些命名规范来直接完成交互,简单的增删查改可以不用写sql",{"_index":1520,"t":{"501":{"position":[[0,83]]}}}],["jpg",{"_index":1359,"t":{"396":{"position":[[66,9],[84,9],[185,7]]}}}],["js/common/lang",{"_index":1091,"t":{"285":{"position":[[207,18]]}}}],["json",{"_index":1562,"t":{"508":{"position":[[182,30],[255,9],[336,14]]},"510":{"position":[[45,6]]},"534":{"position":[[779,10]]},"567":{"position":[[1163,20]]}}}],["json或者返回json的时候，需要自己自定义类,以保存传入或者返回的对象,使用requestbodi",{"_index":1564,"t":{"508":{"position":[[265,58]]}}}],["json格式的传参即可，设计cleanbarlogvo",{"_index":1938,"t":{"567":{"position":[[1184,35]]}}}],["json需要手动更改，后端设计实体接收json",{"_index":1944,"t":{"571":{"position":[[15,52]]}}}],["js部分：**js部分就是写处理逻辑的，使用data来定义数据，method",{"_index":1976,"t":{"579":{"position":[[320,57]]}}}],["j时候，我们要计算next[j]，记住next[j]跟j这个位置是什么没有关系，只跟前j",{"_index":187,"t":{"101":{"position":[[1294,52]]}}}],["j的位置发现不匹配时候，我们肉眼观察到指针应该往k这个地方移动，为什么呢，因为显然前后的ab相等呀，而主串中指针扫过的位置，必有ab匹配，那么我们可以直接跳过前部的ab",{"_index":177,"t":{"101":{"position":[[690,106]]}}}],["j要移动的下一个位置k。存在着这样的性质：最前面的k个字符和j之前的最后k",{"_index":162,"t":{"99":{"position":[[293,80]]}}}],["j要进行移动，那么j如何移动呢？根据模式串的特性，我们分析，这个移动跟主串无关，只跟模式串有关，我们需要一个next数组，来装载模式串不同位置上，对于出现不匹配时的指针下一步移动处理。next数组的重要意义就是，当出现不匹配时，模式串指针根据所在位置，进行下一步移动处理。下面介绍几种求解next",{"_index":167,"t":{"101":{"position":[[0,192]]}}}],["k",{"_index":176,"t":{"101":{"position":[[631,1],[643,1],[956,1],[967,1],[989,1],[1012,1],[1802,1],[1813,1],[1836,2],[1875,1],[1893,1],[1926,2],[1935,1]]},"103":{"position":[[172,4],[211,1]]},"105":{"position":[[470,4],[511,2],[587,1]]},"198":{"position":[[1203,1]]}}}],["k*2",{"_index":655,"t":{"198":{"position":[[1064,27]]}}}],["k*2;i<len;i*=2",{"_index":654,"t":{"198":{"position":[[1047,16]]}}}],["k,int",{"_index":652,"t":{"198":{"position":[[985,5]]}}}],["k...j",{"_index":166,"t":{"99":{"position":[[419,5]]}}}],["k=next[k]k=next[k]k=next[k",{"_index":195,"t":{"101":{"position":[[2147,52]]}}}],["k^2di​=02,12,−12,22,−22.........k2,−k2，其中k≤m/2k",{"_index":64,"t":{"46":{"position":[[388,47]]}}}],["k_j^{i",{"_index":703,"t":{"203":{"position":[[509,7]]}}}],["kb",{"_index":1498,"t":{"484":{"position":[[116,2]]}}}],["key",{"_index":37,"t":{"34":{"position":[[121,5],[248,5]]},"46":{"position":[[118,3]]},"460":{"position":[[17,6],[31,3],[58,8],[74,3]]},"526":{"position":[[938,4],[1175,4],[1189,3]]},"532":{"position":[[176,3],[386,3]]},"634":{"position":[[321,3]]}}}],["key(key1",{"_index":457,"t":{"168":{"position":[[132,9]]}}}],["key(key1,key2",{"_index":455,"t":{"168":{"position":[[99,19]]}}}],["key)reutrn",{"_index":46,"t":{"34":{"position":[[223,10]]}}}],["keycod",{"_index":1055,"t":{"276":{"position":[[242,16]]}}}],["keydown.native.ent",{"_index":1975,"t":{"579":{"position":[[284,35]]}}}],["keydown.native.enter=\"entercod",{"_index":1972,"t":{"579":{"position":[[209,34]]}}}],["keyexpirationeventmessagelistener的工具类，利用redi",{"_index":1649,"t":{"526":{"position":[[842,61]]}}}],["key。查找的时候先找最值key",{"_index":51,"t":{"39":{"position":[[0,83]]}}}],["key和中间值进行比较，如果小于则查找左半边，大于则查找右半边。当不满足low<high",{"_index":33,"t":{"34":{"position":[[0,83]]}}}],["key节点，计数一次，然后去块间顺序查找，依次+1",{"_index":52,"t":{"41":{"position":[[5,31]]}}}],["kill",{"_index":866,"t":{"256":{"position":[[141,4]]}}}],["kmp",{"_index":158,"t":{"99":{"position":[[0,54],[211,17]]},"103":{"position":[[237,6]]}}}],["kv模式不变，但是v是一个键值对，map<string,map<object,object",{"_index":1472,"t":{"468":{"position":[[0,47]]}}}],["k能够完全函数依赖整个关系集r，k的闭包完整退出r",{"_index":525,"t":{"175":{"position":[[203,29]]}}}],["l",{"_index":1891,"t":{"564":{"position":[[163,1]]}}}],["l.barcod",{"_index":1893,"t":{"564":{"position":[[200,9]]}}}],["l.check_result",{"_index":1886,"t":{"564":{"position":[[83,15]]}}}],["l.check_statu",{"_index":1885,"t":{"564":{"position":[[67,15]]}}}],["l.clean_peopl",{"_index":1887,"t":{"564":{"position":[[99,15]]}}}],["l.clean_result",{"_index":1884,"t":{"564":{"position":[[51,15]]}}}],["l.clean_tim",{"_index":1883,"t":{"564":{"position":[[37,13]]}}}],["l.item",{"_index":1881,"t":{"564":{"position":[[21,7]]}}}],["l.line",{"_index":1882,"t":{"564":{"position":[[29,7]]}}}],["l.shop_ord",{"_index":1880,"t":{"564":{"position":[[7,13]]}}}],["l.shop_order,l.item,l.line,l.clean_time,l.clean_result,l.check_status,l.check_result,l.clean_peopl",{"_index":1895,"t":{"564":{"position":[[231,99]]}}}],["l[1.......i",{"_index":529,"t":{"182":{"position":[[0,11]]}}}],["l[1....n]中取一个枢轴值pivot（一般第一个），通过一次排序使得l分为两块：l[1....k",{"_index":598,"t":{"192":{"position":[[7,68]]}}}],["l[i",{"_index":530,"t":{"182":{"position":[[15,4],[283,14],[298,12]]}}}],["l[i+1......n",{"_index":531,"t":{"182":{"position":[[20,13]]}}}],["l[i]，然后将子序列中大于l[i",{"_index":535,"t":{"182":{"position":[[233,49]]}}}],["label",{"_index":1109,"t":{"285":{"position":[[841,6]]},"615":{"position":[[118,12]]}}}],["label=\"$t(languagepath+'cod",{"_index":1969,"t":{"579":{"position":[[127,32]]}}}],["label=\"$t(languagepath+'lin",{"_index":1900,"t":{"567":{"position":[[176,32]]}}}],["lableprinttitl",{"_index":1045,"t":{"276":{"position":[[16,18]]}}}],["lang",{"_index":945,"t":{"268":{"position":[[142,7],[296,4],[370,4],[627,4]]},"280":{"position":[[472,6],[502,5],[553,5]]}}}],["lang.split",{"_index":963,"t":{"268":{"position":[[791,16]]}}}],["lang.split(\"_",{"_index":954,"t":{"268":{"position":[[498,16]]}}}],["langstr",{"_index":962,"t":{"268":{"position":[[780,8]]}}}],["langstrs[0].split(\",\")[0",{"_index":966,"t":{"268":{"position":[[866,26]]}}}],["languag",{"_index":926,"t":{"265":{"position":[[1255,10],[1753,27]]},"268":{"position":[[210,10],[705,9]]}}}],["language:localelang",{"_index":1094,"t":{"285":{"position":[[268,20]]}}}],["languagepath:'solderpast",{"_index":1058,"t":{"278":{"position":[[0,28]]}}}],["language，取到区域信息例如：en_u",{"_index":976,"t":{"268":{"position":[[1276,39]]}}}],["lang，再判断accept",{"_index":975,"t":{"268":{"position":[[1258,17]]}}}],["last_delivered_id",{"_index":1508,"t":{"488":{"position":[[218,17],[250,35],[286,17]]}}}],["lastactivetim",{"_index":1236,"t":{"319":{"position":[[320,17]]},"321":{"position":[[270,17]]},"330":{"position":[[413,17]]},"336":{"position":[[425,17]]},"338":{"position":[[310,17]]},"340":{"position":[[677,17]]},"390":{"position":[[320,17]]},"392":{"position":[[273,17]]},"398":{"position":[[275,17]]}}}],["latest",{"_index":829,"t":{"244":{"position":[[138,6]]}}}],["layer.close(index",{"_index":2212,"t":{"622":{"position":[[265,19],[878,19]]}}}],["layer.msg($.i18n.prop(\"hint.selectonlyone\"),{icon:7",{"_index":2222,"t":{"622":{"position":[[593,54]]}}}],["layer.open",{"_index":2206,"t":{"622":{"position":[[78,17],[96,12],[694,12]]}}}],["layero",{"_index":2211,"t":{"622":{"position":[[256,8],[869,8]]}}}],["layui.form.val('#searchform",{"_index":1764,"t":{"534":{"position":[[1067,32]]}}}],["layui，初始化grid",{"_index":1762,"t":{"534":{"position":[[989,18]]}}}],["lbs应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的xxx",{"_index":1482,"t":{"480":{"position":[[0,85]]}}}],["le",{"_index":9,"t":{"10":{"position":[[238,3]]},"46":{"position":[[436,3]]},"54":{"position":[[85,3],[147,3],[153,3]]},"56":{"position":[[146,3],[152,3],[197,3],[203,3]]},"109":{"position":[[1626,3],[1654,3]]},"198":{"position":[[568,3],[596,3]]},"203":{"position":[[505,3],[517,3],[528,3],[534,3],[542,3],[548,3]]}}}],["left",{"_index":269,"t":{"109":{"position":[[1185,4],[1235,5]]},"170":{"position":[[407,31],[524,4]]},"549":{"position":[[27,4]]},"597":{"position":[[6472,5]]}}}],["leftchild,nexts",{"_index":304,"t":{"109":{"position":[[2908,22]]}}}],["len",{"_index":38,"t":{"34":{"position":[[131,3],[164,3]]},"109":{"position":[[691,5]]},"182":{"position":[[479,5]]},"184":{"position":[[345,5]]},"186":{"position":[[239,5]]},"190":{"position":[[114,5]]},"196":{"position":[[293,5]]},"198":{"position":[[873,5],[991,5],[1346,5]]},"628":{"position":[[1506,3],[2012,3]]}}}],["len(a",{"_index":39,"t":{"34":{"position":[[137,7]]}}}],["len/2",{"_index":649,"t":{"198":{"position":[[906,27]]}}}],["len/2;gap>=1;gap",{"_index":563,"t":{"186":{"position":[[284,16]]}}}],["len/2;i>0;i",{"_index":648,"t":{"198":{"position":[[891,14]]}}}],["len;i",{"_index":539,"t":{"182":{"position":[[509,9]]},"184":{"position":[[388,9]]}}}],["len;i>n;i",{"_index":661,"t":{"198":{"position":[[1385,9]]}}}],["length",{"_index":2093,"t":{"597":{"position":[[3546,6]]}}}],["len，那么第一棵子树的根节点下表为len/2",{"_index":646,"t":{"198":{"position":[[746,35]]}}}],["level",{"_index":1160,"t":{"303":{"position":[[111,8]]},"307":{"position":[[133,8]]},"346":{"position":[[136,8]]},"348":{"position":[[47,8],[205,8]]},"350":{"position":[[131,8]]},"352":{"position":[[78,8]]},"356":{"position":[[52,8]]},"358":{"position":[[110,8]]},"360":{"position":[[57,8],[766,8]]},"364":{"position":[[72,8]]},"366":{"position":[[72,8]]}}}],["levelnam",{"_index":1292,"t":{"346":{"position":[[153,12]]},"348":{"position":[[222,12]]},"350":{"position":[[148,12]]},"352":{"position":[[95,12]]}}}],["lftp",{"_index":842,"t":{"244":{"position":[[339,4]]}}}],["like'%ict",{"_index":1843,"t":{"555":{"position":[[1591,11],[1732,11]]}}}],["limit",{"_index":1760,"t":{"534":{"position":[[941,5]]},"571":{"position":[[567,5]]}}}],["limitdatetim",{"_index":1163,"t":{"303":{"position":[[220,16]]},"307":{"position":[[244,16]]},"358":{"position":[[220,16]]},"360":{"position":[[168,16],[877,16]]}}}],["limitendtim",{"_index":1124,"t":{"295":{"position":[[154,15]]}}}],["limitstarttim",{"_index":1123,"t":{"295":{"position":[[121,17]]}}}],["line",{"_index":1663,"t":{"529":{"position":[[172,5],[742,5],[1137,5]]},"534":{"position":[[214,5]]},"555":{"position":[[313,5]]},"567":{"position":[[549,8],[834,4]]},"571":{"position":[[341,5]]},"579":{"position":[[744,4]]}}}],["line,shop_order,process,start_time,end_tim",{"_index":1679,"t":{"529":{"position":[[571,43]]}}}],["line,shop_order,start_time,end_time,inductive_d",{"_index":1676,"t":{"529":{"position":[[473,51]]}}}],["lineresult",{"_index":1913,"t":{"567":{"position":[[534,14]]}}}],["link",{"_index":1904,"t":{"567":{"position":[[287,4]]}}}],["linux启动内核后就会挂在root",{"_index":859,"t":{"250":{"position":[[111,59]]}}}],["list",{"_index":1146,"t":{"301":{"position":[[201,7]]},"311":{"position":[[162,7]]},"313":{"position":[[158,7]]},"323":{"position":[[151,7]]},"336":{"position":[[190,7]]},"348":{"position":[[162,7]]},"356":{"position":[[203,7]]},"364":{"position":[[211,7]]},"366":{"position":[[201,7]]},"374":{"position":[[149,7]]},"382":{"position":[[162,7]]},"386":{"position":[[164,7]]},"388":{"position":[[175,7]]},"488":{"position":[[476,28]]},"579":{"position":[[1216,4]]},"597":{"position":[[4134,4],[4181,4]]},"628":{"position":[[1466,4]]}}}],["list.length",{"_index":1988,"t":{"579":{"position":[[1370,12]]},"628":{"position":[[1512,12]]}}}],["list.map(item",{"_index":1978,"t":{"579":{"position":[[426,13]]}}}],["list.remov",{"_index":2108,"t":{"597":{"position":[[4227,21],[4249,21],[4271,20]]}}}],["list<checkreport",{"_index":2141,"t":{"597":{"position":[[5805,17]]}}}],["list<cleanbarlogdto",{"_index":1940,"t":{"567":{"position":[[1249,20]]}}}],["list<local",{"_index":929,"t":{"265":{"position":[[1352,12]]}}}],["list<map<str",{"_index":2037,"t":{"597":{"position":[[873,16],[6309,16]]}}}],["list<map<string,object",{"_index":1544,"t":{"503":{"position":[[156,24]]}}}],["list<str",{"_index":1533,"t":{"501":{"position":[[289,12],[415,12]]},"534":{"position":[[755,12]]},"597":{"position":[[4119,14]]}}}],["list[0]._x_row_key",{"_index":2286,"t":{"628":{"position":[[1915,20]]}}}],["list[i]._x_row_key",{"_index":1992,"t":{"579":{"position":[[1487,20]]},"628":{"position":[[2340,20]]}}}],["listen",{"_index":792,"t":{"242":{"position":[[224,6],[251,6]]}}}],["list或者str",{"_index":2254,"t":{"622":{"position":[[2023,29]]}}}],["list（列表），redi",{"_index":1465,"t":{"462":{"position":[[0,82]]}}}],["ll",{"_index":2,"t":{"5":{"position":[[22,5]]},"7":{"position":[[94,5]]},"12":{"position":[[183,21]]}}}],["local",{"_index":850,"t":{"244":{"position":[[566,5]]},"265":{"position":[[803,6],[810,6],[1101,6],[1152,6],[1308,6],[1492,6]]},"268":{"position":[[0,32],[238,6],[417,6],[424,6],[538,6],[587,6],[1023,6],[1063,7],[1163,6],[1170,7]]},"272":{"position":[[93,8],[361,7],[378,24],[428,7]]},"280":{"position":[[74,8],[234,7],[251,24],[301,7]]}}}],["locale(split[0",{"_index":956,"t":{"268":{"position":[[551,16],[600,17]]}}}],["locale.china",{"_index":951,"t":{"268":{"position":[[433,13],[1235,22]]}}}],["locale.english",{"_index":970,"t":{"268":{"position":[[1032,15]]}}}],["locale.use(lang",{"_index":1069,"t":{"280":{"position":[[520,16],[571,16]]}}}],["localecontextholder.getlocal",{"_index":998,"t":{"270":{"position":[[807,33]]}}}],["localelang",{"_index":1085,"t":{"285":{"position":[[67,10]]}}}],["localeresolv",{"_index":910,"t":{"265":{"position":[[254,18],[282,14],[297,16],[752,14],[973,15]]},"268":{"position":[[80,14],[1390,14],[1405,16]]}}}],["localeresolver.setdefaultlocale(local",{"_index":920,"t":{"265":{"position":[[925,40]]}}}],["localeresolver基类，重写resolvelocale方法，setlocal",{"_index":974,"t":{"268":{"position":[[1183,51]]}}}],["localestorage.setitem('lang',v",{"_index":1061,"t":{"278":{"position":[[124,34]]}}}],["locale是java中用于表示区域设置的类，它由语言代码、国家/地区代码和变体代码组成。locale类提供了一系列静态方法来获取当前系统的locale对象，还可以通过构造函数来创建新的locale对象。网页请求中一般都会附带上locale信息，所以springboot会自动识别local",{"_index":907,"t":{"265":{"position":[[0,165]]}}}],["localstorage.getitem(\"lang",{"_index":1031,"t":{"272":{"position":[[436,28]]},"280":{"position":[[309,28]]}}}],["localstorage.setitem('lang',v",{"_index":1072,"t":{"280":{"position":[[685,32]]}}}],["locat",{"_index":799,"t":{"242":{"position":[[395,8]]}}}],["lock",{"_index":1644,"t":{"526":{"position":[[654,4]]}}}],["lock.lock",{"_index":1645,"t":{"526":{"position":[[682,12]]}}}],["lock.unock",{"_index":1646,"t":{"526":{"position":[[739,13]]}}}],["log",{"_index":982,"t":{"270":{"position":[[111,3]]}}}],["log.error",{"_index":1001,"t":{"270":{"position":[[865,20]]}}}],["log_2(n+1)向上取整，或者是log_2(n)向上取整+1",{"_index":289,"t":{"109":{"position":[[1697,34]]}}}],["log_format",{"_index":812,"t":{"242":{"position":[[577,10]]}}}],["logger",{"_index":981,"t":{"270":{"position":[[104,6]]}}}],["loggerfactory.getlogger(i18nutil.class",{"_index":983,"t":{"270":{"position":[[117,40]]}}}],["low",{"_index":40,"t":{"34":{"position":[[149,3],[197,4],[278,3]]},"184":{"position":[[411,3],[457,4],[493,3]]},"192":{"position":[[305,14],[370,7],[657,6],[718,4]]}}}],["low+high)/2",{"_index":690,"t":{"201":{"position":[[800,13]]}}}],["low,int",{"_index":606,"t":{"192":{"position":[[499,7],[756,7]]},"201":{"position":[[357,7],[761,7]]}}}],["low,j",{"_index":676,"t":{"201":{"position":[[486,5]]}}}],["low;k<=high;k",{"_index":674,"t":{"201":{"position":[[441,16]]}}}],["low位置的元素拿走，填high",{"_index":604,"t":{"192":{"position":[[417,17]]}}}],["low向后移动，直到遇到第一个比pivot",{"_index":603,"t":{"192":{"position":[[391,25]]}}}],["low和high，分别指向头和尾，一开始low=0，也就是pivot的位置，先假设给这里挖了。那么需要填坑，所以第一步就是high先向前移动去找元素填坑。我理解为low和j",{"_index":600,"t":{"192":{"position":[[162,142]]}}}],["lr",{"_index":4,"t":{"5":{"position":[[34,7]]},"7":{"position":[[106,7]]},"12":{"position":[[227,29]]}}}],["ls",{"_index":864,"t":{"256":{"position":[[98,2],[208,2]]}}}],["m",{"_index":22,"t":{"24":{"position":[[261,30]]},"237":{"position":[[83,7]]},"239":{"position":[[232,1]]},"529":{"position":[[1622,1]]},"555":{"position":[[1273,1],[2603,1]]},"564":{"position":[[195,1]]}}}],["m*r^en=(−1)s∗m∗r",{"_index":122,"t":{"87":{"position":[[28,17]]}}}],["m+1",{"_index":311,"t":{"109":{"position":[[3659,3]]}}}],["m.barcod",{"_index":1894,"t":{"564":{"position":[[212,9]]}}}],["m.end_tim",{"_index":1865,"t":{"555":{"position":[[2653,10]]}}}],["m.f_all_count)*100",{"_index":1860,"t":{"555":{"position":[[2380,20]]}}}],["m.introduct",{"_index":1704,"t":{"529":{"position":[[1187,14]]}}}],["m.item",{"_index":1723,"t":{"529":{"position":[[1636,6]]}}}],["m.p_all_count)*100",{"_index":1797,"t":{"553":{"position":[[61,20]]},"555":{"position":[[2462,20]]}}}],["m.process",{"_index":1724,"t":{"529":{"position":[[1659,9]]}}}],["m.stand_peopl",{"_index":1711,"t":{"529":{"position":[[1347,14]]}}}],["m.stand_product",{"_index":1713,"t":{"529":{"position":[[1379,15],[1454,16]]}}}],["m.stand_product)*100",{"_index":1718,"t":{"529":{"position":[[1510,22]]}}}],["m.start_tim",{"_index":1864,"t":{"555":{"position":[[2623,12]]}}}],["m/2",{"_index":17,"t":{"22":{"position":[[0,26]]},"24":{"position":[[0,26],[115,29]]},"27":{"position":[[29,37]]}}}],["m/2]（向上取整）棵子树，即至少有[m/2",{"_index":14,"t":{"15":{"position":[[45,45]]}}}],["m/2k≤m/2，散列表长度m必须是一个可以表示成4k+3",{"_index":65,"t":{"46":{"position":[[440,32]]}}}],["m1",{"_index":1409,"t":{"426":{"position":[[0,23]]}}}],["m1，则判断组件(刮刀编码)是否和产品a对应的产品主数据中的锡膏红胶品牌型号前半段是否匹配，如：220300060匹配220300060",{"_index":1411,"t":{"430":{"position":[[0,79]]}}}],["main",{"_index":759,"t":{"237":{"position":[[110,4]]},"242":{"position":[[588,4],[776,5]]},"244":{"position":[[101,4]]}}}],["mainid",{"_index":2223,"t":{"622":{"position":[[668,6]]}}}],["make",{"_index":1434,"t":{"446":{"position":[[143,4]]}}}],["malloc(sizeof(int)*(n+1",{"_index":668,"t":{"201":{"position":[[297,28]]}}}],["map",{"_index":1093,"t":{"285":{"position":[[252,3]]},"597":{"position":[[6836,3]]}}}],["map.get(\"item",{"_index":2163,"t":{"597":{"position":[[6874,16]]}}}],["map.get(\"xxx\")!=nul",{"_index":1420,"t":{"441":{"position":[[72,22]]}}}],["map<str",{"_index":2124,"t":{"597":{"position":[[5018,11],[5759,11],[6816,11]]}}}],["map<string,str",{"_index":1727,"t":{"532":{"position":[[75,18]]}}}],["master",{"_index":2175,"t":{"603":{"position":[[0,17]]}}}],["mathemat",{"_index":735,"t":{"223":{"position":[[4,11]]}}}],["max",{"_index":494,"t":{"170":{"position":[[582,6]]}}}],["max[ve(j",{"_index":419,"t":{"143":{"position":[[104,9]]}}}],["maxsize;i",{"_index":296,"t":{"109":{"position":[[2610,12]]}}}],["md笔记中嵌入的本地图片，托管到服务器中，当在浏览html页面的时候，链接到服务器中的图片地址，进行展示，笔记使用的是picx工具进行托管。感谢https://picx",{"_index":739,"t":{"225":{"position":[[0,91]]}}}],["merge(a,low,mid,high",{"_index":693,"t":{"201":{"position":[[861,22]]}}}],["merge(int",{"_index":669,"t":{"201":{"position":[[339,9]]}}}],["mergesort(a,low,mid",{"_index":691,"t":{"201":{"position":[[814,21]]}}}],["mergesort(a,mid+1,high",{"_index":692,"t":{"201":{"position":[[836,24]]}}}],["mergesort(int",{"_index":688,"t":{"201":{"position":[[739,13]]}}}],["merge到master中，切记不要将dev合并到mast",{"_index":2180,"t":{"603":{"position":[[138,45]]}}}],["mesext_first_check_report",{"_index":2034,"t":{"597":{"position":[[810,25],[5694,25]]}}}],["mesext_production_plan",{"_index":2153,"t":{"597":{"position":[[6443,22]]}}}],["mesext_xld_barcod",{"_index":1588,"t":{"516":{"position":[[75,18]]},"564":{"position":[[176,18]]}}}],["mesextcontroller.site.notempti",{"_index":1743,"t":{"534":{"position":[[139,33]]}}}],["messag",{"_index":1032,"t":{"272":{"position":[[496,10]]},"280":{"position":[[369,10]]},"291":{"position":[[138,10]]},"293":{"position":[[48,10]]},"299":{"position":[[67,10]]},"301":{"position":[[158,10]]},"303":{"position":[[64,10]]},"305":{"position":[[290,10]]},"307":{"position":[[68,10]]},"309":{"position":[[343,10]]},"311":{"position":[[116,10]]},"313":{"position":[[111,10]]},"315":{"position":[[119,10]]},"317":{"position":[[53,10]]},"319":{"position":[[57,10]]},"321":{"position":[[473,10]]},"323":{"position":[[108,10]]},"325":{"position":[[65,10]]},"327":{"position":[[69,10]]},"330":{"position":[[122,10]]},"332":{"position":[[48,10]]},"336":{"position":[[141,10]]},"338":{"position":[[56,10]]},"340":{"position":[[279,10]]},"342":{"position":[[63,10]]},"344":{"position":[[62,10]]},"346":{"position":[[65,10]]},"348":{"position":[[119,10]]},"350":{"position":[[69,10]]},"352":{"position":[[142,10]]},"354":{"position":[[69,10]]},"356":{"position":[[160,10]]},"358":{"position":[[62,10]]},"360":{"position":[[718,10]]},"362":{"position":[[62,10]]},"364":{"position":[[168,10]]},"366":{"position":[[158,10]]},"368":{"position":[[62,10]]},"370":{"position":[[343,10]]},"372":{"position":[[60,10]]},"374":{"position":[[106,10]]},"376":{"position":[[57,10]]},"378":{"position":[[353,10]]},"380":{"position":[[63,10]]},"382":{"position":[[118,10]]},"384":{"position":[[147,10]]},"386":{"position":[[121,10]]},"388":{"position":[[131,10]]},"390":{"position":[[55,10]]},"392":{"position":[[478,10]]},"394":{"position":[[77,10]]},"398":{"position":[[480,10]]},"488":{"position":[[138,7]]},"520":{"position":[[85,7],[181,7]]},"615":{"position":[[63,8]]}}}],["messageid",{"_index":1244,"t":{"323":{"position":[[197,12]]}}}],["messageremindconfigservice.pushmsg(sit",{"_index":2001,"t":{"592":{"position":[[256,40]]}}}],["messagesourc",{"_index":889,"t":{"263":{"position":[[236,13],[330,13],[1067,14]]},"270":{"position":[[177,13],[191,14],[221,13],[323,14],[942,24]]}}}],["messagesource(messagesourceproperti",{"_index":890,"t":{"263":{"position":[[250,37]]}}}],["messagesource.setalwaysusemessageformat(properties.isalwaysusemessageformat",{"_index":902,"t":{"263":{"position":[[898,79]]}}}],["messagesource.setbasenames(stringutils.commadelimitedlisttostringarray(stringutils.trimallwhitespace(properties.getbasenam",{"_index":894,"t":{"263":{"position":[[434,129]]}}}],["messagesource.setcachemillis(cacheduration.tomilli",{"_index":901,"t":{"263":{"position":[[840,55]]}}}],["messagesource.setdefaultencoding(properties.getencoding().nam",{"_index":896,"t":{"263":{"position":[[606,66]]}}}],["messagesource.setfallbacktosystemlocale(properties.isfallbacktosystemlocal",{"_index":897,"t":{"263":{"position":[[675,79]]}}}],["messagesource.setusecodeasdefaultmessage(properties.isusecodeasdefaultmessag",{"_index":903,"t":{"263":{"position":[[978,81]]}}}],["messagesourceproperti",{"_index":887,"t":{"263":{"position":[[131,23],[155,25],[194,26]]}}}],["messagesource来获取到国际化数据文件.properti",{"_index":978,"t":{"270":{"position":[[0,47]]}}}],["meswip.mesext_xld_barcode_pk",{"_index":1634,"t":{"522":{"position":[[34,30]]}}}],["mes，此时一块拼板(多块小板拼接，小板也有条码)已经形成绑定关系。拼板关系流入smt",{"_index":1518,"t":{"494":{"position":[[0,103]]}}}],["metadata",{"_index":1521,"t":{"501":{"position":[[97,13]]}}}],["method",{"_index":1959,"t":{"575":{"position":[[148,7]]}}}],["mgraph",{"_index":333,"t":{"121":{"position":[[708,8]]}}}],["mhi​=(h(key)+i∗hash2​(key))%m",{"_index":69,"t":{"46":{"position":[[544,29]]}}}],["mid",{"_index":43,"t":{"34":{"position":[[191,3],[234,4],[261,3],[284,3]]},"184":{"position":[[451,3],[499,3],[520,3]]},"201":{"position":[[794,3]]}}}],["mid+1,k",{"_index":677,"t":{"201":{"position":[[494,7]]}}}],["mid,int",{"_index":670,"t":{"201":{"position":[[365,7]]}}}],["mid是两个有序表相隔的位置,a[low~mid]和a[mid+1~high",{"_index":671,"t":{"201":{"position":[[380,41]]}}}],["min",{"_index":495,"t":{"170":{"position":[[589,6]]},"196":{"position":[[329,3],[380,3]]}}}],["min[vl(j",{"_index":424,"t":{"143":{"position":[[333,9]]}}}],["mode",{"_index":1441,"t":{"448":{"position":[[43,4],[63,4]]}}}],["mode:'map",{"_index":1092,"t":{"285":{"position":[[235,11]]}}}],["model",{"_index":1974,"t":{"579":{"position":[[265,18]]}}}],["model=\"cod",{"_index":1968,"t":{"579":{"position":[[114,12]]}}}],["model=\"lin",{"_index":1902,"t":{"567":{"position":[[250,12]]}}}],["model=\"showlin",{"_index":1907,"t":{"567":{"position":[[348,16]]}}}],["model_nam",{"_index":2035,"t":{"597":{"position":[[842,10]]}}}],["modelname.split",{"_index":2078,"t":{"597":{"position":[[2688,17],[2734,17]]}}}],["model，其中的showline为是否展示选项框，:actions为对应的选项数据，select",{"_index":1911,"t":{"567":{"position":[[461,55]]}}}],["modifytim",{"_index":1239,"t":{"319":{"position":[[379,13]]},"321":{"position":[[329,13]]},"330":{"position":[[393,13]]},"336":{"position":[[519,13]]},"338":{"position":[[404,13]]},"340":{"position":[[650,13]]},"390":{"position":[[395,13]]},"392":{"position":[[348,13]]},"398":{"position":[[350,13]]}}}],["mom_check_data",{"_index":2197,"t":{"620":{"position":[[10,14]]}}}],["mom_check_data_item",{"_index":2198,"t":{"620":{"position":[[35,19]]}}}],["mom_check_data数据，其中mom_check_data通过uuid关联到mom_check_data_item的uuid，mom_check_data_item存的就是质检数据，通过check_id关联到mom_check_item",{"_index":2202,"t":{"620":{"position":[[235,145]]}}}],["mom_check_data的status设置为:solderpaste_check",{"_index":2203,"t":{"620":{"position":[[422,51]]}}}],["mom_check_item",{"_index":2200,"t":{"620":{"position":[[90,14]]}}}],["mom_check_item中去，mom_check_item会生成一份模板的数据(配置项只有一份)，进行角色配置后，登陆某一角色的时候，会带出对应的mom_check_item",{"_index":2201,"t":{"620":{"position":[[119,115]]}}}],["mom_cleanbar_log",{"_index":1890,"t":{"564":{"position":[[146,16]]}}}],["mom_sfc_induct",{"_index":1683,"t":{"529":{"position":[[668,17]]},"555":{"position":[[489,17],[695,17],[1849,17]]}}}],["mom_solder_cabinet_oper",{"_index":2187,"t":{"608":{"position":[[0,28]]}}}],["mom_solder_enter_check",{"_index":2188,"t":{"608":{"position":[[37,22]]}}}],["mom_solder_inventori",{"_index":2189,"t":{"608":{"position":[[69,20]]}}}],["mom_solder_inventory_log",{"_index":2190,"t":{"608":{"position":[[99,24]]}}}],["mom_solder_inventory_log记录表和mom_solder_move_log",{"_index":2294,"t":{"630":{"position":[[0,96]]}}}],["mom_solder_move_log",{"_index":2191,"t":{"608":{"position":[[134,19]]}}}],["mom_standwork_hour",{"_index":1722,"t":{"529":{"position":[[1602,19]]}}}],["mothdaydoexamquestionvalu",{"_index":1263,"t":{"334":{"position":[[213,29]]}}}],["mothdaytext",{"_index":1264,"t":{"334":{"position":[[258,14]]}}}],["mothdayuseractionvalu",{"_index":1261,"t":{"334":{"position":[[173,25]]}}}],["mq最低位：为1则加x的补码，为0则加0",{"_index":111,"t":{"78":{"position":[[115,22]]}}}],["mq，messag",{"_index":1501,"t":{"486":{"position":[[50,19]]}}}],["msf",{"_index":1819,"t":{"555":{"position":[[713,3]]}}}],["msf.all_count",{"_index":1804,"t":{"555":{"position":[[183,13]]}}}],["msf.caus",{"_index":1811,"t":{"555":{"position":[[319,9]]}}}],["msf.createdd",{"_index":1808,"t":{"555":{"position":[[269,15],[1026,15]]}}}],["msf.end_tim",{"_index":1801,"t":{"555":{"position":[[126,12],[411,12]]}}}],["msf.line",{"_index":1810,"t":{"555":{"position":[[301,8],[953,8]]}}}],["msf.oper",{"_index":1807,"t":{"555":{"position":[[241,13],[886,13]]}}}],["msf.pass_count",{"_index":1805,"t":{"555":{"position":[[211,14]]}}}],["msf.process",{"_index":1812,"t":{"555":{"position":[[339,11]]}}}],["msf.shop_ord",{"_index":1820,"t":{"555":{"position":[[720,14]]}}}],["msf.start_tim",{"_index":1800,"t":{"555":{"position":[[96,14],[395,15],[433,14]]}}}],["mylocaleresolverconfig",{"_index":938,"t":{"268":{"position":[[46,22],[1435,25]]}}}],["mylocaleresolverconfig注册到@bean中，告诉springboot",{"_index":977,"t":{"268":{"position":[[1316,60]]}}}],["myredi",{"_index":1447,"t":{"450":{"position":[[3,13]]}}}],["myredis/redis.conf",{"_index":1448,"t":{"450":{"position":[[30,19]]}}}],["m个子树，即一个节点中至多m",{"_index":13,"t":{"15":{"position":[[5,23]]}}}],["m阶b+树每个结点最多m棵子树（也就是最多m",{"_index":27,"t":{"27":{"position":[[0,28]]}}}],["m（0~22",{"_index":132,"t":{"91":{"position":[[77,9]]}}}],["m，取不大于m的最大质数p，构建函数h(key)=key%ph(key",{"_index":55,"t":{"46":{"position":[[73,42]]}}}],["m，所以总数为n",{"_index":310,"t":{"109":{"position":[[3650,8]]}}}],["n",{"_index":108,"t":{"76":{"position":[[97,13]]},"190":{"position":[[179,1]]},"196":{"position":[[179,7],[463,15]]},"201":{"position":[[38,65]]},"438":{"position":[[25,52],[112,4]]}}}],["n(n",{"_index":315,"t":{"116":{"position":[[67,7]]},"118":{"position":[[44,7]]}}}],["n(n−1)2\\frac{n(n",{"_index":635,"t":{"196":{"position":[[496,36]]}}}],["n)<)(n)<o(nlong_2n)<o(n^2)<o(n^3)<o(2^n)<o(n!)<o(n^n)o(1)<o(log2​n)<)(n)<o(nlong2​n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":438,"t":{"155":{"position":[[269,114]]}}}],["n*n邻接矩阵，每条边的权值用int",{"_index":331,"t":{"121":{"position":[[651,24]]}}}],["n+1",{"_index":76,"t":{"54":{"position":[[0,42]]},"56":{"position":[[116,9]]},"69":{"position":[[143,27]]}}}],["n+1次，左移n",{"_index":116,"t":{"80":{"position":[[97,11]]},"82":{"position":[[105,10]]}}}],["n,0",{"_index":705,"t":{"203":{"position":[[538,3]]}}}],["n/2",{"_index":558,"t":{"186":{"position":[[143,28],[184,8]]}}}],["n2",{"_index":276,"t":{"109":{"position":[[1486,2]]}}}],["n=(−1)s∗m∗ren",{"_index":120,"t":{"87":{"position":[[0,17]]}}}],["n[i].par",{"_index":297,"t":{"109":{"position":[[2623,11]]}}}],["n[maxsiz",{"_index":294,"t":{"109":{"position":[[2580,11]]}}}],["name",{"_index":824,"t":{"244":{"position":[[62,5],[182,5],[262,5],[346,5],[394,5]]},"265":{"position":[[247,4]]},"295":{"position":[[93,7]]},"299":{"position":[[119,7]]},"301":{"position":[[232,7]]},"303":{"position":[[172,7],[270,7]]},"307":{"position":[[194,7],[338,7]]},"346":{"position":[[115,7]]},"348":{"position":[[184,7]]},"350":{"position":[[110,7]]},"352":{"position":[[57,7]]},"356":{"position":[[232,7]]},"358":{"position":[[171,7],[268,7]]},"360":{"position":[[118,7],[214,7],[827,7],[923,7]]},"364":{"position":[[233,7]]},"376":{"position":[[186,7]]},"378":{"position":[[113,7],[482,7]]},"394":{"position":[[110,7]]},"396":{"position":[[76,7]]},"508":{"position":[[688,5]]},"579":{"position":[[454,5]]}}}],["name\")str",{"_index":1575,"t":{"508":{"position":[[674,13]]}}}],["name:'languag",{"_index":1089,"t":{"285":{"position":[[160,16]]}}}],["neq",{"_index":180,"t":{"101":{"position":[[895,4]]}}}],["new",{"_index":888,"t":{"263":{"position":[[190,3],[346,3]]},"265":{"position":[[450,3],[659,3],[769,3]]},"268":{"position":[[547,3],[596,3],[1431,3]]},"270":{"position":[[1154,3]]},"272":{"position":[[344,3]]},"274":{"position":[[0,3]]},"280":{"position":[[217,3]]},"503":{"position":[[136,3],[193,3]]},"506":{"position":[[179,3],[251,3]]},"516":{"position":[[246,3]]},"526":{"position":[[661,3]]},"532":{"position":[[107,3]]},"597":{"position":[[73,3],[124,3],[759,3],[1401,3],[3178,3],[4188,3],[5788,3],[6227,3],[6704,3],[6977,3],[7196,3]]},"622":{"position":[[1377,3]]},"634":{"position":[[199,3]]}}}],["new一个本地修改代码的分支：chenle_xxxx",{"_index":2176,"t":{"603":{"position":[[18,26]]}}}],["next",{"_index":172,"t":{"101":{"position":[[508,24]]},"103":{"position":[[66,4],[280,8]]},"109":{"position":[[2730,4]]},"123":{"position":[[160,6]]}}}],["next[++j",{"_index":211,"t":{"103":{"position":[[160,9]]}}}],["next[1",{"_index":206,"t":{"103":{"position":[[93,7]]}}}],["next[3]处，我们填写1，表示当出现到第三位不匹配时，下一步指针移动到1",{"_index":171,"t":{"101":{"position":[[464,43]]}}}],["next[j",{"_index":193,"t":{"101":{"position":[[1825,8]]},"103":{"position":[[191,7],[385,8]]}}}],["next[j+1",{"_index":212,"t":{"103":{"position":[[177,11]]}}}],["next[j]=next[j",{"_index":191,"t":{"101":{"position":[[1754,21]]}}}],["next[k",{"_index":198,"t":{"101":{"position":[[2498,7]]},"103":{"position":[[215,8]]}}}],["nextneighbor(g,v",{"_index":364,"t":{"126":{"position":[[640,19]]},"128":{"position":[[349,18]]}}}],["nextval",{"_index":222,"t":{"105":{"position":[[368,11]]}}}],["nextval[1",{"_index":223,"t":{"105":{"position":[[397,10]]}}}],["nextval[j",{"_index":226,"t":{"105":{"position":[[498,10],[539,10]]}}}],["nextval[k",{"_index":227,"t":{"105":{"position":[[552,11],[591,10]]}}}],["next数组的核心思想。首先我们先来了解一下前后缀的概念，设一个字符串ababa，那么前缀就是除去最后一个a，然后从前往后看写出他的子集{a,ab,aba,abab}。同理后缀就是除掉第一个a，然后从后往前看写出子集{a,ba,aba,baba",{"_index":185,"t":{"101":{"position":[[1107,134]]}}}],["next数组的求解就算结束了。我们来看下next",{"_index":201,"t":{"103":{"position":[[0,38]]}}}],["next数组进行优化，进行减少无效的匹配，提高效率。设计nextval数组来改善原next。基本思想就是遍历next数组，当跳转时候进行比较，如果t[next[j]]等于t[k]，那么直接跳过这一层匹配，改为t[next[next[j]]即可。也就是跳过了中间无效的t[next[j]]和t[k",{"_index":220,"t":{"105":{"position":[[178,154]]}}}],["next数组，next数组的1和2无脑填0和1",{"_index":168,"t":{"101":{"position":[[204,147]]}}}],["next的1和2还是直接填0和1",{"_index":186,"t":{"101":{"position":[[1242,44]]}}}],["ng",{"_index":2046,"t":{"597":{"position":[[1389,5],[3293,5],[5251,11]]}}}],["nginx",{"_index":779,"t":{"242":{"position":[[0,43],[86,6],[784,15]]}}}],["nginx配置文件nginx.conf",{"_index":780,"t":{"242":{"position":[[44,36]]}}}],["node",{"_index":242,"t":{"109":{"position":[[624,5],[2539,5],[2567,7],[2575,4],[2700,5],[2723,4],[2879,5],[2902,5]]},"244":{"position":[[239,4]]}}}],["node.j",{"_index":833,"t":{"244":{"position":[[192,7]]}}}],["node@v2",{"_index":836,"t":{"244":{"position":[[225,7]]}}}],["notblank(messag",{"_index":1742,"t":{"534":{"position":[[119,17]]},"571":{"position":[[210,17]]}}}],["notebook",{"_index":528,"t":{"177":{"position":[[41,9]]}}}],["notify({type:'danger',message:''+this.$t",{"_index":1987,"t":{"579":{"position":[[1273,60]]},"628":{"position":[[1548,60]]}}}],["no：操作系统决定何时xiehui",{"_index":1391,"t":{"416":{"position":[[43,17]]}}}],["npm",{"_index":764,"t":{"239":{"position":[[134,3]]},"244":{"position":[[363,3],[378,3]]}}}],["null",{"_index":15,"t":{"15":{"position":[[97,22]]},"20":{"position":[[18,84]]},"165":{"position":[[82,8]]},"168":{"position":[[50,5]]},"263":{"position":[[598,5],[832,5]]},"265":{"position":[[853,4],[1221,4],[1269,5],[1593,5],[1658,4]]},"270":{"position":[[461,6]]},"291":{"position":[[167,4]]},"293":{"position":[[77,4]]},"295":{"position":[[139,5],[170,4]]},"303":{"position":[[237,5],[481,5]]},"305":{"position":[[70,5],[149,5]]},"307":{"position":[[981,5],[1005,5]]},"309":{"position":[[173,5],[197,5]]},"311":{"position":[[541,4]]},"315":{"position":[[348,4],[402,5],[487,4],[653,5]]},"321":{"position":[[502,4]]},"325":{"position":[[94,4]]},"330":{"position":[[159,5],[177,5],[222,5],[240,5],[253,5],[266,5],[284,5],[303,5],[318,5],[332,5],[348,5],[367,5],[387,5],[407,5],[431,5],[448,5],[466,4]]},"332":{"position":[[77,4]]},"336":{"position":[[316,5],[336,5],[370,5],[413,5],[615,4]]},"338":{"position":[[201,5],[221,5],[255,5],[298,5],[500,4]]},"340":{"position":[[40,5],[206,5],[226,5],[462,5],[480,5],[503,5],[544,5],[603,5],[664,5],[756,4]]},"342":{"position":[[99,4]]},"346":{"position":[[193,5]]},"348":{"position":[[56,5]]},"352":{"position":[[171,4]]},"354":{"position":[[98,4]]},"356":{"position":[[46,5],[61,5],[85,5]]},"358":{"position":[[237,5],[484,5]]},"360":{"position":[[185,5],[454,5],[479,4],[894,5],[1156,5],[1181,4]]},"362":{"position":[[91,4]]},"364":{"position":[[61,5]]},"366":{"position":[[44,5],[66,5],[81,5],[100,5],[264,5],[465,5]]},"368":{"position":[[269,5],[364,4]]},"370":{"position":[[205,5],[317,4],[372,4]]},"372":{"position":[[89,4]]},"374":{"position":[[48,5]]},"376":{"position":[[416,4]]},"380":{"position":[[99,4]]},"382":{"position":[[53,5]]},"384":{"position":[[183,4]]},"386":{"position":[[58,5]]},"388":{"position":[[55,5],[73,5]]},"390":{"position":[[308,5],[451,5],[477,4]]},"392":{"position":[[423,5],[447,4],[507,4]]},"398":{"position":[[425,5],[449,4],[509,4]]},"520":{"position":[[174,6]]},"526":{"position":[[1196,4],[1203,4]]},"592":{"position":[[321,5],[368,6]]},"597":{"position":[[52,5],[678,5],[1286,6],[3022,6],[5160,5],[7283,5]]},"634":{"position":[[186,6]]}}}],["nx：当key不存在的时候，才创建key，等效于setnx",{"_index":1457,"t":{"458":{"position":[[30,29]]}}}],["n})\\le",{"_index":78,"t":{"54":{"position":[[76,6]]}}}],["n}−(1−2−n)≤x≤1−2−n",{"_index":80,"t":{"54":{"position":[[95,19]]}}}],["n}−1≤x≤1−2−n",{"_index":88,"t":{"56":{"position":[[162,12]]}}}],["n个内部红节点的红黑树高度h≤2∗log2(n+1)h",{"_index":8,"t":{"10":{"position":[[209,28]]}}}],["n个辅助单元，空间复杂度o(n)o(n)o(n",{"_index":694,"t":{"201":{"position":[[900,26]]}}}],["n和m",{"_index":665,"t":{"201":{"position":[[109,17]]}}}],["n在某个范围的时候，时间复杂度为o(n1.3)o(n^{1.3})o(n1.3)，最坏情况是o(n2)o(n^2)o(n2",{"_index":580,"t":{"186":{"position":[[806,86]]}}}],["n就挂到队列n的队尾中，比如520的个位是0，就挂0",{"_index":711,"t":{"203":{"position":[[766,43]]}}}],["n时，i的右孩子是2i+1",{"_index":287,"t":{"109":{"position":[[1658,13]]},"198":{"position":[[600,13]]}}}],["n时，i的左孩子是2i",{"_index":285,"t":{"109":{"position":[[1630,11]]},"198":{"position":[[572,11]]}}}],["n的线性表，每个结点aja_jaj​的关键字由d元组(kjd−1,kjd−2,kjd−3......kj0)(k_j^{d",{"_index":698,"t":{"203":{"position":[[339,65]]}}}],["n足够大的时候去分析执行时间。采用大o",{"_index":435,"t":{"155":{"position":[[69,65]]}}}],["n，边数为n",{"_index":380,"t":{"130":{"position":[[0,28]]}}}],["o(1",{"_index":1475,"t":{"470":{"position":[[126,15]]},"473":{"position":[[161,5]]}}}],["o(1)<o(log2n)<)(n)<o(nlong2n)<o(n2)<o(n3)<o(2n)<o(n!)<o(nn",{"_index":436,"t":{"155":{"position":[[196,59]]}}}],["o(1)<o(log_2",{"_index":437,"t":{"155":{"position":[[256,12]]}}}],["o(1)o(1)o(1",{"_index":557,"t":{"184":{"position":[[629,18]]},"186":{"position":[[782,23]]},"190":{"position":[[289,18]]},"196":{"position":[[435,27]]},"198":{"position":[[1453,24]]},"205":{"position":[[80,12],[166,12],[205,12],[271,12],[458,12],[572,12]]}}}],["o(d(r+1))o(d(r+1))o(d(r+1",{"_index":716,"t":{"205":{"position":[[707,27],[735,27],[763,27]]}}}],["o(log2n)o(log_{2}n)o(log2​n",{"_index":715,"t":{"205":{"position":[[370,28]]}}}],["o(log2n)o(log_{2}n)o(log2​n)，最坏需要n−1次递归调用，所以栈为o(n)n",{"_index":620,"t":{"192":{"position":[[928,89]]}}}],["o(n)o(n)o(n",{"_index":548,"t":{"182":{"position":[[669,40]]},"205":{"position":[[33,12],[224,12],[689,12]]}}}],["o(n)o(n)o(n)调整时间为o(h)o(h)o(h)，最好、最坏、平均情况下的时间复杂度都是o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":664,"t":{"198":{"position":[[1478,84]]}}}],["o(n)o(n)o(n)，二路需要log2nlog_{2}nlog2​n，时间复杂度为o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":695,"t":{"201":{"position":[[927,83]]}}}],["o(n)o(n)o(n)，否则则进行n",{"_index":592,"t":{"190":{"position":[[308,30]]}}}],["o(n2)o(n^2)o(n2",{"_index":334,"t":{"121":{"position":[[717,40]]},"184":{"position":[[648,22]]},"205":{"position":[[46,16],[63,16],[132,16],[149,16],[188,16],[237,16],[254,16],[353,16],[407,16],[424,16],[441,16]]}}}],["o(n2)o(n^2)o(n2)，理想情况是o(nlong2n)o(nlong_{2}n)o(nlong2​n",{"_index":622,"t":{"192":{"position":[[1083,69]]}}}],["o(nlog2n)o(nlog_{2}n)o(nlog2​n",{"_index":714,"t":{"205":{"position":[[100,31],[289,31],[321,31],[476,31],[508,31],[540,31],[593,31],[625,31],[657,31]]}}}],["o(r)o(r)o(r",{"_index":717,"t":{"205":{"position":[[791,12]]}}}],["o(∣v∣)o(|v|)o(∣v",{"_index":369,"t":{"126":{"position":[[929,45]]}}}],["o(∣v∣)o(|v|)o(∣v∣)次，搜索邻接边需要o(∣e∣)o(|e|)o(∣e∣)，故为o(∣v∣+∣e)o(|v|+|e)o(∣v∣+∣e)。当采用邻接矩阵的时候，每个顶点都需要访问一次，算上边的访问，一共需要o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":368,"t":{"126":{"position":[[728,200]]},"128":{"position":[[396,200]]}}}],["o(∣v∣+∣e∣)o(|v|+|e|)o(∣v∣+∣e∣)若为无向图则o(∣v∣+2∣e∣)o(|v|+2|e|)o(∣v∣+2∣",{"_index":343,"t":{"123":{"position":[[362,98]]}}}],["o(∣v∣2)o(|v|^2)o(∣v∣2",{"_index":393,"t":{"136":{"position":[[240,41]]}}}],["oauth授权登录，也可以手写token",{"_index":743,"t":{"227":{"position":[[16,29]]}}}],["object",{"_index":993,"t":{"270":{"position":[[573,8],[692,8]]},"443":{"position":[[10,48]]},"526":{"position":[[1157,6]]},"597":{"position":[[890,8],[5030,7],[5771,7],[6326,8],[6828,7],[6858,6]]}}}],["object)：**数据传输对象，这个概念来源于j2ee的设计模式，原来的目的是为了ejb",{"_index":1427,"t":{"443":{"position":[[79,121]]}}}],["objects.nonnull(id",{"_index":2145,"t":{"597":{"position":[[5962,22]]}}}],["objects.nonnull(productplan",{"_index":2130,"t":{"597":{"position":[[5169,31]]}}}],["of，为1",{"_index":94,"t":{"71":{"position":[[15,26]]}}}],["ok",{"_index":324,"t":{"121":{"position":[[290,48]]}}}],["ok和ng",{"_index":1879,"t":{"562":{"position":[[21,42]]}}}],["onchange(v",{"_index":1060,"t":{"278":{"position":[[109,14]]},"280":{"position":[[670,14]]}}}],["ondelet",{"_index":1983,"t":{"579":{"position":[[1147,11]]},"628":{"position":[[1399,11]]}}}],["onselectline(item",{"_index":1932,"t":{"567":{"position":[[1058,19]]}}}],["on语句，这样会将多表连接起来，有一些属性原本不存在的会被赋值为nul",{"_index":487,"t":{"170":{"position":[[444,36]]}}}],["openid",{"_index":1288,"t":{"340":{"position":[[761,10]]}}}],["oper",{"_index":1056,"t":{"276":{"position":[[259,17]]},"529":{"position":[[330,9],[343,10]]},"555":{"position":[[258,10]]}}}],["operationresult",{"_index":1572,"t":{"508":{"position":[[622,15],[872,15]]},"634":{"position":[[90,15]]}}}],["operationresult.buildfailureresult(\"已解析过的pdf",{"_index":2041,"t":{"597":{"position":[[1025,53]]}}}],["operationresult.buildsuccessresult(\"fals",{"_index":2316,"t":{"634":{"position":[[727,44]]}}}],["operationresult.buildsuccessresult(\"tru",{"_index":2315,"t":{"634":{"position":[[674,43]]}}}],["option]加入这个语句的话，进行uid",{"_index":510,"t":{"172":{"position":[[120,36]]}}}],["options=\"printtemplatedata",{"_index":2196,"t":{"615":{"position":[[131,30]]}}}],["ora",{"_index":1631,"t":{"522":{"position":[[5,3]]}}}],["oracl",{"_index":1636,"t":{"522":{"position":[[74,89]]}}}],["oracl不同于mysql，是以表空间为单位，本次操作的是在meswip中才找到了数据表，mesext_first_check_report",{"_index":2174,"t":{"601":{"position":[[58,83]]}}}],["order",{"_index":471,"t":{"170":{"position":[[74,5],[296,5]]},"529":{"position":[[615,5],[1669,5]]},"545":{"position":[[81,6],[279,5]]},"547":{"position":[[92,5],[170,5],[241,5]]},"551":{"position":[[22,6]]},"555":{"position":[[424,5],[1017,5],[1249,5],[1946,5],[2315,6]]}}}],["org.springframework.boot.autoconfigure.web.servlet.webmvcproperties.localeresolver.fix",{"_index":915,"t":{"265":{"position":[[560,89]]}}}],["org.springframework.boot.autoconfigure.web.webproperties.localeresolver.fix",{"_index":912,"t":{"265":{"position":[[362,78]]}}}],["origin",{"_index":755,"t":{"237":{"position":[[45,6],[103,6]]},"239":{"position":[[279,6]]},"396":{"position":[[54,11]]}}}],["over",{"_index":1674,"t":{"529":{"position":[[454,4],[552,4]]},"547":{"position":[[48,4],[140,4],[217,4]]},"551":{"position":[[17,4]]},"555":{"position":[[376,4],[2310,4]]}}}],["overrid",{"_index":947,"t":{"268":{"position":[[221,9],[1073,9]]},"516":{"position":[[283,9],[822,9]]},"634":{"position":[[73,9]]}}}],["p",{"_index":1451,"t":{"452":{"position":[[61,1]]},"555":{"position":[[1050,1],[2530,1]]}}}],["p.all_count",{"_index":1858,"t":{"555":{"position":[[2280,12]]}}}],["p.caus",{"_index":1862,"t":{"555":{"position":[[2517,7]]}}}],["p.end_tim",{"_index":1863,"t":{"555":{"position":[[2574,10],[2640,10]]}}}],["p.start_tim",{"_index":1795,"t":{"551":{"position":[[32,13]]},"555":{"position":[[2325,13],[2542,12],[2608,12]]}}}],["p1和p2",{"_index":666,"t":{"201":{"position":[[142,23]]}}}],["p>什么是快乐星球？</p",{"_index":1315,"t":{"368":{"position":[[165,18]]}}}],["p_all_count",{"_index":1840,"t":{"555":{"position":[[1438,12]]}}}],["p_pass_count",{"_index":1842,"t":{"555":{"position":[[1551,13]]}}}],["p_rate",{"_index":1798,"t":{"553":{"position":[[108,6]]},"555":{"position":[[2509,7]]}}}],["page",{"_index":748,"t":{"233":{"position":[[61,5],[126,5],[215,5],[240,5]]},"239":{"position":[[167,5],[263,6],[289,5],[349,5]]},"534":{"position":[[907,4]]},"571":{"position":[[533,4]]}}}],["pagecont",{"_index":2021,"t":{"597":{"position":[[380,11],[2560,11]]}}}],["pagecontent.split(\"\\n",{"_index":2025,"t":{"597":{"position":[[503,24],[2824,24]]}}}],["pageindex",{"_index":1143,"t":{"301":{"position":[[94,12]]},"311":{"position":[[52,12]]},"313":{"position":[[47,12]]},"315":{"position":[[55,12]]},"323":{"position":[[44,12]]},"336":{"position":[[77,12]]},"348":{"position":[[67,12]]},"356":{"position":[[96,12]]},"364":{"position":[[112,12]]},"366":{"position":[[106,12]]},"374":{"position":[[54,12]]},"382":{"position":[[59,12]]},"386":{"position":[[69,12]]},"388":{"position":[[79,12]]}}}],["pagenum",{"_index":2018,"t":{"597":{"position":[[308,7],[2492,7]]}}}],["pagenum;i",{"_index":2020,"t":{"597":{"position":[[366,13]]}}}],["pages",{"_index":1144,"t":{"301":{"position":[[115,11]]},"311":{"position":[[73,11]]},"313":{"position":[[68,11]]},"315":{"position":[[76,11]]},"323":{"position":[[65,11]]},"336":{"position":[[98,11]]},"348":{"position":[[83,11]]},"356":{"position":[[117,11]]},"364":{"position":[[133,11]]},"366":{"position":[[122,11]]},"374":{"position":[[70,11]]},"382":{"position":[[75,11]]},"386":{"position":[[85,11]]},"388":{"position":[[95,11]]}}}],["pages分支上，接下来你只需要在仓库的set",{"_index":776,"t":{"239":{"position":[[319,27]]}}}],["pages分支来作为你的pag",{"_index":778,"t":{"239":{"position":[[368,29]]}}}],["paper",{"_index":1180,"t":{"307":{"position":[[99,8]]}}}],["paperitem",{"_index":1131,"t":{"297":{"position":[[98,13]]},"376":{"position":[[150,13]]},"378":{"position":[[78,13],[447,13]]}}}],["papernam",{"_index":1198,"t":{"311":{"position":[[492,12]]},"386":{"position":[[486,12]]}}}],["paperscor",{"_index":1196,"t":{"311":{"position":[[372,13]]},"386":{"position":[[364,13]]}}}],["papertyp",{"_index":1140,"t":{"301":{"position":[[46,12],[417,12]]},"303":{"position":[[149,12]]},"307":{"position":[[171,12]]},"311":{"position":[[420,12]]},"356":{"position":[[392,12]]},"358":{"position":[[148,12]]},"360":{"position":[[95,12],[804,12]]},"364":{"position":[[89,12],[392,12]]},"376":{"position":[[344,12]]},"378":{"position":[[273,12],[642,12]]},"386":{"position":[[414,12]]}}}],["param",{"_index":989,"t":{"270":{"position":[[365,6],[489,6],[503,6]]},"567":{"position":[[710,6]]},"579":{"position":[[620,6]]},"597":{"position":[[5779,6],[6061,8]]},"622":{"position":[[1974,6]]},"628":{"position":[[491,6]]}}}],["param(valu",{"_index":1576,"t":{"508":{"position":[[694,12]]}}}],["params.put(\"id",{"_index":2146,"t":{"597":{"position":[[5985,16]]}}}],["parent",{"_index":293,"t":{"109":{"position":[[2559,7]]}}}],["parma",{"_index":2245,"t":{"622":{"position":[[1782,8]]}}}],["parm和@requestparm",{"_index":1563,"t":{"508":{"position":[[213,41]]}}}],["partit",{"_index":1675,"t":{"529":{"position":[[459,10],[557,10]]},"547":{"position":[[53,10],[145,10],[222,10]]},"551":{"position":[[59,18]]},"555":{"position":[[381,10]]}}}],["partition(a,low,high",{"_index":616,"t":{"192":{"position":[[802,34]]}}}],["partition(int",{"_index":605,"t":{"192":{"position":[[477,13]]}}}],["pass_count",{"_index":1806,"t":{"555":{"position":[[229,11],[1168,11]]}}}],["password",{"_index":847,"t":{"244":{"position":[[510,9]]},"289":{"position":[[58,11]]},"291":{"position":[[70,11]]},"330":{"position":[[56,11],[210,11]]},"340":{"position":[[74,11],[408,11]]},"450":{"position":[[81,10]]},"452":{"position":[[19,8]]}}}],["pass或ng",{"_index":2081,"t":{"597":{"position":[[2857,11]]}}}],["path:getrootpath",{"_index":1090,"t":{"285":{"position":[[186,18]]}}}],["path_paramet",{"_index":944,"t":{"268":{"position":[[125,14]]}}}],["path也就是在bas",{"_index":1964,"t":{"577":{"position":[[25,29]]}}}],["pcb",{"_index":1516,"t":{"492":{"position":[[40,9]]}}}],["pdf",{"_index":2073,"t":{"597":{"position":[[2452,14]]},"599":{"position":[[0,56]]},"605":{"position":[[0,5],[26,12]]}}}],["pdfreader",{"_index":2008,"t":{"597":{"position":[[33,9]]}}}],["pdfreader(filenam",{"_index":2010,"t":{"597":{"position":[[77,20]]}}}],["pdftextextractor.gettextfrompage(read",{"_index":2022,"t":{"597":{"position":[[395,40],[2575,40]]}}}],["pdf的服务器和测试的服务器不是同一个，但是数据库一样，会导致无法从服务器下载pdf",{"_index":2185,"t":{"605":{"position":[[62,65]]}}}],["pdf类和pdfbox",{"_index":2184,"t":{"605":{"position":[[46,15]]}}}],["pel(pend",{"_index":1511,"t":{"488":{"position":[[456,11]]}}}],["pending_id",{"_index":1509,"t":{"488":{"position":[[336,11]]}}}],["person",{"_index":1580,"t":{"508":{"position":[[915,6],[922,7]]}}}],["ph(key)=key%p，则产生的地址落在区间[0,p−1][0,p",{"_index":56,"t":{"46":{"position":[[125,35]]}}}],["phone",{"_index":1234,"t":{"319":{"position":[[292,8]]},"321":{"position":[[242,8]]},"330":{"position":[[309,8]]},"336":{"position":[[404,8]]},"338":{"position":[[289,8]]},"340":{"position":[[217,8],[535,8]]},"390":{"position":[[299,8]]},"392":{"position":[[252,8]]},"398":{"position":[[249,8]]}}}],["pi",{"_index":447,"t":{"165":{"position":[[151,8]]}}}],["picx后进行github",{"_index":742,"t":{"227":{"position":[[0,15]]}}}],["picx能够查看的github仓库，在授权登录后，会初始化好一个picx的仓库，也就是我们本地上传到github",{"_index":744,"t":{"227":{"position":[[46,70]]}}}],["pid",{"_index":786,"t":{"242":{"position":[[152,3]]}}}],["pivot",{"_index":607,"t":{"192":{"position":[[518,5],[704,6]]}}}],["pivotpo",{"_index":615,"t":{"192":{"position":[[791,8]]}}}],["placehold",{"_index":1101,"t":{"285":{"position":[[527,17]]}}}],["placeholder=\"$t(languagepath+'cod",{"_index":1970,"t":{"579":{"position":[[160,38]]}}}],["placeholder=\"$t(languagepath+'lin",{"_index":1901,"t":{"567":{"position":[[209,38]]}}}],["placeholder]\").each(funct",{"_index":1099,"t":{"285":{"position":[[436,31]]}}}],["plan_log_id",{"_index":2140,"t":{"597":{"position":[[5724,11]]}}}],["planloguuid",{"_index":2129,"t":{"597":{"position":[[5146,11],[5201,11],[5894,13]]}}}],["posit",{"_index":1487,"t":{"480":{"position":[[263,8]]}}}],["post",{"_index":1960,"t":{"575":{"position":[[156,7]]}}}],["postconstruct",{"_index":986,"t":{"270":{"position":[[256,14]]}}}],["preambl",{"_index":1402,"t":{"423":{"position":[[161,11]]}}}],["prefix",{"_index":884,"t":{"263":{"position":[[95,6],[1325,6]]},"307":{"position":[[524,9],[596,9]]},"315":{"position":[[296,9]]},"360":{"position":[[396,9],[1098,9]]}}}],["prefix，也就是说默认读取springboot的yml配置中的spring.messag",{"_index":906,"t":{"263":{"position":[[1352,73]]}}}],["preprocess",{"_index":1542,"t":{"503":{"position":[[100,11]]}}}],["presearch(t[],2*index",{"_index":274,"t":{"109":{"position":[[1372,23],[1396,21]]}}}],["presearch(t[],int",{"_index":272,"t":{"109":{"position":[[1296,17]]}}}],["prim)和克鲁斯卡尔(krusk",{"_index":383,"t":{"130":{"position":[[120,37]]}}}],["primarri",{"_index":454,"t":{"168":{"position":[[90,8]]}}}],["prim是选点，而kruskal就是选边的算法，直接给边按权排序，按从小到大选取，过程需要避开回路，也是避圈法的一种，该算法的思想本质是贪心，有条件的贪心。一直添加n−1n",{"_index":386,"t":{"134":{"position":[[0,86]]}}}],["printer",{"_index":1051,"t":{"276":{"position":[[148,16]]}}}],["printertempl",{"_index":1050,"t":{"276":{"position":[[122,25]]}}}],["privat",{"_index":940,"t":{"268":{"position":[[97,7],[150,7]]},"270":{"position":[[83,7],[169,7],[206,7]]},"508":{"position":[[487,7]]},"534":{"position":[[75,7],[173,7],[199,7],[225,7],[258,7],[286,7],[321,7],[357,7],[390,7],[420,7],[451,7],[482,7],[514,7],[549,7],[585,7],[617,7],[648,7],[682,7],[713,7],[747,7],[798,7],[859,7],[892,7],[926,7],[960,7]]},"571":{"position":[[234,7],[255,7],[281,7],[305,7],[326,7],[347,7],[373,7],[400,7],[428,7],[456,7],[484,7],[518,7],[552,7]]}}}],["process",{"_index":1668,"t":{"529":{"position":[[310,7],[321,8],[931,8],[1312,8]]},"532":{"position":[[60,14],[503,7]]},"534":{"position":[[466,8]]},"555":{"position":[[354,8]]}}}],["processmap",{"_index":1728,"t":{"532":{"position":[[94,10]]}}}],["processmap.get(key",{"_index":1735,"t":{"532":{"position":[[513,20]]}}}],["processmap.put(key",{"_index":1732,"t":{"532":{"position":[[277,19]]}}}],["productcod",{"_index":2079,"t":{"597":{"position":[[2720,11]]}}}],["productdesc",{"_index":1745,"t":{"534":{"position":[[301,12]]}}}],["productplan",{"_index":2125,"t":{"597":{"position":[[5038,11]]}}}],["productplan.get(\"uuid",{"_index":2131,"t":{"597":{"position":[[5224,24]]}}}],["productstatiticdto",{"_index":1740,"t":{"534":{"position":[[54,18]]}}}],["properti",{"_index":891,"t":{"263":{"position":[[288,11]]}}}],["properties.getcachedur",{"_index":900,"t":{"263":{"position":[[780,30]]}}}],["properties.getencod",{"_index":895,"t":{"263":{"position":[[569,25]]}}}],["properties命名规则为message_zh_cn.properties(message是basename，zh_cn是local",{"_index":877,"t":{"261":{"position":[[50,71]]}}}],["properties文件中按照模块命名规则：模块1.模块2.xxx",{"_index":878,"t":{"261":{"position":[[122,34]]}}}],["protect",{"_index":1440,"t":{"448":{"position":[[31,11]]}}}],["proxy_pass",{"_index":800,"t":{"242":{"position":[[408,10]]}}}],["proxy_set_head",{"_index":802,"t":{"242":{"position":[[433,16],[462,16]]}}}],["ps",{"_index":863,"t":{"256":{"position":[[35,2]]},"516":{"position":[[333,3]]}}}],["ps.setstring(1",{"_index":1600,"t":{"516":{"position":[[366,15]]}}}],["ps.setstring(2",{"_index":1602,"t":{"516":{"position":[[417,15]]}}}],["ps.setstring(3",{"_index":1604,"t":{"516":{"position":[[465,15]]}}}],["ps.setstring(4",{"_index":1606,"t":{"516":{"position":[[519,15]]}}}],["ps.setstring(5",{"_index":1608,"t":{"516":{"position":[[566,15]]}}}],["ps.setstring(6",{"_index":1610,"t":{"516":{"position":[[613,15]]}}}],["ps.setstring(7",{"_index":1612,"t":{"516":{"position":[[663,15]]}}}],["ps.setstring(8",{"_index":1614,"t":{"516":{"position":[[718,15]]}}}],["ps.setstring(9",{"_index":1616,"t":{"516":{"position":[[773,15]]}}}],["pub/sub",{"_index":1503,"t":{"486":{"position":[[101,9],[175,9]]}}}],["public",{"_index":886,"t":{"263":{"position":[[124,6],[229,6]]},"265":{"position":[[275,6],[1094,6]]},"268":{"position":[[33,6],[231,6],[1083,6],[1383,6]]},"270":{"position":[[59,6],[271,6],[390,6],[528,6],[647,6]]},"501":{"position":[[219,6]]},"508":{"position":[[440,6],[615,6],[865,6]]},"516":{"position":[[293,6],[832,6]]},"526":{"position":[[912,6],[1150,6]]},"534":{"position":[[41,6]]},"567":{"position":[[1220,6]]},"571":{"position":[[176,6]]},"634":{"position":[[83,6]]}}}],["pull一次远程，然后push",{"_index":2179,"t":{"603":{"position":[[122,15]]}}}],["push",{"_index":757,"t":{"237":{"position":[[95,4]]},"239":{"position":[[274,4]]},"244":{"position":[[83,5]]}}}],["pushmsg函数是进行企微推送，需要先开通测试机的企微账号，开通本地ip",{"_index":2004,"t":{"592":{"position":[[375,62]]}}}],["px：key",{"_index":1456,"t":{"458":{"position":[[15,14]]}}}],["p可知:散列地址在[0,p−1][0,p",{"_index":72,"t":{"48":{"position":[[40,41]]}}}],["q",{"_index":772,"t":{"239":{"position":[[201,2]]}}}],["qcd",{"_index":1837,"t":{"555":{"position":[[1370,7],[1482,7]]}}}],["qs",{"_index":1957,"t":{"575":{"position":[[69,2],[77,4]]}}}],["qs.stringify(data",{"_index":1961,"t":{"575":{"position":[[170,18]]}}}],["query(valu",{"_index":1536,"t":{"501":{"position":[[338,12]]}}}],["questionanswervm",{"_index":1213,"t":{"315":{"position":[[500,19]]}}}],["questioncorrect",{"_index":1195,"t":{"311":{"position":[[342,18]]},"386":{"position":[[334,18]]}}}],["questioncount",{"_index":1148,"t":{"301":{"position":[[255,16]]},"311":{"position":[[315,16]]},"334":{"position":[[78,16]]},"356":{"position":[[256,16]]},"364":{"position":[[257,16]]},"376":{"position":[[207,16]]},"378":{"position":[[137,16],[506,16]]},"386":{"position":[[307,16]]}}}],["questionid",{"_index":1174,"t":{"305":{"position":[[56,13],[114,13]]},"307":{"position":[[946,13]]},"309":{"position":[[138,13]]},"315":{"position":[[542,13]]}}}],["questionitem",{"_index":1165,"t":{"303":{"position":[[294,16]]},"307":{"position":[[361,16]]},"358":{"position":[[292,16]]},"360":{"position":[[236,16],[945,16]]}}}],["questionscor",{"_index":1186,"t":{"307":{"position":[[1096,16]]},"309":{"position":[[290,16]]},"315":{"position":[[685,16]]}}}],["questiontyp",{"_index":1166,"t":{"303":{"position":[[331,15]]},"307":{"position":[[405,15]]},"313":{"position":[[190,15]]},"315":{"position":[[184,15]]},"358":{"position":[[330,15]]},"360":{"position":[[281,15],[983,15]]},"366":{"position":[[50,15],[223,15]]},"368":{"position":[[111,15]]},"370":{"position":[[55,15]]}}}],["questionvm",{"_index":1208,"t":{"315":{"position":[[150,13]]}}}],["queue），redi",{"_index":1502,"t":{"486":{"position":[[70,12]]}}}],["quicksort(a,low,pivotpo",{"_index":617,"t":{"192":{"position":[[837,24]]}}}],["quicksort(a,pivotpo",{"_index":618,"t":{"192":{"position":[[874,20]]}}}],["quicksort(int",{"_index":613,"t":{"192":{"position":[[734,13]]}}}],["r",{"_index":704,"t":{"203":{"position":[[521,1]]},"480":{"position":[[281,1],[294,1],[303,1],[357,33]]},"555":{"position":[[767,1]]}}}],["r.handl",{"_index":1827,"t":{"555":{"position":[[853,8]]}}}],["r.router_bo",{"_index":1823,"t":{"555":{"position":[[794,11]]}}}],["r.sequenc",{"_index":1824,"t":{"555":{"position":[[810,10]]}}}],["rachel",{"_index":527,"t":{"177":{"position":[[34,6]]}}}],["rachel/test",{"_index":1567,"t":{"508":{"position":[[391,15]]}}}],["racheltestcontrol",{"_index":1568,"t":{"508":{"position":[[453,20]]}}}],["rachel的个人笔记本，人的自我属性中自带有遗忘，唯有持续的写下他的所见所闻所想所感，才能清晰认识自己，也许有一天rachel",{"_index":440,"t":{"158":{"position":[[16,119]]}}}],["rdb",{"_index":1393,"t":{"419":{"position":[[41,14]]},"423":{"position":[[33,21],[157,3]]}}}],["rdb+aof",{"_index":1405,"t":{"423":{"position":[[197,12]]}}}],["rdb和aof",{"_index":1401,"t":{"423":{"position":[[120,15]]}}}],["rdb和aof时，重启时只会加在aof不会加在rdb",{"_index":1399,"t":{"423":{"position":[[0,32]]}}}],["rdb文件(dump.rdb)，其中，rdb就是redi",{"_index":1370,"t":{"403":{"position":[[20,118]]}}}],["rdb进行快照存储，然后使用aof持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的rdb记录。这样的话，重启服务的时候会从rdb和aof两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是rdb格式，一部分是aof",{"_index":1407,"t":{"423":{"position":[[245,155]]}}}],["rdb镜像做全量持久化，aof",{"_index":1406,"t":{"423":{"position":[[220,24]]}}}],["rdb：类似快照技术，将当前的数据快照存留成rdb",{"_index":1368,"t":{"401":{"position":[[106,27]]}}}],["read",{"_index":1246,"t":{"323":{"position":[[241,9]]},"605":{"position":[[39,6]]}}}],["readcount",{"_index":1334,"t":{"382":{"position":[[343,12]]}}}],["reader",{"_index":2009,"t":{"597":{"position":[[43,6],[64,6]]}}}],["reader.clos",{"_index":2171,"t":{"597":{"position":[[7291,15]]}}}],["reader.getnumberofpag",{"_index":2019,"t":{"597":{"position":[[318,26],[2502,26]]}}}],["readonly=\"initshow",{"_index":1903,"t":{"567":{"position":[[263,20]]}}}],["readpdf工具读取pdf",{"_index":2005,"t":{"595":{"position":[[0,37]]}}}],["real",{"_index":804,"t":{"242":{"position":[[481,4]]}}}],["realnam",{"_index":1218,"t":{"317":{"position":[[147,11]]},"319":{"position":[[178,11]]},"321":{"position":[[128,11]]},"330":{"position":[[228,11]]},"336":{"position":[[304,11]]},"338":{"position":[[189,11]]},"340":{"position":[[101,11],[428,11]]},"388":{"position":[[251,11]]},"390":{"position":[[184,11]]},"392":{"position":[[139,11]]},"398":{"position":[[134,11]]}}}],["recallrecallrecall系数计算公式为：tp(tp+fp)\\frac{tp}{(tp+fp)}(tp+fp)tp",{"_index":729,"t":{"217":{"position":[[0,63]]}}}],["receiv",{"_index":1332,"t":{"382":{"position":[[280,11]]}}}],["receiveusercount",{"_index":1333,"t":{"382":{"position":[[312,19]]}}}],["receiveuserid",{"_index":1338,"t":{"384":{"position":[[89,17]]}}}],["redi",{"_index":1385,"t":{"414":{"position":[[229,12],[449,6]]},"446":{"position":[[96,5],[116,7]]},"448":{"position":[[140,11]]},"450":{"position":[[17,5],[50,5],[65,8]]},"452":{"position":[[0,11],[37,18]]},"466":{"position":[[0,5],[57,16]]},"470":{"position":[[0,5]]},"473":{"position":[[0,5]]},"478":{"position":[[0,5]]},"484":{"position":[[82,5]]},"486":{"position":[[0,5],[15,5],[37,5],[90,5],[111,41],[205,5]]}}}],["redis.conf",{"_index":1375,"t":{"409":{"position":[[73,14]]}}}],["redis.conf进行修改，但是不会直接修改源文件，需要新建一个myredis文件夹存放我们专门修改的配置文件，将redis.conf拷贝到/myredi",{"_index":1438,"t":{"446":{"position":[[251,90]]}}}],["redis.conf配置中的save《seconds》《chang",{"_index":1373,"t":{"409":{"position":[[0,40]]}}}],["redis7",{"_index":1372,"t":{"406":{"position":[[0,14],[15,9]]},"419":{"position":[[66,13]]}}}],["redisservice.getvalue(key",{"_index":2308,"t":{"634":{"position":[[416,27]]}}}],["redisservice.set(key",{"_index":2312,"t":{"634":{"position":[[588,21]]}}}],["redisservice实现的keyexpirationeventmessagelisten",{"_index":1648,"t":{"526":{"position":[[791,50]]}}}],["redistemplate.opsforvalue().get(key",{"_index":1660,"t":{"526":{"position":[[1210,37]]}}}],["redistemplate.opsforvalue().set(key",{"_index":1656,"t":{"526":{"position":[[992,36]]}}}],["redis中由两种持久化：rdb和aof",{"_index":1367,"t":{"401":{"position":[[0,105]]}}}],["redis再取bas",{"_index":2307,"t":{"634":{"position":[[387,13]]}}}],["redis官网中下载redis7版本压缩包后，使用xftp软件将本地的redis压缩包上传到服务器中的/opt目录下，一般安装包都放在/root/opt下，同时进行解压(tar",{"_index":1430,"t":{"446":{"position":[[0,89]]}}}],["redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redi",{"_index":1382,"t":{"414":{"position":[[0,124]]}}}],["redis版本的mq",{"_index":1504,"t":{"488":{"position":[[0,28]]}}}],["redis的安装目录并启动服务即可，其中如果备份成功还使用了flushdb清空redis，也会产生dump.rdb",{"_index":1378,"t":{"409":{"position":[[144,89]]}}}],["reentrantlock",{"_index":1643,"t":{"526":{"position":[[640,13],[665,16]]}}}],["reentrantlock的一个主要特点是它的名字所表示的含义——“可重入”。简单来说，如果一个线程已经持有了某个锁，那么它可以再次调用lock()方法而不会被阻塞。这在某些需要递归锁定的场景中非常有用。锁的持有计数会在每次成功调用lock()方法时递增，并在每次unlock",{"_index":1639,"t":{"526":{"position":[[153,154]]}}}],["reentrantlock的获取锁操作（lockinterruptibly()方法）可以被中断。这提供了另一个相对于synchronized关键字的优势，因为synchron",{"_index":1641,"t":{"526":{"position":[[431,104]]}}}],["reentrantlock类中还包含一个condition接口的实现，该接口允许线程在某些条件下等待或唤醒。这提供了一种比使用wait()和notifi",{"_index":1642,"t":{"526":{"position":[[536,98]]}}}],["reentrantlock，也被称为“可重入锁”，是一个同步工具类，在java.util.concurrent.locks包下。这种锁的一个重要特点是，它允许一个线程多次获取同一个锁而不会产生死锁。这与synchronized关键字提供的锁定机制非常相似，但reentrantlock",{"_index":1638,"t":{"526":{"position":[[0,152]]}}}],["ref=\"cod",{"_index":1967,"t":{"579":{"position":[[101,10]]}}}],["ref=\"lin",{"_index":1899,"t":{"567":{"position":[[165,10]]}}}],["refer",{"_index":458,"t":{"168":{"position":[[142,10]]}}}],["ref和v",{"_index":1973,"t":{"579":{"position":[[257,7]]}}}],["regex",{"_index":1741,"t":{"534":{"position":[[96,5]]}}}],["registri",{"_index":862,"t":{"254":{"position":[[73,8],[98,8],[130,8]]}}}],["remark",{"_index":1682,"t":{"529":{"position":[[646,6],[656,6],[1030,6],[1583,6]]},"534":{"position":[[697,7]]}}}],["rememb",{"_index":1112,"t":{"289":{"position":[[79,11]]},"330":{"position":[[77,11]]}}}],["remindcod",{"_index":2002,"t":{"592":{"position":[[297,11]]}}}],["remot",{"_index":754,"t":{"237":{"position":[[34,6]]}}}],["remote_addr",{"_index":806,"t":{"242":{"position":[[489,13],[593,13]]}}}],["remote_us",{"_index":813,"t":{"242":{"position":[[609,12]]}}}],["render",{"_index":1041,"t":{"274":{"position":[[43,7]]}}}],["repositori",{"_index":1527,"t":{"501":{"position":[[207,11]]}}}],["request",{"_index":815,"t":{"242":{"position":[[636,10]]},"265":{"position":[[1141,8]]},"268":{"position":[[278,8],[1124,8]]},"575":{"position":[[31,7],[129,9]]}}}],["request.getheader(\"accept",{"_index":925,"t":{"265":{"position":[[1229,25]]}}}],["request.getheader(defult_path_paramet",{"_index":958,"t":{"268":{"position":[[634,41]]}}}],["request.getheader(path_paramet",{"_index":948,"t":{"268":{"position":[[303,34]]}}}],["request.getlocal",{"_index":928,"t":{"265":{"position":[[1331,20]]}}}],["request.getparameter(path_paramet",{"_index":950,"t":{"268":{"position":[[377,37]]}}}],["requestbodi",{"_index":1579,"t":{"508":{"position":[[902,12]]}}}],["requestlocal",{"_index":927,"t":{"265":{"position":[[1315,13],[1681,14],[1714,14]]}}}],["requestmapping(valu",{"_index":1566,"t":{"508":{"position":[[367,21],[550,21],[800,21]]}}}],["requestparam(valu",{"_index":1574,"t":{"508":{"position":[[652,19]]}}}],["requir",{"_index":856,"t":{"246":{"position":[[32,8]]},"567":{"position":[[317,10]]},"588":{"position":[[0,44]]},"615":{"position":[[47,9]]}}}],["require('./en",{"_index":1034,"t":{"272":{"position":[[564,18]]},"280":{"position":[[409,15]]}}}],["require('./vi",{"_index":1036,"t":{"272":{"position":[[603,18]]}}}],["require('./zh",{"_index":1033,"t":{"272":{"position":[[525,18]]},"280":{"position":[[386,16]]}}}],["requirepass",{"_index":1446,"t":{"448":{"position":[[152,11]]}}}],["res.data",{"_index":1926,"t":{"567":{"position":[[841,9]]},"579":{"position":[[751,9]]},"628":{"position":[[617,9]]}}}],["res.messag",{"_index":1931,"t":{"567":{"position":[[1014,12]]},"579":{"position":[[924,12]]},"628":{"position":[[1317,12]]}}}],["resolvelocale(httpservletrequest",{"_index":922,"t":{"265":{"position":[[1108,32]]},"268":{"position":[[245,32]]}}}],["resourcebundlemessagesourc",{"_index":892,"t":{"263":{"position":[[302,27],[350,30]]}}}],["resourcebundlemessagesource这个类，我们导入的.properties文件就是通过这个类来读取的。springboot帮我们自动装配好了，使用自动配置的messagesourc",{"_index":904,"t":{"263":{"position":[[1084,116]]}}}],["respons",{"_index":973,"t":{"268":{"position":[[1153,9]]},"291":{"position":[[155,11]]},"293":{"position":[[65,11]]},"299":{"position":[[84,11]]},"301":{"position":[[175,11]]},"303":{"position":[[81,11]]},"305":{"position":[[307,11]]},"307":{"position":[[85,11]]},"309":{"position":[[360,11]]},"311":{"position":[[133,11]]},"313":{"position":[[128,11]]},"315":{"position":[[136,11]]},"317":{"position":[[70,11]]},"319":{"position":[[74,11]]},"321":{"position":[[490,11]]},"323":{"position":[[125,11]]},"325":{"position":[[82,11]]},"327":{"position":[[86,11]]},"330":{"position":[[139,11]]},"332":{"position":[[65,11]]},"336":{"position":[[158,11]]},"338":{"position":[[73,11]]},"340":{"position":[[296,11]]},"342":{"position":[[87,11]]},"344":{"position":[[79,11]]},"346":{"position":[[82,11]]},"348":{"position":[[136,11]]},"350":{"position":[[86,11]]},"352":{"position":[[159,11]]},"354":{"position":[[86,11]]},"356":{"position":[[177,11]]},"358":{"position":[[79,11]]},"360":{"position":[[735,11]]},"362":{"position":[[79,11]]},"364":{"position":[[185,11]]},"366":{"position":[[175,11]]},"368":{"position":[[79,11]]},"370":{"position":[[360,11]]},"372":{"position":[[77,11]]},"374":{"position":[[123,11]]},"376":{"position":[[74,11]]},"378":{"position":[[370,11]]},"380":{"position":[[87,11]]},"382":{"position":[[135,11]]},"384":{"position":[[171,11]]},"386":{"position":[[138,11]]},"388":{"position":[[148,11]]},"390":{"position":[[72,11]]},"392":{"position":[[495,11]]},"394":{"position":[[94,11]]},"398":{"position":[[497,11]]}}}],["restcontrol",{"_index":1565,"t":{"508":{"position":[[351,15]]}}}],["restcontroller,@requestmapping(valu",{"_index":1557,"t":{"508":{"position":[[74,39]]}}}],["result",{"_index":1537,"t":{"501":{"position":[[361,6]]},"597":{"position":[[6335,7]]}}}],["results.get(0",{"_index":2161,"t":{"597":{"position":[[6842,15]]}}}],["return",{"_index":48,"t":{"34":{"position":[[297,6]]},"95":{"position":[[360,6]]},"103":{"position":[[408,6],[426,6]]},"109":{"position":[[819,6],[957,6],[1096,6],[1228,6]]},"192":{"position":[[711,6]]},"263":{"position":[[183,6],[1060,6]]},"265":{"position":[[443,6],[652,6],[966,6],[1277,6],[1601,6],[1634,6],[1707,6]]},"268":{"position":[[1056,6],[1424,6]]},"270":{"position":[[379,7],[437,6],[517,7],[590,6],[922,6]]},"508":{"position":[[729,6],[932,6]]},"516":{"position":[[860,6]]},"526":{"position":[[1051,6],[1109,6],[1182,6]]},"567":{"position":[[690,6],[1027,6]]},"575":{"position":[[122,6]]},"579":{"position":[[419,6],[445,6],[600,6],[937,6],[1334,6]]},"597":{"position":[[1018,6]]},"622":{"position":[[648,6]]},"628":{"position":[[277,6],[456,6],[1330,6],[1609,6],[1834,6],[2259,6]]},"634":{"position":[[667,6],[720,6]]}}}],["right",{"_index":265,"t":{"109":{"position":[[1047,5],[1103,6]]}}}],["rl",{"_index":5,"t":{"5":{"position":[[42,7]]},"7":{"position":[[114,7]]},"12":{"position":[[257,29]]}}}],["rmdir",{"_index":771,"t":{"239":{"position":[[192,5]]}}}],["rn",{"_index":1681,"t":{"529":{"position":[[642,3]]},"547":{"position":[[124,2]]},"555":{"position":[[457,2]]}}}],["ro",{"_index":1826,"t":{"555":{"position":[[847,2]]}}}],["ro.router_step_bo",{"_index":1828,"t":{"555":{"position":[[864,17]]}}}],["role",{"_index":1229,"t":{"319":{"position":[[221,7]]},"321":{"position":[[171,7]]},"330":{"position":[[324,7]]},"336":{"position":[[61,7],[347,7]]},"338":{"position":[[232,7]]},"340":{"position":[[128,7],[556,7]]},"390":{"position":[[226,7]]},"392":{"position":[[181,7]]},"398":{"position":[[176,7]]}}}],["rolecod",{"_index":2297,"t":{"634":{"position":[[124,9],[365,9]]}}}],["root",{"_index":794,"t":{"242":{"position":[[283,4]]},"252":{"position":[[84,4]]},"622":{"position":[[178,4],[774,4]]}}}],["root/usr/local/bin下，ll列举redi",{"_index":1435,"t":{"446":{"position":[[158,37]]}}}],["router",{"_index":1039,"t":{"274":{"position":[[22,7]]}}}],["router_oper",{"_index":1825,"t":{"555":{"position":[[830,16]]}}}],["router_step",{"_index":1821,"t":{"555":{"position":[[755,11]]}}}],["router路径下的index.j",{"_index":1963,"t":{"577":{"position":[[0,24]]}}}],["row_numb",{"_index":1678,"t":{"529":{"position":[[539,12]]},"547":{"position":[[35,12],[127,12]]},"555":{"position":[[363,12]]}}}],["rr",{"_index":3,"t":{"5":{"position":[[28,5]]},"7":{"position":[[100,5]]},"12":{"position":[[205,21]]}}}],["rule",{"_index":2194,"t":{"615":{"position":[[36,10]]}}}],["run",{"_index":765,"t":{"239":{"position":[[138,3]]},"244":{"position":[[122,4],[287,4],[358,4],[382,3]]},"256":{"position":[[64,3]]}}}],["run/nginx.pid",{"_index":787,"t":{"242":{"position":[[156,15]]}}}],["runtimeexception(\"failur",{"_index":2047,"t":{"597":{"position":[[1405,35],[3182,35]]}}}],["runtimeexception(\"token",{"_index":2301,"t":{"634":{"position":[[203,23]]}}}],["runtimeexception(\"当前线体\"+checkreport.getlinebodi",{"_index":2159,"t":{"597":{"position":[[6708,61]]}}}],["runtimeexception(\"当前线体\"+checkreport.getlinebody()+\"下达工单的产品编码为：\"+itembo+\",与当前上传文件产品编码\"+checkreport.getproductcod",{"_index":2166,"t":{"597":{"position":[[6981,121]]}}}],["runtimeexception(\"未找到pdf",{"_index":2150,"t":{"597":{"position":[[6231,38]]}}}],["runtimeexception(\"解析失败，请检查pdf",{"_index":2169,"t":{"597":{"position":[[7200,36]]}}}],["runtimeexception(e.getmessage(),",{"_index":1555,"t":{"506":{"position":[[255,35]]}}}],["runtimeexception(messag",{"_index":1554,"t":{"506":{"position":[[183,26]]}}}],["rwerw",{"_index":1243,"t":{"323":{"position":[[181,8]]}}}],["r。上述的520",{"_index":708,"t":{"203":{"position":[[588,65]]}}}],["r个空队列qr,qr−1.......q0q_r,q_{r",{"_index":709,"t":{"203":{"position":[[669,31]]}}}],["r个队列，q(r)q(r)q(r",{"_index":712,"t":{"203":{"position":[[841,21]]}}}],["r中主键a",{"_index":445,"t":{"165":{"position":[[91,11]]}}}],["r和关系s，r÷s=t，首先找到r和s共同的属性c，然后在r",{"_index":449,"t":{"165":{"position":[[222,54]]}}}],["r和关系s，若r中的主键a与s中的b对应，则称b为关系s中的外码，对于s中元组中b",{"_index":444,"t":{"165":{"position":[[29,52]]}}}],["s",{"_index":404,"t":{"136":{"position":[[574,3]]},"239":{"position":[[198,2]]},"529":{"position":[[1053,1]]},"555":{"position":[[587,1]]}}}],["s,string",{"_index":143,"t":{"95":{"position":[[164,8]]},"103":{"position":[[265,8]]}}}],["s.len",{"_index":147,"t":{"95":{"position":[[205,5]]}}}],["s.planned_item_bo",{"_index":1817,"t":{"555":{"position":[[651,17]]}}}],["s.planned_router_bo",{"_index":1822,"t":{"555":{"position":[[772,19]]}}}],["s.qty_to_build",{"_index":1695,"t":{"529":{"position":[[966,15]]}}}],["s.shop_ord",{"_index":1698,"t":{"529":{"position":[[1080,12]]},"555":{"position":[[35,12],[592,12],[737,12]]}}}],["s.site",{"_index":1799,"t":{"555":{"position":[[19,6],[933,6]]}}}],["s801",{"_index":1684,"t":{"529":{"position":[[699,8]]},"597":{"position":[[528,19],[1092,19]]}}}],["s801工厂的pdf",{"_index":2016,"t":{"597":{"position":[[275,16]]}}}],["s801研控部门的pdf",{"_index":2007,"t":{"597":{"position":[[13,16],[178,16]]}}}],["s[i",{"_index":179,"t":{"101":{"position":[[886,8],[908,4],[982,6]]}}}],["s[i]≠t[i]s[i−j∼i−1]=t[0∼j−1]其中t[0∼k−1]=t[j−k∼j−1]所以s[i−k∼i−1]=t[0∼k−1]\\begin{align",{"_index":178,"t":{"101":{"position":[[797,88]]}}}],["s_g",{"_index":514,"t":{"172":{"position":[[295,3]]}}}],["samkirkland/ftp",{"_index":843,"t":{"244":{"position":[[417,15]]}}}],["sap",{"_index":1661,"t":{"529":{"position":[[0,33]]},"532":{"position":[[667,20]]},"558":{"position":[[87,35]]}}}],["sap接口传参要求[工单号，工序]，control",{"_index":1869,"t":{"558":{"position":[[123,41]]}}}],["sap接口查找到的标准产能来计算效率，并且返回到接口的list",{"_index":1870,"t":{"558":{"position":[[195,34]]}}}],["savedatalist.get(i).getazm",{"_index":1607,"t":{"516":{"position":[[535,30]]}}}],["savedatalist.get(i).getbarcod",{"_index":1601,"t":{"516":{"position":[[382,34]]}}}],["savedatalist.get(i).getcreate_d",{"_index":1613,"t":{"516":{"position":[[679,38]]}}}],["savedatalist.get(i).getcreate_us",{"_index":1615,"t":{"516":{"position":[[734,38]]}}}],["savedatalist.get(i).getseq",{"_index":1609,"t":{"516":{"position":[[582,30]]}}}],["savedatalist.get(i).getsfc",{"_index":1617,"t":{"516":{"position":[[789,30]]}}}],["savedatalist.get(i).getshop_ord",{"_index":1605,"t":{"516":{"position":[[481,37]]}}}],["savedatalist.get(i).getsit",{"_index":1603,"t":{"516":{"position":[[433,31]]}}}],["savedatalist.get(i).getsite()+\",\"+savedatalist.get(i).getline()+\",\"+savedatalist.get(i).getoper",{"_index":1734,"t":{"532":{"position":[[392,103]]}}}],["savedatalist.get(i).getstatu",{"_index":1611,"t":{"516":{"position":[[629,33]]}}}],["savedatalist.get(i).setprocess(nul",{"_index":1738,"t":{"532":{"position":[[625,37]]}}}],["savedatalist.get(i).setprocess(process",{"_index":1737,"t":{"532":{"position":[[567,40]]}}}],["savedatalist.s",{"_index":1619,"t":{"516":{"position":[[867,20]]},"532":{"position":[[351,20]]}}}],["save和bgsave，其中默认使用bgsav",{"_index":1379,"t":{"411":{"position":[[0,30]]}}}],["save：在程序执行构成会阻塞当前的redi",{"_index":1380,"t":{"411":{"position":[[31,58]]}}}],["sc",{"_index":489,"t":{"170":{"position":[[534,2],[772,2]]},"172":{"position":[[329,2]]}}}],["sc.sno",{"_index":491,"t":{"170":{"position":[[554,6]]}}}],["scancount",{"_index":1057,"t":{"276":{"position":[[277,12]]}}}],["schedul",{"_index":1856,"t":{"555":{"position":[[2242,9]]}}}],["score",{"_index":1149,"t":{"301":{"position":[[281,8]]},"303":{"position":[[537,8],[607,8]]},"307":{"position":[[571,8],[631,8],[732,8],[807,8],[885,8],[1077,8]]},"309":{"position":[[83,8],[271,8]]},"315":{"position":[[339,8],[434,8],[666,8]]},"356":{"position":[[283,8]]},"358":{"position":[[542,8],[614,8]]},"360":{"position":[[445,8],[605,8],[676,8],[1147,8],[1307,8],[1378,8]]},"364":{"position":[[284,8]]},"366":{"position":[[358,8]]},"368":{"position":[[309,8]]},"370":{"position":[[263,8]]},"376":{"position":[[234,8]]},"378":{"position":[[164,8],[533,8]]}}}],["script",{"_index":1074,"t":{"283":{"position":[[0,7],[52,7],[113,7],[189,7]]}}}],["sdept",{"_index":479,"t":{"170":{"position":[[192,5],[209,5]]}}}],["sdept=‘i",{"_index":513,"t":{"172":{"position":[[251,10]]}}}],["searchbtn",{"_index":2213,"t":{"622":{"position":[[285,12],[320,12],[898,12],[933,12]]}}}],["searchresultbyid(str",{"_index":1534,"t":{"501":{"position":[[302,23]]}}}],["searchresultbyid_1(@param(\"id\")str",{"_index":1539,"t":{"501":{"position":[[428,37]]}}}],["secrets.ftp_pwd",{"_index":848,"t":{"244":{"position":[[524,15]]}}}],["secrets.ftp_us",{"_index":846,"t":{"244":{"position":[[484,16]]}}}],["secrets.ftp_user要在github设置中进行配置，添加action的变量，然后设置好你的ftp的用户名和密码即可。同时要在ftp服务器上创建好对应的路径，确保能够让你的文件打包后能够上传部署到ftp",{"_index":851,"t":{"244":{"position":[[584,114]]}}}],["select",{"_index":466,"t":{"170":{"position":[[3,6],[153,8],[202,6],[343,6],[481,6],[811,6]]},"172":{"position":[[186,6],[302,6]]},"501":{"position":[[353,7]]},"529":{"position":[[148,6],[714,6],[1108,6]]},"543":{"position":[[66,6],[82,7],[132,6]]},"545":{"position":[[116,6]]},"555":{"position":[[12,6],[465,7],[1057,6],[1280,6],[1970,6]]},"564":{"position":[[0,6]]},"597":{"position":[[6385,7]]},"622":{"position":[[537,9],[1925,11]]}}}],["select/selectpage/selectal",{"_index":1758,"t":{"534":{"position":[[823,35]]}}}],["select=\"onselectlin",{"_index":1909,"t":{"567":{"position":[[387,22]]}}}],["selectid",{"_index":1755,"t":{"534":{"position":[[728,10]]}}}],["selectids:ids.join",{"_index":2253,"t":{"622":{"position":[[1996,23]]}}}],["selection[0].id",{"_index":2224,"t":{"622":{"position":[[677,16]]}}}],["selectsort(int",{"_index":629,"t":{"196":{"position":[[270,14]]}}}],["sendusernam",{"_index":1248,"t":{"323":{"position":[[308,15]]},"382":{"position":[[37,15],[246,15]]}}}],["seq",{"_index":1593,"t":{"516":{"position":[[127,4]]}}}],["serachdetai",{"_index":1573,"t":{"508":{"position":[[638,13],[888,13]]}}}],["serachid\",method={requestmethod.post",{"_index":1571,"t":{"508":{"position":[[574,40],[824,40]]}}}],["server",{"_index":791,"t":{"242":{"position":[[215,6]]},"244":{"position":[[459,7],[548,6]]},"414":{"position":[[242,6],[456,6]]},"446":{"position":[[226,24]]},"450":{"position":[[23,6]]}}}],["server_nam",{"_index":797,"t":{"242":{"position":[[372,11]]}}}],["servic",{"_index":1548,"t":{"506":{"position":[[70,10],[87,15]]}}}],["serviceimpl实现servic",{"_index":1550,"t":{"506":{"position":[[103,23]]}}}],["service提供服务,获取或者返回数据.注意功能逻辑卸载impl类中,不要在control",{"_index":1556,"t":{"508":{"position":[[0,65]]}}}],["set",{"_index":501,"t":{"170":{"position":[[712,3],[775,3]]},"470":{"position":[[8,3],[93,32]]},"473":{"position":[[13,3]]},"526":{"position":[[1127,22]]},"597":{"position":[[5720,3]]}}}],["set(str",{"_index":1652,"t":{"526":{"position":[[927,10]]}}}],["setbasenames和encoding的设置，这个都是配置文件的参数，我们只需要在配置文件中配置即可。是让springboot",{"_index":905,"t":{"263":{"position":[[1201,96]]}}}],["setlocale(httpservletrequest",{"_index":971,"t":{"268":{"position":[[1095,28]]}}}],["setvalues(preparedstat",{"_index":1598,"t":{"516":{"position":[[305,27]]}}}],["set的基础上，每个value的值前加一个score分数值，之前set是k1,v1,zset会变成k1,v1,score1",{"_index":1480,"t":{"475":{"position":[[0,62]]}}}],["sex",{"_index":1230,"t":{"319":{"position":[[237,6]]},"321":{"position":[[187,6]]},"330":{"position":[[259,6]]},"336":{"position":[[363,6]]},"338":{"position":[[248,6]]},"340":{"position":[[178,6],[473,6]]},"390":{"position":[[242,6]]},"392":{"position":[[197,6]]},"398":{"position":[[192,6]]},"508":{"position":[[722,4]]}}}],["sex\")str",{"_index":1577,"t":{"508":{"position":[[709,12]]}}}],["sf",{"_index":95,"t":{"71":{"position":[[42,14]]}}}],["sfc",{"_index":1054,"t":{"276":{"position":[[213,11]]},"516":{"position":[[166,4]]},"628":{"position":[[53,67]]}}}],["sfc:this.sfc",{"_index":2264,"t":{"628":{"position":[[518,12]]}}}],["sfc_config_list.html",{"_index":1768,"t":{"536":{"position":[[125,40]]}}}],["sfc_count",{"_index":1889,"t":{"564":{"position":[[131,9]]}}}],["sfc表单的sfc数据是否存在，主板条码是否存在，设置标志位x为重复过站操作，遇到x的时候checkcodeform校验存在sfc情况下返回exsit",{"_index":1585,"t":{"514":{"position":[[0,85]]}}}],["sfc，通过打印服务打印sfc",{"_index":2192,"t":{"613":{"position":[[0,30]]}}}],["sfsdf",{"_index":1245,"t":{"323":{"position":[[225,8]]}}}],["sheet",{"_index":1906,"t":{"567":{"position":[[340,5]]}}}],["shell",{"_index":869,"t":{"256":{"position":[[193,14]]}}}],["shellsort(int",{"_index":560,"t":{"186":{"position":[[217,13]]}}}],["shop_ord",{"_index":1591,"t":{"516":{"position":[[110,11]]},"529":{"position":[[178,10],[192,11],[764,11],[1042,10],[1159,11]]},"555":{"position":[[51,11],[473,10],[557,11],[576,10]]},"597":{"position":[[6483,10]]}}}],["shopord",{"_index":1744,"t":{"534":{"position":[[240,10]]},"571":{"position":[[270,10]]},"597":{"position":[[2676,9]]}}}],["shoporder:this.shopord",{"_index":1921,"t":{"567":{"position":[[737,24]]},"579":{"position":[[647,24]]}}}],["shoporderqti",{"_index":1746,"t":{"534":{"position":[[336,13]]}}}],["shorttitl",{"_index":1205,"t":{"313":{"position":[[284,13]]},"366":{"position":[[497,13]]}}}],["showlin",{"_index":1912,"t":{"567":{"position":[[517,9]]}}}],["shutdown",{"_index":1450,"t":{"452":{"position":[[28,8],[68,8]]}}}],["sigma",{"_index":446,"t":{"165":{"position":[[116,11]]}}}],["sim",{"_index":175,"t":{"101":{"position":[[626,4],[645,4],[915,4],[931,4],[951,4],[969,4],[991,4],[1007,4],[1797,4],[1815,4],[1870,4],[1895,4],[1921,4],[1937,4]]}}}],["site",{"_index":1590,"t":{"516":{"position":[[104,5]]},"529":{"position":[[692,4]]},"534":{"position":[[188,5]]},"555":{"position":[[29,5]]},"567":{"position":[[1307,5]]},"571":{"position":[[249,5]]},"597":{"position":[[6572,4]]}}}],["site:sit",{"_index":2252,"t":{"622":{"position":[[1985,10]]}}}],["site:this.sit",{"_index":1920,"t":{"567":{"position":[[721,15]]},"579":{"position":[[631,15]]},"628":{"position":[[502,15]]}}}],["size",{"_index":1361,"t":{"396":{"position":[[162,7]]}}}],["smt后对板就行序列编码(标记1，2，3",{"_index":1519,"t":{"496":{"position":[[27,33]]}}}],["smt：一种工艺，对pcb进行贴片，将一些元器件安装到pcb",{"_index":1517,"t":{"492":{"position":[[50,32]]}}}],["sname",{"_index":506,"t":{"170":{"position":[[841,5]]}}}],["sname,ssex",{"_index":477,"t":{"170":{"position":[[162,10]]}}}],["sno",{"_index":505,"t":{"170":{"position":[[802,3],[818,3]]},"172":{"position":[[341,3]]}}}],["sno,avg(grad",{"_index":515,"t":{"172":{"position":[[309,14]]}}}],["sno,sname,sag",{"_index":512,"t":{"172":{"position":[[193,14]]}}}],["sofu6",{"_index":156,"t":{"97":{"position":[[193,5]]}}}],["soldercabinet/solderpaste_enter_check_add.html",{"_index":2209,"t":{"622":{"position":[[185,50]]}}}],["soldercabinet/solderpaste_enter_check_add.html?mainid=${mainid",{"_index":2227,"t":{"622":{"position":[[781,67]]}}}],["soldercabinetadministr",{"_index":2295,"t":{"634":{"position":[[40,32]]}}}],["solderpast",{"_index":1044,"t":{"276":{"position":[[0,15]]}}}],["solderpaste_enter_check.html和solderpaste_enter_check_add.html",{"_index":2204,"t":{"622":{"position":[[0,65]]}}}],["solderpastemanagerservice.standardwarmtime.exceedlimit=操作失败:该物料回温开始时间为{0},已经回温{1}小时,必须在{2",{"_index":1010,"t":{"270":{"position":[[1326,108]]}}}],["splice",{"_index":1989,"t":{"579":{"position":[[1390,31]]}}}],["split",{"_index":953,"t":{"268":{"position":[[490,5],[902,5]]},"597":{"position":[[622,6],[695,5],[1186,6],[1302,5],[2920,6],[3048,5],[3367,5],[3514,5],[3732,5],[3858,5],[4025,5],[4420,5],[4479,5]]}}}],["split(ro.operation_bo,2",{"_index":1829,"t":{"555":{"position":[[902,24]]}}}],["split(s.planned_item_bo,2",{"_index":1696,"t":{"529":{"position":[[982,26]]},"555":{"position":[[63,26]]}}}],["split.length",{"_index":955,"t":{"268":{"position":[[518,13]]},"597":{"position":[[3555,13]]}}}],["split.length==2",{"_index":2113,"t":{"597":{"position":[[4451,18]]}}}],["split[0",{"_index":969,"t":{"268":{"position":[[1011,11]]}}}],["split[1",{"_index":957,"t":{"268":{"position":[[568,10]]},"597":{"position":[[1457,9],[2155,9]]}}}],["split[3",{"_index":2036,"t":{"597":{"position":[[855,17]]}}}],["split[4",{"_index":2054,"t":{"597":{"position":[[1699,12],[4590,12]]}}}],["split[length",{"_index":2095,"t":{"597":{"position":[[3660,12]]}}}],["spring.messag",{"_index":885,"t":{"263":{"position":[[104,17],[1334,17]]}}}],["springboot会将.properties文件作为resourcebundl",{"_index":879,"t":{"261":{"position":[[157,63]]}}}],["springboot会根据locale获取地域信息配置，拼接上basename就可以拿到国际化的数据，所以命名要严格。basenam",{"_index":880,"t":{"261":{"position":[[221,89]]}}}],["springboot使用locale来获取区域信息，然后根据区域信息，利用自动配置了resourcebundlemessagesource的messagesource去制定路径下获取区域对应的国际化信息。我们只需要重写一下自己的localeresolv",{"_index":936,"t":{"265":{"position":[[1781,158]]}}}],["springboot自动配置类，里面配置了messagesource，springboot",{"_index":881,"t":{"263":{"position":[[0,62]]}}}],["sql",{"_index":448,"t":{"165":{"position":[[179,42]]},"503":{"position":[[69,23],[125,4],[130,3]]},"529":{"position":[[34,54],[126,6]]},"558":{"position":[[0,25]]},"628":{"position":[[10,42]]}}}],["sql.append",{"_index":1767,"t":{"536":{"position":[[77,12]]}}}],["sql_s801",{"_index":2032,"t":{"597":{"position":[[748,8]]}}}],["sql_s801.append(\"select",{"_index":2033,"t":{"597":{"position":[[779,23]]}}}],["sqlexcept",{"_index":1599,"t":{"516":{"position":[[351,12]]}}}],["sqlresult",{"_index":1545,"t":{"503":{"position":[[181,9],[226,9],[314,14]]}}}],["sqlresult.get(i).get(\"line\").tostr",{"_index":2003,"t":{"592":{"position":[[327,40]]}}}],["sqlresult.get(i).get(\"line\").tostring()+\",工单\"+sqlresult.get(i).get(\"shop_order\").tostring()+\"有清洗记录,\"+\"清洗数量\"+sqlresult.get(i).get(\"sfc_count\").tostr",{"_index":2000,"t":{"592":{"position":[[87,168]]}}}],["sqlresult_s801",{"_index":2038,"t":{"597":{"position":[[899,14]]}}}],["sql即可：select",{"_index":1485,"t":{"480":{"position":[[236,16]]}}}],["sql可以将工单下关联的barcode和barcode下关联的sfc进行统计，得出清洗总数，使用聚合函数count注意要结合group",{"_index":1896,"t":{"564":{"position":[[331,68]]}}}],["sql封到serviceimpl类中，能够使用servic",{"_index":1868,"t":{"558":{"position":[[26,40]]}}}],["sql的方法,使用jpa是方便,但是遇到繁杂的业务,需要几次的jpa",{"_index":1541,"t":{"503":{"position":[[0,68]]}}}],["sql设计，简短sql设计使用query在dao中书写即可，复杂sql场景使用stringbuffer来拼接sql，多条件的时候，尽可能的先把表连接起来，然后判断是否进行and",{"_index":1953,"t":{"571":{"position":[[662,88]]}}}],["src=\"../js/base.js\"></script",{"_index":1077,"t":{"283":{"position":[[83,29]]}}}],["src=\"../js/common/i18n.config.js\"></script",{"_index":1081,"t":{"283":{"position":[[211,43]]}}}],["src=\"../js/jquery.min.js?v=2.1.4\"></script",{"_index":1075,"t":{"283":{"position":[[8,43]]}}}],["src=\"../js/plugins/jqueri",{"_index":1078,"t":{"283":{"position":[[121,25]]}}}],["sss和vvv",{"_index":387,"t":{"136":{"position":[[27,26]]}}}],["sss，此时树中只有一个顶点，然后从剩余顶点集合ttt中选取相距树中顶点集合最近的点，并且将该边加入集合sss中，过程要记得避开回路，也是离散数学中的避圈法。每次都会加入一个点和一条边，n−1n",{"_index":384,"t":{"132":{"position":[[0,121]]}}}],["stack",{"_index":855,"t":{"246":{"position":[[26,5]]}}}],["stand_peopl",{"_index":1712,"t":{"529":{"position":[[1365,13]]}}}],["stand_product",{"_index":1714,"t":{"529":{"position":[[1398,14]]}}}],["standpeopl",{"_index":1751,"t":{"534":{"position":[[529,12]]}}}],["standproduct",{"_index":1752,"t":{"534":{"position":[[564,13]]}}}],["start_tim",{"_index":1665,"t":{"529":{"position":[[238,10],[252,11],[828,11]]},"545":{"position":[[139,11]]},"555":{"position":[[114,11],[1080,11],[1303,11]]}}}],["startdat",{"_index":1747,"t":{"534":{"position":[[372,10]]}}}],["stash",{"_index":1998,"t":{"583":{"position":[[133,8]]}}}],["stash：能够将当前工作区修改的代码进行一个暂存，往往在开发过程中会出现以往功能的一些bug修复，这时候需要从当前分支切换到另一个分支，会出现\"放弃当前想修改\"的提醒，这时候为了能够保存修改，又能切换分支修复bug，对当前修改的文件进行git",{"_index":1997,"t":{"583":{"position":[[10,122]]}}}],["state",{"_index":1364,"t":{"396":{"position":[[193,8]]}}}],["static",{"_index":941,"t":{"268":{"position":[[105,6],[158,6]]},"270":{"position":[[91,6],[214,6],[397,6],[535,6],[654,6]]}}}],["staticmessagesourc",{"_index":985,"t":{"270":{"position":[[235,20]]}}}],["staticmessagesource.getmessage(cod",{"_index":997,"t":{"270":{"position":[[764,36]]}}}],["statu",{"_index":816,"t":{"242":{"position":[[649,8]]},"297":{"position":[[213,9]]},"311":{"position":[[472,9]]},"319":{"position":[[416,9]]},"321":{"position":[[366,9]]},"330":{"position":[[338,9]]},"336":{"position":[[563,9]]},"338":{"position":[[448,9]]},"340":{"position":[[144,9],[572,9]]},"366":{"position":[[378,9]]},"386":{"position":[[466,9]]},"390":{"position":[[420,9]]},"392":{"position":[[392,9]]},"398":{"position":[[394,9]]},"516":{"position":[[132,7]]},"520":{"position":[[143,6]]}}}],["step",{"_index":830,"t":{"244":{"position":[[145,6]]}}}],["step1",{"_index":432,"t":{"153":{"position":[[165,13]]}}}],["step2",{"_index":433,"t":{"153":{"position":[[179,16]]}}}],["stop",{"_index":865,"t":{"256":{"position":[[115,4]]}}}],["store",{"_index":1040,"t":{"274":{"position":[[36,6]]}}}],["stream",{"_index":811,"t":{"242":{"position":[[569,7]]},"486":{"position":[[6,6],[43,6],[211,6]]}}}],["stream可以用来快速处理list类型的数据，避免繁杂的for",{"_index":1417,"t":{"441":{"position":[[0,39]]}}}],["stream流打开处理，filter进行过滤，anymatch相当于遍历每一个map数据进行处理，其中使用lambda",{"_index":1423,"t":{"441":{"position":[[150,64]]}}}],["string",{"_index":943,"t":{"268":{"position":[[118,6],[171,6],[289,6],[481,8],[771,8],[847,6],[893,8]]},"270":{"position":[[404,6],[542,6],[661,6],[707,6],[732,6]]},"466":{"position":[[15,6]]},"470":{"position":[[14,6]]},"503":{"position":[[93,6]]},"516":{"position":[[43,6]]},"520":{"position":[[78,6]]},"526":{"position":[[943,6]]},"532":{"position":[[169,6],[379,6],[496,6]]},"534":{"position":[[89,6],[181,6],[207,6],[233,6],[266,6],[294,6],[329,6],[365,6],[398,6],[428,6],[459,6],[490,6],[522,6],[557,6],[593,6],[625,6],[656,6],[690,6],[721,6],[806,6],[867,6],[900,6],[934,6],[968,6]]},"567":{"position":[[1280,6],[1300,6],[1313,6]]},"571":{"position":[[242,6],[263,6],[289,6],[313,6],[334,6],[355,6],[381,6],[408,6],[436,6],[464,6],[492,6],[526,6],[560,6]]},"592":{"position":[[73,6]]},"597":{"position":[[143,6],[198,6],[218,6],[479,8],[613,8],[629,6],[1176,6],[1193,6],[2669,6],[2713,6],[2800,8],[2911,8],[2927,6],[5139,6],[5215,8],[5667,6],[5927,6]]},"634":{"position":[[242,6],[276,6],[314,6],[401,6]]}}}],["string.format(\"%.2f",{"_index":1006,"t":{"270":{"position":[[1199,21]]}}}],["string.format(\"%s:%s:%",{"_index":2305,"t":{"634":{"position":[[327,25]]}}}],["string.valueof(bzhwdate_max",{"_index":1008,"t":{"270":{"position":[[1231,30]]}}}],["string.valueof(checkresult",{"_index":2311,"t":{"634":{"position":[[559,28]]}}}],["string[]{solderpaste.getmodified_d",{"_index":1005,"t":{"270":{"position":[[1158,40]]}}}],["stringbuff",{"_index":1543,"t":{"503":{"position":[[112,12],[140,15]]},"597":{"position":[[735,12],[763,15]]}}}],["stringutils.equals(facetype,\"a",{"_index":2122,"t":{"597":{"position":[[4905,35]]}}}],["stringutils.equals(facetype,\"b",{"_index":2123,"t":{"597":{"position":[[4962,35]]}}}],["stringutils.equals(string.valueof(itembo",{"_index":2164,"t":{"597":{"position":[[6894,42]]}}}],["stringutils.hastext(properties.getbasenam",{"_index":893,"t":{"263":{"position":[[384,47]]}}}],["stringutils.isblank(lang",{"_index":949,"t":{"268":{"position":[[341,28]]}}}],["stringutils.isempty(lang",{"_index":952,"t":{"268":{"position":[[450,28]]}}}],["string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg",{"_index":1453,"t":{"455":{"position":[[0,89]]}}}],["string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。zset",{"_index":1477,"t":{"473":{"position":[[17,143]]}}}],["string类型是redis最基本的数据类型，一个redis中字符串value最多可以是512m",{"_index":1454,"t":{"455":{"position":[[90,49]]}}}],["string，分页调用basefunctionservice的getsqlpagelimitresult函数即可，传入sql",{"_index":1952,"t":{"571":{"position":[[583,78]]}}}],["struct",{"_index":241,"t":{"109":{"position":[[617,6],[2532,6],[2693,6],[2716,6],[2772,6],[2872,6],[2895,6]]},"121":{"position":[[612,7]]},"123":{"position":[[98,6],[145,6],[197,6],[278,7]]}}}],["student",{"_index":478,"t":{"170":{"position":[[178,7],[516,7],[827,7]]},"172":{"position":[[237,7]]},"289":{"position":[[41,10],[128,10]]},"317":{"position":[[130,10],[187,8]]},"319":{"position":[[161,10]]},"321":{"position":[[111,10]]},"382":{"position":[[292,10]]},"386":{"position":[[527,9]]},"394":{"position":[[44,7],[118,10]]}}}],["student.sno",{"_index":490,"t":{"170":{"position":[[540,11]]}}}],["student.sno,sname,ssex",{"_index":488,"t":{"170":{"position":[[488,22]]}}}],["student5",{"_index":1115,"t":{"291":{"position":[[52,11]]}}}],["subjectid",{"_index":1141,"t":{"301":{"position":[[69,12],[368,12]]},"303":{"position":[[128,12],[355,12]]},"307":{"position":[[150,12],[431,12]]},"311":{"position":[[290,12]]},"315":{"position":[[210,12]]},"356":{"position":[[72,12],[371,12]]},"358":{"position":[[127,12],[356,12]]},"360":{"position":[[74,12],[305,12],[783,12],[1007,12]]},"364":{"position":[[48,12],[371,12]]},"366":{"position":[[87,12],[314,12]]},"368":{"position":[[135,12]]},"370":{"position":[[79,12]]},"376":{"position":[[322,12]]},"378":{"position":[[252,12],[621,12]]},"386":{"position":[[45,12],[284,12]]}}}],["subjectnam",{"_index":1156,"t":{"301":{"position":[[391,14]]},"311":{"position":[[262,14]]},"313":{"position":[[258,14]]},"386":{"position":[[256,14]]}}}],["success",{"_index":305,"t":{"109":{"position":[[3128,10]]},"396":{"position":[[202,9]]},"514":{"position":[[86,25]]}}}],["success:funct",{"_index":2214,"t":{"622":{"position":[[336,16],[949,16]]}}}],["sudo",{"_index":840,"t":{"244":{"position":[[292,4],[315,4]]}}}],["suggesttim",{"_index":1161,"t":{"303":{"position":[[194,14]]},"307":{"position":[[218,14]]},"358":{"position":[[194,14]]},"360":{"position":[[142,14],[851,14]]}}}],["sum",{"_index":1791,"t":{"547":{"position":[[196,13],[210,6]]}}}],["sum(all_count",{"_index":1673,"t":{"529":{"position":[[439,14]]}}}],["sum(cas",{"_index":1835,"t":{"555":{"position":[[1339,8],[1451,8],[1565,8],[1706,8]]}}}],["sum(p.all_count",{"_index":1794,"t":{"551":{"position":[[0,16]]},"555":{"position":[[2293,16]]}}}],["sum(t.all_count",{"_index":1785,"t":{"545":{"position":[[197,16]]},"555":{"position":[[1116,16]]}}}],["sum(t.pass_count",{"_index":1833,"t":{"555":{"position":[[1147,17]]}}}],["sum_count",{"_index":1677,"t":{"529":{"position":[[528,10],[955,10],[1336,10]]},"551":{"position":[[49,9]]},"555":{"position":[[2342,10]]}}}],["sumcount",{"_index":1750,"t":{"534":{"position":[[497,9]]}}}],["sumn",{"_index":316,"t":{"116":{"position":[[80,15]]}}}],["supplier",{"_index":1048,"t":{"276":{"position":[[74,17]]}}}],["supportedlocal",{"_index":930,"t":{"265":{"position":[[1365,16],[1499,15],[1551,18],[1573,16],[1608,16]]}}}],["supportedlocales.contains(requestlocal",{"_index":933,"t":{"265":{"position":[[1447,42]]}}}],["supportedlocales.isempti",{"_index":932,"t":{"265":{"position":[[1415,28]]}}}],["swagger",{"_index":1561,"t":{"508":{"position":[[161,11]]}}}],["swap(a[i],a[1",{"_index":662,"t":{"198":{"position":[[1399,16]]}}}],["swap(a[i],a[min",{"_index":633,"t":{"196":{"position":[[402,18]]}}}],["swap(a[j],a[i]);flag",{"_index":590,"t":{"190":{"position":[[224,20]]}}}],["swap(int",{"_index":581,"t":{"190":{"position":[[32,8]]}}}],["switch",{"_index":2044,"t":{"597":{"position":[[1330,6]]}}}],["synchron",{"_index":1637,"t":{"524":{"position":[[0,49]]}}}],["synchronized关键字不同，reentrantlock",{"_index":1640,"t":{"526":{"position":[[308,122]]}}}],["system.out.printf",{"_index":2168,"t":{"597":{"position":[[7139,26]]}}}],["system.out.printf(\"第\"+i+\"行数据为：\"+tempstr",{"_index":2042,"t":{"597":{"position":[[1230,41]]}}}],["system.out.printf(string.valueof(result",{"_index":2160,"t":{"597":{"position":[[6772,43]]}}}],["system.out.println(i+\"行数据为：\"+contentsplit[i",{"_index":2083,"t":{"597":{"position":[[2961,46]]}}}],["system.out.println(pagecont",{"_index":2077,"t":{"597":{"position":[[2632,34]]}}}],["systemscor",{"_index":1197,"t":{"311":{"position":[[443,14]]},"386":{"position":[[437,14]]}}}],["s和b，定位b在s中的位置称之为串的模式匹配，其中s称之为主串，t",{"_index":140,"t":{"93":{"position":[[0,45]]}}}],["s和t",{"_index":159,"t":{"99":{"position":[[55,155]]}}}],["s和模式串t的长度n和m。时间复杂度为o(nm)o(nm)o(nm",{"_index":154,"t":{"95":{"position":[[372,109]]}}}],["s的取值决定正负；m表示尾数，r是基数（2,4,8...），e是阶码，表示2e2^e2",{"_index":123,"t":{"87":{"position":[[46,44]]}}}],["s（31",{"_index":130,"t":{"91":{"position":[[58,7]]}}}],["s，z对应锡膏，p",{"_index":1416,"t":{"436":{"position":[[41,20]]}}}],["t",{"_index":144,"t":{"95":{"position":[[173,3]]},"543":{"position":[[63,2],[97,1],[112,4]]},"545":{"position":[[232,1]]},"555":{"position":[[5,1],[1213,1],[1867,1],[2537,1]]}}}],["t,int",{"_index":204,"t":{"103":{"position":[[60,5],[274,5]]},"105":{"position":[[362,5]]}}}],["t.all_count",{"_index":1839,"t":{"555":{"position":[[1411,11],[1805,11]]}}}],["t.ch[i",{"_index":151,"t":{"95":{"position":[[241,9]]}}}],["t.ch[j",{"_index":209,"t":{"103":{"position":[[130,9],[353,9]]},"105":{"position":[[444,7]]}}}],["t.ch[k",{"_index":210,"t":{"103":{"position":[[143,9]]},"105":{"position":[[455,9],[489,8]]}}}],["t.daytim",{"_index":1784,"t":{"545":{"position":[[175,9],[269,9]]}}}],["t.descript",{"_index":1857,"t":{"555":{"position":[[2252,14]]}}}],["t.end_tim",{"_index":1783,"t":{"545":{"position":[[151,10],[257,11]]},"555":{"position":[[1092,10],[1238,10],[1315,10],[1935,10],[2587,10]]}}}],["t.item",{"_index":1850,"t":{"555":{"position":[[1991,7]]}}}],["t.len",{"_index":149,"t":{"95":{"position":[[219,7],[339,6]]},"103":{"position":[[419,6]]},"105":{"position":[[423,7]]}}}],["t.len)return",{"_index":153,"t":{"95":{"position":[[322,12]]}}}],["t.line",{"_index":1851,"t":{"555":{"position":[[1999,7]]}}}],["t.oper",{"_index":1836,"t":{"555":{"position":[[1353,11],[1381,11],[1465,11],[1493,11],[1579,11],[1606,11],[1634,11],[1720,11],[1747,11],[1775,11],[2267,12]]}}}],["t.pass_count",{"_index":1841,"t":{"555":{"position":[[1523,12],[1664,12]]}}}],["t.process",{"_index":1852,"t":{"555":{"position":[[2007,10]]}}}],["t.rn",{"_index":1866,"t":{"555":{"position":[[2670,4]]}}}],["t.shop_ord",{"_index":1849,"t":{"555":{"position":[[1977,13]]}}}],["t.start_tim",{"_index":1782,"t":{"545":{"position":[[123,12],[243,13],[288,12]]},"555":{"position":[[1064,12],[1224,13],[1258,14],[1287,12],[1921,13],[1955,12],[2557,12]]}}}],["t[0",{"_index":182,"t":{"101":{"position":[[927,3],[944,6],[1003,3],[1784,12],[1859,10],[1913,7]]}}}],["t[],int",{"_index":247,"t":{"109":{"position":[[683,7]]}}}],["t[i",{"_index":181,"t":{"101":{"position":[[900,4]]}}}],["t[i].isempti",{"_index":250,"t":{"109":{"position":[[723,12]]}}}],["t[j",{"_index":183,"t":{"101":{"position":[[963,3],[1745,5],[1809,3],[1853,5],[1889,3],[1905,7],[1931,3],[2103,11]]}}}],["t[j]t[k]=t[j]时我们执行k=next[k]k=next[k]k=next[k]的目的是，寻找从k这个位置往前的最小前缀是否跟后面的最小后缀匹配。因为我们这个求解的核心就是找该指针之前的串的最大匹配的前后缀。当遇到不等的时候，也递推回去找更小的，当其中next[k]我们能明显的看出其值等于1，因为最长的前后缀长度为1，于是指针k指到了next[k]也就是b的位置，此时执行判定t[k]=t[j]？，如若相等就如上部分的情况，加1即可，如若不等则继续执行k=next[k]k=next[k]k=next[k]，一直递推下去，如果出现了k",{"_index":197,"t":{"101":{"position":[[2221,274]]}}}],["t[k",{"_index":190,"t":{"101":{"position":[[1737,7],[1842,10],[1882,4],[2117,29]]}}}],["t[k]=t[j]可以很快得出next[j]=next[j−1]+1因为我们可以得出t[0∼k−1]=t[j−k∼j−1](next[j]=k)这时候因为t[k]=t[j]那我们可以得出t[0∼k−1]+t[k]=t[j−k∼j−1]+t[j]也就是t[0∼k]=t[j−k∼j]\\begin{align",{"_index":189,"t":{"101":{"position":[[1579,157]]}}}],["t[k]≠t[j]t[k]\\neq",{"_index":196,"t":{"101":{"position":[[2200,20]]}}}],["tabl",{"_index":452,"t":{"168":{"position":[[7,5],[181,5]]},"501":{"position":[[373,5]]},"579":{"position":[[1172,6]]},"628":{"position":[[1424,6]]}}}],["table(nam",{"_index":1523,"t":{"501":{"position":[[119,11]]}}}],["table.getcheckboxrecord",{"_index":1985,"t":{"579":{"position":[[1223,28]]},"628":{"position":[[1473,28]]}}}],["table/lib/locale/lang/en",{"_index":1026,"t":{"272":{"position":[[285,24]]}}}],["table/lib/locale/lang/zh",{"_index":1024,"t":{"272":{"position":[[233,24]]}}}],["table_1,table_2",{"_index":468,"t":{"170":{"position":[[21,15]]}}}],["tag",{"_index":1560,"t":{"508":{"position":[[150,6],[420,9]]}}}],["taxi",{"_index":1486,"t":{"480":{"position":[[253,4]]}}}],["technic",{"_index":854,"t":{"246":{"position":[[16,9]]}}}],["technologytyp",{"_index":1053,"t":{"276":{"position":[[190,22]]},"622":{"position":[[1478,14],[1714,15]]}}}],["technologytype:technologytyp",{"_index":2247,"t":{"622":{"position":[[1802,30]]}}}],["temp",{"_index":583,"t":{"190":{"position":[[57,4],[78,5]]}}}],["tempstr",{"_index":2027,"t":{"597":{"position":[[636,7],[666,8],[1200,7],[2934,7]]}}}],["tempstr.split",{"_index":2030,"t":{"597":{"position":[[703,15],[1310,15],[3056,15],[3375,15],[3522,15],[3740,15],[3866,15],[4033,15],[4428,15]]}}}],["test",{"_index":1219,"t":{"317":{"position":[[159,7]]},"319":{"position":[[190,7]]},"321":{"position":[[140,7]]},"508":{"position":[[432,7],[542,7],[792,7]]}}}],["test33333",{"_index":1122,"t":{"295":{"position":[[101,12]]}}}],["testdao",{"_index":1529,"t":{"501":{"position":[[236,7]]}}}],["testservic",{"_index":1569,"t":{"508":{"position":[[495,11],[507,12]]}}}],["testservice.serachid(name,sex",{"_index":1578,"t":{"508":{"position":[[736,31]]}}}],["testservice.serachid(person.getname,person.getsex",{"_index":1581,"t":{"508":{"position":[[939,51]]}}}],["testtyp",{"_index":2014,"t":{"597":{"position":[[225,12],[1841,8]]}}}],["testtype=split[3",{"_index":2087,"t":{"597":{"position":[[3301,18]]}}}],["testzz",{"_index":1279,"t":{"340":{"position":[[58,9],[392,9]]}}}],["tesx",{"_index":1280,"t":{"340":{"position":[[113,7],[440,7]]}}}],["text",{"_index":1098,"t":{"285":{"position":[[408,9],[827,13]]},"592":{"position":[[80,4],[309,5]]}}}],["text=\"micro_feed_and_turnpull.shoporder\">线体</label",{"_index":1110,"t":{"285":{"position":[[858,51]]}}}],["text]\").each(funct",{"_index":1096,"t":{"285":{"position":[[339,24]]}}}],["textcontentid",{"_index":1310,"t":{"366":{"position":[[247,16]]}}}],["then(r",{"_index":1924,"t":{"567":{"position":[[793,9]]},"579":{"position":[[703,9]]},"628":{"position":[[569,9]]}}}],["this).attr(\"placeholder\",($.i18n.prop($(this).data(\"i18n",{"_index":1100,"t":{"285":{"position":[[468,58]]}}}],["this).attr(\"title\",($.i18n.prop($(this).data(\"i18n",{"_index":1106,"t":{"285":{"position":[[687,52]]}}}],["this).html($.i18n.prop($(this).data(\"i18n",{"_index":1097,"t":{"285":{"position":[[364,43]]}}}],["this).val($.i18n.prop($(this).data(\"i18n",{"_index":1103,"t":{"285":{"position":[[589,42]]}}}],["this.$i18n.loc",{"_index":1062,"t":{"278":{"position":[[159,16]]}}}],["this.$i18n.local",{"_index":1030,"t":{"272":{"position":[[403,17]]},"280":{"position":[[276,17],[718,17]]}}}],["this.$refs.code.focu",{"_index":1936,"t":{"567":{"position":[[1125,24]]}}}],["this.$refs.line.focu",{"_index":1929,"t":{"567":{"position":[[925,24]]},"579":{"position":[[835,24]]}}}],["this.$refs.sfc.focu",{"_index":2260,"t":{"628":{"position":[[253,23],[432,23]]}}}],["this.$refs.shoporder.focu",{"_index":1919,"t":{"567":{"position":[[660,29]]},"579":{"position":[[570,29]]}}}],["this.$refs.xt",{"_index":1984,"t":{"579":{"position":[[1181,18]]},"628":{"position":[[1433,18]]}}}],["this.$t",{"_index":1918,"t":{"567":{"position":[[641,18]]},"579":{"position":[[551,18]]}}}],["this.$vantlocales(v",{"_index":1073,"t":{"280":{"position":[[742,22]]}}}],["this.convertlisttokeyvalue(lin",{"_index":1928,"t":{"567":{"position":[[869,33]]},"579":{"position":[[779,33]]}}}],["this.findsupportedlocale(request",{"_index":934,"t":{"265":{"position":[[1517,33]]}}}],["this.flag",{"_index":2275,"t":{"628":{"position":[[867,9],[879,9],[1202,9],[1214,9],[1936,9],[1948,9],[2361,9],[2373,9],[2481,9]]}}}],["this.getdefaultlocal",{"_index":924,"t":{"265":{"position":[[1175,24]]}}}],["this.getsupportedlocal",{"_index":931,"t":{"265":{"position":[[1384,27]]}}}],["this.info_error",{"_index":1917,"t":{"567":{"position":[[623,15],[903,15],[996,15]]},"579":{"position":[[533,15],[813,15],[906,15]]},"628":{"position":[[1231,15],[1299,15]]}}}],["this.lin",{"_index":1934,"t":{"567":{"position":[[1101,9]]}}}],["this.lineresult",{"_index":1927,"t":{"567":{"position":[[851,15]]},"579":{"position":[[761,15]]}}}],["this.mvcproperties.getlocal",{"_index":919,"t":{"265":{"position":[[893,31]]}}}],["this.mvcproperties.getlocaleresolv",{"_index":914,"t":{"265":{"position":[[517,39]]}}}],["this.sfc",{"_index":2259,"t":{"628":{"position":[[240,12],[419,12],[1821,12],[2246,12]]}}}],["this.sfcdata[this.flag",{"_index":2285,"t":{"628":{"position":[[1746,22],[2121,22],[2171,22]]}}}],["this.sfcdata[this.flag].id",{"_index":2269,"t":{"628":{"position":[[704,27],[1039,27]]}}}],["this.sfcdata[this.flag].sfc",{"_index":2263,"t":{"628":{"position":[[347,29]]}}}],["this.sfcdata[this.flag].technologytyp",{"_index":2271,"t":{"628":{"position":[[754,39],[1089,39]]}}}],["this.sfcdata[this.flag].weight",{"_index":2273,"t":{"628":{"position":[[808,31],[1143,31]]}}}],["this.showlin",{"_index":1933,"t":{"567":{"position":[[1078,13]]}}}],["this.stopmounter(sit",{"_index":2133,"t":{"597":{"position":[[5289,24]]}}}],["this.tabledata",{"_index":2292,"t":{"628":{"position":[[2460,14]]}}}],["this.tabledata.findindex(item",{"_index":1990,"t":{"579":{"position":[[1434,29]]},"628":{"position":[[1862,29],[2287,29]]}}}],["this.tabledata.length",{"_index":2287,"t":{"628":{"position":[[2018,23],[2436,23]]}}}],["this.tabledata.push(data",{"_index":2274,"t":{"628":{"position":[[840,26],[1175,26]]}}}],["this.tabledata.splice(index",{"_index":1994,"t":{"579":{"position":[[1528,28]]},"628":{"position":[[1963,28],[2388,28]]}}}],["this.webproperties.getlocal",{"_index":918,"t":{"265":{"position":[[819,30],[860,30]]}}}],["this.webproperties.getlocaleresolv",{"_index":911,"t":{"265":{"position":[[319,39]]}}}],["throw",{"_index":1553,"t":{"506":{"position":[[173,5],[245,5]]},"516":{"position":[[344,6]]},"597":{"position":[[1395,5],[3172,5],[6221,5],[6698,5],[6971,5],[7190,5]]},"634":{"position":[[193,5]]}}}],["throwabl",{"_index":1624,"t":{"520":{"position":[[111,9]]}}}],["time,timeunit",{"_index":1654,"t":{"526":{"position":[[961,13]]}}}],["time_loc",{"_index":814,"t":{"242":{"position":[[622,13]]}}}],["time_rang",{"_index":1672,"t":{"529":{"position":[[427,11],[880,11],[1287,11]]},"555":{"position":[[2095,11]]}}}],["timelimitpap",{"_index":1125,"t":{"295":{"position":[[189,17]]}}}],["timerang",{"_index":1749,"t":{"534":{"position":[[435,10]]}}}],["timeunit",{"_index":1655,"t":{"526":{"position":[[975,10]]}}}],["timeunit.minut",{"_index":2313,"t":{"634":{"position":[[620,18]]}}}],["tip",{"_index":439,"t":{"158":{"position":[[0,3]]},"177":{"position":[[0,3]]},"223":{"position":[[0,3]]},"246":{"position":[[0,3]]}}}],["titl",{"_index":1107,"t":{"285":{"position":[[740,11]]},"297":{"position":[[66,8]]},"303":{"position":[[376,8]]},"307":{"position":[[452,8]]},"315":{"position":[[234,8]]},"323":{"position":[[172,8]]},"358":{"position":[[377,8]]},"360":{"position":[[326,8],[1028,8]]},"368":{"position":[[156,8]]},"370":{"position":[[100,8]]},"374":{"position":[[178,8]]},"376":{"position":[[128,8]]},"378":{"position":[[61,8],[423,8]]},"382":{"position":[[191,8]]},"384":{"position":[[37,8]]},"622":{"position":[[118,6]]}}}],["title:fals",{"_index":2225,"t":{"622":{"position":[[716,12]]}}}],["title=\"$t(languagepath+'item",{"_index":1059,"t":{"278":{"position":[[40,32]]}}}],["title]\").each(funct",{"_index":1105,"t":{"285":{"position":[[661,25]]}}}],["titleitem",{"_index":1164,"t":{"303":{"position":[[252,13]]},"307":{"position":[[320,13]]},"358":{"position":[[250,13]]},"360":{"position":[[196,13],[905,13]]}}}],["to_char((b.all_count",{"_index":1717,"t":{"529":{"position":[[1486,21]]}}}],["to_char((m.f_pass_count",{"_index":1859,"t":{"555":{"position":[[2353,24]]}}}],["to_char((m.p_pass_count",{"_index":1796,"t":{"553":{"position":[[34,24]]},"555":{"position":[[2435,24]]}}}],["to_char(end_tim",{"_index":1671,"t":{"529":{"position":[[395,17]]}}}],["to_char(msf.end_tim",{"_index":1773,"t":{"541":{"position":[[39,21]]}}}],["to_char(p.end_tim",{"_index":1854,"t":{"555":{"position":[[2061,19],[2117,19],[2181,19],[2760,19],[2824,19],[2941,20],[3007,19]]}}}],["to_char(p.start_tim",{"_index":1853,"t":{"555":{"position":[[2018,21]]}}}],["to_char(start_tim",{"_index":1669,"t":{"529":{"position":[[354,19]]}}}],["to_char(systimestamp",{"_index":1867,"t":{"555":{"position":[[2685,22],[2862,22]]}}}],["todolist：学习dock",{"_index":2186,"t":{"605":{"position":[[157,19]]}}}],["token不被认证的错误，需要去对应网关下的base中开启白名单，开白名单使用部分匹配即可，类似lik",{"_index":1876,"t":{"560":{"position":[[212,58]]}}}],["token认证的方法也可以在浏览器中获取到相应的authorization,测试接口的时候使用author",{"_index":1877,"t":{"560":{"position":[[271,68]]}}}],["total",{"_index":1145,"t":{"301":{"position":[[189,8]]},"311":{"position":[[147,8]]},"313":{"position":[[142,8]]},"323":{"position":[[139,8]]},"336":{"position":[[172,8]]},"348":{"position":[[150,8]]},"356":{"position":[[191,8]]},"364":{"position":[[199,8]]},"366":{"position":[[189,8]]},"374":{"position":[[137,8]]},"382":{"position":[[149,8]]},"386":{"position":[[152,8]]},"388":{"position":[[162,8]]}}}],["tp+tn}{tp+fn+fp+tn}tp+fn+fp+tntp+tn",{"_index":732,"t":{"219":{"position":[[38,37]]}}}],["tptptp代表的是模型正确预测的样本数，fnfnfn是模型错误预测为错误的样本数。举例来说就是，如果真实标注中有10个肿瘤区域，模型正确预测对了8个，那召回率就是80",{"_index":730,"t":{"217":{"position":[[64,124]]}}}],["transfer",{"_index":1426,"t":{"443":{"position":[[70,8]]}}}],["tree",{"_index":300,"t":{"109":{"position":[[2779,5],[2952,7]]}}}],["treelist",{"_index":303,"t":{"109":{"position":[[2821,11]]}}}],["treenod",{"_index":245,"t":{"109":{"position":[[653,10]]}}}],["tri",{"_index":996,"t":{"270":{"position":[[748,3]]},"506":{"position":[[0,38],[149,4]]},"526":{"position":[[635,4],[986,3]]},"597":{"position":[[58,3]]}}}],["true",{"_index":358,"t":{"126":{"position":[[549,6],[700,5]]},"128":{"position":[[307,5]]},"190":{"position":[[247,5]]},"305":{"position":[[214,5]]},"323":{"position":[[251,5]]},"501":{"position":[[409,5]]},"526":{"position":[[1058,5]]},"567":{"position":[[311,5]]},"592":{"position":[[315,5]]},"615":{"position":[[57,5]]},"628":{"position":[[642,5]]}}}],["trunc(msf.start_tim",{"_index":1832,"t":{"555":{"position":[[995,21]]}}}],["trunc(start_tim",{"_index":1814,"t":{"555":{"position":[[530,17]]}}}],["trunc(sysd",{"_index":1813,"t":{"555":{"position":[[513,14],[978,14],[1897,14]]}}}],["trunc(t.start_tim",{"_index":1848,"t":{"555":{"position":[[1875,19]]}}}],["ture",{"_index":255,"t":{"109":{"position":[[806,6]]}}}],["typdef",{"_index":298,"t":{"109":{"position":[[2686,6]]}}}],["type",{"_index":1363,"t":{"396":{"position":[[177,7]]},"512":{"position":[[0,27]]},"613":{"position":[[64,17]]},"622":{"position":[[109,5],[707,5]]}}}],["type=\"modul",{"_index":1080,"t":{"283":{"position":[[197,13]]}}}],["type=\"text/javascript",{"_index":1076,"t":{"283":{"position":[[60,22]]}}}],["typedef",{"_index":240,"t":{"109":{"position":[[609,7],[2524,7],[2764,7],[2864,7]]},"121":{"position":[[604,7]]},"123":{"position":[[90,7],[189,7],[270,7]]}}}],["typeresult.stream",{"_index":1418,"t":{"441":{"position":[[40,19]]}}}],["type传值为c，值不为na的条码表单，到mesext_xld_baecode表中的sfc",{"_index":1582,"t":{"512":{"position":[[28,61]]}}}],["type值需为i，看ispassing的值来判断是否过站，为n的时候不过站，对数据sfc不为na的进行校验，并且保存，对na的按照时间流水造一个sfc存入。为i",{"_index":1583,"t":{"512":{"position":[[90,104]]}}}],["type值需为x，正常走上传数据的逻辑，但是走校验的时候，如果数据存在，checkcodeform会返回exsit",{"_index":1584,"t":{"512":{"position":[[195,70]]}}}],["t或",{"_index":1415,"t":{"434":{"position":[[0,15]]}}}],["t）与问题规模（n）的关系，t就是时间。说白了就是分析代码，算一下n",{"_index":434,"t":{"155":{"position":[[6,56]]}}}],["u",{"_index":758,"t":{"237":{"position":[[101,1]]}}}],["ubuntu",{"_index":828,"t":{"244":{"position":[[131,6]]}}}],["union|intersect|except",{"_index":496,"t":{"170":{"position":[[607,29]]}}}],["uniqu",{"_index":1633,"t":{"522":{"position":[[16,6]]}}}],["updat",{"_index":500,"t":{"170":{"position":[[700,6],[765,6]]},"244":{"position":[[305,6]]},"597":{"position":[[5686,7],[6011,6]]}}}],["updatesql",{"_index":2139,"t":{"597":{"position":[[5674,9]]}}}],["up主的讲解视频kmp算法之求next数组代码讲解_哔哩哔哩_bilibili",{"_index":200,"t":{"101":{"position":[[2547,55]]}}}],["url",{"_index":761,"t":{"239":{"position":[[49,4]]},"396":{"position":[[94,6]]},"560":{"position":[[194,17]]},"575":{"position":[[139,4]]}}}],["urlparam",{"_index":2237,"t":{"622":{"position":[[1365,9]]}}}],["urlsearchparams(window.location.search",{"_index":2238,"t":{"622":{"position":[[1381,40]]}}}],["us",{"_index":831,"t":{"244":{"position":[[154,5],[188,3],[205,5],[411,5]]},"423":{"position":[[153,3]]}}}],["used",{"_index":1007,"t":{"270":{"position":[[1221,9]]}}}],["user",{"_index":781,"t":{"242":{"position":[[81,4]]},"634":{"position":[[145,4]]}}}],["user.getuserid",{"_index":2303,"t":{"634":{"position":[[258,17]]}}}],["user.getusernam",{"_index":2304,"t":{"634":{"position":[[294,19]]}}}],["userid",{"_index":1217,"t":{"317":{"position":[[98,9]]},"388":{"position":[[45,9],[204,9]]},"634":{"position":[[249,6],[375,8],[532,7]]}}}],["userinfo",{"_index":2298,"t":{"634":{"position":[[136,8]]}}}],["userlevel",{"_index":1117,"t":{"291":{"position":[[97,12]]},"319":{"position":[[434,12]]},"321":{"position":[[384,12]]},"330":{"position":[[290,12]]},"336":{"position":[[581,12]]},"338":{"position":[[466,12]]},"340":{"position":[[238,12],[514,12]]},"390":{"position":[[438,12]]},"392":{"position":[[410,12]]},"398":{"position":[[412,12]]}}}],["usernam",{"_index":845,"t":{"244":{"position":[[470,9]]},"289":{"position":[[29,11],[116,11]]},"291":{"position":[[40,11]]},"311":{"position":[[529,11]]},"317":{"position":[[118,11]]},"319":{"position":[[149,11]]},"321":{"position":[[99,11]]},"330":{"position":[[29,11],[183,11]]},"336":{"position":[[39,11],[281,11]]},"338":{"position":[[166,11]]},"340":{"position":[[46,11],[380,11]]},"386":{"position":[[515,11]]},"388":{"position":[[61,11],[224,11]]},"390":{"position":[[157,11]]},"392":{"position":[[112,11]]},"398":{"position":[[107,11]]},"634":{"position":[[283,8],[540,10]]}}}],["username.github.io",{"_index":752,"t":{"235":{"position":[[0,50]]}}}],["userrol",{"_index":2306,"t":{"634":{"position":[[353,11]]}}}],["userscor",{"_index":1193,"t":{"311":{"position":[[237,12]]},"386":{"position":[[230,12]]}}}],["userutils.checkuserrole(rolecod",{"_index":2310,"t":{"634":{"position":[[498,33]]}}}],["useruuid",{"_index":1222,"t":{"319":{"position":[[97,11]]},"321":{"position":[[47,11]]},"330":{"position":[[165,11]]},"336":{"position":[[220,11]]},"338":{"position":[[105,11]]},"340":{"position":[[321,11]]},"390":{"position":[[96,11]]},"392":{"position":[[53,11]]},"398":{"position":[[46,11]]}}}],["usr/workspace/rachelnootebook/usr/workspace/rachelnootebook/web",{"_index":795,"t":{"242":{"position":[[288,65]]}}}],["utils/request",{"_index":1956,"t":{"575":{"position":[[44,17]]}}}],["uuid",{"_index":1273,"t":{"336":{"position":[[272,8]]},"338":{"position":[[157,8]]},"390":{"position":[[148,8]]},"398":{"position":[[98,8]]},"620":{"position":[[68,8]]}}}],["v",{"_index":378,"t":{"128":{"position":[[280,3]]},"130":{"position":[[104,3]]},"567":{"position":[[248,1],[346,1],[437,23]]},"579":{"position":[[112,1]]}}}],["v)格式的数据，initlineresult",{"_index":1980,"t":{"579":{"position":[[1001,28]]}}}],["v,e)和g^{'}=(v^{'},e^{'})g=(v,e)和g′=(v′,",{"_index":313,"t":{"112":{"position":[[110,43]]}}}],["v0v_0v0​加入sss，计算出v0v_0v0",{"_index":388,"t":{"136":{"position":[[54,40]]}}}],["v1v_1v1​有指向v2和v3v_2和v_3v2​和v3​的两条边，而又有v4指向v1v_4指向v_1v4​指向v1",{"_index":327,"t":{"121":{"position":[[481,122]]}}}],["v=asbsssˉ+asˉbsˉssv",{"_index":97,"t":{"73":{"position":[[39,19]]}}}],["v_i,v_j)是g的边，则a[i][j",{"_index":321,"t":{"121":{"position":[[182,24]]}}}],["val",{"_index":1063,"t":{"278":{"position":[[178,3]]},"280":{"position":[[738,3]]}}}],["valu",{"_index":1104,"t":{"285":{"position":[[632,10]]},"394":{"position":[[135,8]]},"466":{"position":[[38,8]]},"516":{"position":[[175,10]]},"579":{"position":[[466,6]]},"634":{"position":[[408,5],[551,5],[610,6]]}}}],["value,long",{"_index":1653,"t":{"526":{"position":[[950,10]]}}}],["value,time,timeunit",{"_index":1657,"t":{"526":{"position":[[1029,21]]}}}],["value.sync=\"printertemplateid",{"_index":2195,"t":{"615":{"position":[[86,31]]}}}],["value]\").each(funct",{"_index":1102,"t":{"285":{"position":[[563,25]]}}}],["values(值1，值2",{"_index":499,"t":{"170":{"position":[[676,18]]}}}],["van",{"_index":1898,"t":{"567":{"position":[[154,4],[328,4]]},"579":{"position":[[90,4],[244,5]]}}}],["vant",{"_index":1016,"t":{"272":{"position":[[107,6]]},"278":{"position":[[92,16]]},"280":{"position":[[56,6],[88,6],[434,16],[660,9],[770,4]]}}}],["vant/lib/locale/lang/en",{"_index":1018,"t":{"272":{"position":[[133,24]]},"280":{"position":[[112,24]]}}}],["vant/lib/locale/lang/zh",{"_index":1020,"t":{"272":{"position":[[181,24]]},"280":{"position":[[158,24]]}}}],["vantcn",{"_index":1019,"t":{"272":{"position":[[169,6]]}}}],["vanten",{"_index":1017,"t":{"272":{"position":[[121,6]]}}}],["vantlocal",{"_index":1067,"t":{"280":{"position":[[460,11],[644,12]]}}}],["vantlocales(i18n.local",{"_index":1070,"t":{"280":{"position":[[598,31]]}}}],["vantselect",{"_index":2193,"t":{"615":{"position":[[24,11]]}}}],["var/log/nginx/access.log",{"_index":822,"t":{"242":{"position":[[750,25]]}}}],["var/log/nginx/error.log",{"_index":785,"t":{"242":{"position":[[126,25]]}}}],["ve(0)ve(0)ve(0",{"_index":422,"t":{"143":{"position":[[275,19]]}}}],["ve(0)ve(0)ve(0)为0",{"_index":417,"t":{"143":{"position":[[48,17]]}}}],["ve(i)ve(i)ve(i",{"_index":427,"t":{"143":{"position":[[513,24]]}}}],["ve(k)=max[ve(j)+weight(vj,vk)]ve(k",{"_index":418,"t":{"143":{"position":[[66,35]]}}}],["verifysinglemovedata(param",{"_index":2265,"t":{"628":{"position":[[540,28]]}}}],["verifyuser(str",{"_index":2296,"t":{"634":{"position":[[106,17]]}}}],["version",{"_index":837,"t":{"244":{"position":[[244,8]]}}}],["vex[n",{"_index":329,"t":{"121":{"position":[[625,7]]},"123":{"position":[[292,7]]}}}],["vexindex",{"_index":338,"t":{"123":{"position":[[123,9]]}}}],["vexnum,arcnum",{"_index":332,"t":{"121":{"position":[[680,14]]},"123":{"position":[[304,14]]}}}],["vi",{"_index":1035,"t":{"272":{"position":[[586,6]]}}}],["vi,vj)是g的边，则a[i][j]=1否则a[i][j]=0或无穷\\begin{align",{"_index":320,"t":{"121":{"position":[[129,52]]}}}],["view",{"_index":508,"t":{"172":{"position":[[88,4],[167,4],[208,23],[290,4]]}}}],["violat",{"_index":1635,"t":{"522":{"position":[[65,8]]}}}],["visit(t[index",{"_index":273,"t":{"109":{"position":[[1355,16]]}}}],["visit(v",{"_index":356,"t":{"126":{"position":[[528,9]]},"128":{"position":[[284,9]]}}}],["visit(w",{"_index":366,"t":{"126":{"position":[[677,9]]}}}],["visited[i",{"_index":350,"t":{"126":{"position":[[418,10]]}}}],["visited[max_s",{"_index":345,"t":{"126":{"position":[[345,18]]},"128":{"position":[[112,18]]}}}],["visited[v",{"_index":357,"t":{"126":{"position":[[538,10]]},"128":{"position":[[185,10],[294,10]]}}}],["visited[w",{"_index":367,"t":{"126":{"position":[[687,10]]}}}],["vk,vj><v_k,v_j><vk​,vj​>表示活动aia_iai​，则l(i)=vl(i)−weight(vk,vj)l(i)=vl(i",{"_index":429,"t":{"143":{"position":[[570,73]]}}}],["vl(k)=min[vl(j)−weight(vk,vj)]vl(k",{"_index":423,"t":{"143":{"position":[[295,35]]}}}],["vl(k)vl(k)vl(k)，减去该活动的代价得到l(i)l(i)l(i",{"_index":431,"t":{"143":{"position":[[686,54]]}}}],["vnode",{"_index":340,"t":{"123":{"position":[[204,6],[262,7],[286,5]]}}}],["vo(view",{"_index":1424,"t":{"443":{"position":[[0,9]]}}}],["void",{"_index":202,"t":{"103":{"position":[[39,4]]},"105":{"position":[[338,4]]},"109":{"position":[[664,4],[1291,4]]},"126":{"position":[[364,4],[509,4]]},"128":{"position":[[131,4],[259,4]]},"182":{"position":[[451,4]]},"184":{"position":[[313,4]]},"186":{"position":[[212,4]]},"190":{"position":[[27,4],[86,4]]},"192":{"position":[[729,4]]},"196":{"position":[[265,4]]},"198":{"position":[[843,4],[957,4],[1320,4]]},"201":{"position":[[334,4],[734,4]]},"268":{"position":[[1090,4]]},"270":{"position":[[278,4]]},"516":{"position":[[300,4]]}}}],["vo用于封装前端需要展示的数据，数据库查询出来可能10个字段，但是为了不展示一些没必要的数据和不暴露数据库结构，需要减少一些字段，只返回需要的数据，使用vo",{"_index":1428,"t":{"443":{"position":[[207,80]]}}}],["vo类来接收前端过来的参数，一般是复杂的组合，list和一些string类型，list可以封装好实体类或者字符串，如上述的cleanbarlogvo",{"_index":1945,"t":{"571":{"position":[[68,81]]}}}],["vsv_svs​加入sss",{"_index":389,"t":{"136":{"position":[[95,22]]}}}],["vsv_svs​，所以要适当的更新到剩余结点的距离(比如说原来a到d距离是10，但是加入了b后，通过a",{"_index":390,"t":{"136":{"position":[[118,56]]}}}],["vue",{"_index":1011,"t":{"272":{"position":[[0,7],[40,3],[49,5],[75,4]]},"274":{"position":[[4,5]]},"280":{"position":[[7,3],[16,5],[42,4]]},"573":{"position":[[0,33]]},"579":{"position":[[0,23]]}}}],["vue)结合的需求，学会后端和vue一起的操作和vu",{"_index":1996,"t":{"581":{"position":[[0,45]]}}}],["vue.use(vuei18n",{"_index":1027,"t":{"272":{"position":[[314,16]]},"280":{"position":[[187,16]]}}}],["vuei18n",{"_index":1014,"t":{"272":{"position":[[62,7],[348,9]]},"280":{"position":[[29,7],[221,9]]}}}],["vue开发中遇到最大的问题，希望能够根据表格勾选来完成选中删除的功能(仅前端删除)，数据是绑定的，所以可以在谷歌浏览器中安装vu",{"_index":1982,"t":{"579":{"position":[[1053,87]]}}}],["vue的结构为界面和函数逻辑，部分写界面设计的逻辑，大多都是采用组建，这里使用的是vxet",{"_index":1966,"t":{"579":{"position":[[24,58]]}}}],["vvv表示事件，<vi,vj><v_i,v_j><vi​,vj​>的这样一条边表示活动vjv_jvj​必须要viv_ivi",{"_index":411,"t":{"139":{"position":[[0,83]]}}}],["vxe",{"_index":1023,"t":{"272":{"position":[[228,4],[280,4]]}}}],["vxecn",{"_index":1022,"t":{"272":{"position":[[217,5],[515,9]]}}}],["vxeen",{"_index":1025,"t":{"272":{"position":[[269,5],[554,9],[593,9]]}}}],["vxetable中，使用了_x_row_key为唯一id字段来进行选择删除了，使用getcheckboxrecords函数来获取选中的数据，splic",{"_index":1995,"t":{"579":{"position":[[1566,90]]}}}],["v′是v的子集e′是e的子集v^{'}是v的子集e^{'}是e的子集v′是v的子集e′是",{"_index":314,"t":{"112":{"position":[[154,50]]}}}],["v到w和w到v",{"_index":318,"t":{"118":{"position":[[17,11]]}}}],["v行v列的矩阵，其中若vi到vj有路径，则a[i][j]为1，或者是对应的路径权值v_i到v_j有路径，则a[i][j]为1，或者是对应的路径权值vi​到vj​有路径，则a[i][j]为1",{"_index":319,"t":{"121":{"position":[[0,128]]}}}],["warn",{"_index":306,"t":{"109":{"position":[[3313,10],[3526,10]]}}}],["webmvcautoconfiguration的源码(springboot",{"_index":908,"t":{"265":{"position":[[166,47]]}}}],["webuserutil.getus",{"_index":2299,"t":{"634":{"position":[[152,22]]}}}],["web实现国际化，internationalization从i到n中有18个字母，所以称之为i18n",{"_index":874,"t":{"259":{"position":[[144,88]]}}}],["weight",{"_index":339,"t":{"123":{"position":[[137,7]]},"276":{"position":[[225,16]]}}}],["weight(v_j,v_k)]ve(k)=max[ve(j)+weight(vj​,vk​)]其中k是j",{"_index":420,"t":{"143":{"position":[[116,56]]}}}],["weight(v_k,v_j)]vl(k)=min[vl(j)−weight(vk​,vj",{"_index":425,"t":{"143":{"position":[[345,48]]}}}],["weight(v_k,v_j)l(i)=vl(i)−weight(vk​,vj",{"_index":430,"t":{"143":{"position":[[644,41]]}}}],["weight[n][n",{"_index":330,"t":{"121":{"position":[[637,13]]}}}],["welcom",{"_index":526,"t":{"177":{"position":[[23,7]]}}}],["where后group",{"_index":1780,"t":{"545":{"position":[[65,12]]}}}],["while(!isempty(q",{"_index":360,"t":{"126":{"position":[[570,19]]}}}],["while(i",{"_index":146,"t":{"95":{"position":[[194,7]]}}}],["while(i<=mid",{"_index":684,"t":{"201":{"position":[[610,13]]}}}],["while(i<s.len",{"_index":215,"t":{"103":{"position":[[306,13]]}}}],["while(j",{"_index":224,"t":{"105":{"position":[[413,7]]}}}],["while(j<=high",{"_index":685,"t":{"201":{"position":[[641,14]]}}}],["while(k<t.len",{"_index":207,"t":{"103":{"position":[[106,15]]}}}],["while(low",{"_index":609,"t":{"192":{"position":[[534,9]]}}}],["while(low<=high",{"_index":42,"t":{"34":{"position":[[173,17]]},"184":{"position":[[433,17]]}}}],["while(low<high",{"_index":610,"t":{"192":{"position":[[553,14],[624,14]]}}}],["wm_concat(t.caus",{"_index":1834,"t":{"555":{"position":[[1180,18]]}}}],["worker_connect",{"_index":789,"t":{"242":{"position":[[181,18]]}}}],["worker_process",{"_index":782,"t":{"242":{"position":[[93,16]]}}}],["www",{"_index":798,"t":{"242":{"position":[[387,7]]}}}],["wxopenid",{"_index":1252,"t":{"330":{"position":[[454,11]]},"340":{"position":[[744,11]]}}}],["w，则要回溯找到第一个不平衡节点z，y为z子树中高度最高的孩子节点，x是y中高度最高的孩子节点，根据x和y、z的位置进行处理，若x、y是z",{"_index":6,"t":{"7":{"position":[[0,93]]}}}],["x",{"_index":79,"t":{"54":{"position":[[83,1],[151,1]]},"56":{"position":[[89,26],[150,1],[201,1]]},"78":{"position":[[61,4],[142,4]]},"109":{"position":[[777,3],[868,3],[889,1],[1004,3],[1025,1],[1142,3],[1163,1],[3023,76]]},"242":{"position":[[479,1]]},"480":{"position":[[285,1]]}}}],["x/2",{"_index":261,"t":{"109":{"position":[[919,4]]}}}],["x0",{"_index":1488,"t":{"480":{"position":[[278,2],[289,2]]}}}],["x1",{"_index":474,"t":{"170":{"position":[[118,2]]}}}],["x1~x2",{"_index":476,"t":{"170":{"position":[[128,8]]}}}],["x2",{"_index":475,"t":{"170":{"position":[[125,2]]}}}],["x<1){return",{"_index":254,"t":{"109":{"position":[[794,11]]}}}],["xcopi",{"_index":769,"t":{"239":{"position":[[173,5]]}}}],["xgroup",{"_index":1507,"t":{"488":{"position":[[176,12]]}}}],["xld",{"_index":1878,"t":{"562":{"position":[[0,20],[87,45]]}}}],["xx\".equals(map.get(\"xx\").tostr",{"_index":1422,"t":{"441":{"position":[[109,40]]}}}],["xxx",{"_index":1954,"t":{"571":{"position":[[751,3],[757,6]]}}}],["xxxx/xxxx",{"_index":871,"t":{"256":{"position":[[225,10]]}}}],["xxxxx.rdb即可，我修改为dbfienam",{"_index":1376,"t":{"409":{"position":[[95,35]]}}}],["xx：当key存在的时候，覆盖key",{"_index":1458,"t":{"458":{"position":[[60,18]]}}}],["x、y的绝对值，i",{"_index":113,"t":{"80":{"position":[[8,15]]},"82":{"position":[[31,15]]},"84":{"position":[[8,15]]}}}],["x和y计算出对应的x和i",{"_index":109,"t":{"78":{"position":[[43,17]]}}}],["x，唯一确定一个y，则x函数确定y或者y函数依赖于x，x",{"_index":516,"t":{"175":{"position":[[0,44]]}}}],["y",{"_index":114,"t":{"80":{"position":[[24,4]]},"82":{"position":[[47,4]]},"84":{"position":[[24,4]]},"244":{"position":[[337,1]]},"480":{"position":[[307,1]]}}}],["y0",{"_index":1489,"t":{"480":{"position":[[300,2]]}}}],["y0+r",{"_index":1490,"t":{"480":{"position":[[311,5]]}}}],["yaml文件中找到oracl",{"_index":2172,"t":{"601":{"position":[[0,37]]}}}],["ye",{"_index":1403,"t":{"423":{"position":[[173,3]]},"448":{"position":[[27,3]]}}}],["yes:function(index",{"_index":2210,"t":{"622":{"position":[[236,19],[849,19]]}}}],["yes。其保存的是appendonly.aof",{"_index":1384,"t":{"414":{"position":[[158,33]]}}}],["yes和end是回调函数的处理，这里调用小框后，可以采取一个默认销毁层，直接进到end",{"_index":2217,"t":{"622":{"position":[[409,50]]}}}],["yes改为protect",{"_index":1442,"t":{"448":{"position":[[48,14]]}}}],["yes表示开启，设置为no",{"_index":1404,"t":{"423":{"position":[[177,17]]}}}],["y。也就是对于一个函数f，给定f(x)=i",{"_index":517,"t":{"175":{"position":[[45,22]]}}}],["zf，zf为1代表全0",{"_index":93,"t":{"71":{"position":[[0,14]]}}}],["zh",{"_index":959,"t":{"268":{"position":[[715,2]]},"272":{"position":[[423,4],[482,5],[507,5]]},"280":{"position":[[296,4],[355,5],[380,5],[563,5]]},"285":{"position":[[107,4]]},"555":{"position":[[685,4]]}}}],["zhcn",{"_index":1065,"t":{"280":{"position":[[148,4],[588,5]]}}}],["zset",{"_index":1476,"t":{"473":{"position":[[6,4]]}}}],["zxvf",{"_index":1431,"t":{"446":{"position":[[91,4]]}}}]],"pipeline":["stemmer"]}}]